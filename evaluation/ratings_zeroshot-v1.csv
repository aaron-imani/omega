predictor,cm,patch,rationality,comprehensiveness,conciseness,expressiveness
zeroshot-v1,add STRICT_SERVLET_COMPLIANCE to StandardHostValve,"File: java/org/apache/catalina/core/StandardHostValve.java
Status: modified
```diff
@@ -60,6 +60,12 @@ final class StandardHostValve extends ValveBase {
 
     private static final Log log = LogFactory.getLog(StandardHostValve.class);
 
+    // Saves a call to getClassLoader() on very request. Under high load these
+    // calls took just long enough to appear as a hot spot (although a very
+    // minor one) in a profiler.
+    private static final ClassLoader MY_CLASSLOADER =
+            StandardHostValve.class.getClassLoader();
+
     protected static final boolean STRICT_SERVLET_COMPLIANCE;
 
     protected static final boolean ACCESS_SESSION;
@@ -184,12 +190,10 @@ public final void invoke(Request request, Response response)
 
         // Restore the context classloader
         if (Globals.IS_SECURITY_ENABLED) {
-            PrivilegedAction<Void> pa = new PrivilegedSetTccl(
-                    StandardHostValve.class.getClassLoader());
+            PrivilegedAction<Void> pa = new PrivilegedSetTccl(MY_CLASSLOADER);
             AccessController.doPrivileged(pa);
         } else {
-            Thread.currentThread().setContextClassLoader
-                    (StandardHostValve.class.getClassLoader());
+            Thread.currentThread().setContextClassLoader(MY_CLASSLOADER);
         }
     }
 
```",3,2,3,4
zeroshot-v1,Throw an exception if a picture claims to have a negative amount of data. Should avoid problem in bug #41357,"File: src/scratchpad/src/org/apache/poi/hslf/HSLFSlideShow.java
Status: modified
```diff
@@ -35,6 +35,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.hpsf.SummaryInformation;
 import org.apache.poi.hpsf.DocumentSummaryInformation;
 
+import org.apache.poi.hslf.exceptions.CorruptPowerPointFileException;
 import org.apache.poi.hslf.exceptions.EncryptedPowerPointFileException;
 import org.apache.poi.hslf.record.*;
 import org.apache.poi.hslf.usermodel.PictureData;
@@ -272,6 +273,13 @@ private void readPictures() throws IOException {
             byte[] imgdata = new byte[imgsize];
             System.arraycopy(pictstream, pos, imgdata, 0, imgdata.length);
 
+			// The image size must be 0 or greater
+			// (0 is allowed, but odd, since we do wind on by the header each
+			//  time, so we won't get stuck)
+			if(imgsize < 0) {
+				throw new CorruptPowerPointFileException(""The file contains a picture, at position "" + p.size() + "", which has a negatively sized data length, so we can't trust any of the picture data"");
+			}
+
 			// If they type (including the bonus 0xF018) is 0, skip it
 			if(type == 0) {
 				System.err.println(""Problem reading picture: Invalid image type 0, on picture with length"" + imgsize + "".\nYou document will probably become corrupted if you save it!"");
```",3,2,3,4
zeroshot-v1,fix typo: wrong if guard variable,"File: src/java/org/apache/cassandra/index/SecondaryIndexManager.java
Status: modified
```diff
@@ -426,7 +426,7 @@ private Index createInstance(IndexMetadata indexDef)
             {
                 Class<? extends Index> indexClass = FBUtilities.classForName(className, ""Index"");
                 Constructor<? extends Index> ctor = indexClass.getConstructor(ColumnFamilyStore.class, IndexMetadata.class);
-                newIndex = (Index)ctor.newInstance(baseCfs, indexDef);
+                newIndex = ctor.newInstance(baseCfs, indexDef);
             }
             catch (Exception e)
             {
@@ -615,7 +615,7 @@ public int calculateIndexingPageSize()
             return DEFAULT_PAGE_SIZE;
 
         int columnsPerRow = baseCfs.metadata.partitionColumns().regulars.size();
-        if (meanCellsPerPartition <= 0)
+        if (columnsPerRow <= 0)
             return DEFAULT_PAGE_SIZE;
 
         int meanRowsPerPartition = meanCellsPerPartition / columnsPerRow;
```",3,2,3,3
zeroshot-v1,Add EOL at EOF,"File: src/protocol/native/org/apache/jmeter/protocol/system/NativeCommand.java
Status: modified
```diff
@@ -48,4 +48,4 @@ public NativeCommand(File directory, Map<String, String> env, String stdin, Stri
         super(directory, 0L, 100, env, stdin, stdout, stderr);
     }
 
-}
\ No newline at end of file
+}
```",3,2,4,3
zeroshot-v1,"Fix: Use LocaleUtil for obtaining year in DateUtil In the DateUtil class, the method for obtaining the current year has been updated. Previously, the year was obtained directly from the Calendar instance. This commit changes this to use the LocaleUtil.getLocaleCalendar() method instead. This change does not alter the overall functionality of the DateUtil class, which is responsible for handling and converting dates in Excel format in Java.","File: src/java/org/apache/poi/ss/usermodel/DateUtil.java
Status: modified
```diff
@@ -71,7 +71,7 @@ protected DateUtil() {
             .appendPattern(""[[yyyy ]dd-MMM[-yyyy]][[ ]h:m[:s] a][[ ]H:m[:s]]"")
             .appendPattern(""[M/dd[/yyyy]][[ ]h:m[:s] a][[ ]H:m[:s]]"")
             .appendPattern(""[[yyyy/]M/dd][[ ]h:m[:s] a][[ ]H:m[:s]]"")
-            .parseDefaulting(ChronoField.YEAR_OF_ERA, Calendar.getInstance().get(Calendar.YEAR))
+            .parseDefaulting(ChronoField.YEAR_OF_ERA, LocaleUtil.getLocaleCalendar().get(Calendar.YEAR))
             .toFormatter();
 
     /**
```",3,3,3,4
zeroshot-v1,remove unused code,"File: jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SelectPage.java
Status: modified
```diff
@@ -162,7 +162,6 @@ protected void explain()
 				+ ""&nbsp;&nbsp;&nbsp;&nbsp;ListMultipleChoice manyChoice = new ListMultipleChoice(\""choices\"", MANY_CHOICES).setMaxRows(5);\n""
 				+ ""&nbsp;&nbsp;&nbsp;&nbsp;form.add(manyChoice);"";
 
-		// TODO Post 1.2: General: Unknown todo
 		html = ""SEE INSIDE FOR NOW"";
 		code = ""SEE INSIDE FOR NOW"";
 
```",2,1,3,3
zeroshot-v1,add javadoc for Os setFamily,"File: src/main/org/apache/tools/ant/taskdefs/condition/Os.java
Status: modified
```diff
@@ -65,8 +65,24 @@
 public class Os implements Condition {
     private String family;
 
+    /**
+     * Sets the desired OS family type
+     * 
+     * @param f      The OS family type desired<br />
+     *               Possible values:<br />
+     *               <ul><li>dos</li>
+     *               <li>mac</li>
+     *               <li>netware</li>
+     *               <li>unix</li>
+     *               <li>windows</li></ul>
+     */
     public void setFamily(String f) {family = f.toLowerCase();}
 
+    /**
+     * Determines if the OS on which Ant is executing matches the type of 
+     * that set in setFamily.
+     * @see Os#setFamily(String)
+     */
     public boolean eval() throws BuildException {
         String osName = System.getProperty(""os.name"").toLowerCase();
         String pathSep = System.getProperty(""path.separator"");
```",3,3,2,3
zeroshot-v1,Make PFM string parsing a little more robust,"File: src/java/org/apache/fop/fonts/type1/PFMInputStream.java
Status: modified
```diff
@@ -19,6 +19,7 @@
 
 package org.apache.fop.fonts.type1;
 
+import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.DataInputStream;
@@ -30,7 +31,7 @@
  */
 public class PFMInputStream extends java.io.FilterInputStream {
 
-    private DataInputStream datain;
+    private final DataInputStream datain;
 
     /**
      * Constructs a PFMInputStream based on an InputStream representing the
@@ -97,10 +98,14 @@ public long readInt() throws IOException {
     public String readString() throws IOException {
         InputStreamReader reader = new InputStreamReader(in, ""ISO-8859-1"");
         StringBuffer buf = new StringBuffer();
+
         int ch = reader.read();
         while (ch != 0) {
             buf.append((char)ch);
             ch = reader.read();
+            if (ch == -1) {
+                throw new EOFException(""Unexpected end of stream reached"");
+            }
         }
         return buf.toString();
     }
```",3,2,3,3
zeroshot-v1,Style: Remove unused import in PagingNavigationIncrementLinkTest.java Removed an unused import statement in the file `PagingNavigationIncrementLinkTest.java` to improve the style of the code.,"File: wicket/src/test/wicket/markup/html/navigation/paging/PagingNavigationIncrementLinkTest.java
Status: modified
```diff
@@ -17,7 +17,6 @@
  */
 package wicket.markup.html.navigation.paging;
 
-import wicket.WicketTestCase;
 
 /**
  * Testcase for the navigation increment link.
```",3,3,3,4
zeroshot-v1,fix javadoc warnings,"File: sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Regex.java
Status: modified
```diff
@@ -710,7 +710,8 @@ public void processElement(ProcessContext c) throws Exception {
 
   /**
    * {@code Regex.Find<String>} takes a {@code PCollection<String>} and returns a {@code
-   * PCollection<String>} representing the value extracted from the Regex groups of the input {@code
+   * PCollection<List<String>>} representing the value extracted from the
+   * Regex groups of the input {@code
    * PCollection} to the number of times that element occurs in the input.
    *
    * <p>This transform runs a Regex on the entire input line. If a portion of the line does not
@@ -721,8 +722,8 @@ public void processElement(ProcessContext c) throws Exception {
    *
    * <pre>{@code
    * PCollection<String> words = ...;
-   * PCollection<String> values =
-   *     words.apply(Regex.find(""myregex (mygroup)""));
+   * PCollection<List<String>> values =
+   *     words.apply(Regex.findAll(""myregex (mygroup)""));
    * }</pre>
    */
   public static class FindAll extends PTransform<PCollection<String>, PCollection<List<String>>> {
```",2,1,2,3
zeroshot-v1,Remove unused body of StreamingPCollectionViewWriterFn,"File: runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java
Status: modified
```diff
@@ -2360,8 +2360,8 @@ public final PCollection<T> apply(PBegin input) {
   }
 
   /**
-   * A specialized {@link DoFn} for writing the contents of a {@link PCollection}
-   * to a streaming {@link PCollectionView} backend implementation.
+   * A marker {@link DoFn} for writing the contents of a {@link PCollection} to a streaming
+   * {@link PCollectionView} backend implementation.
    */
   @Deprecated
   public static class StreamingPCollectionViewWriterFn<T>
@@ -2389,13 +2389,9 @@ public Coder<T> getDataCoder() {
 
     @Override
     public void processElement(ProcessContext c) throws Exception {
-      List<WindowedValue<T>> output = new ArrayList<>();
-      for (T elem : c.element()) {
-        output.add(WindowedValue.of(elem, c.timestamp(), c.window(), c.pane()));
-      }
-
-      c.windowingInternals().writePCollectionViewData(
-          view.getTagInternal(), output, dataCoder);
+      throw new UnsupportedOperationException(
+          String.format(
+              ""%s is a marker class only and should never be executed."", getClass().getName()));
     }
   }
 
```",3,2,4,3
zeroshot-v1,"Refactor: Improve completeness of thread dump information In the `writeDump` method of the `ThreadDumpProvider.java` file, the number of threads and their detailed information are now written to the output stream, instead of just the number of daemon threads. This change improves the completeness of the thread dump information provided by the method.","File: diagnostic/common/src/main/java/org/apache/karaf/diagnostic/common/ThreadDumpProvider.java
Status: modified
```diff
@@ -40,11 +40,12 @@ public ThreadDumpProvider() {
     protected void writeDump(OutputStreamWriter outputStream) throws Exception {
         ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
 
-        outputStream.write(""Number of threads: "" + threadMXBean.getDaemonThreadCount() + ""\n"");
-        ThreadInfo[] threadDump = threadMXBean.dumpAllThreads(true, true);
-        for (ThreadInfo threadInfo : threadDump) {
+        outputStream.write(""Number of threads: "" + threadMXBean.getThreadCount() + ""\n"");
+
+        for (ThreadInfo threadInfo : threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(), Integer.MAX_VALUE)) {
             outputStream.write(threadInfo.toString() + ""\n\n"");
         }
+
     }
 
 }
```",3,3,3,4
zeroshot-v1,"Allow lcoation '--mem--' on the command line (TDB, in-memory). Same effect as --memTDB","File: jena-fuseki/src/main/java/org/apache/jena/fuseki/FusekiCmd.java
Status: modified
```diff
@@ -26,6 +26,7 @@
 
 import org.apache.jena.atlas.io.IO ;
 import org.apache.jena.atlas.lib.FileOps ;
+import org.apache.jena.atlas.lib.Lib ;
 import org.apache.jena.atlas.lib.StrUtils ;
 import org.apache.jena.atlas.logging.Log ;
 import org.apache.jena.fuseki.mgt.ManagementServer ;
@@ -49,6 +50,7 @@
 import com.hp.hpl.jena.sparql.core.DatasetGraphFactory ;
 import com.hp.hpl.jena.tdb.TDB ;
 import com.hp.hpl.jena.tdb.TDBFactory ;
+import com.hp.hpl.jena.tdb.sys.Names ;
 import com.hp.hpl.jena.tdb.transaction.TransactionManager ;
 
 public class FusekiCmd extends CmdARQ
@@ -284,9 +286,14 @@ protected void processModulesAndArgs()
         if ( contains(argTDB) )
         {
             String dir = getValue(argTDB) ;
-            log.info(""TDB dataset: directory=""+dir) ;
-            if ( ! FileOps.exists(dir) )
-                throw new CmdException(""Directory not found: ""+dir) ;
+            
+            if ( Lib.equal(dir, Names.memName) ) {
+                log.info(""TDB dataset: in-memory"") ;
+            } else {
+                if ( ! FileOps.exists(dir) )
+                    throw new CmdException(""Directory not found: ""+dir) ;
+                log.info(""TDB dataset: directory=""+dir) ;
+            }
             dsg = TDBFactory.createDatasetGraph(dir) ;
         }
         
```",3,2,3,3
zeroshot-v1,Fix: Update error message in ValveGBean class The error message in an IllegalArgumentException in the `ValveGBean` class has been updated to be more specific. The new message indicates that the class given as the NextValve attribute does not wrap an object of org.apache.catalina.Valve type.,"File: modules/tomcat/src/java/org/apache/geronimo/tomcat/ValveGBean.java
Status: modified
```diff
@@ -54,9 +54,8 @@ public ValveGBean(String className, Map initParams, ValveGBean nextValve) throws
         
         if (nextValve != null){
             if (!(nextValve.getInternalObject() instanceof Valve)){
-                throw new IllegalArgumentException(""className cannot be null."");                
+                throw new IllegalArgumentException(""The class given as the NextValve attribute does not wrap an object of org.apache.catalina.Valve type."");                
             }
-            
             this.nextValve = nextValve;
         } else {
             this.nextValve = null;
```",3,3,2,3
zeroshot-v1,fix npe in ApacheDS,"File: server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java
Status: modified
```diff
@@ -353,7 +353,7 @@ private void loadLdif( File ldifFile ) throws Exception
         
         if ( fileEntry != null )
         {
-            String time = fileEntry.get( SchemaConstants.CREATE_TIMESTAMP_AT ).getString();
+            String time = ((ClonedServerEntry)fileEntry).getOriginalEntry().get( SchemaConstants.CREATE_TIMESTAMP_AT ).getString();
             LOG.info( ""Load of LDIF file '"" + getCanonical( ldifFile )
                     + ""' skipped.  It has already been loaded on "" + time + ""."" );
         }
```",2,1,2,2
zeroshot-v1,Feat: Enhance testWindowSizeAndSettingsFrame() in TestHttp2Section_6_9.java This commit enhances the `testWindowSizeAndSettingsFrame()` method in the `TestHttp2Section_6_9.java` file to test the behavior of the HTTP/2 flow control mechanism. It checks if the window size is correctly updated and if the flow control window can handle changes in size. This enhancement provides more comprehensive testing of the HTTP/2 flow control mechanism.,"File: test/org/apache/coyote/http2/TestHttp2Section_6_9.java
Status: modified
```diff
@@ -203,6 +203,22 @@ public void testWindowSizeAndSettingsFrame() throws Exception {
                 ""3-Body-4096\n"", output.getTrace());
                 output.clearTrace();
 
+        // Now use a settings frame to further reduce the size of the flow
+        // control window. This should make the stream 3 window negative
+        sendSettings(0, false, new SettingValue(4, 2 * 1024));
+        // Ack
+        parser.readFrame(true);
+        Assert.assertEquals(""0-Settings-Ack\n"", output.getTrace());
+        output.clearTrace();
+
+        // Now use a settings frame to increase the size of the flow control
+        // window. The stream 3 window should still be negative
+        sendSettings(0, false, new SettingValue(4, 3 * 1024));
+        // Ack
+        parser.readFrame(true);
+        Assert.assertEquals(""0-Settings-Ack\n"", output.getTrace());
+        output.clearTrace();
+
         // Do a POST that won't be affected by the above limit
         sendSimplePostRequest(5, null);
         // Window size updates after reading POST body
```",3,3,2,4
zeroshot-v1,make BigTableScanner close private,"File: src/java/org/apache/cassandra/io/sstable/format/big/BigTableScanner.java
Status: modified
```diff
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.util.*;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.Ordering;
@@ -51,6 +52,7 @@
 
 public class BigTableScanner implements ISSTableScanner
 {
+    private AtomicBoolean isClosed = new AtomicBoolean(false);
     protected final RandomAccessReader dfile;
     protected final RandomAccessReader ifile;
     public final SSTableReader sstable;
@@ -193,7 +195,8 @@ private void seekToCurrentRangeStart()
 
     public void close() throws IOException
     {
-        FileUtils.close(dfile, ifile);
+        if (isClosed.compareAndSet(false, true))
+            FileUtils.close(dfile, ifile);
     }
 
     public long getLengthInBytes()
```",3,2,3,3
zeroshot-v1,Cleanup derby.log,"File: test/org/apache/catalina/users/DataSourceUserDatabaseTests.java
Status: modified
```diff
@@ -16,11 +16,13 @@
  */
 package org.apache.catalina.users;
 
+import java.io.File;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.Statement;
 import java.util.Iterator;
 
+import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -109,6 +111,11 @@ public Connection getConnection() {
 
     private DerbyUserDatabase db;
 
+    @AfterClass
+    public static void derbyCleanup() {
+        System.out.println(""Deleted derby.log: "" + (new File(""derby.log"")).delete());
+    }
+
     @Test
     public void testBasicUserRoleDatabase()
         throws Exception {
@@ -156,6 +163,7 @@ public void testBasicUserRoleDatabase()
         Assert.assertFalse(""Unexpected role for user"", tomcatUser.isInRole(managerRole));
 
         db.close();
+
     }
 
     @Test
@@ -224,5 +232,6 @@ public void testUserDatabase()
         Assert.assertTrue(""No group for user"", randomUser.isInGroup(userGroup));
 
         db.close();
+
     }
 }
```",3,2,3,3
zeroshot-v1,fix ProductSearch üòÖ,"File: applications/product/src/org/ofbiz/product/product/ProductSearch.java
Status: modified
```diff
@@ -717,7 +717,7 @@ public ArrayList<String> makeProductIdList(EntityListIterator eli) {
                 productIds.add(searchResult.getString(""mainProductId""));
                 productIdSet.add(searchResult.getString(""mainProductId""));
 
-                while (((searchResult = (GenericValue) eli.next()) != null) && (maxResults == null || numRetreived < maxResults.intValue())) {
+                while ((maxResults == null || numRetreived < maxResults.intValue()) && ((searchResult = (GenericValue) eli.next()) != null)) {
                     String productId = searchResult.getString(""mainProductId"");
                     if (!productIdSet.contains(productId)) {
                         productIds.add(productId);
```",1,0,1,2
zeroshot-v1,"Feat: Add copyFile method to FileOps class This commit adds a new method `copyFile` to the `FileOps` class. This method copies a file from a source to a destination using FileChannels. If the destination file exists, it will be overwritten. This feature enhances the file operation capabilities of the `FileOps` class.","File: jena-arq/src/main/java/org/apache/jena/atlas/lib/FileOps.java
Status: modified
```diff
@@ -19,8 +19,13 @@
 package org.apache.jena.atlas.lib;
 
 import java.io.File ;
+import java.io.FileInputStream ;
+import java.io.FileOutputStream ;
+import java.io.IOException ;
+import java.nio.channels.FileChannel ;
 
 import org.apache.jena.atlas.AtlasException ;
+import org.apache.jena.atlas.io.IO ;
 import org.apache.jena.atlas.logging.Log ;
 
 public class FileOps
@@ -189,6 +194,20 @@ public static String fullDirectoryPath(String filename)
         }
     }
     
+    /** Copy a file */
+    public static void copyFile(File source, File dest) {
+        try {
+            @SuppressWarnings(""resource"")
+            FileChannel sourceChannel = new FileInputStream(source).getChannel();
+            @SuppressWarnings(""resource"")
+            FileChannel destChannel = new FileOutputStream(dest).getChannel();
+            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
+            sourceChannel.close();
+            destChannel.close();
+        } catch (IOException ex) { IO.exception(ex); }
+    }
+
+    
 //    public static String getExt(String filename)
 //    {
 //        int i = filename.lastIndexOf('.') ;
```",4,3,3,4
zeroshot-v1,"Fix: Add assertion to ensure response in sendMessage method In the sendMessage method of the MailRequestResponseClient.java file, an assertion was added to ensure that a response is received after sending a message. This fix ensures that the method will not proceed without receiving a response, improving the reliability of the message sending process.","File: java/modules/transports/src/test/java/org/apache/synapse/transport/mail/MailRequestResponseClient.java
Status: modified
```diff
@@ -30,6 +30,8 @@
 import javax.mail.Store;
 import javax.mail.internet.ContentType;
 
+import junit.framework.Assert;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.synapse.transport.testkit.client.ClientOptions;
@@ -63,6 +65,7 @@ private void tearDown() throws MessagingException {
     public IncomingMessage<byte[]> sendMessage(ClientOptions options, ContentType contentType, byte[] message) throws Exception {
         String msgId = sendMessage(contentType, message);
         Message reply = waitForReply(msgId);
+        Assert.assertNotNull(""No response received"", reply);
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         reply.getDataHandler().writeTo(baos);
         return new IncomingMessage<byte[]>(new ContentType(reply.getContentType()), baos.toByteArray());
```",3,3,3,4
zeroshot-v1,"Refactor: Set default bus in getContent method In the CXFServiceReference.java file, the getContent() method has been refactored. The method now sets the default bus before returning the content of the object. This change ensures that the default bus is properly set up each time the getContent() method is called.","File: plugins/cxf/geronimo-cxf/src/main/java/org/apache/geronimo/cxf/client/CXFServiceReference.java
Status: modified
```diff
@@ -26,6 +26,8 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.apache.cxf.Bus;
+import org.apache.cxf.BusFactory;
 import org.apache.cxf.jaxws.context.WebServiceContextImpl;
 import org.apache.geronimo.cxf.CXFWebServiceContainer;
 import org.apache.geronimo.gbean.AbstractName;
@@ -52,7 +54,8 @@ public CXFServiceReference(String serviceClassName,
     }
        
     public Object getContent() throws NamingException {
-        CXFWebServiceContainer.getDefaultBus();
+        Bus bus = CXFWebServiceContainer.getDefaultBus();
+        BusFactory.setThreadDefaultBus(bus);
         Object reference = super.getContent();   
         SAAJInterceptor.registerInterceptors();        
         return reference;
```",3,3,2,3
zeroshot-v1,add missing license header,"File: src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java
Status: modified
```diff
@@ -1,4 +1,25 @@
 package org.apache.cassandra.concurrent;
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+
 
 import java.util.concurrent.*;
 
```",3,3,2,3
zeroshot-v1,remove unused import,"File: src/modules/lucene/java/src/org/apache/lenya/cms/lucene/IndexUpdater.java
Status: modified
```diff
@@ -28,7 +28,6 @@
 import org.apache.lenya.cms.observation.ObservationRegistry;
 import org.apache.lenya.cms.observation.RepositoryEvent;
 import org.apache.lenya.cms.observation.RepositoryListener;
-import org.apache.lenya.cms.publication.Document;
 
 /**
  * Index updater which updates the index when a document changes.
```",2,1,3,3
zeroshot-v1,"Refactor: Update createMemento method in MutableLogEvent class The createMemento method in the MutableLogEvent class has been refactored. The method was previously creating a memento of the current log event state for later restoration. Now, it creates a memento of the current log event with the updated message. This change does not affect the external behavior or functionality of the method.","File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java
Status: modified
```diff
@@ -422,8 +422,9 @@ private void readObject(final ObjectInputStream stream) throws InvalidObjectExce
      * @return a new immutable copy of the data in this {@code MutableLogEvent}
      */
     public Log4jLogEvent createMemento() {
-        // TODO implement MutableLogEvent.createMemento()
-        return Log4jLogEvent.deserialize(Log4jLogEvent.serialize(this, includeLocation));
+        Log4jLogEvent.Builder builder = new Log4jLogEvent.Builder(this);
+        builder.setMessage(memento());
+        return builder.build();
     }
 
 }
```",4,3,3,4
zeroshot-v1,"Fix: Handle negative image size in readPictures method This commit modifies the `readPictures()` method in `HSLFSlideShow.java` to handle a potential error situation where the image size is less than 0. A new exception `CorruptPowerPointFileException` is thrown when this condition is met, ensuring the integrity of the picture data.","File: src/scratchpad/src/org/apache/poi/hslf/HSLFSlideShow.java
Status: modified
```diff
@@ -35,6 +35,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.hpsf.SummaryInformation;
 import org.apache.poi.hpsf.DocumentSummaryInformation;
 
+import org.apache.poi.hslf.exceptions.CorruptPowerPointFileException;
 import org.apache.poi.hslf.exceptions.EncryptedPowerPointFileException;
 import org.apache.poi.hslf.record.*;
 import org.apache.poi.hslf.usermodel.PictureData;
@@ -272,6 +273,13 @@ private void readPictures() throws IOException {
             byte[] imgdata = new byte[imgsize];
             System.arraycopy(pictstream, pos, imgdata, 0, imgdata.length);
 
+			// The image size must be 0 or greater
+			// (0 is allowed, but odd, since we do wind on by the header each
+			//  time, so we won't get stuck)
+			if(imgsize < 0) {
+				throw new CorruptPowerPointFileException(""The file contains a picture, at position "" + p.size() + "", which has a negatively sized data length, so we can't trust any of the picture data"");
+			}
+
 			// If they type (including the bonus 0xF018) is 0, skip it
 			if(type == 0) {
 				System.err.println(""Problem reading picture: Invalid image type 0, on picture with length"" + imgsize + "".\nYou document will probably become corrupted if you save it!"");
```",3,3,3,4
zeroshot-v1,ManagedBean annotation should be available at runtime and be type-only assignable,"File: api/ejb31-api-experimental/src/main/java/javax/annotation/ManagedBean.java
Status: modified
```diff
@@ -22,8 +22,10 @@
 package javax.annotation;
 
 /**
- * @version $Revision$ $Date$
+ * @version $Rev$ $Date$
  */
+@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE})
+@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
 public @interface ManagedBean {
     java.lang.String value() default """"; 
 }
```",3,2,3,3
zeroshot-v1,Fix javadoc of AbstractOutputTransformerContainer,"File: wicket-core/src/main/java/org/apache/wicket/markup/transformer/AbstractOutputTransformerContainer.java
Status: modified
```diff
@@ -29,7 +29,8 @@
  * This abstract container provides the means to post-process the markup generated by its child
  * components (excluding the containers tag)
  * <p>
- * Please see <code>IBehavior</code> for an alternative based on IBehavior
+ * Please see {@link org.apache.wicket.markup.transformer.AbstractTransformerBehavior} for an alternative
+ * based on {@link org.apache.wicket.behavior.Behavior}
  * 
  * @see org.apache.wicket.markup.transformer.AbstractTransformerBehavior
  * @see org.apache.wicket.markup.transformer.ITransformer
```",3,2,3,3
zeroshot-v1,add missing dirtiescontext,"File: archiva-modules/archiva-scheduler/archiva-scheduler-repository/src/test/java/org/apache/archiva/scheduler/repository/ArchivaRepositoryScanningTaskExecutorAbstractTest.java
Status: modified
```diff
@@ -40,6 +40,7 @@
 import org.apache.archiva.test.utils.ArchivaSpringJUnit4ClassRunner;
 
 import static org.mockito.Mockito.mock;
+import org.springframework.test.annotation.DirtiesContext;
 
 /**
  * ArchivaRepositoryScanningTaskExecutorPhase1Test
@@ -48,6 +49,7 @@
  */
 @RunWith( ArchivaSpringJUnit4ClassRunner.class )
 @ContextConfiguration( locations = { ""classpath*:/META-INF/spring-context.xml"", ""classpath:/spring-context.xml"" } )
+@DirtiesContext( classMode= DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD )
 public abstract class ArchivaRepositoryScanningTaskExecutorAbstractTest
     extends TestCase
 {
```",2,1,1,2
zeroshot-v1,Renamed the shared-ldap-extras-sp package,"File: core-integ/src/test/java/org/apache/directory/server/core/trigger/TriggerInterceptorIT.java
Status: modified
```diff
@@ -32,9 +32,9 @@
 import javax.naming.ldap.LdapContext;
 
 import org.apache.directory.api.ldap.model.entry.AttributeUtils;
+import org.apache.directory.api.ldap.sp.JavaStoredProcUtils;
 import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
 import org.apache.directory.server.core.integ.FrameworkRunner;
-import org.apache.directory.shared.ldap.sp.JavaStoredProcUtils;
 import org.apache.directory.shared.ldap.trigger.TriggerUtils;
 import org.junit.Ignore;
 import org.junit.Test;
```


File: protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/extended/StoredProcedureExtendedOperationHandler.java
Status: modified
```diff
@@ -31,6 +31,7 @@
 import org.apache.directory.api.ldap.codec.api.LdapApiServiceFactory;
 import org.apache.directory.api.ldap.model.entry.Entry;
 import org.apache.directory.api.ldap.model.name.Dn;
+import org.apache.directory.api.ldap.sp.LdapContextParameter;
 import org.apache.directory.server.core.api.sp.StoredProcEngine;
 import org.apache.directory.server.core.api.sp.StoredProcEngineConfig;
 import org.apache.directory.server.core.api.sp.StoredProcExecutionManager;
@@ -40,7 +41,6 @@
 import org.apache.directory.server.ldap.LdapSession;
 import org.apache.directory.shared.ldap.extras.extended.StoredProcedureRequest;
 import org.apache.directory.shared.ldap.extras.extended.StoredProcedureResponse;
-import org.apache.directory.shared.ldap.sp.LdapContextParameter;
 
 
 /**
```


File: server-integ/src/test/java/org/apache/directory/server/operations/extended/StoredProcedureIT.java
Status: modified
```diff
@@ -35,6 +35,7 @@
 import org.apache.directory.api.ldap.model.constants.SupportedSaslMechanisms;
 import org.apache.directory.api.ldap.model.schema.normalizers.DeepTrimToLowerNormalizer;
 import org.apache.directory.api.ldap.model.schema.normalizers.OidNormalizer;
+import org.apache.directory.api.ldap.sp.JavaStoredProcUtils;
 import org.apache.directory.junit.tools.MultiThreadedMultiInvoker;
 import org.apache.directory.server.annotations.CreateLdapServer;
 import org.apache.directory.server.annotations.CreateTransport;
@@ -47,7 +48,6 @@
 import org.apache.directory.server.ldap.handlers.bind.ntlm.NtlmMechanismHandler;
 import org.apache.directory.server.ldap.handlers.bind.plain.PlainMechanismHandler;
 import org.apache.directory.server.ldap.handlers.extended.StoredProcedureExtendedOperationHandler;
-import org.apache.directory.shared.ldap.sp.JavaStoredProcUtils;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
```",3,2,3,4
zeroshot-v1,add test for migration,"File: stack/core/src/test/java/org/apache/usergrid/corepersistence/migration/EntityTypeMappingMigrationIT.java
Status: modified
```diff
@@ -77,6 +77,7 @@ public void setup() {
     @Test
     public void testIdMapping() throws Throwable {
 
+        assertEquals(""version 1 expected"", 1, entityTypeMappingMigration.getVersion());
 
         final EntityManager newAppEm = app.getEntityManager();
 
@@ -112,6 +113,7 @@ public void testIdMapping() throws Throwable {
 
 
 
+
         AllEntitiesInSystemObservable.getAllEntitiesInSystem( managerCache )
                                      .doOnNext( new Action1<AllEntitiesInSystemObservable.EntityData>() {
                                          @Override
```


File: stack/core/src/test/java/org/apache/usergrid/corepersistence/migration/GraphShardVersionMigrationIT.java
Status: modified
```diff
@@ -82,6 +82,7 @@ public void setup() {
     @Test
     public void testIdMapping() throws Throwable {
 
+        assertEquals(""version 2 expected"", 2, graphShardVersionMigration.getVersion());
 
         /**
          * Drop our migration keyspaces to ensure we don't have a ""new version in there""
```",3,2,1,2
zeroshot-v1,tuple() -> new Values(),"File: src/jvm/storm/starter/spout/TwitterSampleSpout.java
Status: modified
```diff
@@ -8,13 +8,13 @@
 import backtype.storm.topology.IRichSpout;
 import backtype.storm.topology.OutputFieldsDeclarer;
 import backtype.storm.tuple.Fields;
+import backtype.storm.tuple.Values;
 import backtype.storm.utils.Utils;
 import java.util.Map;
 import java.util.concurrent.LinkedBlockingQueue;
 import twitter4j.Status;
 import twitter4j.StatusDeletionNotice;
 import twitter4j.StatusListener;
-import static backtype.storm.utils.Utils.*;
 
 public class TwitterSampleSpout implements IRichSpout {
     SpoutOutputCollector _collector;
@@ -74,7 +74,7 @@ public void nextTuple() {
         if(ret==null) {
             Utils.sleep(50);
         } else {
-            _collector.emit(tuple(ret));            
+            _collector.emit(new Values(ret));
         }
     }
 
```",3,2,3,3
zeroshot-v1,Refactor: Change CountingDownStreamCallback to static class in StorageService.java This commit changes the CountingDownStreamCallback class in the StorageService.java file from a non-static class to a static class. This is a structural change that does not affect the external behavior of the code.,"File: src/java/org/apache/cassandra/service/StorageService.java
Status: modified
```diff
@@ -3660,7 +3660,7 @@ private CountDownLatch streamRanges(final Map<String, Multimap<Range<Token>, Ine
         return latch;
     }
 
-    class CountingDownStreamCallback implements IStreamCallback
+    static class CountingDownStreamCallback implements IStreamCallback
     {
         private final CountDownLatch latch;
         private final InetAddress targetAddr;
```",3,3,3,4
zeroshot-v1,"Fallback to default value if ""compression"" value is not given.","File: src/java/org/apache/fop/render/bitmap/TIFFRenderer.java
Status: modified
```diff
@@ -94,8 +94,7 @@ public TIFFRenderer() {
     public void configure(Configuration cfg) throws ConfigurationException {
 
         //TODO Support output of monochrome bitmaps (fax-style)
-        String c = cfg.getChild(""compression"").getAttribute(""value"");
-        int comp = Integer.parseInt(c);
+        int comp = cfg.getChild(""compression"").getAttributeAsInteger(""value"", 1);
         String name = null;
         switch (comp) {
         case TIFFEncodeParam.COMPRESSION_NONE:
```",3,2,3,4
zeroshot-v1,Refactor: Update comment in ParseRegexp.java The comment in the ParseRegexp.java file was updated to reflect that the consideration of using Java 1.4 regexp instead of ORO did not significantly improve performance.,"File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/ParseRegexp.java
Status: modified
```diff
@@ -72,7 +72,8 @@
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
-// TODO: look at using Java 1.4 regexp instead of ORO.
+// NOTE: Also looked at using Java 1.4 regexp instead of ORO. The change was
+// trivial. Performance did not improve -- at least not significantly. [Jordi]
 import org.apache.oro.text.regex.MatchResult;
 import org.apache.oro.text.regex.Pattern;
 import org.apache.oro.text.regex.PatternMatcherInput;
```",3,3,3,4
zeroshot-v1,remove unused field,"File: src/org/apache/fop/render/ps/PSRenderer.java
Status: modified
```diff
@@ -99,9 +99,6 @@ public class PSRenderer extends AbstractRenderer {
     private int currentFontSize;
     private int pageHeight;
     private int pageWidth;
-    private int currentXPosition = 0;
-    private int currentYPosition = 0;
-    private int currentAreaContainerXPosition = 0;
     private float currRed;
     private float currGreen;
     private float currBlue;
```",2,1,3,3
zeroshot-v1,"Feat: Add in-memory TDB dataset handling in FusekiCmd This commit adds the ability to handle in-memory TDB datasets in the FusekiCmd class. Specifically, the processModulesAndArgs() method has been modified to check if the directory is equal to Names.memName. If so, it logs that the TDB dataset is in-memory. If not, it checks if the directory exists and logs the directory of the TDB dataset. This feature enhances the flexibility of handling TDB datasets.","File: jena-fuseki/src/main/java/org/apache/jena/fuseki/FusekiCmd.java
Status: modified
```diff
@@ -26,6 +26,7 @@
 
 import org.apache.jena.atlas.io.IO ;
 import org.apache.jena.atlas.lib.FileOps ;
+import org.apache.jena.atlas.lib.Lib ;
 import org.apache.jena.atlas.lib.StrUtils ;
 import org.apache.jena.atlas.logging.Log ;
 import org.apache.jena.fuseki.mgt.ManagementServer ;
@@ -49,6 +50,7 @@
 import com.hp.hpl.jena.sparql.core.DatasetGraphFactory ;
 import com.hp.hpl.jena.tdb.TDB ;
 import com.hp.hpl.jena.tdb.TDBFactory ;
+import com.hp.hpl.jena.tdb.sys.Names ;
 import com.hp.hpl.jena.tdb.transaction.TransactionManager ;
 
 public class FusekiCmd extends CmdARQ
@@ -284,9 +286,14 @@ protected void processModulesAndArgs()
         if ( contains(argTDB) )
         {
             String dir = getValue(argTDB) ;
-            log.info(""TDB dataset: directory=""+dir) ;
-            if ( ! FileOps.exists(dir) )
-                throw new CmdException(""Directory not found: ""+dir) ;
+            
+            if ( Lib.equal(dir, Names.memName) ) {
+                log.info(""TDB dataset: in-memory"") ;
+            } else {
+                if ( ! FileOps.exists(dir) )
+                    throw new CmdException(""Directory not found: ""+dir) ;
+                log.info(""TDB dataset: directory=""+dir) ;
+            }
             dsg = TDBFactory.createDatasetGraph(dir) ;
         }
         
```",3,3,3,4
zeroshot-v1,Don't try to config mdb destination if we aren't auto creating resources.,"File: container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java
Status: modified
```diff
@@ -505,7 +505,7 @@ private void deploy(EjbModule ejbModule) throws OpenEJBException {
 
 
             // mdb message destination id
-            if (bean instanceof MessageDrivenBean) {
+            if (autoCreateResources && bean instanceof MessageDrivenBean) {
                 MessageDrivenBean mdb = (MessageDrivenBean) bean;
 
                 ResourceLink resourceLink = ejbDeployment.getResourceLink(""openejb/destination"");
```",3,2,3,3
zeroshot-v1,"Refactor: Improve handling of AsyncEvents in AsyncEventServiceImpl This commit refactors the AsyncEventServiceImpl class to improve the handling of different types of AsyncEvents in the queue system. The changes are mainly in the condition of an if statement in the callEventHandlers method, which processes a list of messages from a queue. Each message is expected to contain an AsyncEvent. The changes ensure that the method handles different types of AsyncEvents more effectively. There are no associated issues or pull requests.","File: stack/core/src/main/java/org/apache/usergrid/corepersistence/asyncevents/AsyncEventServiceImpl.java
Status: modified
```diff
@@ -355,9 +355,12 @@ else if (event instanceof ElasticsearchIndexEvent) {
                     throw new Exception(""Unknown EventType for message: ""+ message.getStringBody().trim());
                 }
 
-                if( single.isEmpty() ){
-                    logger.warn(""No index operation messages came back from event processing for msg {} "",
-                        message.getStringBody().trim());
+
+                if( !(event instanceof ElasticsearchIndexEvent)
+                    && !(event instanceof InitializeApplicationIndexEvent)
+                      && single.isEmpty() ){
+                        logger.warn(""No index operation messages came back from event processing for msg: {} "",
+                            message.getStringBody().trim());
                 }
 
 
```",3,3,3,4
zeroshot-v1,fix npe in JNDIRealm,"File: java/org/apache/catalina/realm/JNDIRealm.java
Status: modified
```diff
@@ -1150,7 +1150,7 @@ public String getHostnameVerifierClassName() {
      *            class name of the {@link HostnameVerifier} to be constructed
      */
     public void setHostnameVerifierClassName(String verifierClassName) {
-        if (hostNameVerifierClassName != null) {
+        if (verifierClassName != null) {
             this.hostNameVerifierClassName = verifierClassName.trim();
         } else {
             this.hostNameVerifierClassName = null;
```",3,2,3,3
zeroshot-v1,add cache fig,"File: stack/core/src/main/java/org/apache/usergrid/corepersistence/ApplicationIdCacheFig.java
Status: modified
```diff
@@ -19,16 +19,13 @@
  */
 package org.apache.usergrid.corepersistence;
 
-/**
- * Application id cache fig
- */
 
 import org.safehaus.guicyfig.Default;
 import org.safehaus.guicyfig.GuicyFig;
 import org.safehaus.guicyfig.Key;
 
 /**
- * The config for the entity cache
+ * Application id cache fig
  */
 public interface ApplicationIdCacheFig extends GuicyFig {
 
```",1,1,0,1
zeroshot-v1,fix for serializable and content equals,"File: wicket/src/java/wicket/AttributeModifier.java
Status: modified
```diff
@@ -72,9 +72,9 @@ public class AttributeModifier extends AbstractBehaviour implements Serializable
 	private static final long serialVersionUID = 1L;
 
 	/** Marker value to have an attribute without a value added. */
-	public static final Object VALUELESS_ATTRIBUTE_ADD = new Object();
+	public static final Object VALUELESS_ATTRIBUTE_ADD = new String(""VA_ADD"");
 	/** Marker value to have an attribute without a value removed. */
-	public static final Object VALUELESS_ATTRIBUTE_REMOVE = new Object();
+	public static final Object VALUELESS_ATTRIBUTE_REMOVE = new String(""VA_REMOVE"");
 
 	/** Whether to add the attribute if it is not an attribute in the markup. */
 	private final boolean addAttributeIfNotPresent;
@@ -246,11 +246,11 @@ final void replaceAttibuteValue(final Component component, final ComponentTag ta
 			final ValueMap attributes = tag.getAttributes();
 			final Object replacementValue = getReplacementOrNull(component);
 
-			if (replacementValue == VALUELESS_ATTRIBUTE_ADD)
+			if (VALUELESS_ATTRIBUTE_ADD.equals(replacementValue))
 			{
 				attributes.put(attribute, null);
 			}
-			else if (replacementValue == VALUELESS_ATTRIBUTE_REMOVE)
+			else if (VALUELESS_ATTRIBUTE_REMOVE.equals(replacementValue))
 			{
 				attributes.remove(attribute);
 			}
```",3,2,1,2
zeroshot-v1,"Refactor: Update VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE in AttributeModifier This commit updates the values of VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE in the AttributeModifier class from new Object() to new String(""VA_ADD"") and new String(""VA_REMOVE"") respectively. The comparison in the 'replaceAttibuteValue' method is also updated from '==' to '.equals'. These changes improve the structure of the code without changing its behavior.","File: wicket/src/java/wicket/AttributeModifier.java
Status: modified
```diff
@@ -72,9 +72,9 @@ public class AttributeModifier extends AbstractBehaviour implements Serializable
 	private static final long serialVersionUID = 1L;
 
 	/** Marker value to have an attribute without a value added. */
-	public static final Object VALUELESS_ATTRIBUTE_ADD = new Object();
+	public static final Object VALUELESS_ATTRIBUTE_ADD = new String(""VA_ADD"");
 	/** Marker value to have an attribute without a value removed. */
-	public static final Object VALUELESS_ATTRIBUTE_REMOVE = new Object();
+	public static final Object VALUELESS_ATTRIBUTE_REMOVE = new String(""VA_REMOVE"");
 
 	/** Whether to add the attribute if it is not an attribute in the markup. */
 	private final boolean addAttributeIfNotPresent;
@@ -246,11 +246,11 @@ final void replaceAttibuteValue(final Component component, final ComponentTag ta
 			final ValueMap attributes = tag.getAttributes();
 			final Object replacementValue = getReplacementOrNull(component);
 
-			if (replacementValue == VALUELESS_ATTRIBUTE_ADD)
+			if (VALUELESS_ATTRIBUTE_ADD.equals(replacementValue))
 			{
 				attributes.put(attribute, null);
 			}
-			else if (replacementValue == VALUELESS_ATTRIBUTE_REMOVE)
+			else if (VALUELESS_ATTRIBUTE_REMOVE.equals(replacementValue))
 			{
 				attributes.remove(attribute);
 			}
```",3,3,3,4
zeroshot-v1,remove unused code,"File: qpid/java/client/src/org/apache/qpid/client/protocol/AMQProtocolSession.java
Status: modified
```diff
@@ -385,8 +385,8 @@ protected String generateQueueName()
         {
             id = _queueId++;
         }
-        //get rid of / and ; from address for spec conformance
-        String localAddress = StringUtils.replaceChars(_minaProtocolSession.getLocalAddress().toString(),""/;"","""");
+        //get rid of / and : and ; from address for spec conformance
+        String localAddress = StringUtils.replaceChars(_minaProtocolSession.getLocalAddress().toString(),""/;:"","""");
         return ""tmp_"" + localAddress + ""_"" + id;
     }
 
```",2,1,2,3
zeroshot-v1,remove unused code,"File: wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AutoCompletePage.java
Status: modified
```diff
@@ -24,13 +24,10 @@
 
 import org.apache.wicket.ajax.AjaxRequestTarget;
 import org.apache.wicket.ajax.form.AjaxFormSubmitBehavior;
-import org.apache.wicket.core.request.handler.BookmarkablePageRequestHandler;
-import org.apache.wicket.core.request.handler.PageProvider;
 import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;
 import org.apache.wicket.markup.html.basic.Label;
 import org.apache.wicket.markup.html.form.Form;
 import org.apache.wicket.model.Model;
-import org.apache.wicket.request.cycle.RequestCycle;
 import org.apache.wicket.util.string.Strings;
 
 
@@ -93,10 +90,6 @@ protected Iterator<String> getChoices(String input)
 			@Override
 			protected void onSubmit(AjaxRequestTarget target)
 			{
-				BookmarkablePageRequestHandler bookmarkablePageRequestHandler = new BookmarkablePageRequestHandler(
-					new PageProvider(Index.class));
-				RequestCycle requestCycle = RequestCycle.get();
-				CharSequence urlFor = requestCycle.urlFor(bookmarkablePageRequestHandler);
 				target.add(label);
 			}
 
```",2,1,2,3
zeroshot-v1,fix DatabaseDescriptor crash,"File: src/java/org/apache/cassandra/config/DatabaseDescriptor.java
Status: modified
```diff
@@ -593,7 +593,7 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)
             }
         }
 
-        if (conf.cdc_enabled != null)
+        if (conf.cdc_enabled == true)
         {
             logger.info(""cdc_enabled is true. Starting casssandra node with Change-Data-Capture enabled."");
         }
```",2,1,2,2
zeroshot-v1,"Use the right variable for null check; the method variable, that is.","File: java/org/apache/catalina/realm/JNDIRealm.java
Status: modified
```diff
@@ -1150,7 +1150,7 @@ public String getHostnameVerifierClassName() {
      *            class name of the {@link HostnameVerifier} to be constructed
      */
     public void setHostnameVerifierClassName(String verifierClassName) {
-        if (hostNameVerifierClassName != null) {
+        if (verifierClassName != null) {
             this.hostNameVerifierClassName = verifierClassName.trim();
         } else {
             this.hostNameVerifierClassName = null;
```",3,2,3,3
zeroshot-v1,o The connect() and various bind() method don't throw an IoException anymore,"File: core-api/src/main/java/org/apache/directory/server/core/api/LdapCoreSessionConnection.java
Status: modified
```diff
@@ -154,7 +154,7 @@ public boolean close() throws IOException
     /**
      * {@inheritDoc}
      */
-    public boolean connect() throws LdapException, IOException
+    public boolean connect() throws LdapException
     {
         return true;
     }
@@ -1152,7 +1152,7 @@ public void abandon( int messageId )
     /**
      * {@inheritDoc}
      */
-    public void bind() throws LdapException, IOException
+    public void bind() throws LdapException
     {
         throw new UnsupportedOperationException(
             ""Bind operation using LdapConnectionConfig are not supported on CoreSession based connection"" );
@@ -1162,7 +1162,7 @@ public void bind() throws LdapException, IOException
     /**
      * {@inheritDoc}
      */
-    public void anonymousBind() throws LdapException, IOException
+    public void anonymousBind() throws LdapException
     {
         BindRequest bindRequest = new BindRequestImpl();
         bindRequest.setName( """" );
@@ -1177,7 +1177,7 @@ public void anonymousBind() throws LdapException, IOException
     /**
      * {@inheritDoc}
      */
-    public BindResponse bind( BindRequest bindRequest ) throws LdapException, IOException
+    public BindResponse bind( BindRequest bindRequest ) throws LdapException
     {
         if ( bindRequest == null )
         {
```",3,2,2,3
zeroshot-v1,fix typo in javadoc,"File: jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/basic/SimplePageTest.java
Status: modified
```diff
@@ -326,11 +326,11 @@ public void testRenderHomePage_6() throws Exception
 
 	/**
 	 * @throws Exception
+	 */
 	public void testRenderHomePage_7() throws Exception
 	{
 		executeTest(SimplePage_7.class, ""SimplePageExpectedResult_7.html"");
 	}
-	 */
 
 	/**
 	 * @throws Exception
```",2,1,3,2
zeroshot-v1,Last weeks changes took away helpful information about why exec failed to run; this puts it back in.,"File: src/main/org/apache/tools/ant/taskdefs/ExecTask.java
Status: modified
```diff
@@ -323,7 +323,7 @@ protected void runExec(Execute exe) throws BuildException {
             runExecute(exe);
         } catch (IOException e) {
             if (failIfExecFails) {
-                throw new BuildException(""Execute failed: "",e, location);
+                throw new BuildException(""Execute failed: ""+e.toString(),e, location);
             } else {
                 log(""Execute failed: ""+e.toString(), Project.MSG_ERR);
             }
```",3,2,2,3
zeroshot-v1,Feat: Adjust comment in SimplePageTest.java This commit adjusts the placement of a comment in the SimplePageTest.java file. The change is minor and does not affect the functionality of the code.,"File: jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/basic/SimplePageTest.java
Status: modified
```diff
@@ -326,11 +326,11 @@ public void testRenderHomePage_6() throws Exception
 
 	/**
 	 * @throws Exception
+	 */
 	public void testRenderHomePage_7() throws Exception
 	{
 		executeTest(SimplePage_7.class, ""SimplePageExpectedResult_7.html"");
 	}
-	 */
 
 	/**
 	 * @throws Exception
```",3,2,3,4
zeroshot-v1,add missing override annotation,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java
Status: modified
```diff
@@ -74,6 +74,7 @@ Disruptor<RingBufferLogEvent> getDisruptor() {
      *
      * @see #stop()
      */
+    @Override
     public synchronized void start() {
         if (disruptor != null) {
             LOGGER.trace(
```",3,2,3,4
zeroshot-v1,"Refactor: Improve null check and class comparison in BaseWicketTester This commit refactors the `isRenderedPage` method in the `BaseWicketTester` class. A null check was added for `expectedRenderedPageClass` to prevent potential null pointer exceptions. Additionally, the condition for checking if the page class is assignable from `expectedRenderedPageClass` was modified to improve readability and maintainability. These changes do not alter the functionality of the method, which continues to check if the last rendered page is of the expected type.","File: wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java
Status: modified
```diff
@@ -1797,12 +1797,14 @@ private Url transform(final Url url)
 	 */
 	public <C extends Page> Result isRenderedPage(Class<C> expectedRenderedPageClass)
 	{
+		Args.notNull(expectedRenderedPageClass, ""expectedRenderedPageClass"");
+
 		Page page = getLastRenderedPage();
 		if (page == null)
 		{
 			return Result.fail(""page was null"");
 		}
-		if (!page.getClass().isAssignableFrom(expectedRenderedPageClass))
+		if (!expectedRenderedPageClass.isAssignableFrom(page.getClass()))
 		{
 			return Result.fail(String.format(""classes not the same, expected '%s', current '%s'"",
 				expectedRenderedPageClass, page.getClass()));
```",3,3,3,4
zeroshot-v1,fix bug in LoaderUtil,"File: modules/core/src/java/org/apache/geronimo/xml/deployment/LoaderUtil.java
Status: modified
```diff
@@ -74,7 +74,7 @@
 /**
  * Holds utility methods for parsing a DOM tree.
  *
- * @version $Revision: 1.8 $ $Date: 2003/10/01 19:02:05 $
+ * @version $Revision: 1.9 $ $Date: 2003/11/18 02:12:33 $
  */
 public final class LoaderUtil {
     private static final Log log = LogFactory.getLog(LoaderUtil.class);
@@ -137,7 +137,7 @@ public static Element[] getChildren(Element root, String childName) {
         for(int i=0; i<max; i++) {
             Node n = nl.item(i);
             if(n.getNodeType() == Node.ELEMENT_NODE &&
-                    n.getNodeName().equals(childName)) {
+                    n.getLocalName().equals(childName)) {
                 list.add(n);
             }
         }
```",2,1,1,2
zeroshot-v1,fixing an obvious cut and paste glitch,"File: src/java/org/apache/cocoon/components/modules/input/RealPathModule.java
Status: modified
```diff
@@ -33,7 +33,7 @@
  * running in a .war file), <code>null</code> will be returned.
  *
  * @author <a href=""mailto:jefft@apache.org"">Jeff Turner</a>
- * @version CVS $Id: RealPathModule.java,v 1.3 2004/03/05 13:02:48 bdelacretaz Exp $
+ * @version CVS $Id$
  */
 
 /*
@@ -59,7 +59,7 @@
  */
 public class RealPathModule extends AbstractInputModule implements ThreadSafe {
 
-    final static Vector returnNames;
+    private final static Vector returnNames;
     static {
         Vector tmp = new Vector();
         tmp.add(""realPath"");
@@ -79,7 +79,7 @@ public Object getAttribute( String name, Configuration modeConf, Map objectModel
 
     public Iterator getAttributeNames( Configuration modeConf, Map objectModel ) throws ConfigurationException {
 
-        return RequestURIModule.returnNames.iterator();
+        return RealPathModule.returnNames.iterator();
     }
 
 
```",2,1,2,3
zeroshot-v1,add copyFile method to FileOps,"File: jena-arq/src/main/java/org/apache/jena/atlas/lib/FileOps.java
Status: modified
```diff
@@ -19,8 +19,13 @@
 package org.apache.jena.atlas.lib;
 
 import java.io.File ;
+import java.io.FileInputStream ;
+import java.io.FileOutputStream ;
+import java.io.IOException ;
+import java.nio.channels.FileChannel ;
 
 import org.apache.jena.atlas.AtlasException ;
+import org.apache.jena.atlas.io.IO ;
 import org.apache.jena.atlas.logging.Log ;
 
 public class FileOps
@@ -189,6 +194,20 @@ public static String fullDirectoryPath(String filename)
         }
     }
     
+    /** Copy a file */
+    public static void copyFile(File source, File dest) {
+        try {
+            @SuppressWarnings(""resource"")
+            FileChannel sourceChannel = new FileInputStream(source).getChannel();
+            @SuppressWarnings(""resource"")
+            FileChannel destChannel = new FileOutputStream(dest).getChannel();
+            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
+            sourceChannel.close();
+            destChannel.close();
+        } catch (IOException ex) { IO.exception(ex); }
+    }
+
+    
 //    public static String getExt(String filename)
 //    {
 //        int i = filename.lastIndexOf('.') ;
```",3,2,3,3
zeroshot-v1,Empty byte array case for HexDump,"File: src/java/org/apache/poi/util/HexDump.java
Status: modified
```diff
@@ -73,6 +73,12 @@ public synchronized static void dump(final byte [] data, final long offset,
             throws IOException, ArrayIndexOutOfBoundsException,
                     IllegalArgumentException
     {
+        if (data.length == 0)
+        {
+            stream.write( ""No Data"".getBytes() );
+            stream.flush();
+            return;
+        }
         if ((index < 0) || (index >= data.length))
         {
             throw new ArrayIndexOutOfBoundsException(
@@ -83,6 +89,7 @@ public synchronized static void dump(final byte [] data, final long offset,
         {
             throw new IllegalArgumentException(""cannot write to nullstream"");
         }
+
         long         display_offset = offset + index;
         StringBuffer buffer         = new StringBuffer(74);
 
```


File: src/testcases/org/apache/poi/util/TestHexDump.java
Status: modified
```diff
@@ -277,6 +277,11 @@ public void testDump()
 
             // as expected
         }
+
+        // verify proper behaviour with empty byte array
+        ByteArrayOutputStream os = new ByteArrayOutputStream( );
+        HexDump.dump( new byte[0], 0, os, 0 );
+        assertEquals( ""No Data"", os.toString() );
     }
 
     public void testToHex()
```",3,2,3,3
zeroshot-v1,"Fix: Use getRawSchemeSpecificPart in jarLocation method This commit changes the method `getSchemeSpecificPart()` to `getRawSchemeSpecificPart()` in the `jarLocation(Class clazz)` method in the JarLocation.java file. The functionality of the method remains the same, indicating that this change is likely a bug fix in the implementation details.","File: container/openejb-loader/src/main/java/org/apache/openejb/loader/JarLocation.java
Status: modified
```diff
@@ -38,7 +38,7 @@ public static File jarLocation(Class clazz) {
 
             URI uri = classURL.toURI();
             if (uri.getPath() == null){
-                uri = new URI(uri.getSchemeSpecificPart());
+                uri = new URI(uri.getRawSchemeSpecificPart());
             }
 
             String path = uri.getPath();
```",4,3,3,4
zeroshot-v1,fix quality flaw,"File: java/org/apache/tomcat/util/net/SocketWrapper.java
Status: modified
```diff
@@ -31,10 +31,10 @@ public class SocketWrapper<E> {
     private long timeout = -1;
     private boolean error = false;
     private volatile int keepAliveLeft = 100;
-    private boolean comet = false;
-    private boolean async = false;
+    private volatile boolean comet = false;
+    private volatile boolean async = false;
     private boolean keptAlive = false;
-    private boolean upgraded = false;
+    private volatile boolean upgraded = false;
     private boolean secure = false;
     /*
      * Following cached for speed / reduced GC
```",2,1,1,2
zeroshot-v1,fix UtilCache üòÖ,"File: framework/base/src/org/ofbiz/base/util/cache/UtilCache.java
Status: modified
```diff
@@ -644,12 +644,8 @@ public static <K, V> UtilCache<K, V> getOrCreateUtilCache(String name, int sizeL
         if (existingCache != null) return existingCache;
         String cacheName = name + getNextDefaultIndex(name);
         UtilCache<K, V> newCache = new UtilCache<K, V>(cacheName, sizeLimit, maxInMemory, expireTime, useSoftReference, useFileSystemStore, name, names);
-        UtilCache<K, V> oldCache = (UtilCache<K, V>) utilCacheTable.putIfAbsent(name, newCache);
-        if (oldCache == null) {
-            return newCache;
-        } else {
-            return oldCache;
-        }
+        utilCacheTable.putIfAbsent(name, newCache);
+        return (UtilCache<K, V>) utilCacheTable.get(name);
     }
 
     public static <K, V> UtilCache<K, V> createUtilCache(String name, int sizeLimit, int maxInMemory, long expireTime, boolean useSoftReference, boolean useFileSystemStore, String... names) {
```",1,0,1,2
zeroshot-v1,Trim config line to be sure it is empty.,"File: container/openejb-core/src/main/java/org/apache/openejb/resource/activemq/ActiveMQResourceAdapter.java
Status: modified
```diff
@@ -90,7 +90,7 @@ public void start(final BootstrapContext bootstrapContext) throws ResourceAdapte
         }
 
         // prefix server uri with 'broker:' so our broker factory is used
-        if (brokerXmlConfig != null && !brokerXmlConfig.isEmpty()) {
+        if (brokerXmlConfig != null && !brokerXmlConfig.trim().isEmpty()) {
 
             try {
 
```",3,2,3,4
zeroshot-v1,fixed a junit test set-up which succeded in Eclipse and failed on the comand line using maven,"File: wicket/src/test/wicket/markup/MarkupParserTest.java
Status: modified
```diff
@@ -22,11 +22,11 @@
 import java.util.Locale;
 
 import junit.framework.Assert;
-import junit.framework.TestCase;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import wicket.WicketTestCase;
 import wicket.markup.html.pages.PageExpiredErrorPage;
 import wicket.markup.parser.XmlPullParser;
 import wicket.markup.parser.XmlTag;
@@ -42,10 +42,19 @@
  * 
  * @author Jonathan Locke
  */
-public final class MarkupParserTest extends TestCase
+public final class MarkupParserTest extends WicketTestCase
 {
 	private static Log log = LogFactory.getLog(MarkupParserTest.class);
 
+	/**
+	 * Construct.
+	 * @param name
+	 */
+	public MarkupParserTest(String name)
+	{
+		super(name);
+	}
+	
 	/**
 	 * 
 	 * @throws StringValueConversionException
```",2,1,1,2
zeroshot-v1,add more logging for üòÖ,"File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
Status: modified
```diff
@@ -129,10 +129,20 @@ public NamingEnumeration searchTest(DirContext dirContext, String searchBase, St
 		if (dirContext == null) {
 			throw new NamingException(CONTEXT_IS_NULL);
 		}
+        if (log.isDebugEnabled()){
+            log.debug(
+                    ""searchBase="" + searchBase +
+                    "" scope="" + scope +
+                    "" countlim="" + countlim +
+                    "" timelim="" + timelim +
+                    "" attrs="" + attrs +
+                    "" retobj="" + retobj +
+                    "" deref="" + deref +
+                    "" filter="" + searchFilter
+                      );
+        }
 		SearchControls searchcontrols = null;
 		searchcontrols = new SearchControls(scope, countlim, timelim, attrs, retobj, deref);
-		log.debug(""scope, countlim, timelim, attrs, retobj, deref= "" + searchFilter + scope + countlim + timelim
-				+ attrs + retobj + deref);
 		return dirContext.search(searchBase, searchFilter, searchcontrols);
 	}
 
```",1,2,1,2
zeroshot-v1,AbstractJacksonLayout - reformated new code,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java
Status: modified
```diff
@@ -271,7 +271,7 @@ private static LogEvent convertMutableToLog4jEvent(final LogEvent event) {
     }
 
     protected Object wrapLogEvent(final LogEvent event) {
-         if (additionalFields.length > 0) {
+        if (additionalFields.length > 0) {
             // Construct map for serialization - note that we are intentionally using original LogEvent
             Map<String, String> additionalFieldsMap = resolveAdditionalFields(event);
             // This class combines LogEvent with AdditionalFields during serialization
@@ -282,9 +282,9 @@ protected Object wrapLogEvent(final LogEvent event) {
         }
     }
 
-    private Map<String,String> resolveAdditionalFields(LogEvent logEvent) {
+    private Map<String, String> resolveAdditionalFields(LogEvent logEvent) {
         // Note: LinkedHashMap retains order
-        final Map<String,String> additionalFieldsMap = new LinkedHashMap<>(additionalFields.length);
+        final Map<String, String> additionalFieldsMap = new LinkedHashMap<>(additionalFields.length);
         final StrSubstitutor strSubstitutor = configuration.getStrSubstitutor();
 
         // Go over each field
```",2,1,2,3
zeroshot-v1,"Refactor: Remove Serializable interface and serialVersionUID fields The Serializable interface was removed from the DnsOperation interface, and the serialVersionUID fields were removed from the GetFlatRecord and GetRecords classes. These changes suggest that serialization is no longer needed for these classes. This commit is a refactor, intended to improve the structure of the code without changing its behavior.","File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/DnsOperation.java
Status: modified
```diff
@@ -20,7 +20,6 @@
 package org.apache.directory.server.dns.store.jndi;
 
 
-import java.io.Serializable;
 import java.util.Set;
 
 import javax.naming.Name;
@@ -34,7 +33,7 @@
  *
  * @author <a href=""mailto:dev@directory.apache.org"">Apache Directory Project</a>
  */
-public interface DnsOperation extends Serializable
+public interface DnsOperation
 {
     /**
      * The command pattern execute method.
```


File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/operations/GetFlatRecord.java
Status: modified
```diff
@@ -49,8 +49,6 @@
  */
 public class GetFlatRecord implements DnsOperation
 {
-    private static final long serialVersionUID = 4931303293468915435L;
-
     /** The name of the question to get. */
     private final QuestionRecord question;
 
```


File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/operations/GetRecords.java
Status: modified
```diff
@@ -56,8 +56,6 @@
  */
 public class GetRecords implements DnsOperation
 {
-    private static final long serialVersionUID = 1077580995617778894L;
-
     /** The name of the question to get. */
     private final QuestionRecord question;
 
```",3,3,3,4
zeroshot-v1,Fix: Ensure parent directories exist when installing configuration This commit modifies the `install` method in the `MavenConfigStore` class to create the necessary parent directories if they do not exist when installing a configuration from a source directory to a target file. This change ensures that the installation process does not fail due to missing parent directories.,"File: plugins/geronimo-packaging-plugin/src/java/org/apache/geronimo/plugin/packaging/MavenConfigStore.java
Status: modified
```diff
@@ -133,6 +133,9 @@ public void install(ConfigurationData configurationData, File source) throws IOE
         URI configId = configurationData.getId();
         URL targetURL = repository.getURL(configId);
         File targetFile = new File(targetURL.getPath());
+        File parentFile = targetFile.getParentFile();
+        parentFile.mkdirs();
+        targetFile.createNewFile();
         ExecutableConfigurationUtil.createExecutableConfiguration(configurationData, null, source, targetFile);
     }
 
```",4,4,3,4
zeroshot-v1,Style: Add comments to getBeanDefinitionNames method in ApplicationContextMock class Added comments to the getBeanDefinitionNames method in the ApplicationContextMock class to provide more information about the method parameters and return value. The ApplicationContextMock class is a mock implementation of the ApplicationContext interface for unit testing purposes.,"File: wicket-spring/src/main/java/wicket/spring/test/ApplicationContextMock.java
Status: modified
```diff
@@ -167,6 +167,8 @@ public String[] getBeanDefinitionNames()
 	}
 
 	/**
+	 * @param type 
+	 * @return bean definition names
 	 * @see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionNames(java.lang.Class)
 	 */
 	public String[] getBeanDefinitionNames(Class type)
```",3,3,2,3
zeroshot-v1,Ligth refactoring (nl added),"File: bootstrap-partition/src/main/java/org/apache/directory/server/schema/bootstrap/partition/DbFileListing.java
Status: modified
```diff
@@ -112,14 +112,17 @@ public Set<String> getIndexedAttributes()
     {
         Set<String> attributes = new HashSet<String>();
         Iterator<String> ii = iterator();
+        
         while( ii.hasNext() )
         {
             String name = ii.next();
+            
             if ( name2type.get( name ) == DbFileType.USER_INDEX )
             {
                 attributes.add( getIndexAttributeName( name ) );
             }
         }
+        
         return attributes;
     }
 }
```",2,1,2,2
zeroshot-v1,Only destroy the classloader if it is TempClassLoader from OpenEBJ,"File: plugins/openejb/geronimo-openejb-builder/src/main/java/org/apache/geronimo/openejb/deployment/EjbModule.java
Status: modified
```diff
@@ -30,6 +30,7 @@
 import org.apache.geronimo.openejb.xbeans.ejbjar.OpenejbGeronimoEjbJarType;
 import org.apache.openejb.ClassLoaderUtil;
 import org.apache.openejb.config.ConfigurationFactory;
+import org.apache.openejb.core.TempClassLoader;
 import org.apache.openejb.jee.EjbJar;
 import org.apache.openejb.jee.EnterpriseBean;
 import org.apache.openejb.jee.oejb3.OpenejbJar;
@@ -125,8 +126,10 @@ public Map<JndiKey, Map<String, Object>> getEjbJndiContext() {
 
     @Override
     public void close() {
-        ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader().getParent());
-        ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader());
+        if (ejbModule.getClassLoader() instanceof TempClassLoader) {
+            ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader().getParent());
+            ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader());
+        }
         super.close();
     }
 
```",3,2,3,4
zeroshot-v1,removed unused variable,"File: wicket/src/java/wicket/protocol/http/MockWebApplication.java
Status: modified
```diff
@@ -115,12 +115,6 @@ public class MockWebApplication extends WebApplication
 	/** Session. */
 	private WebSession wicketSession;
 
-	/**
-	 * In case of an RuntimeException, Wicket usually renders a error page. In
-	 * some test cases however it is useful to get the exception instead.
-	 */
-	private boolean rethrowRuntimeException = false;
-
 	/**
 	 * Create the mock http application that can be used for testing.
 	 * 
@@ -373,17 +367,6 @@ public void setupRequestAndResponse()
 		wicketResponse = new WebResponse(servletResponse);
 	}
 
-	/**
-	 * If true, runtime exception will not be handled by Wicket. Instead the
-	 * exception will be rethrown.
-	 * 
-	 * @param enable
-	 */
-	public void setRethrowRuntimeException(boolean enable)
-	{
-		this.rethrowRuntimeException = enable;
-	}
-
 	/**
 	 * Gets the parameters to be set on the next request.
 	 * 
```


File: wicket/src/test/wicket/markup/parser/filter/HeaderSectionTest.java
Status: modified
```diff
@@ -44,7 +44,6 @@ public class HeaderSectionTest extends TestCase
 	protected void setUp() throws Exception
 	{
 		application = new MockWebApplication(null);
-		application.setRethrowRuntimeException(true);
 	}
 	
 	/**
```",3,2,4,4
zeroshot-v1,fix check style issues,"File: wicket/src/main/java/org/apache/wicket/markup/html/form/CheckGroup.java
Status: modified
```diff
@@ -141,7 +141,7 @@ public Object component(Check<T> check)
 								""] contains an illegal relative path "" +
 								""element ["" +
 								value +
-								""] which does not point to a Check component. Due to this the CheckGroup component cannot resolve the selected Check component pointed to by the illegal value. A possible reason is that componment hierarchy changed between rendering and form submission."");
+								""] which does not point to a Check component. Due to this the CheckGroup component cannot resolve the selected Check component pointed to by the illegal value. A possible reason is that component hierarchy changed between rendering and form submission."");
 					}
 
 					// assign the value of the group's model
```


File: wicket/src/main/java/org/apache/wicket/markup/html/form/RadioGroup.java
Status: modified
```diff
@@ -124,7 +124,7 @@ public Object component(Radio<T> radio)
 						""] for RadioGroup component ["" +
 						getPath() +
 						""] is illegal because it does not contain relative path to a Radio componnet. "" +
-						""Due to this the RadioGroup component cannot resolve the selected Radio component pointed to by the illegal value. A possible reason is that componment hierarchy changed between rendering and form submission."");
+						""Due to this the RadioGroup component cannot resolve the selected Radio component pointed to by the illegal value. A possible reason is that component hierarchy changed between rendering and form submission."");
 			}
 
 
```",3,2,1,3
zeroshot-v1,Refactor: Improve conditions for setting leaderLength in addLeader method This commit refactors the `addLeader` method in the `LineArea` class. The conditions for setting the `leaderLength` variable have been improved to better handle the space in a line when adding a leader. A leader is a pattern that fills the space in a line. The changes made do not alter the functionality of the method but improve the structure of the code.,"File: src/org/apache/fop/layout/LineArea.java
Status: modified
```diff
@@ -487,14 +487,18 @@ public void addLeader(int leaderPattern, int leaderLengthMinimum,
                           int ruleStyle, int ruleThickness, int leaderPatternWidth,
                           int leaderAlignment) {
         WordArea leaderPatternArea;
-        int leaderLength;
+        int leaderLength = 0;
         int remainingWidth =
           this.getContentWidth() - this.getCurrentXPosition();
-        //checks whether leaderLenghtOptimum fits into rest of line;
-        //should never overflow, asit has been checked already in BlockArea
-        if (remainingWidth < leaderLengthOptimum) {
+        /** checks whether leaderLenghtOptimum fits into rest of line;
+         *  should never overflow, as it has been checked already in BlockArea
+         *  first check: use remaining width if it smaller than optimum oder maximum
+         * */
+        if ((remainingWidth <= leaderLengthOptimum) ||   (remainingWidth <= leaderLengthMaximum)) {
             leaderLength = remainingWidth;
-        } else {
+        } else if ((remainingWidth > leaderLengthOptimum) && ( remainingWidth > leaderLengthMaximum)) {
+            leaderLength = leaderLengthMaximum;
+        } else if ((leaderLengthOptimum > leaderLengthMaximum) && (leaderLengthOptimum < remainingWidth)) {
             leaderLength = leaderLengthOptimum;
         }
         switch (leaderPattern) {
```",3,3,2,3
zeroshot-v1,Refactor: Update createDataSource and add configureDataSource in BasicDataSourceFactory This commit updates the `createDataSource` method in the `BasicDataSourceFactory` class to create and configure a `BasicDataSource` object using the provided properties. A new method `configureDataSource` has been added to configure a `BasicDataSource` object with properties from a `Properties` object. These changes improve the modularity and readability of the code.,"File: java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
Status: modified
```diff
@@ -335,8 +335,21 @@ private void validatePropertyNames(final Reference ref, final Name name, final L
      * @return the data source instance
      * @throws Exception if an error occurs creating the data source
      */
-    public static BasicDataSource createDataSource(final Properties properties) throws Exception {
+    public BasicDataSource createDataSource(final Properties properties) throws Exception {
         final BasicDataSource dataSource = new BasicDataSource();
+        configureDataSource(dataSource, properties);
+        return dataSource;
+    }
+
+    /**
+     * Configures a {@link BasicDataSource} instance based on the
+     * given properties.
+     *
+     * @param properties the datasource configuration properties
+     * @param dataSource the data source instance
+     * @throws Exception if an error occurs creating the data source
+     */
+    public void configureDataSource(final BasicDataSource dataSource, final Properties properties) throws Exception {
         String value = null;
 
         value = properties.getProperty(PROP_DEFAULTAUTOCOMMIT);
@@ -595,9 +608,6 @@ else if (""SERIALIZABLE"".equalsIgnoreCase(value)) {
         if (dataSource.getInitialSize() > 0) {
             dataSource.getLogWriter();
         }
-
-        // Return the configured DataSource instance
-        return dataSource;
     }
 
     /**
```",4,4,3,4
zeroshot-v1,Refactor: Modify loop condition in execSQL method This commit modifies the condition in the do-while loop in the execSQL method of the SQLExec.java file. The change is a refactor aimed at improving the structure or readability of the code. The execSQL method is responsible for executing a SQL statement and handling any SQL warnings or errors. The modification might affect how the method handles the SQL execution._x001B_[0m,"File: src/main/org/apache/tools/ant/taskdefs/SQLExec.java
Status: modified
```diff
@@ -554,7 +554,7 @@ protected void execSQL(String sql, PrintStream out) throws SQLException {
                 ret = statement.getMoreResults();
                 updateCount = statement.getUpdateCount();
                 resultSet = statement.getResultSet();
-            } while ((resultSet != null) || (updateCount != -1));
+            } while (ret);
 
             log(updateCountTotal + "" rows affected"",
                 Project.MSG_VERBOSE);
```",3,3,2,3
zeroshot-v1,repository scanning test fix for idependance,"File: archiva-modules/archiva-scheduler/archiva-scheduler-repository/src/test/java/org/apache/archiva/scheduler/repository/ArchivaRepositoryScanningTaskExecutorAbstractTest.java
Status: modified
```diff
@@ -40,6 +40,7 @@
 import org.apache.archiva.test.utils.ArchivaSpringJUnit4ClassRunner;
 
 import static org.mockito.Mockito.mock;
+import org.springframework.test.annotation.DirtiesContext;
 
 /**
  * ArchivaRepositoryScanningTaskExecutorPhase1Test
@@ -48,6 +49,7 @@
  */
 @RunWith( ArchivaSpringJUnit4ClassRunner.class )
 @ContextConfiguration( locations = { ""classpath*:/META-INF/spring-context.xml"", ""classpath:/spring-context.xml"" } )
+@DirtiesContext( classMode= DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD )
 public abstract class ArchivaRepositoryScanningTaskExecutorAbstractTest
     extends TestCase
 {
```",2,1,1,2
zeroshot-v1,Fix potential NPE,"File: java/org/apache/catalina/core/ContainerBase.java
Status: modified
```diff
@@ -1190,7 +1190,10 @@ protected void destroyInternal() throws LifecycleException {
             parent.removeChild(this);
         }
 
-        startStopExecutor.shutdownNow();
+        // If init fails, this may be null
+        if (startStopExecutor != null) {
+            startStopExecutor.shutdownNow();
+        }
 
         super.destroyInternal();
     }
```",3,3,2,3
zeroshot-v1,add request to QuickStartApplication,"File: wicket-quickstart/src/main/java/wicket/quickstart/QuickStartApplication.java
Status: modified
```diff
@@ -4,6 +4,7 @@
 import org.apache.commons.logging.LogFactory;
 
 import wicket.ISessionFactory;
+import wicket.Request;
 import wicket.Session;
 import wicket.protocol.http.WebApplication;
 
@@ -39,7 +40,7 @@ public ISessionFactory getSessionFactory()
     {
         return new ISessionFactory()
         {        	
-			public Session newSession()
+			public Session newSession(Request request)
             {
                 return new QuickStartSession(QuickStartApplication.this);
             }
```",2,1,3,2
zeroshot-v1,remove unused method,"File: src/java/org/apache/cassandra/db/RowIteratorFactory.java
Status: modified
```diff
@@ -161,17 +161,6 @@ else if (colCollated.hasNext())
         return new RowIterator(reduced, iterators);
     }
 
-    /** 
-     * Used when locks are required before getting the entry iterator.
-     * @param memtable Memtable to get iterator from
-     * @param startWith Start at this key position
-     * @return entry iterator for the current memtable
-     */
-    private static Iterator<Map.Entry<DecoratedKey, ColumnFamily>> memtableEntryIterator(Memtable memtable, DecoratedKey startWith)
-    {
-        return memtable.getEntryIterator(startWith);
-    }
-
     /**
      * Get a ColumnIterator for a specific key in the memtable.
      */
```",3,2,4,3
zeroshot-v1,tweak to check for conversion errors,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java
Status: modified
```diff
@@ -1024,7 +1024,7 @@ public final void validate()
 		{
 			convertInput();
 
-			if (isRequired() && getConvertedInput() == null)
+			if (isValid() && isRequired() && getConvertedInput() == null)
 			{
 				reportRequiredError();
 			}
```",3,2,2,3
zeroshot-v1,Style: Corrected language in comment Changed the language of a comment in the StyleTest.java file from German to English for better understanding.,"File: src/testcases/org/apache/tools/ant/taskdefs/StyleTest.java
Status: modified
```diff
@@ -65,7 +65,7 @@
 
 
 /**
- * TestCases fuer <style> / <xslt> task.
+ * TestCases for <style> / <xslt> task.
  * @author Jan Materne
  * @version 2003-08-05
  */
```",3,3,2,3
zeroshot-v1,"Refactor: Simplify workbook writing in test53611 This commit simplifies the way the workbook is written out in the test method `test53611()`. The previous implementation used a `ByteArrayOutputStream` to write the workbook, which was then closed in a finally block. This has been replaced with a single line using `IOUtils.write()`, which automatically handles the closing of the stream. This change improves the readability and maintainability of the code without altering the functionality of the test.","File: src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFBugs.java
Status: modified
```diff
@@ -75,7 +75,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.ss.util.CellRangeAddress;
 import org.apache.poi.ss.util.CellReference;
 import org.apache.poi.ss.util.CellUtil;
+import org.apache.poi.util.IOUtils;
 import org.apache.poi.util.LocaleUtil;
+import org.apache.poi.util.NullOutputStream;
 import org.apache.poi.util.TempFile;
 import org.apache.poi.xssf.XLSBUnsupportedException;
 import org.apache.poi.xssf.XSSFITestDataProvider;
@@ -3162,13 +3164,7 @@ public void test53611() throws IOException {
 
         // we currently only populate the dimension during writing out
         // to avoid having to iterate all rows/cells in each add/remove of a row or cell
-        //OutputStream str = new FileOutputStream(""/tmp/53611.xlsx"");
-        OutputStream str = new ByteArrayOutputStream();
-        try {
-            wb.write(str);
-        } finally {
-            str.close();
-        }
+        IOUtils.write(wb, new NullOutputStream());
 
         assertEquals(""B2:I5"", ((XSSFSheet) sheet).getCTWorksheet().getDimension().getRef());
 
```",3,3,3,4
zeroshot-v1,do not dynamic dynamic dynamic file,"File: src/java/org/apache/cocoon/components/modules/input/XMLFileModule.java
Status: modified
```diff
@@ -86,7 +86,7 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
  *
  * @author <a href=""mailto:jefft@apache.org"">Jeff Turner</a>
  * @author <a href=""mailto:haul@apache.org"">Christian Haul</a>
- * @version CVS $Id: XMLFileModule.java,v 1.8 2003/05/19 00:25:51 jefft Exp $
+ * @version CVS $Id: XMLFileModule.java,v 1.9 2003/05/20 09:17:57 jefft Exp $
  */
 public class XMLFileModule extends AbstractJXPathModule
     implements Composable, ThreadSafe {
@@ -276,11 +276,12 @@ protected Object getContextObject(Configuration modeConf,
                         ""missing 'file' child element at "" + 
                         modeConf.getLocation());
                 */
+            } else {
+              hasDynamicConf = true;
             }
-            hasDynamicConf = true;
         }
 
-        if (hasDynamicConf && fileConf != null) {
+        if (hasDynamicConf) {
             src = fileConf.getAttribute(""src"");
         }
 
```",1,1,0,1
zeroshot-v1,bug fix for autolink,"File: wicket/src/java/wicket/Application.java
Status: modified
```diff
@@ -129,9 +129,12 @@ public Localizer getLocalizer()
     }
 
     /**
+     * Get and initialize a markup parser.
+     *  
+     * @param page Autolinks are resolved relative to a Page.
      * @return A new MarkupParser
      */
-    public IMarkupParser getMarkupParser()
+    public IMarkupParser getMarkupParser(final Page page)
     {
         final ApplicationSettings settings = getSettings();
         try
@@ -143,6 +146,8 @@ public IMarkupParser getMarkupParser()
             parser.setStripComments(settings.getStripComments());
             parser.setCompressWhitespace(settings.getCompressWhitespace());
             parser.setStripWicketParamTag(settings.getStripWicketParamTag());
+            parser.setAutolinking(settings.getAutomaticLinking());
+            parser.setAutolinkBasePage(page);
             return parser;
         }
         catch (IllegalAccessException e)
```


File: wicket/src/java/wicket/Container.java
Status: modified
```diff
@@ -745,7 +745,7 @@ private Markup loadMarkup(final Application application, final String key,
             final Resource markupResource) throws ParseException, IOException,
             ResourceNotFoundException
     {
-        final Markup markup = application.getMarkupParser().read(markupResource);
+        final Markup markup = application.getMarkupParser(getPage()).read(markupResource);
         markupCache.put(key, markup);
         return markup;
     }
```",3,3,2,3
zeroshot-v1,"Feat: Add condition check in notifyBehaviorsComponentRendered() This commit introduces a condition check in the method notifyBehaviorsComponentRendered() in the Component.java file. The condition checks if a behavior is accepted before it is notified that the component has been rendered. This change ensures that only the accepted behaviors are notified, enhancing the efficiency of the method.","File: wicket/src/main/java/wicket/Component.java
Status: modified
```diff
@@ -1768,7 +1768,10 @@ private void notifyBehaviorsComponentRendered()
 			for (Iterator i = behaviors.iterator(); i.hasNext();)
 			{
 				IBehavior behavior = (IBehavior)i.next();
-				behavior.rendered(this);
+				if (isBehaviorAccepted(behavior))
+				{
+					behavior.rendered(this);
+				}
 			}
 		}
 	}
```",3,3,3,4
zeroshot-v1,Refactor: Update package name of AddIT.java and import in MigratedStockCoreISuite.java The package name of the AddIT.java file has been refactored from 'org.apache.directory.server.core.jndi' to 'org.apache.directory.server.core.operations.add'. The import statement in the MigratedStockCoreISuite.java file has been updated to reflect this change. This refactoring improves the structure of the code without changing its behavior.,"File: core-integ/src/test/java/org/apache/directory/server/core/operations/add/AddIT.java
Status: renamed
```diff
@@ -17,7 +17,7 @@
  *  under the License.
  *
  */
-package org.apache.directory.server.core.jndi;
+package org.apache.directory.server.core.operations.add;
 
 
 import static org.apache.directory.server.core.integ.IntegrationUtils.getAdminConnection;
```


File: core-integ/src/test/java/org/apache/directory/server/core/suites/MigratedStockCoreISuite.java
Status: modified
```diff
@@ -39,7 +39,7 @@
 import org.apache.directory.server.core.event.EventServiceIT;
 import org.apache.directory.server.core.exception.ExceptionServiceIT;
 import org.apache.directory.server.core.integ.FrameworkSuite;
-import org.apache.directory.server.core.jndi.AddIT;
+import org.apache.directory.server.core.operations.add.AddIT;
 import org.apache.directory.server.core.operations.add.PasswordHashingInterceptorTest;
 import org.apache.directory.server.core.operations.move.MoveIT;
 import org.junit.runner.RunWith;
```",4,4,3,4
zeroshot-v1,Style: Add comment to MoviesTest.java A comment was added to the MoviesTest.java file to provide additional information about the transaction-rollback example. The comment suggests that the transaction-rollback example does the same thing via UserTransaction and shows more techniques for rollback.,"File: examples/testing-transactions/src/test/java/org/superbiz/injection/tx/MoviesTest.java
Status: modified
```diff
@@ -28,8 +28,11 @@
 
 import static javax.ejb.TransactionAttributeType.REQUIRES_NEW;
 
+/**
+ * See the transaction-rollback example as it does the same thing
+ * via UserTransaction and shows more techniques for rollback 
+ */
 //START SNIPPET: code
-
 public class MoviesTest extends TestCase {
 
     @EJB
```",3,3,2,3
zeroshot-v1,Remove exception stack trace print This is already logged by the StatusLogger.,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/StringBuilderEncoder.java
Status: modified
```diff
@@ -16,16 +16,16 @@
  */
 package org.apache.logging.log4j.core.layout;
 
-import org.apache.logging.log4j.core.util.Constants;
-import org.apache.logging.log4j.status.StatusLogger;
-
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.Charset;
 import java.nio.charset.CharsetEncoder;
 import java.nio.charset.CodingErrorAction;
 import java.util.Objects;
 
+import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.status.StatusLogger;
+
 /**
  * Encoder for StringBuilders that uses ThreadLocals to avoid locking as much as possible.
  */
@@ -69,7 +69,6 @@ private void encodeWithThreadLocals(final CharsetEncoder charsetEncoder, final C
         try {
             TextEncoderHelper.encodeTextWithCopy(charsetEncoder, charBuffer, temp, source, destination);
         } catch (final Exception ex) {
-            ex.printStackTrace();
             logEncodeTextException(ex, source, destination);
             TextEncoderHelper.encodeTextFallBack(charset, source, destination);
         }
```",3,2,3,4
zeroshot-v1,only notify behaviors when they are accepted,"File: wicket/src/main/java/wicket/Component.java
Status: modified
```diff
@@ -1768,7 +1768,10 @@ private void notifyBehaviorsComponentRendered()
 			for (Iterator i = behaviors.iterator(); i.hasNext();)
 			{
 				IBehavior behavior = (IBehavior)i.next();
-				behavior.rendered(this);
+				if (isBehaviorAccepted(behavior))
+				{
+					behavior.rendered(this);
+				}
 			}
 		}
 	}
```",3,2,3,3
zeroshot-v1,"Fix: Correct calculation in computeStubCallsPerProcessedKey method This commit corrects the calculation of the average number of stub calls per processed key in the `computeStubCallsPerProcessedKey()` method of the `MatchNode.java` file. The positions of `numRecords1` and `numKey1`, and `numRecords2` and `numKey2` in the division operation have been swapped to ensure accurate calculation.","File: pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/MatchNode.java
Status: modified
```diff
@@ -1031,11 +1031,11 @@ protected double computeStubCallsPerProcessedKey() {
 		double callsPerKey = 1;
 		
 		if(numKey1 != -1) {
-			callsPerKey *= numKey1 / (double)numRecords1;
+			callsPerKey *= (double)numRecords1 / numKey1;
 		}
 		
 		if(numKey2 != -1) {
-			callsPerKey *= numKey2 / (double)numRecords2;
+			callsPerKey *= (double)numRecords2 / numKey2;
 		}
 
 		return callsPerKey;
```",4,3,3,4
zeroshot-v1,Correct test case for DOMBuilder.,"File: src/test/org/apache/cocoon/xml/dom/DOMBuilderTestCase.java
Status: modified
```diff
@@ -26,7 +26,7 @@
 /**
  * JUnit Testcase for {@link DOMBuilder}.
  * 
- * @version CVS $Id: DOMBuilderTestCase.java,v 1.2 2004/05/07 13:11:26 ugo Exp $
+ * @version CVS $Id: DOMBuilderTestCase.java,v 1.3 2004/05/18 12:36:52 ugo Exp $
  */
 public class DOMBuilderTestCase extends TestCase {
 
@@ -57,8 +57,11 @@ public void testMultipleCharactersEvents() throws SAXException {
         builder.endElement("""", ""test"", ""test"");
         builder.endDocument();
         Document dom = builder.getDocument();
-        assertEquals(""Content of root element not what expected"", ""ABCDEF"", 
-                dom.getDocumentElement().getFirstChild().getNodeValue()
-                + dom.getDocumentElement().getLastChild().getNodeValue());
+        StringBuffer value = new StringBuffer();
+        for (int i = 0 ; i < dom.getDocumentElement().getChildNodes().getLength() ; ++i) {
+            value.append(dom.getDocumentElement().getChildNodes().item(i).getNodeValue());
+        }
+        assertEquals(""Content of root element not what expected"",
+                ""ABCDEF"", value.toString()); 
     }
 }
```",2,2,3,3
zeroshot-v1,add missing error message when the package goal is not found,"File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Status: modified
```diff
@@ -211,7 +211,12 @@ private void verifyMojoPhase( String task, MavenSession session )
         {
             pluginManager.verifyPluginForGoal( task, session );
             mojoDescriptor = pluginManager.getMojoDescriptor( task );
-            if ( mojoDescriptor != null && mojoDescriptor.getPhase() != null )
+            if ( mojoDescriptor == null )
+            {
+                throw new LifecycleExecutionException( ""Required goal not found: "" + task );
+            }
+
+            if ( mojoDescriptor.getPhase() != null )
             {
                 Phase phase = (Phase) phaseMap.get( mojoDescriptor.getPhase() );
                 phase.getGoals().add( task );
```",3,3,3,4
zeroshot-v1,Observed a hard to reproduce test failure with the non-blocking IO tests. Can't reproduce it yet. Working assumption is that Poller and application thread have a different view of the async field on the SocketWrapper so make all the flags the Poller uses volatile.,"File: java/org/apache/tomcat/util/net/SocketWrapper.java
Status: modified
```diff
@@ -31,10 +31,10 @@ public class SocketWrapper<E> {
     private long timeout = -1;
     private boolean error = false;
     private volatile int keepAliveLeft = 100;
-    private boolean comet = false;
-    private boolean async = false;
+    private volatile boolean comet = false;
+    private volatile boolean async = false;
     private boolean keptAlive = false;
-    private boolean upgraded = false;
+    private volatile boolean upgraded = false;
     private boolean secure = false;
     /*
      * Following cached for speed / reduced GC
```",3,3,2,3
zeroshot-v1,"Refactor: Update getFilteredCiphersuites method in SSLUtils.java In this commit, the getFilteredCiphersuites method in SSLUtils.java has been refactored. The method now filters the supported cipher suites based on the provided include/exclude filters. The constant list DEFAULT_CIPHERSUITE_FILTERS_INCLUDE has been removed and replaced with a call to Collections.emptyList(). This change simplifies the code and makes it easier to understand.","File: core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java
Status: modified
```diff
@@ -31,6 +31,7 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -65,8 +66,6 @@ public final class SSLUtils {
 
     private static final String HTTPS_CIPHER_SUITES = ""https.cipherSuites"";
 
-    private static final List<String> DEFAULT_CIPHERSUITE_FILTERS_INCLUDE =
-        Arrays.asList(new String[] {"".*""});
     /**
      * By default, exclude NULL, anon, EXPORT, DES, 3DES, MD5, CBC and RC4 ciphersuites
      */
@@ -409,7 +408,7 @@ public static String[] getFilteredCiphersuites(FiltersType filters,
         List<Pattern> includes =
             filters != null
                 ? compileRegexPatterns(filters.getInclude(), true, log)
-                : compileRegexPatterns(DEFAULT_CIPHERSUITE_FILTERS_INCLUDE, true, log);
+                : Collections.emptyList();
         List<Pattern> excludes =
             filters != null
                 ? compileRegexPatterns(filters.getExclude(), false, log)
```",3,3,3,4
zeroshot-v1,Add @lob annotation for application certificates,"File: rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/Client.java
Status: modified
```diff
@@ -28,6 +28,7 @@
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
 import javax.persistence.Id;
+import javax.persistence.Lob;
 import javax.persistence.ManyToOne;
 import javax.persistence.MapKeyColumn;
 import javax.persistence.OneToOne;
@@ -66,7 +67,7 @@ public class Client implements Serializable {
     private String homeRealm;
     private boolean registeredDynamically;
     private String tokenEndpointAuthMethod;
-    
+
     public Client() {
 
     }
@@ -346,6 +347,7 @@ public void setRegisteredAudiences(List<String> registeredAudiences) {
 
     @ElementCollection(fetch = FetchType.EAGER)
     @OrderColumn
+    @Lob
     public List<String> getApplicationCertificates() {
         return applicationCertificates;
     }
```",3,2,3,4
zeroshot-v1,"Slight tweak to getOrCreateUtilCache, to get better code coverage.","File: framework/base/src/org/ofbiz/base/util/cache/UtilCache.java
Status: modified
```diff
@@ -644,12 +644,8 @@ public static <K, V> UtilCache<K, V> getOrCreateUtilCache(String name, int sizeL
         if (existingCache != null) return existingCache;
         String cacheName = name + getNextDefaultIndex(name);
         UtilCache<K, V> newCache = new UtilCache<K, V>(cacheName, sizeLimit, maxInMemory, expireTime, useSoftReference, useFileSystemStore, name, names);
-        UtilCache<K, V> oldCache = (UtilCache<K, V>) utilCacheTable.putIfAbsent(name, newCache);
-        if (oldCache == null) {
-            return newCache;
-        } else {
-            return oldCache;
-        }
+        utilCacheTable.putIfAbsent(name, newCache);
+        return (UtilCache<K, V>) utilCacheTable.get(name);
     }
 
     public static <K, V> UtilCache<K, V> createUtilCache(String name, int sizeLimit, int maxInMemory, long expireTime, boolean useSoftReference, boolean useFileSystemStore, String... names) {
```",2,1,2,3
zeroshot-v1,test for parsing strings,"File: src/testcases/org/apache/poi/hssf/record/formula/TestFormulaParser.java
Status: modified
```diff
@@ -54,6 +54,16 @@ public void testFormulaWithSpaceNRef() {
         assertTrue(""two tokens expected, got ""+ptgs.length,ptgs.length == 2);
     }
     
+    public void testFormulaWithString() {
+        Ptg[] ptgs;
+        FormulaParser fp;
+        fp = new FormulaParser(""\""hello\"" & \""world\"" ;"");
+        fp.parse();
+        ptgs = fp.getRPNPtg();
+        assertTrue(""three token expected, got "" + ptgs.length, ptgs.length == 3);
+    }
+
+    
      public static void main(String [] args) {
         System.out.println(""Testing org.apache.poi.hssf.record.formula.FormulaParser"");
         junit.textui.TestRunner.run(TestFormulaParser.class);
```",2,2,1,2
zeroshot-v1,"Fix: Remove TODO comment in SelectPage class The TODO comment was removed from the SelectPage class in the Apache Wicket framework. This class provides examples of using the Select form component. The removal of the comment is a cleanup of the code, improving its readability.","File: jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SelectPage.java
Status: modified
```diff
@@ -162,7 +162,6 @@ protected void explain()
 				+ ""&nbsp;&nbsp;&nbsp;&nbsp;ListMultipleChoice manyChoice = new ListMultipleChoice(\""choices\"", MANY_CHOICES).setMaxRows(5);\n""
 				+ ""&nbsp;&nbsp;&nbsp;&nbsp;form.add(manyChoice);"";
 
-		// TODO Post 1.2: General: Unknown todo
 		html = ""SEE INSIDE FOR NOW"";
 		code = ""SEE INSIDE FOR NOW"";
 
```",3,3,3,4
zeroshot-v1,Deprecate session-fw and auth-fw block,"File: blocks/cocoon-xsp/cocoon-xsp-impl/src/main/java/org/apache/cocoon/components/language/markup/xsp/XSPSessionFwHelper.java
Status: modified
```diff
@@ -28,6 +28,7 @@
  * The <code>Session-fw</code> object helper
  *
  * @version $Id$
+ * @deprecated This class is deprecated and will be removed in future versions.
  * @since 2.1.1
  */
 public class XSPSessionFwHelper {
```",3,2,3,3
zeroshot-v1,remove unused parameter,"File: core-api/src/main/java/org/apache/directory/server/core/api/LdapCoreSessionConnection.java
Status: modified
```diff
@@ -154,7 +154,7 @@ public boolean close() throws IOException
     /**
      * {@inheritDoc}
      */
-    public boolean connect() throws LdapException, IOException
+    public boolean connect() throws LdapException
     {
         return true;
     }
@@ -1152,7 +1152,7 @@ public void abandon( int messageId )
     /**
      * {@inheritDoc}
      */
-    public void bind() throws LdapException, IOException
+    public void bind() throws LdapException
     {
         throw new UnsupportedOperationException(
             ""Bind operation using LdapConnectionConfig are not supported on CoreSession based connection"" );
@@ -1162,7 +1162,7 @@ public void bind() throws LdapException, IOException
     /**
      * {@inheritDoc}
      */
-    public void anonymousBind() throws LdapException, IOException
+    public void anonymousBind() throws LdapException
     {
         BindRequest bindRequest = new BindRequestImpl();
         bindRequest.setName( """" );
@@ -1177,7 +1177,7 @@ public void anonymousBind() throws LdapException, IOException
     /**
      * {@inheritDoc}
      */
-    public BindResponse bind( BindRequest bindRequest ) throws LdapException, IOException
+    public BindResponse bind( BindRequest bindRequest ) throws LdapException
     {
         if ( bindRequest == null )
         {
```",3,2,4,4
zeroshot-v1,"Fix: Update path creation in testMultipleFiles method In the testMultipleFiles method of the AvroSourceTest.java file, the path to the AvroSource has been updated. Previously, the path was created using Paths.get(), but this has been changed to use new File(). This change ensures that the AvroSource can correctly read from multiple Avro files.","File: sdk/src/test/java/com/google/cloud/dataflow/sdk/io/AvroSourceTest.java
Status: modified
```diff
@@ -47,7 +47,6 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.PushbackInputStream;
-import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
@@ -231,7 +230,7 @@ public void testMultipleFiles() throws Exception {
     }
 
     AvroSource<Bird> source =
-        AvroSource.from(Paths.get(tmpFolder.getRoot().toString(), baseName + ""*"").toString())
+        AvroSource.from(new File(tmpFolder.getRoot().toString(), baseName + ""*"").toString())
             .withSchema(Bird.class);
     List<Bird> actual = SourceTestUtils.readFromSource(source, null);
     assertThat(actual, containsInAnyOrder(expected.toArray()));
```",3,3,2,3
zeroshot-v1,remove unused imports,"File: features/command/src/main/java/org/apache/karaf/features/command/InfoFeatureCommand.java
Status: modified
```diff
@@ -17,11 +17,9 @@
 package org.apache.karaf.features.command;
 
 import java.util.Iterator;
-import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import org.apache.karaf.features.Conditional;
 import org.apache.karaf.shell.commands.Argument;
```


File: features/command/src/main/java/org/apache/karaf/features/command/ListFeaturesCommand.java
Status: modified
```diff
@@ -16,7 +16,6 @@
  */
 package org.apache.karaf.features.command;
 
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
@@ -46,7 +45,7 @@ protected void doExecute(FeaturesService featuresService) throws Exception {
         table.column(""Version"");
         table.column(""Installed"");
         table.column(""Repository"");
-        table.column(""Description"");
+        table.column(""Description"").maxSize(50);
         table.emptyTableText(onlyInstalled ? ""No features installed"" : ""No features available"");
 
         List<Repository> repos = Arrays.asList(featuresService.listRepositories());
```",3,2,4,4
zeroshot-v1,fix failing test,"File: src/tests/junit/org/apache/tools/ant/types/RedirectorElementTest.java
Status: modified
```diff
@@ -32,7 +32,7 @@ public void setUp() {
 
     public void test1() {
         executeTarget(""test1"");
-        assertTrue((getProject().getReference(""test1"")
+        assertTrue((getProject().<Object> getReference(""test1"")
             instanceof RedirectorElement));
     }
 
```",2,1,1,2
zeroshot-v1,"Refactor: Remove unused import and update version comment The import statement for java.util.List has been removed from Sex.java as it was unused. Additionally, the version comment has been updated.","File: src/blocks/woody/java/org/apache/cocoon/woody/samples/Sex.java
Status: modified
```diff
@@ -52,14 +52,13 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.List;
 import java.util.Locale;
 
 import org.apache.cocoon.woody.datatype.Enum;
 
 /**
  * Description of Sex.
- * @version CVS $Id: Sex.java,v 1.3 2003/11/07 22:04:38 ugo Exp $
+ * @version CVS $Id: Sex.java,v 1.4 2003/11/08 14:27:03 joerg Exp $
  */
 public class Sex implements Enum {
 
```",3,3,3,4
zeroshot-v1,remove unused code,"File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Status: modified
```diff
@@ -34,6 +34,7 @@
 import org.apache.jmeter.protocol.http.control.TestHTTPMirrorThread;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
@@ -1091,7 +1092,6 @@ private void setupFormData(HTTPSamplerBase httpSampler, boolean isEncoded, Strin
      * 
      * @param httpSampler
      */
-    @SuppressWarnings(""deprecation"")
     private void setupFileUploadData(
             HTTPSamplerBase httpSampler,
             boolean isEncoded,
@@ -1105,9 +1105,9 @@ private void setupFileUploadData(
         // Set the form data
         setupFormData(httpSampler, isEncoded, titleField, titleValue, descriptionField, descriptionValue);
         // Set the file upload data
-        httpSampler.setFileField(fileField);
-        httpSampler.setFilename(fileValue.getAbsolutePath());
-        httpSampler.setMimetype(fileMimeType);      
+        HTTPFileArg[] hfa = {new HTTPFileArg(fileValue == null ? """" : fileValue.getAbsolutePath(), fileField, fileMimeType)};
+        httpSampler.setHTTPFiles(hfa);
+
     }
 
     /**
```",2,1,2,3
zeroshot-v1,Feat: Add import statement in TarRoundTripTest.java Added import statement for ByteArrayInputStream in TarRoundTripTest.java.,"File: src/testcases/org/apache/tools/tar/TarRoundTripTest.java
Status: modified
```diff
@@ -54,6 +54,7 @@
 package org.apache.tools.tar;
 
 import java.io.IOException;
+import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import junit.framework.TestCase;
 
```",3,2,2,3
zeroshot-v1,Fix test to make it work on different date as well,"File: src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFBugs.java
Status: modified
```diff
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.util.Calendar;
 import java.util.List;
 
 import org.apache.poi.EncryptedDocumentException;
@@ -40,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.poifs.filesystem.POIFSFileSystem;
 import org.apache.poi.ss.formula.WorkbookEvaluator;
 import org.apache.poi.ss.formula.eval.ErrorEval;
+import org.apache.poi.ss.formula.eval.NumberEval;
 import org.apache.poi.ss.formula.eval.ValueEval;
 import org.apache.poi.ss.formula.functions.Function;
 import org.apache.poi.ss.usermodel.*;
@@ -1753,12 +1755,11 @@ public void testBug56688_3() {
     public void testBug56688_4() {
         XSSFWorkbook excel = XSSFTestDataSamples.openSampleWorkbook(""56688_4.xlsx"");
         
-//        Calendar calendar = Calendar.getInstance();
-//        calendar.add(Calendar.MONTH, 2);
-//        double excelDate = DateUtil.getExcelDate(calendar.getTime());
-//        NumberEval eval = new NumberEval(Math.floor(excelDate));
-//        checkValue(excel, eval.getStringValue() + "".0"");
-        checkValue(excel, ""41904.0"");
+        Calendar calendar = Calendar.getInstance();
+        calendar.add(Calendar.MONTH, 2);
+        double excelDate = DateUtil.getExcelDate(calendar.getTime());
+        NumberEval eval = new NumberEval(Math.floor(excelDate));
+        checkValue(excel, eval.getStringValue() + "".0"");
     }
 
     private void checkValue(XSSFWorkbook excel, String expect) {
```",3,2,3,3
zeroshot-v1,extract string constant out of code,"File: src/scratchpad/src/org/apache/poi/hslf/model/HeadersFooters.java
Status: modified
```diff
@@ -36,6 +36,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public final class HeadersFooters {
 
+    private static final String _ppt2007tag = ""___PPT12"";
+
     private final HeadersFootersContainer _container;
     private final HSLFSheet _sheet;
     private final boolean _ppt2007;
@@ -54,7 +56,7 @@ public HeadersFooters(HSLFSheet sheet, short headerFooterType) {
         
         // detect if this ppt was saved in Office2007
         String tag = ppt.getSlideMasters().get(0).getProgrammableTag();
-        _ppt2007 = ""___PPT12"".equals(tag);
+        _ppt2007 = _ppt2007tag.equals(tag);
 
         SheetContainer sc = _sheet.getSheetContainer();
         HeadersFootersContainer hdd = (HeadersFootersContainer)sc.findFirstOfType(RecordTypes.HeadersFooters.typeID);
```",3,2,3,3
zeroshot-v1,"Refactor: Remove unused variables in PSRenderer class In the PSRenderer class of the org.apache.fop.render.ps package, three variables: currentXPosition, currentYPosition, and currentAreaContainerXPosition were removed. This is a code cleanup to remove unused variables.","File: src/org/apache/fop/render/ps/PSRenderer.java
Status: modified
```diff
@@ -99,9 +99,6 @@ public class PSRenderer extends AbstractRenderer {
     private int currentFontSize;
     private int pageHeight;
     private int pageWidth;
-    private int currentXPosition = 0;
-    private int currentYPosition = 0;
-    private int currentAreaContainerXPosition = 0;
     private float currRed;
     private float currGreen;
     private float currBlue;
```",3,3,3,4
zeroshot-v1,"Fix: Re-enable testAlwaysFailBAD() in TestWhileController The testAlwaysFailBAD() method in TestWhileController.java was re-enabled. This method is expected to always fail, but currently, it is not failing as expected. Further investigation is needed to understand why the test is not failing.","File: test/src/org/apache/jmeter/control/TestWhileController.java
Status: modified
```diff
@@ -164,8 +164,7 @@ public void testAlwaysFailOK() throws Exception {
 			runTestAlwaysFail(true); // Should be OK
 		}
 
-		// TODO - re-enable when fix found
-		public void disabletestAlwaysFailBAD() throws Exception {
+		public void testAlwaysFailBAD() throws Exception {
 			runTestAlwaysFail(false); // Currently fails
 		}
 
```",3,3,2,3
zeroshot-v1,Style: Clean up code and add logging in AccessTokenService This commit removes unnecessary spaces in the `injectContextIntoOAuthProviders` method and adds a log statement in the `handleTokenRequest` method for runtime exceptions. The logging will help in debugging by providing more information when an error occurs while creating the access token.,"File: rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/AccessTokenService.java
Status: modified
```diff
@@ -65,10 +65,10 @@ public void setGrantHandlers(List<AccessTokenGrantHandler> handlers) {
     protected void injectContextIntoOAuthProviders() {
         super.injectContextIntoOAuthProviders();
         for (AccessTokenGrantHandler grantHandler : grantHandlers) {
-            OAuthUtils.injectContextIntoOAuthProvider(getMessageContext(), grantHandler);    
+            OAuthUtils.injectContextIntoOAuthProvider(getMessageContext(), grantHandler);
         }
     }
-    
+
     /**
      * Sets a grant handler
      * @param handler the grant handler
@@ -125,6 +125,7 @@ public Response handleTokenRequest(MultivaluedMap<String, String> params) {
         } catch (WebApplicationException ex) {
             throw ex;
         } catch (RuntimeException ex) {
+            LOG.log(Level.FINE, ""Error creating the access token"", ex);
             // This is done to bypass a Check-Style
             // restriction on a number of return statements
             OAuthServiceException oauthEx = ex instanceof OAuthServiceException
```",3,3,3,4
zeroshot-v1,implement a toString for the CometEventImpl,"File: java/org/apache/catalina/connector/CometEventImpl.java
Status: modified
```diff
@@ -124,5 +124,16 @@ public void setTimeout(int timeout) throws IOException, ServletException,
             throw new UnsupportedOperationException();
         }
     }
+    
+    public String toString() {
+        StringBuffer buf = new StringBuffer();
+        buf.append(super.toString());
+        buf.append(""[EventType:"");
+        buf.append(eventType);
+        buf.append("", EventSubType:"");
+        buf.append(eventSubType);
+        buf.append(""]"");
+        return buf.toString();
+    }
 
 }
```",3,2,2,3
zeroshot-v1,Fix an infinite loop.,"File: java/org/apache/tomcat/util/net/SocketWrapperBase.java
Status: modified
```diff
@@ -472,7 +472,10 @@ protected void writeNonBlocking(byte[] buf, int off, int len) throws IOException
                     socketBufferHandler.configureWriteBufferForWrite();
                     thisTime = transfer(buf, off, len, socketBufferHandler.getWriteBuffer());
                 } else {
-                    thisTime = 0;
+                    // Didn't write any data in the last non-blocking write.
+                    // Therefore the write buffer will still be full. Nothing
+                    // else to do here. Exit the loop.
+                    break;
                 }
                 len = len - thisTime;
             }
```",3,2,3,3
zeroshot-v1,"Refactor: Remove redundant setContentLength method in Response class The setContentLength(int contentLength) method was removed from the Response class. This change is a refactor and does not affect the overall functionality of the class, which handles HTTP responses, including status, headers, content, and error handling.","File: java/org/apache/coyote/Response.java
Status: modified
```diff
@@ -481,10 +481,6 @@ public String getContentType() {
         return ret;
     }
 
-    public void setContentLength(int contentLength) {
-        this.contentLength = contentLength;
-    }
-
     public void setContentLength(long contentLength) {
         this.contentLength = contentLength;
     }
```",3,3,3,4
zeroshot-v1,add constructor for SSLUtils,"File: core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java
Status: modified
```diff
@@ -62,7 +62,6 @@ public final class SSLUtils {
 
     private static final String DEFAULT_KEYSTORE_TYPE = ""PKCS12"";
     private static final String DEFAULT_TRUST_STORE_TYPE = ""JKS"";
-    private static final String DEFAULT_SECURE_SOCKET_PROTOCOL = ""TLSv1"";
 
     private static final String HTTPS_CIPHER_SUITES = ""https.cipherSuites"";
 
@@ -157,7 +156,7 @@ public static TrustManager[] getDefaultTrustStoreManagers(Logger log) {
                     is = getResourceAsStream(location);
                 }
             }
-            
+
             if (is != null) {
                 TrustManagerFactory tmf =
                     TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
@@ -569,18 +568,4 @@ public static String getTruststoreProvider(String trustStoreProvider, Logger log
         return trustStoreProvider;
     }
 
-    public static String getSecureSocketProtocol(String secureSocketProtocol,
-                                                 Logger log) {
-        if (secureSocketProtocol != null) {
-            LogUtils.log(log,
-                         Level.FINE,
-                         ""SECURE_SOCKET_PROTOCOL_SET"",
-                         secureSocketProtocol);
-        } else {
-            LogUtils.log(log, Level.FINE, ""SECURE_SOCKET_PROTOCOL_NOT_SET"");
-            secureSocketProtocol = DEFAULT_SECURE_SOCKET_PROTOCOL;
-        }
-        return secureSocketProtocol;
-    }
-
 }
```",2,1,3,2
zeroshot-v1,"feat: Add base URI to QueryFactory.create in SPARQL_Query.java This commit modifies the `execute` method in `SPARQL_Query.java` to add a base URI parameter to the `QueryFactory.create` method. This change affects how the query is executed. The base URI is set to ""http://example/query-base"".","File: jena-fuseki/src/main/java/org/apache/jena/fuseki/servlets/SPARQL_Query.java
Status: modified
```diff
@@ -217,7 +217,7 @@ private void execute(String queryString, HttpAction action)
         Query query = null ;
         try {
             // NB syntax is ARQ (a superset of SPARQL)
-            query = QueryFactory.create(queryString, Syntax.syntaxARQ) ;
+            query = QueryFactory.create(queryString, ""http://example/query-base"", Syntax.syntaxARQ) ;
             queryStringLog = formatForLog(query) ;
             validateQuery(action, query) ;
         } catch (ActionErrorException ex) {
```",3,3,3,4
zeroshot-v1,add TesterClass privateStaticString,"File: test/javax/el/TesterClass.java
Status: modified
```diff
@@ -20,12 +20,15 @@ public class TesterClass {
 
     public static String publicStaticString = ""publicStaticString"";
     public String publicString = ""publicString"";
+    @SuppressWarnings(""unused"") // Used in TestStaticFieldELREsolver
     private static String privateStaticString = ""privateStaticString"";
+    @SuppressWarnings(""unused"") // Used in TestStaticFieldELREsolver
     private String privateString = ""privateString"";
 
     public TesterClass() {
     }
 
+    @SuppressWarnings(""unused"") // Used in TestStaticFieldELREsolver
     private TesterClass(String privateString) {
         this.privateString = privateString;
     }
```",2,1,1,2
zeroshot-v1,"Fix: Update close method in EjbModule.java This commit updates the close() method in the EjbModule.java file. Previously, the method was destroying the class loaders associated with the EJB module and then closing the module. Now, the method destroys the class loaders only if they are instances of TempClassLoader before closing the module. This change ensures that only the appropriate class loaders are destroyed, preventing potential issues.","File: plugins/openejb/geronimo-openejb-builder/src/main/java/org/apache/geronimo/openejb/deployment/EjbModule.java
Status: modified
```diff
@@ -30,6 +30,7 @@
 import org.apache.geronimo.openejb.xbeans.ejbjar.OpenejbGeronimoEjbJarType;
 import org.apache.openejb.ClassLoaderUtil;
 import org.apache.openejb.config.ConfigurationFactory;
+import org.apache.openejb.core.TempClassLoader;
 import org.apache.openejb.jee.EjbJar;
 import org.apache.openejb.jee.EnterpriseBean;
 import org.apache.openejb.jee.oejb3.OpenejbJar;
@@ -125,8 +126,10 @@ public Map<JndiKey, Map<String, Object>> getEjbJndiContext() {
 
     @Override
     public void close() {
-        ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader().getParent());
-        ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader());
+        if (ejbModule.getClassLoader() instanceof TempClassLoader) {
+            ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader().getParent());
+            ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader());
+        }
         super.close();
     }
 
```",3,3,3,4
zeroshot-v1,"chore: Add TODO comments for future work This commit adds TODO comments to two classes: EntityCollectionManager and EntityIndexBatch. These comments indicate future work to be done on these classes. In EntityCollectionManager, the comments suggest changing the load method to use multiget and return multiple entities, and adding a load versions method using a multiget that will return a latest version structure for a collection of entity Ids. In EntityIndexBatch, the comment suggests creating a delete method that deletes by Id, which will delete all documents from ES with the same entity Id.","File: stack/corepersistence/collection/src/main/java/org/apache/usergrid/persistence/collection/EntityCollectionManager.java
Status: modified
```diff
@@ -51,6 +51,11 @@ public interface EntityCollectionManager {
      */
     public Observable<Entity> load( Id entityId );
 
+    //TODO TN Change load to use multiget and return multiple entities.  Only supports loading 1k per load operation.
+
+
+    //TODO Dave add a load versions using a multiget that will return a latest version structure for a collection of entity Ids
+
 
     /**
      * Takes the change and reloads an entity with all changes applied in this entity applied.
```


File: stack/corepersistence/queryindex/src/main/java/org/apache/usergrid/persistence/index/EntityIndexBatch.java
Status: modified
```diff
@@ -59,6 +59,9 @@ public interface EntityIndexBatch {
      */
     public EntityIndexBatch deindex(final IndexScope scope, final Id id, final UUID version);
 
+
+    //TODO: Create a delete method that delete's  by Id.  This will delete all documents from ES with the same entity Id
+
     /**
      * Execute the batch
      */
```",3,3,2,3
zeroshot-v1,Fix: Added sleep function to ensure SchedulerDriver teardown This commit adds a sleep function to the main method in the TestFramework.java file. The sleep function is added to ensure that the SchedulerDriver teardown is complete before the JVM starts running native object destructors after System.exit() is called. This change is a corrective action to handle a potential issue where the JVM might start running native object destructors before the SchedulerDriver teardown is complete.,"File: src/examples/java/TestFramework.java
Status: modified
```diff
@@ -268,6 +268,16 @@ public static void main(String[] args) throws Exception {
     // Ensure that the driver process terminates.
     driver.stop();
 
+    // For this test to pass reliably on some platforms, this sleep is
+    // required to ensure that the SchedulerDriver teardown is complete
+    // before the JVM starts running native object destructors after
+    // System.exit() is called. 500ms proved successful in test runs,
+    // but on a heavily-loaded machine it might not.
+    // TODO(greg): Ideally, we would inspect the status of the driver
+    // and its associated tasks via the Java API and wait until their
+    // teardown is complete to exit.
+    Thread.sleep(500);
+
     System.exit(status);
   }
 }
```",3,4,2,3
zeroshot-v1,make sure streams get closed,"File: src/java/org/apache/cassandra/db/ColumnFamilyStore.java
Status: modified
```diff
@@ -2173,16 +2173,18 @@ public Set<SSTableReader> snapshotWithoutFlush(String snapshotName, Predicate<SS
     private void writeSnapshotManifest(final JSONArray filesJSONArr, final String snapshotName)
     {
         final File manifestFile = directories.getSnapshotManifestFile(snapshotName);
-        final JSONObject manifestJSON = new JSONObject();
-        manifestJSON.put(""files"", filesJSONArr);
 
         try
         {
             if (!manifestFile.getParentFile().exists())
                 manifestFile.getParentFile().mkdirs();
-            PrintStream out = new PrintStream(manifestFile);
-            out.println(manifestJSON.toJSONString());
-            out.close();
+            
+            try (PrintStream out = new PrintStream(manifestFile))
+            {
+                final JSONObject manifestJSON = new JSONObject();
+                manifestJSON.put(""files"", filesJSONArr);
+                out.println(manifestJSON.toJSONString());
+            }
         }
         catch (IOException e)
         {
```",3,2,3,3
zeroshot-v1,"Fix: Modify deliverSampler method in ProxyControl.java This commit modifies the deliverSampler method in the ProxyControl.java file. The method now filters the sampler based on content type and URL, modifies its configurations, and places it in the target controller node. If the sampler is excluded based on URL or content-type, it now notifies the sample listeners.","File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Status: modified
```diff
@@ -381,12 +381,14 @@ public synchronized void deliverSampler(HTTPSamplerBase sampler, TestElement[] s
 
 			placeSampler(sampler, subConfigs, myTarget);
 
-			notifySampleListeners(new SampleEvent(result, sampler.getName()));
+			notifySampleListeners(new SampleEvent(result, ""WorkBench"")); // TODO - is this the correct threadgroup name?
 		}
 		else {
 			if(log.isDebugEnabled()) {
 				log.debug(""Sample excluded based on url or content-type: "" + result.getUrlAsString() + "" - "" + result.getContentType());
 			}
+			result.setSampleLabel(""[""+result.getSampleLabel()+""]"");
+			notifySampleListeners(new SampleEvent(result, ""WorkBench"")); // TODO - is this the correct threadgroup name?
 		}
 	}
 
```",3,3,2,3
zeroshot-v1,"Fix: Add null check for session in sendMessage method In the `sendMessage` method of the `JMSSender.java` file, a null check for the session has been added. If the session is null, an exception is thrown. This is a fix to prevent potential issues when the session is null.","File: java/modules/transports/src/main/java/org/apache/synapse/transport/jms/JMSSender.java
Status: modified
```diff
@@ -192,6 +192,10 @@ public void sendMessage(MessageContext msgCtx, String targetAddress,
                 }
             }
 
+            if(session == null) {
+               handleException(""Could not create JMS session"");
+            }
+            
             // now we are going to use the JMS session, but if this was a session from a
             // defined JMS connection factory, we need to synchronize as sessions are not
             // thread safe
```",3,3,3,4
zeroshot-v1,fix a bug in assembleModelInheritance,"File: maven-core/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java
Status: modified
```diff
@@ -159,6 +159,12 @@ public void assembleModelInheritance( Model child, Model parent )
             }
         }
 
+        // ciManagement
+        if ( child.getCiManagement() == null )
+        {
+            child.setCiManagement( parent.getCiManagement() );
+        }
+
         // developers
         if ( child.getDevelopers().size() == 0 )
         {
```",2,1,2,2
zeroshot-v1,add missing javadoc,"File: blocks/cocoon-xsp/cocoon-xsp-impl/src/main/java/org/apache/cocoon/components/language/markup/xsp/XSPSessionFwHelper.java
Status: modified
```diff
@@ -28,6 +28,7 @@
  * The <code>Session-fw</code> object helper
  *
  * @version $Id$
+ * @deprecated This class is deprecated and will be removed in future versions.
  * @since 2.1.1
  */
 public class XSPSessionFwHelper {
```",3,2,3,4
zeroshot-v1,remove author tag,"File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/CompilerMojo.java
Status: modified
```diff
@@ -23,8 +23,6 @@
  * @phase compile
  * @requiresDependencyResolution compile
  * @description Compiles application sources
- * @todo change debug parameter type to Boolean
- * @todo change staleMillis parameter type to Long
  */
 
 public class CompilerMojo
```",2,1,3,2
zeroshot-v1,Add missing import,"File: src/testcases/org/apache/tools/tar/TarRoundTripTest.java
Status: modified
```diff
@@ -54,6 +54,7 @@
 package org.apache.tools.tar;
 
 import java.io.IOException;
+import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import junit.framework.TestCase;
 
```",2,1,2,2
zeroshot-v1,"Refactor: Prevent multiple closings of files in BigTableScanner This commit introduces a new variable `isClosed` in the `BigTableScanner` class to track whether the data and index files have been closed. The `close()` method is modified to check this variable before closing the files. This change prevents the files from being closed multiple times, which could potentially lead to a NullPointerException as reported in issue CASSANDRA-9531.","File: src/java/org/apache/cassandra/io/sstable/format/big/BigTableScanner.java
Status: modified
```diff
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.util.*;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.Ordering;
@@ -51,6 +52,7 @@
 
 public class BigTableScanner implements ISSTableScanner
 {
+    private AtomicBoolean isClosed = new AtomicBoolean(false);
     protected final RandomAccessReader dfile;
     protected final RandomAccessReader ifile;
     public final SSTableReader sstable;
@@ -193,7 +195,8 @@ private void seekToCurrentRangeStart()
 
     public void close() throws IOException
     {
-        FileUtils.close(dfile, ifile);
+        if (isClosed.compareAndSet(false, true))
+            FileUtils.close(dfile, ifile);
     }
 
     public long getLengthInBytes()
```",4,4,3,4
zeroshot-v1,Refactor: Remove print statement from AccessLogSamplerGui Removed a print statement from the createTestElement() method in the AccessLogSamplerGui class. This is a part of code cleanup and does not affect the functionality of the class. The AccessLogSamplerGui class is used for configuring and managing an AccessLogSampler in JMeter.,"File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/AccessLogSamplerGui.java
Status: modified
```diff
@@ -162,7 +162,6 @@ public String getStaticLabel()
     public TestElement createTestElement()
     {
     	if (SAMPLER == null){
-    		System.out.println(""the sampler was null, therefore we create a new one"");
 			SAMPLER = new AccessLogSampler();
 			SAMPLER.setSamplerGUI(this);
 			this.configureTestElement(SAMPLER);
```",3,3,3,4
zeroshot-v1,Refactor: Update documentation in JvmRouteBinderValve.java This commit updates the documentation in the JvmRouteBinderValve.java file. The instructions on how to add this Valve to the configuration have been updated. The changes do not affect the functionality of the code.,"File: java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
Status: modified
```diff
@@ -50,25 +50,14 @@
  * restarted!
  *
  * <p>
- * Add this Valve to your host definition at conf/server.xml .
- *
- * Since 5.5.10 as direct cluster valve:<br>
+ * Add this Valve to your cluster definition at conf/server.xml .
  *
  * <pre>
  *  &lt;Cluster&gt;
  *  &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot; /&gt;
  *  &lt;/Cluster&gt;
  * </pre>
  *
- * <br>
- * Before 5.5.10 as Host element:<br>
- *
- * <pre>
- *  &lt;Host&gt;
- *  &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot; /&gt;
- *  &lt;/Host&gt;
- * </pre>
- *
  * <em>A Trick:</em><br>
  * You can enable this mod_jk turnover mode via JMX before you drop a node to
  * all backup nodes! Set enable true on all JvmRouteBinderValve backups, disable
```",3,3,2,3
zeroshot-v1,master is not accessible via getComputer,"File: labs/jenkins/src/test/java/org/jclouds/jenkins/v1/features/ComputerClientLiveTest.java
Status: modified
```diff
@@ -39,8 +39,10 @@ public void testGetComputerView(){
       assertNotNull(view.getDisplayName());
       for (Computer computerFromView : view.getComputers()) {
          assertNotNull(computerFromView.getDisplayName());
-         Computer computerFromGetRequest = getClient().getComputer(computerFromView.getDisplayName());
-         assertEquals(computerFromGetRequest, computerFromView);
+         if (!""master"".equals(computerFromView.getDisplayName())) {
+            Computer computerFromGetRequest = getClient().getComputer(computerFromView.getDisplayName());
+            assertEquals(computerFromGetRequest, computerFromView);
+         }
       }
    }
 
```",2,1,2,3
zeroshot-v1,add missing javadoc,"File: maven-core/src/main/java/org/apache/maven/plugin/PluginException.java
Status: modified
```diff
@@ -21,6 +21,7 @@
  *
  * @author <a href=""mailto:carlos@apache.org"">Carlos Sanchez</a>
  * @version $Id$
+ * @since 2.0.5
  */
 public abstract class PluginException
     extends Exception
```",2,1,3,2
zeroshot-v1,generateQueueName now removes colons as well as semi-colons,"File: qpid/java/client/src/org/apache/qpid/client/protocol/AMQProtocolSession.java
Status: modified
```diff
@@ -385,8 +385,8 @@ protected String generateQueueName()
         {
             id = _queueId++;
         }
-        //get rid of / and ; from address for spec conformance
-        String localAddress = StringUtils.replaceChars(_minaProtocolSession.getLocalAddress().toString(),""/;"","""");
+        //get rid of / and : and ; from address for spec conformance
+        String localAddress = StringUtils.replaceChars(_minaProtocolSession.getLocalAddress().toString(),""/;:"","""");
         return ""tmp_"" + localAddress + ""_"" + id;
     }
 
```",3,3,3,4
zeroshot-v1,"Call the addNormalized(RDN) method which is much faster than the add(RDN), as the RDN is not normalized again. ","File: core/src/main/java/org/apache/directory/server/core/referral/ReferralLut.java
Status: modified
```diff
@@ -99,7 +99,7 @@ public LdapDN getFarthestReferralAncestor( LdapDN dn )
         
         for ( int ii = 0; ii < dn.size(); ii++ )
         {
-            farthest.add( dn.getRdn( ii ) );
+            farthest.addNormalized( dn.getRdn( ii ) );
 
             // do not return dn if it is the farthest referral
             if ( isReferral( farthest ) && ( farthest.size() != dn.size() ) )
```",3,2,2,3
zeroshot-v1,Implement debug logging in InternalNioInputBuffer. Log what we got with the first read.,"File: java/org/apache/coyote/http11/InternalNioInputBuffer.java
Status: modified
```diff
@@ -39,6 +39,11 @@
  */
 public class InternalNioInputBuffer extends AbstractInputBuffer {
 
+    /**
+     * Logger.
+     */
+    private static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(InternalNioInputBuffer.class);
 
     // -------------------------------------------------------------- Constants
 
@@ -228,6 +233,11 @@ public boolean parseRequestLine(boolean useAvailableDataOnly)
                 if ( readSocket(true, false)==0 ) return false;
             }
             parsingRequestLinePhase = 2;
+            if (log.isDebugEnabled()) {
+                log.debug(""Received [""
+                        + new String(buf, pos, lastValid - pos, ""ISO-8859-1"")
+                        + ""]"");
+            }
         }
         if ( parsingRequestLinePhase == 2 ) {
             //
```",3,2,3,4
zeroshot-v1,Simply subclassing did not work as expected. Made a copy now.,"File: src/java/org/apache/fop/fo/extensions/OldExtensionElementMapping.java
Status: modified
```diff
@@ -18,10 +18,15 @@
 
 package org.apache.fop.fo.extensions;
 
+import java.util.HashMap;
+
+import org.apache.fop.fo.ElementMapping;
+import org.apache.fop.fo.UnknownXMLObj;
+
 /**
- * Element mapping for the old FOP extension namespace. It is simply mapped to the new namespace.
+ * Element mapping for the old FOP extension namespace.
  */
-public class OldExtensionElementMapping extends ExtensionElementMapping {
+public class OldExtensionElementMapping extends ElementMapping {
     
     /** The old FOP extension namespace URI (FOP 0.20.5 and earlier) */
     public static final String URI = ""http://xml.apache.org/fop/extensions"";
@@ -33,4 +38,14 @@ public OldExtensionElementMapping() {
         namespaceURI = URI;
     }
 
+    /**
+     * Initialize the data structures.
+     */
+    protected void initialize() {
+        if (foObjs == null) {
+            foObjs = new HashMap();
+            foObjs.put(""outline"", new UnknownXMLObj.Maker(URI));
+            foObjs.put(""label"", new UnknownXMLObj.Maker(URI));
+        }
+    }
 }
```",2,1,1,2
zeroshot-v1,"Style: Add newline at end of NativeCommand.java This commit adds a newline at the end of the NativeCommand.java file. The change is purely stylistic and does not affect the functionality of the NativeCommand class, which executes system commands with specified environment variables and working directory.","File: src/protocol/native/org/apache/jmeter/protocol/system/NativeCommand.java
Status: modified
```diff
@@ -48,4 +48,4 @@ public NativeCommand(File directory, Map<String, String> env, String stdin, Stri
         super(directory, 0L, 100, env, stdin, stdout, stderr);
     }
 
-}
\ No newline at end of file
+}
```",3,3,3,4
zeroshot-v1,Assumed that the timstamp was always at the end,"File: src/core/org/apache/jmeter/visualizers/SamplingStatCalculator.java
Status: modified
```diff
@@ -224,7 +224,7 @@ public Sample getSample(int index) {
 	}
 
 	private long getEndTime(SampleResult res) {
-		long endTime = res.getTimeStamp();
+		long endTime = res.getEndTime();
 		long lastTime = getCurrentSample().getEndTime();
 		if (res.isStampedAtStart()) {
 			endTime += res.getTime();
@@ -364,4 +364,4 @@ public Number getPercentPoint(float percent) {
 	public double getStandardDeviation() {
 		return calculator.getStandardDeviation();
 	}
-} // class RunningSample
+}
```",2,1,1,2
zeroshot-v1,"Refactor: Change condition order in while loop of makeProductIdList method The condition order in the while loop of the makeProductIdList method in the ProductSearch class has been changed. This is a refactor and does not affect the overall functionality of the method or the class. The method is used to create a list of unique product IDs from the given EntityListIterator, handling pagination and avoiding duplicates. The class provides utilities for product search based on various constraints like categories, features, and keywords.","File: applications/product/src/org/ofbiz/product/product/ProductSearch.java
Status: modified
```diff
@@ -717,7 +717,7 @@ public ArrayList<String> makeProductIdList(EntityListIterator eli) {
                 productIds.add(searchResult.getString(""mainProductId""));
                 productIdSet.add(searchResult.getString(""mainProductId""));
 
-                while (((searchResult = (GenericValue) eli.next()) != null) && (maxResults == null || numRetreived < maxResults.intValue())) {
+                while ((maxResults == null || numRetreived < maxResults.intValue()) && ((searchResult = (GenericValue) eli.next()) != null)) {
                     String productId = searchResult.getString(""mainProductId"");
                     if (!productIdSet.contains(productId)) {
                         productIds.add(productId);
```",3,3,3,4
zeroshot-v1,fix PMapQuadTable delete,"File: jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java
Status: modified
```diff
@@ -95,12 +95,6 @@ public Stream<Quad> find(Node g, Node s, Node p, Node o) {
     /**
      * We descend through the nested {@link PMap}s building up {@link Stream}s of partial tuples from which we develop a
      * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.
-     *
-     * @param first the value in the first slot of the tuple
-     * @param second the value in the second slot of the tuple
-     * @param third the value in the third slot of the tuple
-     * @param fourth the value in the fourth slot of the tuple
-     * @return a <code>Stream</code> of tuples matching the pattern
      */
     @SuppressWarnings(""unchecked"") // Because of (Stream<Quad>) -- but why is that needed?
     private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {
@@ -157,6 +151,7 @@ protected TConsumer4<Node> add() {
         };
     }
 
+    @Override
     protected TConsumer4<Node> delete() {
         return (first, second, third, fourth) -> {
             debug(""Removing four-tuple: {} {} {} {} ."", first, second, third, fourth);
```


File: jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java
Status: modified
```diff
@@ -94,11 +94,6 @@ public Stream<Triple> find(final Node s, final Node p, final Node o) {
     /**
      * We descend through the nested {@link PMap}s building up {@link Stream}s of partial tuples from which we develop a
      * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.
-     *
-     * @param first the value in the first slot of the tuple
-     * @param second the value in the second slot of the tuple
-     * @param third the value in the third slot of the tuple
-     * @return a <code>Stream</code> of tuples matching the pattern
      */
     @SuppressWarnings(""unchecked"") // Because of (Stream<Triple>) -- but why is that needed?
     private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {
```",2,1,1,2
zeroshot-v1,fix a bug in SourceUtil,"File: src/java/org/apache/lenya/cms/cocoon/source/SourceUtil.java
Status: modified
```diff
@@ -30,7 +30,7 @@
 
 import org.apache.avalon.framework.service.ServiceException;
 import org.apache.avalon.framework.service.ServiceManager;
-import org.apache.commons.io.CopyUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.output.ByteArrayOutputStream;
 import org.apache.excalibur.source.ModifiableSource;
 import org.apache.excalibur.source.Source;
@@ -75,10 +75,10 @@ public static void copy(Source source, ModifiableSource destination, boolean use
 
             if (useBuffer) {
                 final ByteArrayOutputStream sourceBos = new ByteArrayOutputStream();
-                CopyUtils.copy(sourceInputStream, sourceBos);
-                CopyUtils.copy(sourceBos.toByteArray(), destOutputStream);
+                IOUtils.copy(sourceInputStream, sourceBos);
+                IOUtils.write(sourceBos.toByteArray(), destOutputStream);
             } else {
-                CopyUtils.copy(sourceInputStream, destOutputStream);
+                IOUtils.copy(sourceInputStream, destOutputStream);
             }
         } finally {
             if (destOutputStream != null) {
```",2,1,1,2
zeroshot-v1,remove unused parameter,"File: ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineMetricCacheTest.java
Status: modified
```diff
@@ -419,7 +419,7 @@ public void testTimelineMetricCachePrecisionUpdates() throws Exception {
     long year = 365 * day;
 
     //Original Values
-    Map<String, TimelineMetric> valueMap = new HashMap();
+    Map<String, TimelineMetric> valueMap = new HashMap<String, TimelineMetric>();
     TimelineMetric timelineMetric = new TimelineMetric();
     timelineMetric.setMetricName(""cpu_user"");
     timelineMetric.setAppId(""app1"");
```",3,2,3,3
zeroshot-v1,remove unused code,"File: wicket/src/java/wicket/protocol/http/MockWebApplication.java
Status: modified
```diff
@@ -115,12 +115,6 @@ public class MockWebApplication extends WebApplication
 	/** Session. */
 	private WebSession wicketSession;
 
-	/**
-	 * In case of an RuntimeException, Wicket usually renders a error page. In
-	 * some test cases however it is useful to get the exception instead.
-	 */
-	private boolean rethrowRuntimeException = false;
-
 	/**
 	 * Create the mock http application that can be used for testing.
 	 * 
@@ -373,17 +367,6 @@ public void setupRequestAndResponse()
 		wicketResponse = new WebResponse(servletResponse);
 	}
 
-	/**
-	 * If true, runtime exception will not be handled by Wicket. Instead the
-	 * exception will be rethrown.
-	 * 
-	 * @param enable
-	 */
-	public void setRethrowRuntimeException(boolean enable)
-	{
-		this.rethrowRuntimeException = enable;
-	}
-
 	/**
 	 * Gets the parameters to be set on the next request.
 	 * 
```


File: wicket/src/test/wicket/markup/parser/filter/HeaderSectionTest.java
Status: modified
```diff
@@ -44,7 +44,6 @@ public class HeaderSectionTest extends TestCase
 	protected void setUp() throws Exception
 	{
 		application = new MockWebApplication(null);
-		application.setRethrowRuntimeException(true);
 	}
 	
 	/**
```",2,1,3,3
zeroshot-v1,Feat: Add constructor method to Reflection2 class This commit adds a new method `constructor` to the `Reflection2` class. This method returns an `Invokable` object that reflects a constructor present in the `TypeToken` type.,"File: core/src/main/java/org/jclouds/reflect/Reflection2.java
Status: modified
```diff
@@ -71,6 +71,23 @@ public static <T> TypeToken<T> typeToken(Class<T> in) {
       return (TypeToken<T>) get(typeTokenForClass, checkNotNull(in, ""class""));
    }
 
+   /**
+    * returns an {@link Invokable} object that reflects a constructor present in the {@link TypeToken} type.
+    * 
+    * @param ownerType
+    *           corresponds to {@link Invokable#getOwnerType()}
+    * @param parameterTypes
+    *           corresponds to {@link Constructor#getParameterTypes()}
+    * 
+    * @throws IllegalArgumentException
+    *            if the constructor doesn't exist or a security exception occurred
+    */
+   @SuppressWarnings(""unchecked"")
+   public static <T> Invokable<T, T> constructor(Class<T> ownerType, Class<?>... parameterTypes) {
+      return (Invokable<T, T>) get(constructorForParams, new TypeTokenAndParameterTypes(typeToken(ownerType),
+            parameterTypes));
+   }
+
    /**
     * return all constructors present in the class as {@link Invokable}s.
     * 
```",4,3,3,4
zeroshot-v1,"Fix: Update default ciphers in AbstractEndpoint The default ciphers used in the AbstractEndpoint class, which manages server socket connections, have been updated. The previous cipher string ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5"" has been replaced with ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA"". This change is part of a fix to improve the security of the server socket connections managed by the AbstractEndpoint class.","File: java/org/apache/tomcat/util/net/AbstractEndpoint.java
Status: modified
```diff
@@ -52,7 +52,7 @@ public abstract class AbstractEndpoint<S> {
 
     // -------------------------------------------------------------- Constants
 
-    protected static final String DEFAULT_CIPHERS = ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5"";
+    protected static final String DEFAULT_CIPHERS = ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA"";
 
     protected static final StringManager sm = StringManager.getManager(
             AbstractEndpoint.class.getPackage().getName());
```",4,4,3,4
zeroshot-v1,remove unused field,"File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java
Status: modified
```diff
@@ -21,7 +21,6 @@
 
 import javax.swing.JPanel;
 
-import org.apache.jmeter.config.gui.LoginConfigGui;
 import org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui;
 import org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler;
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
@@ -41,7 +40,6 @@
  ***************************************/
 
 public class LdapExtTestSamplerGui extends AbstractSamplerGui {
-    private LoginConfigGui loginPanel;
     private LdapExtConfigGui ldapDefaultPanel;
 
     /****************************************
```",2,2,3,3
zeroshot-v1,import clean up,"File: src/blocks/woody/java/org/apache/cocoon/woody/samples/Sex.java
Status: modified
```diff
@@ -52,14 +52,13 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.List;
 import java.util.Locale;
 
 import org.apache.cocoon.woody.datatype.Enum;
 
 /**
  * Description of Sex.
- * @version CVS $Id: Sex.java,v 1.3 2003/11/07 22:04:38 ugo Exp $
+ * @version CVS $Id: Sex.java,v 1.4 2003/11/08 14:27:03 joerg Exp $
  */
 public class Sex implements Enum {
 
```",2,1,1,2
zeroshot-v1,fix npe in ProductStoreWorker,"File: applications/product/src/org/ofbiz/product/store/ProductStoreWorker.java
Status: modified
```diff
@@ -76,8 +76,8 @@ public static GenericValue getProductStore(ServletRequest request) {
 
     public static String getProductStoreId(ServletRequest request) {
         HttpServletRequest httpRequest = (HttpServletRequest) request;
-        HttpSession session = httpRequest.getSession();
-        if (session.getAttribute(""productStoreId"") != null) {
+        HttpSession session = httpRequest.getSession(false);
+        if (session != null && session.getAttribute(""productStoreId"") != null) {
             return (String) session.getAttribute(""productStoreId"");
         } else {
             GenericValue webSite = CatalogWorker.getWebSite(request);
```",3,2,3,3
zeroshot-v1,remove unused method,"File: container/openejb-activemq4/src/test/java/org/apache/openejb/core/mdb/JmsProxyTest.java
Status: modified
```diff
@@ -24,8 +24,6 @@
 
 public class JmsProxyTest extends JmsTest {
 
-    // set up in the parent class
-
     public void testProxy() throws Exception {
         // create reciever object
         JmsProxyTest.TestObject testObject = new JmsProxyTest.TestObject(""foo"");
```",3,2,4,3
zeroshot-v1,"Refactor: Simplify comments and override method in PMapQuadTable and PMapTripleTable This commit simplifies the comments in the PMapQuadTable and PMapTripleTable classes and overrides a method. The changes do not affect the functionality of the classes, which are used for storing and managing quads and triples using nested persistent maps. The refactor aims to improve the structure and design of the code without changing its behavior.","File: jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java
Status: modified
```diff
@@ -95,12 +95,6 @@ public Stream<Quad> find(Node g, Node s, Node p, Node o) {
     /**
      * We descend through the nested {@link PMap}s building up {@link Stream}s of partial tuples from which we develop a
      * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.
-     *
-     * @param first the value in the first slot of the tuple
-     * @param second the value in the second slot of the tuple
-     * @param third the value in the third slot of the tuple
-     * @param fourth the value in the fourth slot of the tuple
-     * @return a <code>Stream</code> of tuples matching the pattern
      */
     @SuppressWarnings(""unchecked"") // Because of (Stream<Quad>) -- but why is that needed?
     private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {
@@ -157,6 +151,7 @@ protected TConsumer4<Node> add() {
         };
     }
 
+    @Override
     protected TConsumer4<Node> delete() {
         return (first, second, third, fourth) -> {
             debug(""Removing four-tuple: {} {} {} {} ."", first, second, third, fourth);
```


File: jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java
Status: modified
```diff
@@ -94,11 +94,6 @@ public Stream<Triple> find(final Node s, final Node p, final Node o) {
     /**
      * We descend through the nested {@link PMap}s building up {@link Stream}s of partial tuples from which we develop a
      * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.
-     *
-     * @param first the value in the first slot of the tuple
-     * @param second the value in the second slot of the tuple
-     * @param third the value in the third slot of the tuple
-     * @return a <code>Stream</code> of tuples matching the pattern
      */
     @SuppressWarnings(""unchecked"") // Because of (Stream<Triple>) -- but why is that needed?
     private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {
```",3,3,3,4
zeroshot-v1,"Feat: Add getFile and getFiles methods to DefaultDocument.java This commit introduces two new methods to the DefaultDocument.java file. The getFile method returns the file associated with a specific area and language in the publication, and the getFiles method returns an array of files for a specific area in the publication with the given ID. These methods enhance the functionality of the DefaultDocument class by providing more granular access to the files associated with a document in a publication.","File: src/java/org/apache/lenya/cms/publication/DefaultDocument.java
Status: modified
```diff
@@ -43,6 +43,8 @@
  */
 package org.apache.lenya.cms.publication;
 
+import java.io.File;
+
 /**
  * A typical CMS document.
  * 
@@ -75,5 +77,25 @@ public String getId() {
     public Publication getPublication() {
         return publication;
     }
+    
+    /**
+     * Returns the file for this document in a certain area and language.
+     * @param area The area.
+     * @param language The language.
+     * @return A file object.
+     */
+    public File getFile(String area, String language) {
+        return getPublication().getPathMapper().getFile(
+            getPublication(), area, getId(), language);
+    }
+    
+    /**
+     * Returns the files for this document in a certain area and all languages.
+     * @param area The area.
+     * @return A file object.
+     */
+    public File[] getFiles(String area) {
+        return getPublication().getPathMapper().getFiles(getPublication(), area, getId());
+    }
 
 }
```",3,3,2,3
zeroshot-v1,"Refactor: Remove unused `configClass` variable in `HostConfig` The `configClass` variable and its getter and setter methods were removed from the `HostConfig` class. This class configures properties of a host and its associated contexts, and manages their lifecycle events. The removal of the `configClass` variable and its methods does not affect the functionality of the `HostConfig` class.","File: java/org/apache/catalina/startup/HostConfig.java
Status: modified
```diff
@@ -81,12 +81,6 @@ public class HostConfig
     // ----------------------------------------------------- Instance Variables
 
 
-    /**
-     * The Java class name of the Context configuration class we should use.
-     */
-    protected String configClass = ""org.apache.catalina.startup.ContextConfig"";
-
-
     /**
      * The Java class name of the Context implementation we should use.
      */
@@ -162,28 +156,6 @@ public class HostConfig
     // ------------------------------------------------------------- Properties
 
 
-    /**
-     * Return the Context configuration class name.
-     */
-    public String getConfigClass() {
-
-        return (this.configClass);
-
-    }
-
-
-    /**
-     * Set the Context configuration class name.
-     *
-     * @param configClass The new Context configuration class name.
-     */
-    public void setConfigClass(String configClass) {
-
-        this.configClass = configClass;
-
-    }
-
-
     /**
      * Return the Context implementation class name.
      */
```",3,3,3,4
zeroshot-v1,o dead import,"File: maven-project/src/main/java/org/apache/maven/profiles/manager/DefaultProfileManager.java
Status: modified
```diff
@@ -33,7 +33,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Properties;
 
 public class DefaultProfileManager
     implements ProfileManager
```",2,1,3,2
zeroshot-v1,Refactor: Remove outdated comments in CompilerMojo.java The comments about changing the debug parameter type to Boolean and changing the staleMillis parameter type to Long were removed from the CompilerMojo.java file. These comments were outdated and no longer relevant to the current state of the code.,"File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/CompilerMojo.java
Status: modified
```diff
@@ -23,8 +23,6 @@
  * @phase compile
  * @requiresDependencyResolution compile
  * @description Compiles application sources
- * @todo change debug parameter type to Boolean
- * @todo change staleMillis parameter type to Long
  */
 
 public class CompilerMojo
```",3,3,3,4
zeroshot-v1,Fix broken Javadoc,"File: java/org/apache/tomcat/jni/SSL.java
Status: modified
```diff
@@ -347,7 +347,7 @@ public static native long newBIO(long pool, BIOCallback callback)
      * {@link #SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION} and tcnative
      * supports that flag.</i>
      *
-     * @param Bitwise-OR of all SSL_OP_* to test.
+     * @param op Bitwise-OR of all SSL_OP_* to test.
      *
      * @return true if all SSL_OP_* are supported by OpenSSL library.
      */
```",2,1,2,2
zeroshot-v1,quick fix for Ant.java use of property in Ant#reinit,"File: src/main/org/apache/tools/ant/ComponentHelper.java
Status: modified
```diff
@@ -434,7 +434,15 @@ public Hashtable getAntTypeTable() {
      */
     public Task createTask(String taskType) throws BuildException {
         Task task=createNewTask(taskType);
-        if(task!=null) {
+        if (task == null && taskType.equals(""property"")) {
+            // quick fix for Ant.java use of property before
+            // initializeing the project
+            addTaskDefinition(""property"",
+                              org.apache.tools.ant.taskdefs.Property.class);
+            task = createNewTask(taskType);
+        }
+            
+        if (task != null) {
             addCreatedTask(taskType, task);
         }
         return task;
```",2,1,1,2
zeroshot-v1,Update OsgiSwaggerUiResolver.java Fixed indent,"File: rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/OsgiSwaggerUiResolver.java
Status: modified
```diff
@@ -48,8 +48,8 @@ public String findSwaggerUiRootInternal(String swaggerUiMavenGroupAndArtifact,
                 return null;
             }
             if (bundle.getState() != Bundle.ACTIVE) {
-				bundle.start();
-			}
+                bundle.start();
+            }
             String[] locations = swaggerUiMavenGroupAndArtifact == null ? DEFAULT_LOCATIONS
                 : new String[]{""mvn:"" + swaggerUiMavenGroupAndArtifact + ""/"",
                                ""wrap:mvn:"" + swaggerUiMavenGroupAndArtifact + ""/""};
```",2,1,3,2
zeroshot-v1,Suppress serialization warnings where applicable.,"File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Status: modified
```diff
@@ -63,9 +63,11 @@ public final class StatusLogger extends AbstractLogger {
     private final SimpleLogger logger;
 
     private final Collection<StatusListener> listeners = new CopyOnWriteArrayList<StatusListener>();
+    @SuppressWarnings(""NonSerializableFieldInSerializableClass"") // ReentrantReadWriteLock is Serializable
     private final ReadWriteLock listenersLock = new ReentrantReadWriteLock();
 
     private final Queue<StatusData> messages = new BoundedQueue<StatusData>(MAX_ENTRIES);
+    @SuppressWarnings(""NonSerializableFieldInSerializableClass"") // ReentrantLock is Serializable
     private final Lock msgLock = new ReentrantLock();
 
     private int listenersLevel;
```",3,2,3,4
zeroshot-v1,Fix: Ensure correct setup of broker configuration in ActiveMQResourceAdapter This commit adds a trim() method to the brokerXmlConfig string before checking if it's empty in the start method of the ActiveMQResourceAdapter.java file. This change ensures that the broker configuration is set up correctly even when the brokerXmlConfig string contains only whitespace characters.,"File: container/openejb-core/src/main/java/org/apache/openejb/resource/activemq/ActiveMQResourceAdapter.java
Status: modified
```diff
@@ -90,7 +90,7 @@ public void start(final BootstrapContext bootstrapContext) throws ResourceAdapte
         }
 
         // prefix server uri with 'broker:' so our broker factory is used
-        if (brokerXmlConfig != null && !brokerXmlConfig.isEmpty()) {
+        if (brokerXmlConfig != null && !brokerXmlConfig.trim().isEmpty()) {
 
             try {
 
```",3,3,3,4
zeroshot-v1,add Visualizer isStats,"File: src/core/org/apache/jmeter/visualizers/Visualizer.java
Status: modified
```diff
@@ -38,4 +38,11 @@ public interface Visualizer
      * the visualizer about the arrival of a new sample.
      */
     public void add(SampleResult sample);
+    
+    /**
+     * This method is used to indicate a visualizer generates
+     * statistics.
+     * @return
+     */
+    public boolean isStats();
 }
```


File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Status: modified
```diff
@@ -122,6 +122,7 @@ public abstract class AbstractVisualizer
     SampleSaveConfiguration saveConfig;
     
     protected ResultCollector collector = new ResultCollector();
+	private boolean isStats = true;
 
     public AbstractVisualizer()
     {
@@ -151,6 +152,10 @@ public void actionPerformed(ActionEvent e)
                 
     }
 
+	public boolean isStats(){
+        return isStats;
+	}
+
     /**
      * Gets the checkbox which selects whether or not only errors should be
      * logged.  Subclasses don't normally need to worry about this checkbox,
```",2,1,1,2
zeroshot-v1,"Fix: Correct typo in comment in NodeFormatterBase Corrected a typo in the comment of the `formatLiteral` method in the `NodeFormatterBase` class. The word ""outptu"" has been changed to ""output"".","File: jena-arq/src/main/java/org/apache/jena/riot/out/NodeFormatterBase.java
Status: modified
```diff
@@ -66,7 +66,7 @@ public void formatLiteral(AWriter w, Node n)
             // RDF 1.0, simple literal.
             formatLitString(w, lex) ;
         } else if ( JenaRuntime.isRDF11 && dt.equals(XSDDatatype.XSDstring) ) {
-            // RDF 1.1, xsd:string - outptu as short string.
+            // RDF 1.1, xsd:string - output as short string.
             formatLitString(w, lex) ;
         } else {
             // Datatype, no language tag, not short string.
```",3,3,3,4
zeroshot-v1,Refactor: Enhance getApplicationCertificates method in Client class The getApplicationCertificates method in the Client class has been refactored to return a list of application certificates that are eagerly fetched and ordered as per their insertion in the database. The @Lob annotation has been added to indicate that the application certificates are stored as a large object in the database.,"File: rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/Client.java
Status: modified
```diff
@@ -28,6 +28,7 @@
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
 import javax.persistence.Id;
+import javax.persistence.Lob;
 import javax.persistence.ManyToOne;
 import javax.persistence.MapKeyColumn;
 import javax.persistence.OneToOne;
@@ -66,7 +67,7 @@ public class Client implements Serializable {
     private String homeRealm;
     private boolean registeredDynamically;
     private String tokenEndpointAuthMethod;
-    
+
     public Client() {
 
     }
@@ -346,6 +347,7 @@ public void setRegisteredAudiences(List<String> registeredAudiences) {
 
     @ElementCollection(fetch = FetchType.EAGER)
     @OrderColumn
+    @Lob
     public List<String> getApplicationCertificates() {
         return applicationCertificates;
     }
```",3,3,3,4
zeroshot-v1,added default list op,"File: labs/elb/src/main/java/org/jclouds/elb/ELB.java
Status: modified
```diff
@@ -39,5 +39,9 @@ public String toString() {
          }
       });
    }
+   
+   public static Iterable<LoadBalancer> list(LoadBalancerClient loadBalancerClient) {
+      return list(loadBalancerClient, new ListLoadBalancersOptions());
+   }
 
 }
```",3,2,2,3
zeroshot-v1,jms sender - added a simple null check,"File: java/modules/transports/src/main/java/org/apache/synapse/transport/jms/JMSSender.java
Status: modified
```diff
@@ -192,6 +192,10 @@ public void sendMessage(MessageContext msgCtx, String targetAddress,
                 }
             }
 
+            if(session == null) {
+               handleException(""Could not create JMS session"");
+            }
+            
             // now we are going to use the JMS session, but if this was a session from a
             // defined JMS connection factory, we need to synchronize as sessions are not
             // thread safe
```",3,2,3,3
zeroshot-v1,remove unnecessary cast,"File: src/java/org/apache/cassandra/db/compaction/CompactionManager.java
Status: modified
```diff
@@ -582,8 +582,7 @@ private void doCleanupCompaction(ColumnFamilyStore cfs, Collection<SSTableReader
             SSTableReader newSstable = null;
 
             logger.info(""Cleaning up "" + sstable);
-            // Calculate the expected compacted filesize
-            long expectedRangeFileSize = cfs.getExpectedCompactedFileSize(Arrays.asList(sstable), OperationType.CLEANUP);
+
             File compactionFileLocation = cfs.directories.getDirectoryForNewSSTables();
             if (compactionFileLocation == null)
                 throw new IOException(""disk full"");
```",2,1,3,3
zeroshot-v1,o Fixing a small bug that would cause a NPE if a plugin doesn't contain any mojos.,"File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGenerator.java
Status: modified
```diff
@@ -76,10 +76,13 @@ public void execute( File destinationDirectory, PluginDescriptor pluginDescripto
             
             w.startElement( ""mojos"" );
 
-            for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
+            if ( pluginDescriptor.getMojos() != null )
             {
-                MojoDescriptor descriptor = (MojoDescriptor) it.next();
-                processMojoDescriptor( descriptor, w );
+                for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
+                {
+                    MojoDescriptor descriptor = (MojoDescriptor) it.next();
+                    processMojoDescriptor( descriptor, w );
+                }
             }
 
             w.endElement();
@@ -362,4 +365,4 @@ public void element( XMLWriter w, String name, String value )
 
         w.endElement();
     }
-}
\ No newline at end of file
+}
```",3,2,3,4
zeroshot-v1,Style: Remove author information and update version in SitemapParameters.java The author information was removed from the SitemapParameters.java file and the version was updated. This change does not affect the functionality of the code.,"File: src/java/org/apache/cocoon/sitemap/SitemapParameters.java
Status: modified
```diff
@@ -23,8 +23,7 @@
 /**
  * Extension to the Avalon Parameters
  *
- * @author <a href=""mailto:cziegeler@apache.org"">Carsten Ziegeler</a>
- * @version CVS $Id: SitemapParameters.java,v 1.2 2004/03/08 12:07:39 cziegeler Exp $
+ * @version CVS $Id: SitemapParameters.java,v 1.3 2004/03/09 11:24:43 cziegeler Exp $
  */
 public class SitemapParameters extends Parameters {
     
```",3,2,3,4
zeroshot-v1,remove unused code,"File: rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java
Status: modified
```diff
@@ -252,7 +252,7 @@ private void validateSubjectConfirmation(
         // Check address
         if (subjectConfData.getAddress() != null && clientAddress != null
             && !subjectConfData.getAddress().equals(clientAddress)) {
-            LOG.fine(""Subject Conf Data address "" + subjectConfData.getAddress() + "" does match""
+            LOG.fine(""Subject Conf Data address "" + subjectConfData.getAddress() + "" does not match""
                      + "" client address "" + clientAddress);
             throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, ""invalidSAMLsecurity"");
         }
```",2,1,2,3
zeroshot-v1,Fix property handling on Windows,"File: container/openejb-core/src/main/java/org/apache/openejb/util/SuperProperties.java
Status: modified
```diff
@@ -58,7 +58,7 @@
  * @see java.lang.System#getProperties
  */
 public class SuperProperties extends Properties {
-    private static final String LINE_SEPARATOR = System.getProperty(""line.separator"");
+    private static final String LINE_SEPARATOR = ""\n"";
 
     private static final String PROP_DTD_NAME = ""http://java.sun.com/dtd/properties.dtd"";
 
```


File: container/openejb-core/src/test/java/org/apache/openejb/util/SuperPropertiesTest.java
Status: modified
```diff
@@ -351,7 +351,7 @@ public void testIndentDetection() throws Exception {
         assertEquals(2, properties.getCommentIndent());
     }
 
-    protected String store(Properties properties) throws IOException {
+    protected String store(Properties properties) throws IOException {        
         ByteArrayOutputStream out = new ByteArrayOutputStream();
         properties.store(out, null);
         return new String(out.toByteArray());
```",3,2,3,4
zeroshot-v1,"Fix: Remove redundant line in setExternalId method This commit removes a redundant line of code in the setExternalId method of the XDDFChart class. The removed line was attempting to add new external data and set its id, which is unnecessary and could potentially cause errors. This fix ensures that the setExternalId method functions as expected.","File: poi-ooxml/src/main/java/org/apache/poi/xddf/usermodel/chart/XDDFChart.java
Status: modified
```diff
@@ -1051,7 +1051,6 @@ public void setWorkbook(XSSFWorkbook workbook) {
      * @since POI 4.0.0
      */
     public void setExternalId(String id) {
-        getCTChartSpace().addNewExternalData().setId(id);
         CTChartSpace ctChartSpace = getCTChartSpace();
         CTExternalData externalData = ctChartSpace.isSetExternalData()
                 ? ctChartSpace.getExternalData()
```",3,3,3,4
zeroshot-v1,Use Map instead of HashMap interface,"File: src/org/apache/fop/render/AbstractRenderer.java
Status: modified
```diff
@@ -1,6 +1,6 @@
 /*
  * $Id$
- * Copyright (C) 2001-2002 The Apache Software Foundation. All rights reserved.
+ * Copyright (C) 2001-2003 The Apache Software Foundation. All rights reserved.
  * For details on use and redistribution please refer to the
  * LICENSE file included with these sources.
  */
@@ -9,7 +9,7 @@
 // Java
 import java.awt.geom.Rectangle2D;
 import java.io.IOException;
-import java.util.HashMap;
+import java.util.Map;
 import java.util.List;
 import java.util.Iterator;
 
@@ -66,7 +66,7 @@ public abstract class AbstractRenderer extends AbstractLogEnabled
     /**
      * renderer configuration
      */
-    protected HashMap options;
+    protected Map options;
 
     /**
      * block progression position
@@ -109,7 +109,7 @@ public void setUserAgent(FOUserAgent agent) {
     }
 
     /** @see org.apache.fop.render.Renderer */
-    public void setOptions(HashMap opt) {
+    public void setOptions(Map opt) {
         options = opt;
     }
 
```


File: src/org/apache/fop/render/Renderer.java
Status: modified
```diff
@@ -9,7 +9,7 @@
 // Java
 import java.io.OutputStream;
 import java.io.IOException;
-import java.util.HashMap;
+import java.util.Map;
 
 // FOP
 import org.apache.fop.apps.FOPException;
@@ -86,7 +86,7 @@ void stopRenderer()
      *
      * @param options  The Configuration for the renderer
      */
-    void setOptions(HashMap options);
+    void setOptions(Map options);
 
     /**
      * Set the producer of the rendering. If this method isn't called the
```",3,2,3,4
zeroshot-v1,Feat: Add isStats method to Visualizer and AbstractVisualizer This commit introduces a new method `isStats()` to the `Visualizer` interface and `AbstractVisualizer` class. This method is used to check if the statistics tracking is enabled. It returns true if statistics tracking is enabled. The `AbstractVisualizer` class is a base class for JMeter GUI components that display or log test results. The `Visualizer` interface is used to display and log test results in JMeter. The addition of the `isStats()` method enhances the functionality of these classes by allowing them to check the status of statistics tracking.,"File: src/core/org/apache/jmeter/visualizers/Visualizer.java
Status: modified
```diff
@@ -38,4 +38,11 @@ public interface Visualizer
      * the visualizer about the arrival of a new sample.
      */
     public void add(SampleResult sample);
+    
+    /**
+     * This method is used to indicate a visualizer generates
+     * statistics.
+     * @return
+     */
+    public boolean isStats();
 }
```


File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Status: modified
```diff
@@ -122,6 +122,7 @@ public abstract class AbstractVisualizer
     SampleSaveConfiguration saveConfig;
     
     protected ResultCollector collector = new ResultCollector();
+	private boolean isStats = true;
 
     public AbstractVisualizer()
     {
@@ -151,6 +152,10 @@ public void actionPerformed(ActionEvent e)
                 
     }
 
+	public boolean isStats(){
+        return isStats;
+	}
+
     /**
      * Gets the checkbox which selects whether or not only errors should be
      * logged.  Subclasses don't normally need to worry about this checkbox,
```",3,3,3,4
zeroshot-v1,Add some info and disable the async test (one CVE saved hehe).,"File: webapps/examples/WEB-INF/classes/websocket/echo/EchoAnnotation.java
Status: modified
```diff
@@ -24,6 +24,11 @@
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpoint;
 
+/**
+ * The three annotated echo endpoints can be used to test with Autobahn and
+ * the following command ""wstest -m fuzzingclient -s servers.json"". See the
+ * Autobahn documentation for setup and general information.
+ */
 @ServerEndpoint(""/websocket/echoAnnotation"")
 public class EchoAnnotation {
 
```


File: webapps/examples/WEB-INF/classes/websocket/echo/EchoAsyncAnnotation.java
Status: modified
```diff
@@ -25,7 +25,15 @@
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpoint;
 
-@ServerEndpoint(""/websocket/echoAsyncAnnotation"")
+/**
+ * The three annotated echo endpoints can be used to test with Autobahn and
+ * the following command ""wstest -m fuzzingclient -s servers.json"". See the
+ * Autobahn documentation for setup and general information.
+ *
+ * Note: This one is disabled by default since it allocates memory, and needs
+ * to be enabled back.
+ */
+//@ServerEndpoint(""/websocket/echoAsyncAnnotation"")
 public class EchoAsyncAnnotation {
 
     StringBuilder sb = null;
```


File: webapps/examples/WEB-INF/classes/websocket/echo/EchoStreamAnnotation.java
Status: modified
```diff
@@ -25,6 +25,11 @@
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpoint;
 
+/**
+ * The three annotated echo endpoints can be used to test with Autobahn and
+ * the following command ""wstest -m fuzzingclient -s servers.json"". See the
+ * Autobahn documentation for setup and general information.
+ */
 @ServerEndpoint(""/websocket/echoStreamAnnotation"")
 public class EchoStreamAnnotation {
 
```",2,2,1,2
zeroshot-v1,Fix generics and use of deprecated field,"File: java/org/apache/tomcat/buildutil/Txt2Html.java
Status: modified
```diff
@@ -81,10 +81,10 @@ public void execute()
         int count = 0;
         
         // Step through each file and convert.
-        Iterator iter = filesets.iterator();
+        Iterator<FileSet> iter = filesets.iterator();
         while( iter.hasNext() ) {
-            FileSet fs = (FileSet)iter.next();
-            DirectoryScanner ds = fs.getDirectoryScanner( project );
+            FileSet fs = iter.next();
+            DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             File basedir = ds.getBasedir();
             String[] files = ds.getIncludedFiles();
             for( int i = 0; i < files.length; i++ ) {
```",3,2,2,3
zeroshot-v1,"Style: Refactor comments in EchoXML.java This commit refactors the comments in the EchoXML.java file for better readability and understanding. A line of code has also been removed. The functionality of the EchoXML class, which writes XML content to a specified file or log, remains unchanged.","File: src/main/org/apache/tools/ant/taskdefs/EchoXML.java
Status: modified
```diff
@@ -32,10 +32,8 @@
 
 /**
  * Echo XML.
- * Notice how this is a ProjectComponent and not a task, which means that certain
- * well-known task operations (such as {@link org.apache.tools.ant.Task#getLocation()}) do not work.
  *
- * Other limitations
+ * Known limitations:
  * <ol>
  * <li>Currently no XMLNS support</li>
  * <li>Processing Instructions get ignored</li>
@@ -46,7 +44,6 @@
  */
 public class EchoXML extends XMLFragment {
 
-
     private File file;
     private boolean append;
     public static final String ERROR_NO_XML = ""No nested XML specified"";
```",3,2,3,4
zeroshot-v1,remove TestCase from MoviesTest,"File: examples/testing-transactions/src/test/java/org/superbiz/injection/tx/MoviesTest.java
Status: modified
```diff
@@ -28,8 +28,11 @@
 
 import static javax.ejb.TransactionAttributeType.REQUIRES_NEW;
 
+/**
+ * See the transaction-rollback example as it does the same thing
+ * via UserTransaction and shows more techniques for rollback 
+ */
 //START SNIPPET: code
-
 public class MoviesTest extends TestCase {
 
     @EJB
```",2,1,3,3
zeroshot-v1,remove unnecessary logging,"File: jena-fuseki/src/main/java/org/apache/jena/fuseki/servlets/SPARQL_Query.java
Status: modified
```diff
@@ -217,7 +217,7 @@ private void execute(String queryString, HttpAction action)
         Query query = null ;
         try {
             // NB syntax is ARQ (a superset of SPARQL)
-            query = QueryFactory.create(queryString, Syntax.syntaxARQ) ;
+            query = QueryFactory.create(queryString, ""http://example/query-base"", Syntax.syntaxARQ) ;
             queryStringLog = formatForLog(query) ;
             validateQuery(action, query) ;
         } catch (ActionErrorException ex) {
```",3,2,3,4
zeroshot-v1,Style: Add missing semicolon in ManagedConnection.java A semicolon was added at the end of a line in the ManagedConnection.java file to correct a syntax error. This change does not affect the functionality of the code.,"File: container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/managed/local/ManagedConnection.java
Status: modified
```diff
@@ -133,7 +133,7 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg
                         setAutoCommit(false);
                     } catch (final SQLException xae) { // we are alreay in a transaction so this can't be called from a user perspective - some XA DataSource prevents it in their code
                         final String message = ""Can't set auto commit to false cause the XA datasource doesn't support it, this is likely an issue"";
-                        final Logger logger = Logger.getInstance(LogCategory.OPENEJB_RESOURCE_JDBC, ManagedConnection.class)
+                        final Logger logger = Logger.getInstance(LogCategory.OPENEJB_RESOURCE_JDBC, ManagedConnection.class);
                         if (logger.isDebugEnabled()) { // we don't want to print the exception by default
                             logger.warning(message, xae);
                         } else {
```",3,3,3,4
zeroshot-v1,"Refactor: Replace CopyUtils with IOUtils in SourceUtil In the SourceUtil class, the CopyUtils.copy method has been replaced with IOUtils.copy and IOUtils.write methods. This change is made in the copy method which is responsible for copying data from a source to a destination, with an option to use a buffer for the operation. The functionality of the SourceUtil class remains the same, providing methods for handling and manipulating sources, such as checking existence, reading, and writing.","File: src/java/org/apache/lenya/cms/cocoon/source/SourceUtil.java
Status: modified
```diff
@@ -30,7 +30,7 @@
 
 import org.apache.avalon.framework.service.ServiceException;
 import org.apache.avalon.framework.service.ServiceManager;
-import org.apache.commons.io.CopyUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.output.ByteArrayOutputStream;
 import org.apache.excalibur.source.ModifiableSource;
 import org.apache.excalibur.source.Source;
@@ -75,10 +75,10 @@ public static void copy(Source source, ModifiableSource destination, boolean use
 
             if (useBuffer) {
                 final ByteArrayOutputStream sourceBos = new ByteArrayOutputStream();
-                CopyUtils.copy(sourceInputStream, sourceBos);
-                CopyUtils.copy(sourceBos.toByteArray(), destOutputStream);
+                IOUtils.copy(sourceInputStream, sourceBos);
+                IOUtils.write(sourceBos.toByteArray(), destOutputStream);
             } else {
-                CopyUtils.copy(sourceInputStream, destOutputStream);
+                IOUtils.copy(sourceInputStream, destOutputStream);
             }
         } finally {
             if (destOutputStream != null) {
```",4,4,3,4
zeroshot-v1,Refactor: Rename and change visibility of format method in Document.java The method `format` in `Document.java` has been renamed to `formatPageSequence` and its visibility has been changed from public to private. The method `foPageSequenceComplete` has been modified to call this new method instead of the old `format` method. The new method `formatPageSequence` is responsible for formatting a page sequence and adding it to the area tree.,"File: src/java/org/apache/fop/apps/Document.java
Status: modified
```diff
@@ -120,7 +120,7 @@ public Driver getDriver() {
     public void foPageSequenceComplete (FOTreeEvent event) throws FOPException {
         PageSequence pageSeq = event.getPageSequence();
         areaTree.addBookmarksToAreaTree();
-        format(pageSeq, areaTree);
+        formatPageSequence(pageSeq, areaTree);
     }
 
     /**
@@ -187,7 +187,8 @@ public FOInputHandler getFOInputHandler() {
      * @param areaTree the area tree to format this page sequence into
      * @throws FOPException if there is an error formatting the contents
      */
-    public void format(PageSequence pageSeq, AreaTree areaTree) throws FOPException {
+    private void formatPageSequence(PageSequence pageSeq, AreaTree areaTree) 
+            throws FOPException {
         Title title = null;
         if (pageSeq.getTitleFO() != null) {
             title = getTitleArea(pageSeq.getTitleFO());
```",4,3,3,4
zeroshot-v1,changed gogrid to not use ssh ctor,"File: providers/gogrid/src/test/java/org/jclouds/gogrid/GoGridLiveTestDisabled.java
Status: modified
```diff
@@ -354,8 +354,7 @@ public void testShellAccess() throws IOException {
 
       socketOpen.apply(socket);
 
-      SshClient sshClient = new SshjSshClient(new BackoffLimitedRetryHandler(), socket, 60000,
-               instanceCredentials.identity, instanceCredentials.credential, null);
+      SshClient sshClient = context.utils().injector().getInstance(SshClient.Factory.class).create(socket, instanceCredentials);
       sshClient.connect();
       String output = sshClient.exec(""df"").getOutput();
       assertTrue(output.contains(""Filesystem""),
```",3,1,2,3
zeroshot-v1,"Fix: Corrected date handling in testBug56688_4() In the method `testBug56688_4()`, the code for setting a date two months from now, converting that date to Excel format, and checking the value was uncommented. This change allows the method to test the bug 56688_4 more accurately by considering the date handling.","File: src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFBugs.java
Status: modified
```diff
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.util.Calendar;
 import java.util.List;
 
 import org.apache.poi.EncryptedDocumentException;
@@ -40,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.poifs.filesystem.POIFSFileSystem;
 import org.apache.poi.ss.formula.WorkbookEvaluator;
 import org.apache.poi.ss.formula.eval.ErrorEval;
+import org.apache.poi.ss.formula.eval.NumberEval;
 import org.apache.poi.ss.formula.eval.ValueEval;
 import org.apache.poi.ss.formula.functions.Function;
 import org.apache.poi.ss.usermodel.*;
@@ -1753,12 +1755,11 @@ public void testBug56688_3() {
     public void testBug56688_4() {
         XSSFWorkbook excel = XSSFTestDataSamples.openSampleWorkbook(""56688_4.xlsx"");
         
-//        Calendar calendar = Calendar.getInstance();
-//        calendar.add(Calendar.MONTH, 2);
-//        double excelDate = DateUtil.getExcelDate(calendar.getTime());
-//        NumberEval eval = new NumberEval(Math.floor(excelDate));
-//        checkValue(excel, eval.getStringValue() + "".0"");
-        checkValue(excel, ""41904.0"");
+        Calendar calendar = Calendar.getInstance();
+        calendar.add(Calendar.MONTH, 2);
+        double excelDate = DateUtil.getExcelDate(calendar.getTime());
+        NumberEval eval = new NumberEval(Math.floor(excelDate));
+        checkValue(excel, eval.getStringValue() + "".0"");
     }
 
     private void checkValue(XSSFWorkbook excel, String expect) {
```",3,3,2,3
zeroshot-v1,move üòÖ to the correct package,"File: core-integ/src/test/java/org/apache/directory/server/core/operations/add/AddIT.java
Status: renamed
```diff
@@ -17,7 +17,7 @@
  *  under the License.
  *
  */
-package org.apache.directory.server.core.jndi;
+package org.apache.directory.server.core.operations.add;
 
 
 import static org.apache.directory.server.core.integ.IntegrationUtils.getAdminConnection;
```


File: core-integ/src/test/java/org/apache/directory/server/core/suites/MigratedStockCoreISuite.java
Status: modified
```diff
@@ -39,7 +39,7 @@
 import org.apache.directory.server.core.event.EventServiceIT;
 import org.apache.directory.server.core.exception.ExceptionServiceIT;
 import org.apache.directory.server.core.integ.FrameworkSuite;
-import org.apache.directory.server.core.jndi.AddIT;
+import org.apache.directory.server.core.operations.add.AddIT;
 import org.apache.directory.server.core.operations.add.PasswordHashingInterceptorTest;
 import org.apache.directory.server.core.operations.move.MoveIT;
 import org.junit.runner.RunWith;
```",2,1,3,2
zeroshot-v1,fix a bug in SimpleParameterizedType,"File: rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/SimpleParameterizedType.java
Status: modified
```diff
@@ -66,7 +66,7 @@ public boolean equals(Object obj) {
         if (this == obj) {
             return true;
         }
-        if (obj == null) {
+        if (!(obj instanceof ParameterizedType)) {
             return false;
         }
 
```",3,1,2,2
zeroshot-v1,Pull up logger() method.,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java
Status: modified
```diff
@@ -164,6 +164,10 @@ protected static <M extends AbstractManager> M narrow(final Class<M> narrowClass
                         manager.getName() + ""'"");
     }
 
+    protected static StatusLogger logger() {
+        return StatusLogger.getLogger();
+    }
+
     /**
      * May be overridden by managers to perform processing while the manager is being released and the
      * lock is held. A timeout is passed for implementors to use as they see fit.
```


File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java
Status: modified
```diff
@@ -45,7 +45,6 @@
 import org.apache.logging.log4j.message.MapMessage;
 import org.apache.logging.log4j.spi.ThreadContextMap;
 import org.apache.logging.log4j.spi.ThreadContextStack;
-import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.IndexedReadOnlyStringMap;
 import org.apache.logging.log4j.util.ReadOnlyStringMap;
 import org.apache.logging.log4j.util.Strings;
@@ -55,10 +54,6 @@
  */
 public final class JdbcDatabaseManager extends AbstractDatabaseManager {
 
-    private static StatusLogger logger() {
-        return StatusLogger.getLogger();
-    }
-
     private static final JdbcDatabaseManagerFactory INSTANCE = new JdbcDatabaseManagerFactory();
 
     // NOTE: prepared statements are prepared in this order: column mappings, then column configs
```",3,2,3,4
zeroshot-v1,fix dump of ThreadDumpProvider,"File: diagnostic/common/src/main/java/org/apache/karaf/diagnostic/common/ThreadDumpProvider.java
Status: modified
```diff
@@ -40,11 +40,12 @@ public ThreadDumpProvider() {
     protected void writeDump(OutputStreamWriter outputStream) throws Exception {
         ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
 
-        outputStream.write(""Number of threads: "" + threadMXBean.getDaemonThreadCount() + ""\n"");
-        ThreadInfo[] threadDump = threadMXBean.dumpAllThreads(true, true);
-        for (ThreadInfo threadInfo : threadDump) {
+        outputStream.write(""Number of threads: "" + threadMXBean.getThreadCount() + ""\n"");
+
+        for (ThreadInfo threadInfo : threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(), Integer.MAX_VALUE)) {
             outputStream.write(threadInfo.toString() + ""\n\n"");
         }
+
     }
 
 }
```",2,1,2,2
zeroshot-v1,"Refactor: Replace direct calls to System.currentTimeMillis() in NioEndpoint.java In the methods doWrite and read in the NioEndpoint.java file, replaced direct calls to System.currentTimeMillis() with calls to the methods updateLastRead() and updateLastWrite(). This change does not affect the functionality of the methods, but rather how they handle time tracking.","File: java/org/apache/tomcat/util/net/NioEndpoint.java
Status: modified
```diff
@@ -1161,7 +1161,7 @@ public int read(boolean block, byte[] b, int off, int len)
 
             // Fill the read buffer as best we can.
             int nRead = fillReadBuffer(block);
-            lastRead = System.currentTimeMillis();
+            updateLastRead();
 
             // Full as much of the remaining byte array as possible with the
             // data that was just read
@@ -1246,7 +1246,7 @@ protected void doWrite(boolean block) throws IOException {
                         if (getSocket().flush(true, selector, writeTimeout)) break;
                     } while (true);
                 }
-                lastWrite = System.currentTimeMillis();
+                updateLastWrite();
             } finally {
                 if (selector != null) {
                     pool.put(selector);
```",4,3,3,4
zeroshot-v1,Refactor: Remove unnecessary filesize calculation in cleanup compaction This commit removes the calculation of the expected compacted filesize in the `doCleanupCompaction` method of the `CompactionManager` class. The calculation was not necessary for the cleanup compaction process and its removal simplifies the code without altering functionality.,"File: src/java/org/apache/cassandra/db/compaction/CompactionManager.java
Status: modified
```diff
@@ -582,8 +582,7 @@ private void doCleanupCompaction(ColumnFamilyStore cfs, Collection<SSTableReader
             SSTableReader newSstable = null;
 
             logger.info(""Cleaning up "" + sstable);
-            // Calculate the expected compacted filesize
-            long expectedRangeFileSize = cfs.getExpectedCompactedFileSize(Arrays.asList(sstable), OperationType.CLEANUP);
+
             File compactionFileLocation = cfs.directories.getDirectoryForNewSSTables();
             if (compactionFileLocation == null)
                 throw new IOException(""disk full"");
```",4,4,3,4
zeroshot-v1,fix SuperProperties store,"File: container/openejb-core/src/main/java/org/apache/openejb/util/SuperProperties.java
Status: modified
```diff
@@ -58,7 +58,7 @@
  * @see java.lang.System#getProperties
  */
 public class SuperProperties extends Properties {
-    private static final String LINE_SEPARATOR = System.getProperty(""line.separator"");
+    private static final String LINE_SEPARATOR = ""\n"";
 
     private static final String PROP_DTD_NAME = ""http://java.sun.com/dtd/properties.dtd"";
 
```


File: container/openejb-core/src/test/java/org/apache/openejb/util/SuperPropertiesTest.java
Status: modified
```diff
@@ -351,7 +351,7 @@ public void testIndentDetection() throws Exception {
         assertEquals(2, properties.getCommentIndent());
     }
 
-    protected String store(Properties properties) throws IOException {
+    protected String store(Properties properties) throws IOException {        
         ByteArrayOutputStream out = new ByteArrayOutputStream();
         properties.store(out, null);
         return new String(out.toByteArray());
```",2,1,2,3
zeroshot-v1,remove unused code,"File: java/org/apache/catalina/startup/HostConfig.java
Status: modified
```diff
@@ -81,12 +81,6 @@ public class HostConfig
     // ----------------------------------------------------- Instance Variables
 
 
-    /**
-     * The Java class name of the Context configuration class we should use.
-     */
-    protected String configClass = ""org.apache.catalina.startup.ContextConfig"";
-
-
     /**
      * The Java class name of the Context implementation we should use.
      */
@@ -162,28 +156,6 @@ public class HostConfig
     // ------------------------------------------------------------- Properties
 
 
-    /**
-     * Return the Context configuration class name.
-     */
-    public String getConfigClass() {
-
-        return (this.configClass);
-
-    }
-
-
-    /**
-     * Set the Context configuration class name.
-     *
-     * @param configClass The new Context configuration class name.
-     */
-    public void setConfigClass(String configClass) {
-
-        this.configClass = configClass;
-
-    }
-
-
     /**
      * Return the Context implementation class name.
      */
```",2,1,3,3
zeroshot-v1,Applied the fix from trunk to make the build working,"File: ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapConnectionTest.java
Status: modified
```diff
@@ -43,7 +43,6 @@
 import org.apache.directory.shared.ldap.entry.Entry;
 import org.apache.directory.shared.ldap.entry.StringValue;
 import org.apache.directory.shared.ldap.exception.LdapException;
-import org.apache.directory.shared.ldap.exception.LdapReferralException;
 import org.apache.directory.shared.ldap.filter.EqualityNode;
 import org.apache.directory.shared.ldap.filter.SearchScope;
 import org.apache.directory.shared.ldap.message.BindResponse;
```",3,2,2,3
zeroshot-v1,do not merge fix npe,"File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGenerator.java
Status: modified
```diff
@@ -76,10 +76,13 @@ public void execute( File destinationDirectory, PluginDescriptor pluginDescripto
             
             w.startElement( ""mojos"" );
 
-            for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
+            if ( pluginDescriptor.getMojos() != null )
             {
-                MojoDescriptor descriptor = (MojoDescriptor) it.next();
-                processMojoDescriptor( descriptor, w );
+                for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
+                {
+                    MojoDescriptor descriptor = (MojoDescriptor) it.next();
+                    processMojoDescriptor( descriptor, w );
+                }
             }
 
             w.endElement();
@@ -362,4 +365,4 @@ public void element( XMLWriter w, String name, String value )
 
         w.endElement();
     }
-}
\ No newline at end of file
+}
```",1,1,1,1
zeroshot-v1,"Using the correct ""it's me"" header in the RUN@cloud integration tests","File: demos/tweetstore/runatcloud-tweetstore/src/test/java/org/jclouds/demo/tweetstore/integration/TweetStoreLiveTest.java
Status: modified
```diff
@@ -202,7 +202,7 @@ public void testPrimeContainers() throws IOException, InterruptedException {
       for (String context : blobstores) {
          System.out.println(""storing at context: "" + context);
          HttpURLConnection connection = (HttpURLConnection) gurl.openConnection();
-         connection.addRequestProperty(""X-AppEngine-QueueName"", ""twitter"");
+         connection.addRequestProperty(""X-RUN@cloud-Submitter"", ""twitter"");
          connection.addRequestProperty(""context"", context);
          InputStream i = connection.getInputStream();
          String string = Strings2.toStringAndClose(i);
```",3,2,3,4
zeroshot-v1,Style: Remove unused import in DefaultProfileManager.java The import statement for java.util.Properties was removed from DefaultProfileManager.java as it was unused. This change is part of code style maintenance.,"File: maven-project/src/main/java/org/apache/maven/profiles/manager/DefaultProfileManager.java
Status: modified
```diff
@@ -33,7 +33,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Properties;
 
 public class DefaultProfileManager
     implements ProfileManager
```",3,3,3,4
zeroshot-v1,remove redraw redraw call,"File: viewer-skylark/src/org/nakedobjects/viewer/skylark/InteractionHandler.java
Status: modified
```diff
@@ -242,7 +242,7 @@ public void mouseMoved(MouseEvent me) {
                 viewer.mouseMoved(location);
                 spy.addTrace(overView, "" mouse location"", location);
 
-  //              redraw();
+                redraw();
             }
         }
     }
```",2,1,2,2
zeroshot-v1,Clearer test assertion.,"File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/SslConfigurationTest.java
Status: modified
```diff
@@ -41,7 +41,7 @@ public void emptyConfigurationHasDefaultTrustStore() throws IOException {
         final SslConfiguration sc = SslConfiguration.createSSLConfiguration(null, null, null);
         final SSLSocketFactory factory = sc.getSslSocketFactory();
         final SSLSocket clientSocket = (SSLSocket) factory.createSocket(TLS_TEST_HOST, TLS_TEST_PORT);
-        Assert.assertTrue(true);
+        Assert.assertNotNull(clientSocket);
     }
 
     @Test(expected = IOException.class)
```",2,1,2,3
zeroshot-v1,remove unnecessary cast,"File: core-plugin/src/main/java/org/apache/directory/server/core/tools/schema/DirectorySchemaToolMojo.java
Status: modified
```diff
@@ -152,7 +152,7 @@ protected void generateRest( BootstrapSchema schema ) throws Exception
         ProducerTypeEnum type = null;
         for ( int ii = 0; ii < types.size(); ii++ )
         {
-            type = ( ProducerTypeEnum ) types.get( ii );
+            type = types.get( ii );
 
             if ( exists( schema.getFullDefaultBaseClassName( type ), type ) )
             {
```",3,1,2,3
zeroshot-v1,fix test on windows,"File: sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/GcpApiSurfaceTest.java
Status: modified
```diff
@@ -85,6 +85,8 @@ public void testGcpApiSurface() throws Exception {
             Matchers.<Class<?>>equalTo(com.google.cloud.ByteArray.class),
             Matchers.<Class<?>>equalTo(com.google.cloud.Date.class),
             Matchers.<Class<?>>equalTo(com.google.cloud.Timestamp.class),
+            // TODO: remove the following classes once spanner updates APIs of AsyncResultSet:
+            // https://github.com/googleapis/java-spanner/issues/410
             Matchers.<Class<?>>equalTo(com.google.common.collect.ImmutableCollection.class),
             Matchers.<Class<?>>equalTo(com.google.common.collect.ImmutableCollection.Builder.class),
             Matchers.<Class<?>>equalTo(com.google.common.collect.ImmutableList.class),
```",2,1,1,2
zeroshot-v1,fix a bug in SocketWrapperBase,"File: java/org/apache/tomcat/util/net/SocketWrapperBase.java
Status: modified
```diff
@@ -472,7 +472,10 @@ protected void writeNonBlocking(byte[] buf, int off, int len) throws IOException
                     socketBufferHandler.configureWriteBufferForWrite();
                     thisTime = transfer(buf, off, len, socketBufferHandler.getWriteBuffer());
                 } else {
-                    thisTime = 0;
+                    // Didn't write any data in the last non-blocking write.
+                    // Therefore the write buffer will still be full. Nothing
+                    // else to do here. Exit the loop.
+                    break;
                 }
                 len = len - thisTime;
             }
```",2,2,1,2
zeroshot-v1,"Fix: Adjust time calculation in testSubResults method In the testSubResults method of the TestSampleResult.java file, the time calculation has been adjusted to account for the granularity of System.currentTimeMillis(). A ""fudge factor"" of 3ms has been added to the overall time to allow for minor variations in the value returned by SampleResult#currentTimeInMillis(). This change ensures that the test accurately reflects the time taken by the HTTP sample and its sub-samples.","File: test/src/org/apache/jmeter/samplers/TestSampleResult.java
Status: modified
```diff
@@ -215,8 +215,15 @@ private void testSubResults(boolean nanoTime) throws Exception {
             if (totalTime < allsamplesTime) {
                 fail(""Total: ""+totalTime+"" < sum(samples): ""+ allsamplesTime);
             }
-            if (totalTime > overallTime) {
-                fail(""Total: ""+totalTime+"" > overall time: ""+ overallTime);
+            /*
+             * The granularity of System.currentTimeMillis() - plus the fact that the nanoTime()
+             * offset is now calculated for each sampleResult - means that there can be some
+             * minor variation in the value returned by SampleResult#currentTimeInMillis().
+             * 
+             * Allow for this by adding a fudge factor - 3ms seems to be sufficient.
+            */
+            if (totalTime > overallTime+3) {
+                fail(""Total: ""+totalTime+"" > 3 + overall time: ""+ overallTime);
             }
             
             // Check that calculator gets the correct statistics from the sample
```",3,3,2,3
zeroshot-v1,fix a bug in üòÖ,"File: java/org/apache/catalina/connector/CoyoteAdapter.java
Status: modified
```diff
@@ -224,7 +224,8 @@ public void service(org.apache.coyote.Request req,
             }
 
             if (request.getWrapper().getServlet() instanceof CometProcessor 
-                    && !response.isClosed()) {
+                    && !response.isClosed()
+                    && req.getAttribute(""org.apache.tomcat.comet.support"") == Boolean.TRUE) {
                 comet = true;
                 res.action(ActionCode.ACTION_COMET_BEGIN, null);
             }
```",1,1,0,1
zeroshot-v1,The signature of the create method of the parent class had changed. That's why client's would invoke the create of the parent class which does nothing. Adapted the create method to match the signature.,"File: src/java/org/apache/lenya/cms/authoring/DefaultCreator.java
Status: modified
```diff
@@ -1,5 +1,5 @@
 /*
- * $Id: DefaultCreator.java,v 1.3 2003/02/07 12:14:07 ah Exp $
+ * $Id: DefaultCreator.java,v 1.4 2003/02/10 14:45:45 egliwyona Exp $
  * <License>
  * The Apache Software License
  *
@@ -195,7 +195,8 @@ public String generateTreeId(String childId, short childType)
      *
      * @throws Exception DOCUMENT ME!
      */
-    public void create(File samplesDir, File parentDir, String childId, short childType)
+    public void create(File samplesDir, File parentDir,
+		       String childId, short childType, String childName)
         throws Exception {
         String filename = null;
         String filenameMeta = null;
```",3,2,2,3
zeroshot-v1,add support for delete,"File: archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/test/java/org/apache/archiva/admin/repository/AbstractRepositoryAdminTest.java
Status: modified
```diff
@@ -27,17 +27,21 @@
 import org.apache.archiva.admin.model.proxyconnector.ProxyConnectorAdmin;
 import org.apache.archiva.admin.model.proxyconnectorrule.ProxyConnectorRuleAdmin;
 import org.apache.archiva.admin.model.remote.RemoteRepositoryAdmin;
+import org.apache.archiva.configuration.ArchivaConfiguration;
 import org.apache.archiva.redback.role.RoleManager;
 import org.apache.archiva.redback.users.User;
 import org.apache.archiva.redback.users.memory.SimpleUser;
 import org.apache.archiva.test.utils.ArchivaSpringJUnit4ClassRunner;
 import org.apache.commons.lang.StringUtils;
+import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.runner.RunWith;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.test.context.ContextConfiguration;
 
 import javax.inject.Inject;
+import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -77,6 +81,23 @@ public abstract class AbstractRepositoryAdminTest
     @Inject
     protected ProxyConnectorRuleAdmin proxyConnectorRuleAdmin;
 
+    @Inject
+    private ArchivaConfiguration archivaConfiguration;
+
+    @Before
+    public void initialize() {
+        Path confFile = Paths.get(APPSERVER_BASE_PATH, ""conf/archiva.xml"");
+        try
+        {
+            Files.deleteIfExists( confFile );
+            archivaConfiguration.reload();
+        }
+        catch ( IOException e )
+        {
+            // ignore
+        }
+    }
+
     protected AuditInformation getFakeAuditInformation()
     {
         AuditInformation auditInformation = new AuditInformation( getFakeUser(), ""archiva-localhost"" );
```",2,1,1,2
zeroshot-v1,Fixing repository group implementation,"File: archiva-modules/archiva-maven/archiva-maven-repository/src/main/java/org/apache/archiva/repository/maven2/MavenRepositoryProvider.java
Status: modified
```diff
@@ -248,8 +248,10 @@ public void updateRemoteInstance(EditableRemoteRepository repo, RemoteRepository
     @Override
     public RepositoryGroup createRepositoryGroup(RepositoryGroupConfiguration configuration) throws RepositoryException {
         Path repositoryGroupBase = getArchivaConfiguration().getRepositoryGroupBaseDir();
-        return new MavenRepositoryGroup(configuration.getId(), configuration.getId(),
+        MavenRepositoryGroup newGrp = new MavenRepositoryGroup(configuration.getId(), configuration.getName(),
                 repositoryGroupBase, fileLockManager);
+        updateRepositoryGroupInstance(newGrp, configuration);
+        return newGrp;
     }
 
     @Override
@@ -444,4 +446,8 @@ public void setArchivaConfiguration(ArchivaConfiguration archivaConfiguration) {
     public <T> void raise(RepositoryEvent<T> event) {
         //
     }
+
+    public void setRepositoryRegistry(RepositoryRegistry reg) {
+        this.repositoryRegistry = reg;
+    }
 }
```",3,2,2,3
zeroshot-v1,fix npe in ScriptRunner,"File: src/main/org/apache/tools/ant/util/ScriptRunner.java
Status: modified
```diff
@@ -139,7 +139,15 @@ public void executeScript(String execName) throws BuildException {
             for (Iterator i = beans.keySet().iterator(); i.hasNext();) {
                 String key = (String) i.next();
                 Object value = beans.get(key);
-                manager.declareBean(key, value, value.getClass());
+                if (value != null) {
+                    manager.declareBean(key, value, value.getClass());
+                } else {
+                    // BSF uses a hashtable to store values
+                    // so cannot declareBean with a null value
+                    // So need to remove any bean of this name as
+                    // that bean should not be visible
+                    manager.undeclareBean(key);
+                }
             }
 
             // execute the script
```",2,2,1,2
zeroshot-v1,remove unnecessary code,"File: wicket/src/java/wicket/model/AbstractPropertyModel.java
Status: modified
```diff
@@ -60,10 +60,6 @@ public AbstractPropertyModel(final Object target)
 	@Override
 	public IModel getNestedModel()
 	{
-		if (target instanceof IModel)
-		{
-			return ((IModel)target);
-		}
 		return null;
 	}
 
```",2,1,2,3
zeroshot-v1,fix npe in FormComponent üòÖ,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java
Status: modified
```diff
@@ -1024,7 +1024,7 @@ public final void validate()
 		{
 			convertInput();
 
-			if (isRequired() && getConvertedInput() == null)
+			if (isValid() && isRequired() && getConvertedInput() == null)
 			{
 				reportRequiredError();
 			}
```",1,1,0,2
zeroshot-v1,fix bug in MatchNode üòÖ,"File: pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/MatchNode.java
Status: modified
```diff
@@ -1031,11 +1031,11 @@ protected double computeStubCallsPerProcessedKey() {
 		double callsPerKey = 1;
 		
 		if(numKey1 != -1) {
-			callsPerKey *= numKey1 / (double)numRecords1;
+			callsPerKey *= (double)numRecords1 / numKey1;
 		}
 		
 		if(numKey2 != -1) {
-			callsPerKey *= numKey2 / (double)numRecords2;
+			callsPerKey *= (double)numRecords2 / numKey2;
 		}
 
 		return callsPerKey;
```",2,1,1,2
zeroshot-v1,remove unused code,"File: src/java/org/apache/fop/render/bitmap/TIFFRenderer.java
Status: modified
```diff
@@ -94,8 +94,7 @@ public TIFFRenderer() {
     public void configure(Configuration cfg) throws ConfigurationException {
 
         //TODO Support output of monochrome bitmaps (fax-style)
-        String c = cfg.getChild(""compression"").getAttribute(""value"");
-        int comp = Integer.parseInt(c);
+        int comp = cfg.getChild(""compression"").getAttributeAsInteger(""value"", 1);
         String name = null;
         switch (comp) {
         case TIFFEncodeParam.COMPRESSION_NONE:
```",2,1,1,2
zeroshot-v1,"Style: Update comments in ApplicationIdCacheFig.java This commit updates the comments in the ApplicationIdCacheFig.java file. The changes are not related to any method or class functionality, but rather to the style of the code. No associated issues or pull requests were found for this commit.","File: stack/core/src/main/java/org/apache/usergrid/corepersistence/ApplicationIdCacheFig.java
Status: modified
```diff
@@ -19,16 +19,13 @@
  */
 package org.apache.usergrid.corepersistence;
 
-/**
- * Application id cache fig
- */
 
 import org.safehaus.guicyfig.Default;
 import org.safehaus.guicyfig.GuicyFig;
 import org.safehaus.guicyfig.Key;
 
 /**
- * The config for the entity cache
+ * Application id cache fig
  */
 public interface ApplicationIdCacheFig extends GuicyFig {
 
```",3,2,3,4
zeroshot-v1,"Refactor: Update getAttributeNames method in RealPathModule This commit updates the getAttributeNames method in the RealPathModule class. Previously, the method was returning an iterator of the attribute names of the RequestURIModule. Now, it returns an iterator of the attribute names of the RealPathModule. This change improves the structure of the code without changing its behavior.","File: src/java/org/apache/cocoon/components/modules/input/RealPathModule.java
Status: modified
```diff
@@ -33,7 +33,7 @@
  * running in a .war file), <code>null</code> will be returned.
  *
  * @author <a href=""mailto:jefft@apache.org"">Jeff Turner</a>
- * @version CVS $Id: RealPathModule.java,v 1.3 2004/03/05 13:02:48 bdelacretaz Exp $
+ * @version CVS $Id$
  */
 
 /*
@@ -59,7 +59,7 @@
  */
 public class RealPathModule extends AbstractInputModule implements ThreadSafe {
 
-    final static Vector returnNames;
+    private final static Vector returnNames;
     static {
         Vector tmp = new Vector();
         tmp.add(""realPath"");
@@ -79,7 +79,7 @@ public Object getAttribute( String name, Configuration modeConf, Map objectModel
 
     public Iterator getAttributeNames( Configuration modeConf, Map objectModel ) throws ConfigurationException {
 
-        return RequestURIModule.returnNames.iterator();
+        return RealPathModule.returnNames.iterator();
     }
 
 
```",3,3,2,4
zeroshot-v1,fix npe in setArtifactResolutionResult,"File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Status: modified
```diff
@@ -29,6 +29,7 @@
 import org.apache.maven.reactor.MavenExecutionException;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /** @author Jason van Zyl */
@@ -83,7 +84,7 @@ public MavenExecutionResult setArtifactResolutionResult( ArtifactResolutionResul
 
     public List getExceptions()
     {
-        return exceptions;
+        return exceptions == null ? Collections.EMPTY_LIST : exceptions;
     }
 
     public MavenExecutionResult addExtensionScanningException( ExtensionScanningException e )
@@ -147,7 +148,7 @@ private void addException( Throwable t )
 
     public boolean hasExceptions()
     {
-        return (( exceptions != null ) && ( exceptions.size() > 0 ) );
+        return !getExceptions().isEmpty();
     }
 
     public ReactorManager getReactorManager()
```",3,2,3,3
zeroshot-v1,"Fix: Add validity check in validate() method This commit modifies the validate() method in FormComponent.java to include an additional check for validity before proceeding with the conversion of the input. This change ensures that only valid and required inputs are converted, improving the robustness of the input validation process.","File: jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java
Status: modified
```diff
@@ -1024,7 +1024,7 @@ public final void validate()
 		{
 			convertInput();
 
-			if (isRequired() && getConvertedInput() == null)
+			if (isValid() && isRequired() && getConvertedInput() == null)
 			{
 				reportRequiredError();
 			}
```",3,3,2,3
zeroshot-v1,Typo in a comment,"File: test/org/apache/catalina/startup/TestContextConfigAnnotation.java
Status: modified
```diff
@@ -151,7 +151,7 @@ public void testDuplicateMapping() throws Exception {
             config.processAnnotationsFile(pFile, webxml);
             fail();
         } catch (IllegalArgumentException ex) {
-            // ingore
+            // ignore
         }
         ServletDef servletDef = webxml.getServlets().get(""param"");
         assertNull(servletDef);
@@ -235,7 +235,7 @@ public void testDuplicateFilterMapping() throws Exception {
             config.processAnnotationsFile(pFile, webxml);
             fail();
         } catch (IllegalArgumentException ex) {
-            // ingore
+            // ignore
         }
         FilterDef filterDef = webxml.getFilters().get(""paramD"");
         assertNull(filterDef);
```",2,1,3,3
zeroshot-v1,add üòÖ to ConnectionManager,"File: server/openejb-client/src/main/java/org/apache/openejb/client/ConnectionManager.java
Status: modified
```diff
@@ -29,6 +29,7 @@ public class ConnectionManager {
 
         factories.register(""default"", ejbdFactory);
         factories.register(""ejbd"", ejbdFactory);
+        factories.register(""ejbds"", ejbdFactory);
 
         HttpConnectionFactory httpFactory = new HttpConnectionFactory();
         factories.register(""http"", httpFactory);
```",2,1,2,3
zeroshot-v1,Add a more informative error msg,"File: modules/tomcat/src/java/org/apache/geronimo/tomcat/ValveGBean.java
Status: modified
```diff
@@ -54,9 +54,8 @@ public ValveGBean(String className, Map initParams, ValveGBean nextValve) throws
         
         if (nextValve != null){
             if (!(nextValve.getInternalObject() instanceof Valve)){
-                throw new IllegalArgumentException(""className cannot be null."");                
+                throw new IllegalArgumentException(""The class given as the NextValve attribute does not wrap an object of org.apache.catalina.Valve type."");                
             }
-            
             this.nextValve = nextValve;
         } else {
             this.nextValve = null;
```",2,1,2,3
zeroshot-v1,[hotfix][tests] Rename DefaultDeclarativeSlotPoolTest.testOfferingTooManySlots into testOfferingTooManySlotsWillRejectSuperfluousSlots,"File: flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/DefaultDeclarativeSlotPoolTest.java
Status: modified
```diff
@@ -195,7 +195,7 @@ public void testDuplicateSlotOfferings() throws InterruptedException {
     }
 
     @Test
-    public void testOfferingTooManySlots() {
+    public void testOfferingTooManySlotsWillRejectSuperfluousSlots() {
         final NewSlotsService notifyNewSlots = new NewSlotsService();
         final DefaultDeclarativeSlotPool slotPool =
                 createDefaultDeclarativeSlotPoolWithNewSlotsListener(notifyNewSlots);
```",3,3,2,4
zeroshot-v1,fix flaky test,"File: stack/core/src/test/java/org/usergrid/persistence/cassandra/util/TraceTagUnitTest.java
Status: modified
```diff
@@ -31,6 +31,6 @@ public void createAttachDetach() throws Exception {
         taggedOpTimer.stop(timedOpTag,""op-tag-name"",true);
         assertTrue(timedOpTag.getElapsed() >= 500);
         assertEquals(timedOpTag, traceTag.iterator().next());
-
+        traceTagManager.detach();
     }
 }
```",2,1,1,2
zeroshot-v1,Refactor: Update `createEngine` and `getEngine` methods in `ScriptFunction.java` This commit updates the `createEngine` method in `ScriptFunction.java` to be non-static and removes the language parameter. The `getEngine` method is also updated to call the new version of `createEngine`. These changes improve the structure of the code without changing its behavior.,"File: jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/ScriptFunction.java
Status: modified
```diff
@@ -111,12 +111,11 @@ public NodeValue exec(List<NodeValue> args) {
         }
     }
 
-
     private Invocable getEngine() {
         Pool<Invocable> pool = enginePools.computeIfAbsent(lang, key -> PoolSync.create(new PoolBase<>()));
         Invocable engine = pool.get();
         if (engine == null) {
-            engine = createEngine(lang);
+            engine = createEngine();
         }
         return engine;
     }
@@ -125,7 +124,7 @@ private void recycleEngine(Invocable engine) {
         enginePools.get(lang).put(engine);
     }
 
-    private static Invocable createEngine(String lang) {
+    private Invocable createEngine() {
         ScriptEngine engine = scriptEngineManager.getEngineByName(lang);
         if (engine == null) {
             throw new ExprBuildException(""Unknown scripting language: "" + lang);
```",3,3,3,4
zeroshot-v1,Fix FindBugs and Eclipse warnings,"File: java/org/apache/catalina/manager/JMXProxyServlet.java
Status: modified
```diff
@@ -52,8 +52,8 @@ public class JMXProxyServlet extends HttpServlet  {
     /**
      * MBean server.
      */
-    protected MBeanServer mBeanServer = null;
-    protected Registry registry;
+    protected transient MBeanServer mBeanServer = null;
+    protected transient Registry registry;
 
     // --------------------------------------------------------- Public Methods
     /**
@@ -227,8 +227,8 @@ public void listBeans( PrintWriter writer, String qry )
                         ExceptionUtils.handleThrowable(t);
                     }
                 }
-            } catch (Exception e) {
-                // Ignore
+            } catch (Throwable t) {
+                ExceptionUtils.handleThrowable(t);
             }
             writer.println();
         }
@@ -269,7 +269,13 @@ private void appendHead( StringBuilder sb, String value, int start, int end) {
         sb.append( value.substring(pos,end));
     }
 
-    public boolean isSupported( String type ) {
+    /**
+     * Determines if a type is supported by the {@link JMXProxyServlet}.
+     * 
+     * @param type  The type to check
+     * @return      Always returns <code>true</code>
+     */
+    public boolean isSupported(String type) {
         return true;
     }
 }
```",3,2,3,3
zeroshot-v1,omit zero counts from compaction merge summary,"File: src/java/org/apache/cassandra/db/compaction/CompactionTask.java
Status: modified
```diff
@@ -261,8 +261,11 @@ protected void runWith(File sstableDirectory) throws Exception
         Map<Integer, Long> mergedRows = new HashMap<Integer, Long>();
         for (int i = 0; i < counts.length; i++)
         {
-            int rows = i + 1;
             long count = counts[i];
+            if (count == 0)
+                continue;
+
+            int rows = i + 1;
             totalSourceRows += rows * count;
             mergeSummary.append(String.format(""%d:%d, "", rows, count));
             mergedRows.put(rows, count);
```",3,2,3,4
zeroshot-v1,use a jdbc name for JDBCSampler,"File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Status: modified
```diff
@@ -37,6 +37,7 @@
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testbeans.TestBean;
+import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.Data;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
@@ -50,7 +51,10 @@
 public class JDBCSampler extends AbstractSampler implements TestBean {
 	private static final Logger log = LoggingManager.getLoggerForClass();
 
-	private static final int MAX_ENTRIES = 200;
+	// This value is used for both the connection (perConnCache) and statement (preparedStatementMap) caches.
+	// TODO - do they have to be the same size?
+	private static final int MAX_ENTRIES = 
+		JMeterUtils.getPropDefault(""jdbcsampler.cachesize"",200); // $NON-NLS-1$
 
 	private static final Map mapJdbcNameToInt;
 
```",3,2,3,4
zeroshot-v1,"Style: Add annotation to IncludeTransformer.java Added a @cocoon.sitemap.component.documentation annotation to the IncludeTransformer.java file. This change does not affect the functionality of the code, but improves the style and readability.","File: src/blocks/scratchpad/java/org/apache/cocoon/transformation/IncludeTransformer.java
Status: modified
```diff
@@ -49,6 +49,7 @@
 import java.util.Map;
 
 /**
+ * @cocoon.sitemap.component.documentation
  * <p>A simple transformer including resolvable sources (accessed through
  * Cocoon's {@link SourceResolver} from its input.</p>
  *
```",3,3,2,3
zeroshot-v1,Remove getFilter method inadvertantly left in,"File: log4j2-core/src/main/java/org/apache/logging/log4j/core/Appender.java
Status: modified
```diff
@@ -65,12 +65,6 @@ public interface Appender extends Lifecycle {
      */
     boolean requiresLayout();
 
-    /**
-     * Returns a Filter if one is present.
-     * @return the Filter or null if no Filter is associated with the Appender.
-     */
-    Filter getFilter();
-
     /**
      * If set to true any exceptions thrown by the Appender will be logged but not thrown.
      * @return true if Exceptions should be suppressed, false otherwise.
```",3,2,3,4
zeroshot-v1,Fix forbidden apis error,"File: src/java/org/apache/poi/ss/usermodel/DateUtil.java
Status: modified
```diff
@@ -71,7 +71,7 @@ protected DateUtil() {
             .appendPattern(""[[yyyy ]dd-MMM[-yyyy]][[ ]h:m[:s] a][[ ]H:m[:s]]"")
             .appendPattern(""[M/dd[/yyyy]][[ ]h:m[:s] a][[ ]H:m[:s]]"")
             .appendPattern(""[[yyyy/]M/dd][[ ]h:m[:s] a][[ ]H:m[:s]]"")
-            .parseDefaulting(ChronoField.YEAR_OF_ERA, Calendar.getInstance().get(Calendar.YEAR))
+            .parseDefaulting(ChronoField.YEAR_OF_ERA, LocaleUtil.getLocaleCalendar().get(Calendar.YEAR))
             .toFormatter();
 
     /**
```",2,1,2,3
zeroshot-v1,hmm normally you don't have the build path that you have in eclipse. (how can we avoid this?),"File: jdk-1.5/wicket-examples/src/test/java/org/apache/wicket/examples/hangman/WordGeneratorTest.java
Status: modified
```diff
@@ -20,22 +20,25 @@
 import java.util.Set;
 
 import junit.framework.Assert;
+import junit.framework.TestCase;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.wicket.WicketTestCase;
+import org.apache.wicket.util.tester.WicketTester;
 
 /**
  * Test case for the <code>WordGenerator</code> class.
  * 
  * @author Chris Turner
  * @version 1.0
  */
-public class WordGeneratorTest extends WicketTestCase
+public class WordGeneratorTest extends TestCase
 {
 
 	private static final Log log = LogFactory.getLog(WordGeneratorTest.class);
 
+	public WicketTester tester;
+	
 	/**
 	 * Create the test case.
 	 * 
@@ -46,6 +49,16 @@ public WordGeneratorTest(String message)
 	{
 		super(message);
 	}
+	
+	protected void setUp() throws Exception
+	{
+		tester = new WicketTester();
+	}
+
+	protected void tearDown() throws Exception
+	{
+		tester.destroy();
+	}
 
 	/**
 	 * Tests word generator
```",1,1,1,1
zeroshot-v1,try catch around close If it throws an exception then the finally block is not completely executed,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java
Status: modified
```diff
@@ -385,7 +385,16 @@ public boolean doGet(final HttpServletRequest servletRequest,
 			{
 				// Close response
 				if (response != null)
-					response.close();
+				{
+					try
+					{
+						response.close();
+					}
+					catch (Exception e)
+					{
+						log.error(""closing the buffer error"", e);
+					}
+				}
 
 				// Clean up thread local session
 				Session.unset();
```",3,2,2,3
zeroshot-v1,fix typo in javadoc,"File: src/java/org/apache/cocoon/transformation/SourceWritingTransformer.java
Status: modified
```diff
@@ -49,7 +49,7 @@
  * @cocoon.sitemap.component.documentation
  * This transformer allows you to output to a ModifiableSource.
  *
- * @cocoon.sitemap.component.name   write-source
+ * @cocoon.sitemap.component.name   sourcewriting
  * @cocoon.sitemap.component.logger sitemap.transformer.write-source
  *
  * This transformer allows you to output to a ModifiableSource.
```",3,2,3,3
zeroshot-v1,"Refactor: Simplify URL to File conversion in URLs.java This commit simplifies the method toFile(URL url) in the URLs.java file. The method still converts a URL to a File object, but the implementation has been changed to use the decode method from the JarLocation class. This change simplifies the code and removes the need for a try-catch block.","File: container/openejb-core/src/main/java/org/apache/openejb/util/URLs.java
Status: modified
```diff
@@ -16,9 +16,11 @@
  */
 package org.apache.openejb.util;
 
+
+import static org.apache.openejb.loader.JarLocation.decode;
+
 import java.io.File;
 import java.net.MalformedURLException;
-import java.net.URISyntaxException;
 import java.net.URL;
 
 /**
@@ -42,11 +44,7 @@ public static File toFile(URL url) {
                 throw new IllegalStateException(e);
             }
         } else if (""file"".equals(url.getProtocol())) {
-            try {
-                return new File(url.toURI().getPath());
-            } catch (URISyntaxException e) {
-                throw new IllegalArgumentException(""bad url "" + url.toExternalForm(), e);
-            }
+            return new File(decode(url.getFile()));
         } else {
             throw new IllegalArgumentException(""Unsupported URL scheme: "" + url.toExternalForm());
         }
```",3,3,3,4
zeroshot-v1,"not sure why this fails during batch testing, but it succeeds singly","File: stack/rest/src/test/java/org/usergrid/rest/management/users/MUUserResourceIT.java
Status: modified
```diff
@@ -68,7 +68,7 @@ public class MUUserResourceIT extends AbstractRestIT
      *
      * From USERGRID-2075
      */
-    @Test
+    @Test @Ignore(""aok - check this please"")
     public void testCaseSensitivityAdminUser() throws Exception
     {
         LOG.info( ""Starting testCaseSensitivityAdminUser()"" );
```",2,1,1,2
