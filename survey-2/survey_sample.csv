commit_url,old,new
https://github.com/apache/ant/commit/89aa7775a83989345756349f99bd3556780eafee,"feat: Add OS family type setter and evaluator
This commit introduces a new setter method to specify the desired OS family type and an evaluator method to determine if the current OS matches the specified type. The setter method converts the input to lowercase, and the evaluator method uses system properties to determine the OS name and path separator.","feat: Add OS family type setting and evaluation
This commit introduces the ability to set a desired OS family type and evaluate if the current OS matches it. The setFamily method allows setting the OS family type, and the eval method determines if the current OS matches the set type. The OS family type is set using a string parameter, which is converted to lowercase for consistency. The eval method uses system properties to determine the current OS and compare it with the set family type."
https://github.com/apache/archiva/commit/6987e689ecc1c522d53cb661fa7842284807f471,"refactor: Remove unnecessary log statement
Removed an unnecessary log statement in DefaultRepositoryBrowsing class, which was logging 'Processing snapshots.' without any functional impact. This change simplifies the code and makes it easier to maintain.","refactor: Remove unnecessary logging and HashMap creation in DefaultRepositoryBrowsing
This commit refactors the processSnapshots method in DefaultRepositoryBrowsing to remove unnecessary logging and HashMap creation. The method's functionality remains the same, ensuring that all base versions of snapshot versions are included in the list of versions. The removal of these lines improves the method's efficiency and simplifies its implementation."
https://github.com/apache/cassandra/commit/2a9fc0e887612725a51b3822a266c1b3d3fadcaf,"fix: Fix NullPointerException in BigTableScanner close method
This commit fixes a NullPointerException that occurs when running MessagePayloadTest due to the close method of BigTableScanner being called twice, causing the segment to be deallocated. The fix ensures that the close operation is idempotent by marking the object as closed and only performing the close operation once.","fix: Ensure close method is idempotent in BigTableScanner
Fixes NullPointerException in MessagePayloadTest by ensuring the close method in BigTableScanner is thread-safe and idempotent. This is achieved by introducing an AtomicBoolean flag to prevent multiple closes. The issue was caused by the close method being called twice in CompactionTask.runMayThrow, leading to a NullPointerException when getTotalBufferSize is called on a deallocated segment. This fix addresses CASSANDRA-9531."
https://github.com/apache/directory-server/commit/9cbf06fcae73d281aa4804e574335d12fd0764ec,"refactor: Improve referral ancestor lookup
Refactor the getFarthestReferralAncestor method to use addNormalized instead of add, ensuring correct referral handling in LDAP referral scenarios.","refactor: Use normalized RDNs when building referral ancestors
This commit refactors the `getFarthestReferralAncestor` method to use normalized RDNs when building the referral ancestor. This change ensures consistency in the way RDNs are represented and might be required to handle referrals in a case-insensitive manner. The method's overall algorithm remains the same, but the internal implementation is modified to use the `addNormalized` method when adding RDNs to the `farthest` LdapDN. This change provides an additional guarantee that the returned LdapDN has normalized RDNs."
https://github.com/apache/directory-server/commit/b5546be3333d7a261e6db37ab6e36f34193cffbb,"refactor: Rename AddIT.java to new package
Rename AddIT.java from org/apache/directory/server/core/jndi to org/apache/directory/server/core/operations/add and update its import statement in MigratedStockCoreISuite.java to reflect the new package location.","refactor: Rename AddIT to new package
This commit renames the AddIT.java file from the org.apache.directory.server.core.jndi package to org.apache.directory.server.core.operations.add. The corresponding import statements in MigratedStockCoreISuite.java have also been updated to reflect this change."
https://github.com/apache/lenya/commit/f3c5e70e7f9cdc18ac0dcef205bc5fcacdee2bf7,"refactor: Simplify getLocator method
The getLocator method has been refactored to reduce unnecessary null checks and improve code readability. The method's functionality remains the same, but the implementation is now more concise and efficient.","refactor: Simplify getLocator method implementation
Refactored the getLocator method to directly retrieve the locator from the cache and check for null, instead of checking if the key exists in the cache first. This change simplifies the implementation and makes it more concise, while maintaining the same behavior and purpose of the method."
https://github.com/apache/logging-log4j2/commit/7831dde2eb0d0aa371639f8984b7a8b9f1b3aa53,"fix: Improve assertion in SslConfigurationTest
The assertion in the emptyConfigurationHasDefaultTrustStore method was strengthened to verify that an SSL configuration with no custom trust store settings defaults to the JVM's truststore. This change ensures that the test is more robust and accurate.","fix: Improve test for empty SSL configuration
This commit improves the test for empty SSL configuration by verifying that the SSLSocketFactory created from an empty SslConfiguration can successfully create an SSLSocket instance. Previously, the test simply asserted true, which did not provide a meaningful test of the SslConfiguration and SSLSocketFactory classes. The new test ensures that the clientSocket object is not null, providing a more meaningful property of the method."
https://github.com/apache/logging-log4j2/commit/d2aea7458f08e8b9d48f3768b719aafaf4246007,"refactor: Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils
This commit replaces the usage of sun.misc.IOUtils with org.apache.commons.io.IOUtils in the TestClassLoader class. This change is a refactoring of the internal structure of the code to make it more maintainable and easier to understand.","refactor: Improve TestClassLoader to load bytecode more efficiently
Refactor the findClass method in TestClassLoader to load bytecode into a pre-allocated byte array instead of reading it fully into memory at once. This change improves the efficiency of loading classes from a custom class loader by downloading the .class file from a URL. The method's functionality remains the same, but the internal implementation detail has been optimized to reduce memory usage."
https://github.com/helterskelterr/ofbizApp/commit/c5c2b2c9b3f2e5b8cb6e2960b2a6daf9eb9a335c,"fix: Fix alias matching in chooseClientAlias method
The method chooseClientAlias was incorrectly using the index 'i' instead of 'x' when comparing aliases, leading to incorrect alias matching. This commit fixes the issue by using the correct index 'x' in the comparison.","fix: Fix ArrayIndexOutOfBoundsException in chooseClientAlias method
Fixed a bug in the chooseClientAlias method where the outer loop variable 'i' was used to access the 'aliases' array, which would have caused an ArrayIndexOutOfBoundsException when 'x' reaches the end of the 'aliases' array. Now, the correct variable 'x' is used to access the 'aliases' array, making the method more reliable and less prone to errors."
https://github.com/apache/poi/commit/3234ce48d57222043d1fb8aec33d81315a5f30d9,"feat: Add test for parsing formula with string concatenation
This commit introduces a new unit test, testFormulaWithString, to cover the parsing of formulas that concatenate two strings using the ampersand (&) operator. This test ensures the FormulaParser class correctly handles string concatenation operations.","feat: Add test for parsing formula with string concatenation
This commit introduces a new unit test, testFormulaWithString, to verify the parsing of a formula that concatenates two strings using the ampersand (&) operator. The test ensures that the FormulaParser correctly handles string concatenation operations."
https://github.com/apache/usergrid/commit/8814a144b66054048be96a1c892fd750ee327327,"refactor: Improve event handling logic in AsyncEventServiceImpl
Refactored the callEventHandlers method to add additional checks for specific event types before logging a warning when no index operation messages are returned. This change improves the robustness and accuracy of event handling in the AsyncEventServiceImpl class.","fix: Improve logging for no index operation messages
Added conditional checks and logging to handle scenarios where no index operation messages are returned from event processing, excluding ElasticsearchIndexEvent and InitializeApplicationIndexEvent. This change enhances the logging mechanism to provide more informative warnings for specific scenarios, improving the overall debugging experience."
https://github.com/apache/wicket/commit/526bb16ab2f8b770a052fc93069b8b38a1d6c1f5,"refactor: Simplify WicketTagIdentifier
Refactor the WicketTagIdentifier class to use 'wicket component' instead of 'org.apache.wicket component', making the code more concise and easier to understand. This change does not affect the functionality of the class.","style: Remove redundant whitespace in WicketTagIdentifier
This commit removes an unnecessary empty line in the nextTag() method of WicketTagIdentifier class. The removal of this line does not affect the method's behavior or functionality, but rather improves the code's readability and formatting."
https://github.com/apache/wicket/commit/9fb30084cbc737ec035ed0e76a425612db462b47,"refactor: Simplify Javadoc references
Removed redundant package names from Javadoc references in BookmarkableMapper, making the code more concise and easier to read.","refactor: Update Javadoc references to use shorter class names
This commit updates the Javadoc references in the BookmarkableMapper class to use shorter class names, removing the unnecessary 'org.apache.wicket.request.mapper.' prefix. This change improves the readability and maintainability of the code without affecting its functionality."
https://github.com/apache/cxf/commit/260efe56fc1bfc89950d1eda89114feb287490cd,"refactor: Update getApplicationCertificates to store certificates as LOBs
This commit refactors the getApplicationCertificates method to store application certificates as large objects (LOBs) in the database, with eager fetching and ordering. This change improves the storage and retrieval of certificates associated with an application, likely for authentication or authorization purposes.","refactor: Mark application certificates as LOB field
This commit adds the @Lob annotation to the getApplicationCertificates method, indicating that the application certificates can be large in size. This change informs the JPA provider to handle the certificates accordingly, which may affect the underlying storage and retrieval mechanisms. The method's functionality remains the same, but the caller should be aware that the returned list of certificates can contain large objects, which may impact performance or memory usage."
https://github.com/apache/cxf/commit/455938206f6fe0f5e9717c4a6363d4d11fd414b5,"refactor: Introduce getStreamResult method for overriding
This commit refactors the XSLTJaxbProvider class to introduce a new protected method getStreamResult, which allows for overriding the stream result creation, e.g., for PDF generation using Apache FOP. This change enables more flexibility in the serialization process.","refactor: Introduce getStreamResult method for customizing stream result creation
This commit refactors the XSLTJaxbProvider class to introduce a new protected method getStreamResult, which allows for customizing the creation of StreamResult objects. This change enables more flexibility in marshaling JAXB objects to a stream, particularly useful for use cases like PDF generation using Apache FOP. The marshalToOutputStream method has been updated to use this new method, providing a more extensible approach to creating Result objects."
