[{"role": "system", "content": "You are an AI model that specializes in generating high quality commit messages. You will be given contextual information about a commit, and your task is to generate a commit message of high quality for it.\n\nANSWERING FORMAT AND INSTRUCTIONS\nYour commit message must be in the following format:\n\n```json\n{\n    \"type\": \"the type of the commit\",\n    \"subject\": \"the subject of the commit message\",\n    \"body\": \"the body of the commit message\"\n}\n```\n\n- The subject must be at most 72 characters. It should contain a brief summary of the changes introduced by the commit. You must use **imperative mood** to write the subject. Do not repeat the type in the subject.\n- The body is optional but strongly recommended. It should comprehensively provide additional relevant contextual information about **all** the changes made and/or justifications/motivations behind them. It must be written as detailed as possible. If you do not provide a body, you should use an empty string for its value. You are strongly encouraged to provide a body based on all the provided context.\n- Body should not include code blocks or snippets.\n- Do not write generic/uniformative/useless sentences in body. Provide only important and relevant information.\n- The type is the software maintenance activity type of the commit that should be determined based on the commit changes, commit message body and subject. The type must be exactly one of the following: feat, fix, style, refactor.  No other values are acceptable. The definitions of these activities are given below:\nfeat: introducing NEW features into the system. (feat is short for feature)\nfix: FIXING faults or software bugs.\nstyle: code FORMAT changes such as fixing redundant white-space, adding missing semi-colons, and similar changes.\nrefactor: changes made to the INTERNAL STRUCTURE of software to make it easier to understand and cheaper to modify without changing its observable behavior.\n- Type should not be repeated in the subject. Remember, type should be determined based on the commit changes, commit message body and subject.\n"}, {"role": "human", "content": "START OF COMMIT CONTEXT\n\nThe Git diff:\n\ndiff --git a/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineMetricCacheTest.java b/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineMetricCacheTest.java\nindex 05f8aeca9b..e520cf3648 100644\n--- a/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineMetricCacheTest.java\n+++ b/ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineMetricCacheTest.java\n@@ -419,7 +419,7 @@ public class TimelineMetricCacheTest {\n     long year = 365 * day;\n \n     //Original Values\n-    Map<String, TimelineMetric> valueMap = new HashMap();\n+    Map<String, TimelineMetric> valueMap = new HashMap<String, TimelineMetric>();\n     TimelineMetric timelineMetric = new TimelineMetric();\n     timelineMetric.setMetricName(\"cpu_user\");\n     timelineMetric.setAppId(\"app1\");\n\n\nChanged files relative importance:\nThere is only one changed file in this commit. There was no need to use this tool.\n\nThis is the changed method(s) summaries:\nHere are the summaries for all changed methods in this git diff in the commit url. For each method's before and after change versions, the summaries summarize it from five different perspectives: \n\nWhat: Describes the functionality of a method\nWhy: Explains the reason why a method is provided or the design rationale of the method\nHow-to-use: Describes the usage or the expected set-up of using a method\nHow-it-is-done: Describes the implementation details of a method\nProperty: Asserts properties of a method including pre-conditions or post-conditions of a method\n\nMethod public void testTimelineMetricCachePrecisionUpdates() throws Exception is modified by this git diff.\nThe method summaries before the commit are:\nWhat: joseph-m-williams/joseph-m-williams.github.io/js/main.\nWhy: e.\n\n## Usage\n\n```\n$./main.py\n```\n\n## License\n\nMIT\n# \nHow-to-use: e.\n# 2019-03-12-10-00-hello-world\n\n\nHow-it-is-done: e.\n# 2019-03-12-10-00-hello-world\n\n\nProperty: e.\n# 2019-03-12-10-00-hello-world\n\n\n\n\nThe method summaries after the commit are:\nWhat: joseph-m-williams/joseph-m-williams.github.io/js/main.\nWhy: e.\n\n## Usage\n\n```\n$./main.py\n```\n\n## License\n\nMIT\n# \nHow-to-use: e.\n# 2019-03-12-10-00-hello-world\n\n\nHow-it-is-done: e.\n# 2019-03-12-10-00-hello-world\n\n\nProperty: e.\n# 2019-03-12-10-00-hello-world\n\n\n\n\nHere is the changed class(es) functionality summary:\nThe summaries of the modified classes before the change of the git diff are described as follows:\nTimelineMetricCacheTest: joseph-m-h/joseph-m-h.github.io/README.md\nThe summaries of the modified classes after the change of the git diff are described as follows:\nTimelineMetricCacheTest: joseph-m-h/joseph-m-h.github.io/README.md\n\n\nHere is the associated issue(s):\nThere is no issue report associated with this commit url (git diff)\n\nHere is the associated pull request(s):\nThere is no pull request associated with this commit url (git diff)\n\nEND OF COMMIT CONTEXT\n\nYour commit message: "}, {"role": "assistant", "content": "e.\n\n## Usage\n\n```\n$./bin/run-tests\n```\n\n## License\n\nMIT\n# \n\n[![Build Status](https://travis-ci.org/josephfrazier/josephfrazier.svg?branch=master)](https://travis-ci.org/josephfrazier/josephfrazier)\n\n## Description\n\nThis is my personal website. It's built with [Hugo](https://gohugo.io/) and [Bootstrap](http://getbootstrap.com/).\n\n## Installation\n\n```\n$ git clone https://github.com/josephfrazier/josephfrazier.git\n$ cd josephfrazier\n$./bin/install\n```\n\n## Development\n\n```\n$./bin/run-dev\n```\n\nThis will start a local server on port 1313.\n\n## Testing\n\nThis project uses [Ginkgo](https://github.com/onsi/ginkgo) and [Gomega](https://github.com/onsi/gomega) for testing.\n\n```\n$./bin/run-tests\n```\n\nThis will run all of the tests in the `test` directory.\n\n## Linting\n\nThis project uses [Golint](https://github.com/golang/lint) for linting.\n\n```\n$./bin/run-lint\n```\n\nThis will run all of the linting rules on the source cod\n\treturn nil\n}\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\tif err := run(); err!= nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc run() error {\n\tif err := install(); err!= nil {\n\t\treturn err\n\t}\n\n\tif err := runDev(); err!= nil {\n\t\treturn err\n\t}\n\n\tif err := runTests(); err!= nil {\n\t\treturn err\n\t}\n\n\tif err := runLint(); err!="}]
