{"id": "63968", "raw_code": "@CallSuper protected void onPageScrolled(int position,float offset,int offsetPixels){\n  if (mDecorChildCount > 0) {\n    final int scrollX=getScrollX();\n    int paddingLeft=getPaddingLeft();\n    int paddingRight=getPaddingRight();\n    final int width=getWidth();\n    final int childCount=getChildCount();\n    for (int i=0; i < childCount; i++) {\n      final View child=getChildAt(i);\n      final LayoutParams lp=(LayoutParams)child.getLayoutParams();\n      if (!lp.isDecor)       continue;\n      final int hgrav=lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;\n      int childLeft=0;\nswitch (hgrav) {\ndefault :\n        childLeft=paddingLeft;\n      break;\ncase Gravity.LEFT:\n    childLeft=paddingLeft;\n  paddingLeft+=child.getWidth();\nbreak;\ncase Gravity.CENTER_HORIZONTAL:\nchildLeft=Math.max((width - child.getMeasuredWidth()) / 2,paddingLeft);\nbreak;\ncase Gravity.RIGHT:\nchildLeft=width - paddingRight - child.getMeasuredWidth();\npaddingRight+=child.getMeasuredWidth();\nbreak;\n}\nchildLeft+=scrollX;\nfinal int childOffset=childLeft - child.getLeft();\nif (childOffset != 0) {\nchild.offsetLeftAndRight(childOffset);\n}\n}\n}\ndispatchOnPageScrolled(position,offset,offsetPixels);\nif (mPageTransformer != null) {\nfinal int scrollX=getScrollX();\nfinal int childCount=getChildCount();\nfor (int i=0; i < childCount; i++) {\nfinal View child=getChildAt(i);\nfinal LayoutParams lp=(LayoutParams)child.getLayoutParams();\nif (lp.isDecor) continue;\nfinal float transformPos=(float)(child.getLeft() - scrollX) / getClientWidth();\nmPageTransformer.transformPage(child,transformPos);\n}\n}\nmCalledSuper=true;\n}", "comment": "this method will be invoked when the current page is scrolled , either as part of a programmatically initiated smooth scroll or a user initiated touch scroll .", "label": "usage"}
{"id": "13290", "raw_code": "protected void resetCommon() throws XNIException {\n  int count=fCommonComponents.size();\n  for (int i=0; i < count; i++) {\n    XMLComponent c=(XMLComponent)fCommonComponents.get(i);\n    c.reset(this);\n  }\n}", "comment": "reset all common components before parsing", "label": "usage"}
{"id": "68937", "raw_code": "public void onAccuracyChanged(Sensor sensor,int accuracy){\n  if (sensor.getType() != Sensor.TYPE_ACCELEROMETER) {\n    return;\n  }\n  if (this.status == AccelListener.STOPPED) {\n    return;\n  }\n  this.accuracy=accuracy;\n}", "comment": "called when the accuracy of the sensor has changed .", "label": "usage"}
{"id": "23838", "raw_code": "protected void closeCallbacksExceptListener(){\n  closeCacheCallback(getCacheLoader());\n  closeCacheCallback(getCacheWriter());\n  closeCacheCallback(getEvictionController());\n}", "comment": "the listener is not closed until after the afterregiondestroy event", "label": "usage"}
{"id": "65838", "raw_code": "public void mouseClicked(MouseEvent e){\n  if (e.getClickCount() > 1) {\n    System.gc();\n  }\n}", "comment": "invoked when the mouse has been clicked on a component .", "label": "usage"}
{"id": "39988", "raw_code": "protected void onPageScrolled(int position,float offset,int offsetPixels){\n  if (mDecorChildCount > 0) {\n    final int scrollX=getScrollX();\n    int paddingLeft=getPaddingLeft();\n    int paddingRight=getPaddingRight();\n    final int width=getWidth();\n    final int childCount=getChildCount();\n    for (int i=0; i < childCount; i++) {\n      final View child=getChildAt(i);\n      final LayoutParams lp=(LayoutParams)child.getLayoutParams();\n      if (!lp.isDecor)       continue;\n      final int hgrav=lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;\n      int childLeft=0;\nswitch (hgrav) {\ndefault :\n        childLeft=paddingLeft;\n      break;\ncase Gravity.LEFT:\n    childLeft=paddingLeft;\n  paddingLeft+=child.getWidth();\nbreak;\ncase Gravity.CENTER_HORIZONTAL:\nchildLeft=Math.max((width - child.getMeasuredWidth()) / 2,paddingLeft);\nbreak;\ncase Gravity.RIGHT:\nchildLeft=width - paddingRight - child.getMeasuredWidth();\npaddingRight+=child.getMeasuredWidth();\nbreak;\n}\nchildLeft+=scrollX;\nfinal int childOffset=childLeft - child.getLeft();\nif (childOffset != 0) {\nchild.offsetLeftAndRight(childOffset);\n}\n}\n}\nif (mOnPageChangeListener != null) {\nmOnPageChangeListener.onPageScrolled(position,offset,offsetPixels);\n}\nif (mInternalPageChangeListener != null) {\nmInternalPageChangeListener.onPageScrolled(position,offset,offsetPixels);\n}\nif (mPageTransformer != null) {\nfinal int scrollX=getScrollX();\nfinal int childCount=getChildCount();\nfor (int i=0; i < childCount; i++) {\nfinal View child=getChildAt(i);\nfinal LayoutParams lp=(LayoutParams)child.getLayoutParams();\nif (lp.isDecor) continue;\nfinal float transformPos=(float)(child.getLeft() - scrollX) / getClientWidth();\nmPageTransformer.transformPage(child,transformPos);\n}\n}\nmCalledSuper=true;\n}", "comment": "this method will be invoked when the current page is scrolled , either as part of a programmatically initiated smooth scroll or a user initiated touch scroll .", "label": "usage"}
{"id": "39498", "raw_code": "protected boolean isCorrectMethod(Method method,Object[] args){\n  return (proxySignature.equals(method.getName()) && args.length == 1);\n}", "comment": "compare the method that was called to the intended method when the osxadapter instance was created ( e . g . handleabout , handlequit , handleopenfile , etc . ) .", "label": "usage"}
{"id": "10928", "raw_code": "protected void configureFromProperties(InputStream is,String rootDirectory) throws IOException {\n  Properties props=new Properties();\n  props.load(is);\n  props.put(ROOT_DIR_PATH_PROPERTY,rootDirectory);\n  String oldPrefix=getPropertyPrefix();\n  setProperties(null,props);\n  setPropertyPrefix(oldPrefix);\n}", "comment": "called with an input stream for a properties file , used for reading tiles . omp files .", "label": "usage"}
{"id": "75368", "raw_code": "@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  mHandler=new Handler();\n  setContentView(R.layout.voice_recognition);\n  Button speakButton=(Button)findViewById(R.id.btn_speak);\n  mList=(ListView)findViewById(R.id.list);\n  mSupportedLanguageView=(Spinner)findViewById(R.id.supported_languages);\n  PackageManager pm=getPackageManager();\n  List<ResolveInfo> activities=pm.queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH),0);\n  if (activities.size() != 0) {\n    speakButton.setOnClickListener(this);\n  }\n else {\n    speakButton.setEnabled(false);\n    speakButton.setText(\"Recognizer not present\");\n  }\n  refreshVoiceSettings();\n}", "comment": "called with the activity is first created .", "label": "usage"}
{"id": "11663", "raw_code": "public boolean mouseDragged(MouseEvent e){\n  if (grabbed_plot_graphics_) {\n    int x=e.getX();\n    int y=e.getY();\n    int dx=x - prevX;\n    int dy=y - prevY;\n    plotX+=dx;\n    plotY+=dy;\n    prevX=x;\n    prevY=y;\n    graph.resize(plotX,plotY,plotWidth,plotHeight);\n    OMGraphicList plotGraphics=graph.getPlotGraphics();\n    plotGraphics.generate(getProjection(),true);\n    repaint();\n  }\n  return false;\n}", "comment": "called whenever the mouse is dragged on this layer and one of the requested mouse modes is active .", "label": "usage"}
{"id": "76676", "raw_code": "protected void processChildren(QueryNode queryTree) throws QueryNodeException {\n  List<QueryNode> children=queryTree.getChildren();\n  ChildrenList newChildren;\n  if (children != null && children.size() > 0) {\n    newChildren=allocateChildrenList();\n    try {\n      for (      QueryNode child : children) {\n        child=processIteration(child);\n        if (child == null) {\n          throw new NullPointerException();\n        }\n        newChildren.add(child);\n      }\n      List<QueryNode> orderedChildrenList=setChildrenOrder(newChildren);\n      queryTree.set(orderedChildrenList);\n    }\n  finally {\n      newChildren.beingUsed=false;\n    }\n  }\n}", "comment": "this method is called every time a child is processed .", "label": "usage"}
{"id": "68444", "raw_code": "public void actionPerformed(ActionEvent e){\n  navigateToPriorDemo();\n}", "comment": "invoked when an action occurs .", "label": "usage"}
{"id": "49211", "raw_code": "void doHandleJavaMouseEvent(MouseEvent mouseEvent){\n  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {\n    return;\n  }\n  XBaseWindow grabWindow=XAwtState.getGrabWindow();\n  Point ptGlobal=mouseEvent.getLocationOnScreen();\n  if (!hasPointerMoved) {\n    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {\n      hasPointerMoved=true;\n    }\n  }\n  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);\n  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;\n  XBaseMenuWindow cwnd=getShowingLeaf();\nswitch (mouseEvent.getID()) {\ncase MouseEvent.MOUSE_PRESSED:\n    showingMousePressedSubmenu=null;\n  if ((grabWindow == this) && (wnd == null)) {\n    ungrabInput();\n  }\n else {\n    grabInput();\n    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {\n      if (wnd.getShowingSubmenu() == item) {\n        showingMousePressedSubmenu=(XMenuPeer)item;\n      }\n      wnd.selectItem(item,true);\n    }\n else {\n      if (wnd != null) {\n        wnd.selectItem(null,false);\n      }\n    }\n  }\nbreak;\ncase MouseEvent.MOUSE_RELEASED:\nif (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {\nif (item instanceof XMenuPeer) {\n  if (showingMousePressedSubmenu == item) {\n    if (wnd instanceof XMenuBarPeer) {\n      ungrabInput();\n    }\n else {\n      wnd.selectItem(item,false);\n    }\n  }\n}\n else {\n  item.action(mouseEvent.getWhen());\n  ungrabInput();\n}\n}\n else {\nif (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {\n  ungrabInput();\n}\n}\nshowingMousePressedSubmenu=null;\nbreak;\ncase MouseEvent.MOUSE_DRAGGED:\nif (wnd != null) {\nif (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {\nif (grabWindow == this) {\nwnd.selectItem(item,true);\n}\n}\n else {\nwnd.selectItem(null,false);\n}\n}\n else {\nif (cwnd != null) {\ncwnd.selectItem(null,false);\n}\n}\nbreak;\n}\n}", "comment": "performs handling of java mouse event note that this function should be invoked only from root of menu window ' s hierarchy that grabs input focus", "label": "usage"}
{"id": "25509", "raw_code": "private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {\n  if (doUmdBuffering) {\n    return false;\n  }\n  File file=new File(filename);\n  if (file.exists()) {\n    RandomAccessFile raf=new RandomAccessFile(file,\"r\");\n    FileChannel roChannel=raf.getChannel();\n    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());\n    emulator.load(\"disc0:/PSP_GAME/SYSDIR/EBOOT.BIN\",readbuffer);\n    raf.close();\n    log.info(\"Using unpacked UMD EBOOT.BIN image\");\n    return true;\n  }\n  return false;\n}", "comment": "don ' t call this directly , see loadumd ( file file )", "label": "usage"}
{"id": "17178", "raw_code": "public void addTranslator(ClassPool cp,Translator t) throws NotFoundException, CannotCompileException {\n  source=cp;\n  translator=t;\n  t.start(cp);\n}", "comment": "adds a translator , which is called whenever a class is loaded .", "label": "usage"}
{"id": "63507", "raw_code": "public static ResultSet pointTable(double x,double y){\n  GeometryFactory factory=new GeometryFactory();\n  SimpleResultSet rs=new SimpleResultSet();\n  rs.addColumn(\"THE_GEOM\",Types.JAVA_OBJECT,\"GEOMETRY\",0,0);\n  rs.addRow(factory.createPoint(new Coordinate(x,y)));\n  return rs;\n}", "comment": "this method is called via reflection from the database .", "label": "usage"}
{"id": "80148", "raw_code": "private void onHPChange(final int amount){\n  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {\n    if (amount > 0) {\n      addTextIndicator(\"+\" + amount,NotificationType.POSITIVE);\n    }\n else {\n      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);\n    }\n  }\n}", "comment": "called when entity adjusts hp .", "label": "usage"}
{"id": "83818", "raw_code": "public boolean computeAngleOffset(){\n  if (mFinished) {\n    return false;\n  }\n  long systemClock=AnimationUtils.currentAnimationTimeMillis();\n  long timePassed=systemClock - mStartTime;\n  if (timePassed < mDuration) {\nswitch (mMode) {\ncase SCROLL_MODE:\n      float sc=(float)timePassed / mDuration;\n    mCurrAngle=mStartAngle + Math.round(mDeltaAngle * sc);\n  break;\ncase FLING_MODE:\nfloat timePassedSeconds=timePassed / 1000.0f;\nfloat distance;\nif (mVelocity < 0) {\ndistance=mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / 2.0f);\n}\n else {\ndistance=-mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / 2.0f);\n}\nmCurrAngle=mStartAngle - Math.signum(mVelocity) * Math.round(distance);\nbreak;\n}\nreturn true;\n}\n else {\nmFinished=true;\nreturn false;\n}\n}", "comment": "call this when you want to know the new location .", "label": "usage"}
{"id": "36604", "raw_code": "@Override public void valueChanged(TreeSelectionEvent e){\n  if (preventEvent) {\n    return;\n  }\n  if (mainFrame != null) {\n    List<Operator> selectedOperators=getSelectedOperators();\n    if (selectedOperators != null && !selectedOperators.isEmpty()) {\n      mainFrame.selectOperators(selectedOperators);\n    }\n  }\n}", "comment": "this method will be invoked after a user selection of an operator in the tree .", "label": "usage"}
{"id": "13792", "raw_code": "public void schemaChanged(String serviceName,String version){\nsynchronized (mapRealmToFormat) {\n    mapRealmToFormat.remove(ROOT);\n  }\n}", "comment": "this method will be invoked when a service ' s schema has been changed .", "label": "usage"}
{"id": "25881", "raw_code": "@Override public AbstractScannedResult scanBlocklet(BlocksChunkHolder blocksChunkHolder) throws QueryExecutionException {\n  try {\n    fillScannedResult(blocksChunkHolder);\n  }\n catch (  FilterUnsupportedException e) {\n    throw new QueryExecutionException(e.getMessage());\n  }\n  return scannedResult;\n}", "comment": "below method will be used to process the block", "label": "usage"}
{"id": "59637", "raw_code": "public void addSwipeListener(SwipeListener listener){\n  if (mListeners == null) {\n    mListeners=new ArrayList<SwipeListener>();\n  }\n  mListeners.add(listener);\n}", "comment": "add a callback to be invoked when a swipe event is sent to this view .", "label": "usage"}
{"id": "35508", "raw_code": "@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){\n  exception.printStackTrace();\n  Log.e(\"TrafficService\",\"Error connecting: \" + exception.getMessage());\n  onDisconnect(false);\n}", "comment": "called when there was an error connecting", "label": "usage"}
{"id": "11343", "raw_code": "protected void cutSelectedBean(){\n  if (Debug.debugging(\"beanbox\"))   Debug.output(\"Enter> cutSelectedBean\");\n  if (selectedBean == null || selectedBeanLocation == null) {\n    if (Debug.debugging(\"beanbox\"))     Debug.output(\"selectedBean=\" + selectedBean);\n    if (Debug.debugging(\"beanbox\"))     Debug.output(\"selectedBeanLocation=\" + selectedBeanLocation);\n    clearSelection();\n    return;\n  }\n  try {\n    serBean=new ByteArrayOutputStream();\n    ObjectOutputStream oos=new ObjectOutputStream(serBean);\n    oos.writeObject(selectedBean);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    clearSelection();\n    if (Debug.debugging(\"beanbox\"))     Debug.output(\"Exit> copySelectedBean\");\n    return;\n  }\n  cutBean=selectedBean;\n  selectedBeanBox.showCut(selectedBean);\n  if (Debug.debugging(\"beanbox\"))   Debug.output(\"Exit> cutSelectedBean\");\n}", "comment": "this method is called when the user chooses to cut a bean by some means such by by pressing ctrl - x .", "label": "usage"}
{"id": "11319", "raw_code": "public void actionPerformed(java.awt.event.ActionEvent e){\n  Object source=e.getSource();\n  if (!(source instanceof JMenuItem))   return;\n  JMenuItem mi=(JMenuItem)source;\n  String name=mi.getText();\n  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);\n  if (targetLayer == null) {\n    Debug.message(\"defaultdndcatcher\",\"ERROR> DefaultDnDCatcher::actionPerformed: \" + \"no layer found with name \" + name);\n    return;\n  }\n  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));\n}", "comment": "invoked when an action from the popup menu occurs .", "label": "usage"}
{"id": "25502", "raw_code": "public void pushDrawList(PspGeList list){\nsynchronized (drawListQueue) {\n    drawListQueue.add(list);\n  }\n}", "comment": "called from pspge module", "label": "usage"}
{"id": "33914", "raw_code": "private void applyTo(ClassVisitor v,Field f){\n  if (Log.isLoggingOn()) {\n    Log.logLine(String.format(\"Visiting field %s\",f.toGenericString()));\n  }\n  v.visit(f);\n}", "comment": "apply a visitor to a field .", "label": "usage"}
{"id": "2536", "raw_code": "public IOUtils(){\n  super();\n}", "comment": "instances should not be constructed in standard programming .", "label": "usage"}
{"id": "84599", "raw_code": "public void makeDirty(){\n  betaChanged=true;\n  newMode=true;\n  precisionChanged=true;\n  regressionInterface.makeDirty(instance);\n}", "comment": "forces a complete recalculation of the likelihood next time getlikelihood is called", "label": "usage"}
{"id": "69714", "raw_code": "protected void drawConnectorCenters(Canvas c){\n  List<Connection> connections=mBlock.getAllConnections();\n  Paint paint=new Paint();\n  paint.setStyle(Paint.Style.FILL);\n  for (int i=0; i < connections.size(); i++) {\n    Connection conn=connections.get(i);\n    if (conn.inDragMode()) {\n      if (conn.isConnected()) {\n        paint.setColor(Color.RED);\n      }\n else {\n        paint.setColor(Color.MAGENTA);\n      }\n    }\n else {\n      if (conn.isConnected()) {\n        paint.setColor(Color.GREEN);\n      }\n else {\n        paint.setColor(Color.CYAN);\n      }\n    }\n    mTempWorkspacePoint.set(conn.getPosition().x - mBlock.getPosition().x,conn.getPosition().y - mBlock.getPosition().y);\n    mHelper.workspaceToVirtualViewDelta(mTempWorkspacePoint,mTempConnectionPosition);\n    if (mHelper.useRtl()) {\n      mTempConnectionPosition.x+=mBlockViewSize.x;\n    }\n    c.drawCircle(mTempConnectionPosition.x,mTempConnectionPosition.y,10,paint);\n  }\n}", "comment": "this is a developer testing function subclasses can call to draw dots at the model ' s location of all connections on this block .", "label": "usage"}
{"id": "64152", "raw_code": "public FileSystemUtils(){\n  super();\n}", "comment": "instances should not be constructed in standard programming .", "label": "usage"}
{"id": "31521", "raw_code": "@Override public void onDetachedFromRecyclerView(RecyclerView recyclerView){\n  super.onDetachedFromRecyclerView(recyclerView);\n  mAttachedRecyclerViewPool.remove(recyclerView);\n}", "comment": "implementation of adapter . ondetachedfromrecyclerview ( recyclerview ) called when this expandablerecycleradapter is detached from a recyclerview .", "label": "usage"}
{"id": "50178", "raw_code": "public void handleMaintenance(Operation maintOp){\n  performPendingRequestMaintenance();\n  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);\n  maintOp.complete();\n}", "comment": "invoked by parent during its maintenance interval", "label": "usage"}
{"id": "53945", "raw_code": "public void start(){\n  if (setState(EnumSet.of(TaskState.INITIAL,TaskState.QUEUED),TaskState.RUNNING)) {\n    DHT.logDebug(\"Starting Task: \" + toString());\n    startTime=System.currentTimeMillis();\n    try {\n      serializedUpdate.run();\n    }\n catch (    Exception e) {\n      DHT.log(e,LogLevel.Error);\n    }\n  }\n}", "comment": "start the task , to be used when a task is queued .", "label": "usage"}
{"id": "16920", "raw_code": "public ActionRequestHelper dependsOn(ActionRequestHelper dependency){\n  mDependencies.add(dependency);\n  return this;\n}", "comment": "this request will execute after the dependency completes .", "label": "usage"}
{"id": "25328", "raw_code": "public void onStart(){\n  if (mAudioMirrorBuffer == null) {\n    mAudioMirrorBuffer=new byte[262144];\n  }\n  if (mStreamer != null) {\n    mStreamer.start();\n  }\n  if (mInsecureStreamer != null) {\n    mInsecureStreamer.start();\n  }\n}", "comment": "called when the playback service starts", "label": "usage"}
{"id": "11246", "raw_code": "public void httpRequest(HttpRequestEvent e) throws java.io.IOException {\n  String request=e.getRequest();\n  if (Debug.debugging(\"shis\")) {\n    Debug.output(\"SHIS: Handling request - \\\"\" + request + \"\\\"\");\n  }\n  if (request.charAt(0) == '/') {\n    request=request.substring(0,request.length());\n  }\n  int index=0;\n  index=request.indexOf('?');\n  if (index != -1) {\n    request=request.substring(index + 1,request.length());\n    Debug.message(\"shis\",\"SHIS: GET Request received\");\n  }\n else {\n    Debug.message(\"shis\",\"SHIS: Probably a POST Request received\");\n  }\n  try {\n    iServer.handleRequest(request,e.getOutputStream());\n  }\n catch (  IOException ioe) {\n    Debug.error(\"SHIS: caught IOException - \\n\" + ioe.getMessage());\n  }\ncatch (  MapRequestFormatException exception) {\n    String message=\"OpenMap SimpleHttpImageServer encountered an problem with your request:\\n\\n\" + exception.getMessage() + \"\\n\\n\"+ ErrorMessage;\n    HttpConnection.writeHttpResponse(e.getOutputStream(),HttpConnection.CONTENT_PLAIN,message);\n  }\n}", "comment": "invoked when an http request is received .", "label": "usage"}
{"id": "3515", "raw_code": "public void clientDisconnect(){\n  try {\n    OutHttpApp responseStream=_responseStream;\n    if (responseStream != null) {\n      responseStream.close();\n    }\n  }\n catch (  Exception e) {\n    log.log(Level.FINER,e.toString(),e);\n  }\n  ConnectionTcp conn=connTcp();\n  if (conn != null) {\n    conn.clientDisconnect();\n  }\n  killKeepalive(\"client disconnect\");\n}", "comment": "called when the client has disconnected", "label": "usage"}
{"id": "10541", "raw_code": "private final void _writeUTF8Segments(byte[] utf8,int offset,int totalLen) throws IOException, JsonGenerationException {\n  do {\n    int len=Math.min(_outputMaxContiguous,totalLen);\n    _writeUTF8Segment(utf8,offset,len);\n    offset+=len;\n    totalLen-=len;\n  }\n while (totalLen > 0);\n}", "comment": "method called when utf - 8 encoded ( but not yet escaped ! ) content is not guaranteed to fit in the output buffer after escaping ; as such , we just need to chunk writes .", "label": "usage"}
{"id": "48785", "raw_code": "protected final void dragDropFinished(final boolean success,final int operations,final int x,final int y){\n  DragSourceEvent event=new DragSourceDropEvent(getDragSourceContext(),operations & sourceActions,success,x,y);\n  EventDispatcher dispatcher=new EventDispatcher(DISPATCH_FINISH,event);\n  SunToolkit.invokeLaterOnAppContext(SunToolkit.targetToAppContext(getComponent()),dispatcher);\n  startSecondaryEventLoop();\n  setNativeContext(0);\n  dragImage=null;\n  dragImageOffset=null;\n}", "comment": "upcall from native code via implemented class ( do )", "label": "usage"}
{"id": "63597", "raw_code": "public int onBlockExploded(){\n  return (int)(fuseTime / 2 + Math.random() * fuseTime / 4);\n}", "comment": "called when the block for of this explosive is destroy by an explosion", "label": "usage"}
{"id": "29969", "raw_code": "public void stop(){\n  setLedOn(false);\n  if (null != blinkFuture) {\n    blinkFuture.cancel(true);\n  }\n  if (null != blinkService) {\n    blinkService.shutdownNow();\n  }\n}", "comment": "calling this method will stop all threads .", "label": "usage"}
{"id": "50171", "raw_code": "private void addReplicationFactor(Operation op){\n  op.addRequestHeader(Operation.REPLICATION_QUORUM_HEADER,Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL);\n}", "comment": "authorization related operations should take effect on all replicas , before they complete .", "label": "usage"}
{"id": "83647", "raw_code": "@Override public boolean onPreferenceClick(Preference preference){\n  if (preference == mPlayExample) {\n    getSampleText();\n    return true;\n  }\n  return false;\n}", "comment": "called when mplayexample is clicked", "label": "usage"}
{"id": "68091", "raw_code": "protected void onException(final WroRuntimeException e){\n  throw e;\n}", "comment": "invoked when an unexpected exception occurred during processing .", "label": "usage"}
{"id": "49295", "raw_code": "@Override @SuppressWarnings(\"unchecked\") public void completed(int bytesTransferred,boolean canInvokeDirect){\n  if (bytesTransferred == 0) {\n    bytesTransferred=-1;\n  }\n else {\n    updateBuffers(bytesTransferred);\n  }\n  releaseBuffers();\nsynchronized (result) {\n    if (result.isDone())     return;\n    enableReading();\n    if (scatteringRead) {\n      result.setResult((V)Long.valueOf(bytesTransferred));\n    }\n else {\n      result.setResult((V)Integer.valueOf(bytesTransferred));\n    }\n  }\n  if (canInvokeDirect) {\n    Invoker.invokeUnchecked(result);\n  }\n else {\n    Invoker.invoke(result);\n  }\n}", "comment": "executed when the i / o has completed", "label": "usage"}
{"id": "6348", "raw_code": "public static void printStackTrace(Throwable e){\n  try {\n    Debug.printStackTrace(e);\n  }\n catch (  Throwable f) {\n    e.printStackTrace();\n  }\n}", "comment": "used in environments where full debug may not be available", "label": "usage"}
{"id": "56112", "raw_code": "public void onSinksReceived(String sourceUrn,List<MediaSink> sinks){\n  mSinks.put(sourceUrn,sinks);\n  nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceUrn,sinks.size());\n}", "comment": "called when the sinks found by the media route provider for the particular | sourceurn | have changed .", "label": "usage"}
