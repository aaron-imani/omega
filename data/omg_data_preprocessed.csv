commit_url,commit,project,Multi-files?,HM,OMG
https://github.com/apache/ambari/commit/e3e91155adb831bb487133b16c7ab78a230a713f,e3e91155adb831bb487133b16c7ab78a230a713f,apache/ambari,,"Revert ""Fix unnecessary type casting in Test"" This reverts commit f3ab77c.","Refactor: Specify type of HashMap in `testTimelineMetricCachePrecisionUpdates()`In the `testTimelineMetricCachePrecisionUpdates()` method in the `TimelineMetricCacheTest.java` file, the type of the HashMap `valueMap` was specified in its initialization. This change improves the code's internal structure without altering its external behavior._x001B_"
https://github.com/apache/ant/commit/89aa7775a83989345756349f99bd3556780eafee,89aa7775a83989345756349f99bd3556780eafee,apache/ant,,Added some javadocs for OS condition.,Feat: Improve documentation in Os.java Added detailed comments to the setFamily and eval methods in the Os.java file. The comments provide information about the functionality of the methods and the expected input for the setFamily method.
https://github.com/apache/ant/commit/5b377d290d4ff3d4557987da9b3c2dd802203cde,5b377d290d4ff3d4557987da9b3c2dd802203cde,apache/ant,,Last weeks changes took away helpful information about why exec failed to run; this puts it back in.,"Fix: Provide more detailed exception message in `runExec` method In the `runExec` method of `ExecTask.java`, the exception message when the command line process execution fails has been updated to include more information about the exception. This change improves the error handling by providing more context about the exception, which can be helpful for debugging._x001B_[0m"
https://github.com/apache/ant/commit/1a3090627d25c1ede9407003e24d7e76ca48f293,1a3090627d25c1ede9407003e24d7e76ca48f293,apache/ant,,Made complex loop counter a simple constant Removing a Audit violation,"Refactor: Optimize loop in XMLValidateTask This commit introduces a minor optimization in the XMLValidateTask class. A new variable 'size' is introduced to hold the size of 'm_dtdLocations', which is then used in the for loop condition. This change improves the structure of the code without altering its functionality._x001B_[0m"
https://github.com/apache/ant/commit/cfa604fd9941bf59641e989306c4356dab156015,cfa604fd9941bf59641e989306c4356dab156015,apache/ant,,testcase wouldn't compile - slipping fingers?,"Fix: Correct object used to set date in testDateISO() method In the 'testDateISO()' method of the 'DateUtilsTest.java' file, the object used to set the calendar date has been corrected from 'emailtaskcal' to 'cal'. This change ensures that the method tests the conversion of a date to an ISO 8601 string correctly._x001B_[0m"
https://github.com/apache/ant/commit/5e099552e5af434568a4294cf7bcebb732cd3bfa,5e099552e5af434568a4294cf7bcebb732cd3bfa,apache/ant,Y,Delete some unused variables,"Refactor: Remove unused variables in Translate.java In both the 'proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java' and 'proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java' files, the private Locale variable 'locale' and the StringBuffer 'newline' in the 'translate' method have been removed. These variables were not used, and their removal simplifies the code without affecting its functionality._x001B_[0m"
https://github.com/apache/ant/commit/4ffa9e1380956291543b6662e6ebfe89e859ebeb,4ffa9e1380956291543b6662e6ebfe89e859ebeb,apache/ant,,quick fix for Ant.java use of property in Ant#reinit,"Fix: Handle null task in createTask method In the createTask method of the ComponentHelper class, added a condition to handle a case where the task is null and the taskType equals ""property"". In this case, a new task definition is added and a new task is created. This is a fix for a situation where the ""property"" task is used before the project is initialized._x001B_[0m"
https://github.com/apache/ant/commit/ea0ea86ba268d63b39f8e608a746e4aad1eb1b3c,ea0ea86ba268d63b39f8e608a746e4aad1eb1b3c,apache/ant,,cancel previous change,"Fix: Update resource map loading in Translate.java This commit updates the method loadResourceMaps() in Translate.java to load resource maps for a specific locale and the default locale, processing each bundle file in a specific order. The change enhances the specificity of the resource map loading process._x001B_[0m"
https://github.com/apache/ant/commit/42e30982adb99585237d6b9c9478ca1d647cc074,42e30982adb99585237d6b9c9478ca1d647cc074,apache/ant,,Fix incorrect finalize override,"Refactor: Change visibility of finalize method in CBZip2OutputStream The visibility of the `finalize` method in `CBZip2OutputStream.java` has been changed from `public` to `protected`, and a call to `super.finalize()` has been added. This ensures that the object is properly closed when it's garbage collected._x001B_[0m"
https://github.com/apache/ant/commit/50f9f4ee6f3a436fe05a0360e6e1d09851aba00c,50f9f4ee6f3a436fe05a0360e6e1d09851aba00c,apache/ant,,Add missing import,Feat: Add import statement in TarRoundTripTest.java Added import statement for ByteArrayInputStream in TarRoundTripTest.java.
https://github.com/apache/ant/commit/4177bdb64e339c8ee010ab514d0670cdcee1d963,4177bdb64e339c8ee010ab514d0670cdcee1d963,apache/ant,,mistake found ... oops ... Corrected,"Fix: Correct classification of symbolic links in FTP.java In the method 'scandir' of the class 'FTP.java', symbolic links were previously classified as directories and added to 'dirsExcluded'. This commit corrects this misclassification by adding symbolic links to 'filesExcluded' instead. This change ensures that symbolic links are correctly identified and handled."
https://github.com/apache/ant/commit/f26efe57b3dd44192d50ef1af3befe01a03c7bf6,f26efe57b3dd44192d50ef1af3befe01a03c7bf6,apache/ant,,typo - sort of,Style: Corrected language in comment Changed the language of a comment in the StyleTest.java file from German to English for better understanding.
https://github.com/apache/ant/commit/443bf819ed21ca24bcdf71d48e0c2fbc8cd1be3d,443bf819ed21ca24bcdf71d48e0c2fbc8cd1be3d,apache/ant,,Make SQL task work under Oracle,Refactor: Modify loop condition in execSQL method This commit modifies the condition in the do-while loop in the execSQL method of the SQLExec.java file. The change is a refactor aimed at improving the structure or readability of the code. The execSQL method is responsible for executing a SQL statement and handling any SQL warnings or errors. The modification might affect how the method handles the SQL execution._x001B_[0m
https://github.com/apache/ant/commit/efef302a3da9a9e063da729c92f6f2b997884a9a,efef302a3da9a9e063da729c92f6f2b997884a9a,apache/ant,,Allow references and properties to be null without causing NPE in BSF,"Fix: Add null check before declaring a bean in ScriptRunner In the `executeScript(String execName)` method of `ScriptRunner.java`, a null check is added before declaring a bean. If the value is null, the bean is undeclared. This change is made to ensure that the script is executed using the beanshell scripting framework."
https://github.com/apache/ant/commit/1a5baa2ad88ff04ee5ffa0d12774bb824ae78082,1a5baa2ad88ff04ee5ffa0d12774bb824ae78082,apache/ant,,raise log level of targets to match that of task events,"Refactor: Change logging level in targetStarted method The logging level in the `targetStarted` method of the `CommonsLoggingListener` class has been changed from `Project.MSG_DEBUG` to `Project.MSG_VERBOSE`. This is a refactor commit, meaning the code has been changed to improve its internal structure without altering its external behavior. The functionality of the `targetStarted` method, which logs the start of a target during a build process, remains the same."
https://github.com/apache/ant/commit/2bc2f8e4fa99ff51eaec0156d0a7a97bad5eab53,2bc2f8e4fa99ff51eaec0156d0a7a97bad5eab53,apache/ant,,Remove Steve's complaint ;) after Stefan and Peter's recent Location changes,"Style: Refactor comments in EchoXML.java This commit refactors the comments in the EchoXML.java file for better readability and understanding. A line of code has also been removed. The functionality of the EchoXML class, which writes XML content to a specified file or log, remains unchanged."
https://github.com/apache/ant/commit/a2cedaed6c1a36e3550cc939393a9d77b3bb28ac,a2cedaed6c1a36e3550cc939393a9d77b3bb28ac,apache/ant,,Same fix as for AncestorAnalyzer - make code compile with BCEL's trunk,"Fix: Improve exception handling in FullAnalyzer constructor In the FullAnalyzer class, the exception handling in the constructor has been improved. Previously, only IOExceptions were caught and ignored. Now, all exceptions are caught, and if the exception is not an IOException, a BuildException is thrown. This change ensures that unexpected exceptions do not go unnoticed, improving the robustness of the FullAnalyzer class, which is responsible for analyzing and determining all class-class dependencies in a Java application."
https://github.com/apache/ant/commit/0b3dbe0ca84c2239ed930097c355bc7896d2e1c0,0b3dbe0ca84c2239ed930097c355bc7896d2e1c0,apache/ant,,"this kind of problem should be rare and should only affect recompiles, thus doesn't impact drop-in BC","Refactor: Add type casting to getReference() method call in test1() In the `test1()` method of the `RedirectorElementTest.java` file, a type casting was added to the `getReference()` method call. This change improves the readability of the code without altering its functionality. The method tests if the project reference ""test1"" is an instance of RedirectorElement."
https://github.com/apache/ant/commit/6cd989e534dd52130f932ce04d3ca8aafe387cc9,6cd989e534dd52130f932ce04d3ca8aafe387cc9,apache/ant,,deal with theoretical case of version scheme changing again,Refactor: Improved parsing and storing of java version number The parsing and storing of the java version number in JavaEnvUtils.java has been refactored. The java version number is now parsed using the DeweyDecimal class and stored as a string. This change improves the accuracy and readability of the java version number.
https://github.com/apache/ant/commit/9509706d70325bfd6a8f62b036d833f2fa0670db,9509706d70325bfd6a8f62b036d833f2fa0670db,apache/ant,,Correct date formatting,"Fix: Corrected date format in PropertyFileTest The testDirect() method in the PropertyFileTest class had an incorrect date format in the assertEquals method. The format was changed from ""%d/%02d/%d"" to ""%d/%02d/%02d"" to correctly represent the date. This change ensures that the test accurately checks the functionality of the PropertyFile class."
https://github.com/apache/archiva/commit/ce29219ee6409b111ce8f8191b1792c2b65a04a8,ce29219ee6409b111ce8f8191b1792c2b65a04a8,apache/archiva,Y,change required after plexus update,"Refactor: Rename method to better reflect its functionality In the files `DefaultProxyManagerTest.java` and `LegacyProxyManagerTest.java`, the method `getTestConfiguration()` has been renamed to `getProxyConfiguration()`. This change does not alter the functionality of the `setUp()` method where it is used, but provides a more accurate description of the method's purpose, which is to create and return a proxy configuration for testing purposes."
https://github.com/apache/archiva/commit/6987e689ecc1c522d53cb661fa7842284807f471,6987e689ecc1c522d53cb661fa7842284807f471,apache/archiva,,Remove useless logging,"Refactor: Remove logging statement from processSnapshots method The logging statement ""Processing snapshots."" has been removed from the processSnapshots method in the DefaultRepositoryBrowsing class. This change is part of a refactoring effort to improve the code quality."
https://github.com/apache/archiva/commit/397e88dac8af348973197806c92cbc329aefd4c2,397e88dac8af348973197806c92cbc329aefd4c2,apache/archiva,,add @SInCE for new method,Style: Add comment to `deleteArtifact` method in `RepositoriesService.java` A comment line has been added to the `deleteArtifact` method in the `RepositoriesService.java` file. The comment indicates that permissions are checked in the implementation of the method. This change does not affect the functionality of the code.
https://github.com/apache/archiva/commit/f52bade117210719e138910be18fd2001ffd25a2,f52bade117210719e138910be18fd2001ffd25a2,apache/archiva,,repository scanning test fix for idependance,Feat: Add @DirtiesContext annotation to ArchivaRepositoryScanningTaskExecutorAbstractTest This commit adds the @DirtiesContext annotation to the ArchivaRepositoryScanningTaskExecutorAbstractTest class. This annotation is used to indicate that the Spring ApplicationContext should be dirtied and thus automatically closed after each test method. This is typically used when a test method dirties the context.
https://github.com/apache/archiva/commit/a9ebba65acafda26696d1ade1a19e909d93e8385,a9ebba65acafda26696d1ade1a19e909d93e8385,apache/archiva,,Adding config file removal before tests,Feat: Add initialize method in AbstractRepositoryAdminTest This commit adds a new method 'initialize' in the AbstractRepositoryAdminTest.java file. The method is used to set up the test environment before each test. It deletes the existing configuration file if it exists and reloads the configuration. This ensures that the test environment is properly set up for each test case.
https://github.com/apache/archiva/commit/a024df32a4005fa32ef5314418aabe124a45516c,a024df32a4005fa32ef5314418aabe124a45516c,apache/archiva,,Fixing repository group implementation,Feat: Update 'createRepositoryGroup' method and add 'setRepositoryRegistry' method This commit updates the 'createRepositoryGroup' method in the 'MavenRepositoryProvider' class to create a new repository group with the given configuration. It also adds a new method 'setRepositoryRegistry' to set the repository registry. These changes enhance the functionality of the 'MavenRepositoryProvider' class._x001B_[0m
https://github.com/apache/aries/commit/b0f88c3970d09a01c17016a7b8b9dee001d4dac7,b0f88c3970d09a01c17016a7b8b9dee001d4dac7,apache/aries,,Improve timeout exception when an osgi service can't be found,"Fix: Handle different types of service availability in `getService()` In the `getService()` method of the `ReferenceRecipe.java` file, conditions have been added to handle different types of service availability. If the service is mandatory and not available, an exception is thrown after waiting for a specified timeout period. If the service is optional and not available, an exception is thrown immediately. This fix ensures that the method behaves correctly for different types of service availability."
https://github.com/apache/beam/commit/796af68ef69e7c40c41866afe6176d29feffae8a,796af68ef69e7c40c41866afe6176d29feffae8a,apache/beam,,"Fix an invalid path on Windows platforms Paths.get calls the platform's Filesystem.getPath, which validates that the path contains legal characters for file names. Since * is an illegal character for Windows, Paths.get can't be used for globs.","Fix: Update path creation in testMultipleFiles method In the testMultipleFiles method of the AvroSourceTest.java file, the path to the AvroSource has been updated. Previously, the path was created using Paths.get(), but this has been changed to use new File(). This change ensures that the AvroSource can correctly read from multiple Avro files."
https://github.com/apache/beam/commit/4fa7bd3ab96975ff1618a01f0b2920d15fb46efb,4fa7bd3ab96975ff1618a01f0b2920d15fb46efb,apache/beam,,"StreamingWriteFn: check if table exists before creating In StreamingWriteFn, every worker tries to create the table without checking beforehand whether the table exists. This behavior can lead to temporarily violating the BigQuery API quota limits on table.insert:","Feat: Modify getOrCreateTable method in BigQueryIO.java This commit modifies the `getOrCreateTable` method in the `BigQueryIO.java` file. The method now checks if a BigQuery table exists based on the provided table specification. If the table does not exist, it creates a new one. This method is thread-safe."
https://github.com/apache/beam/commit/9ed1465699d017e1ea35771ca46ef8fd2fb498c3,9ed1465699d017e1ea35771ca46ef8fd2fb498c3,apache/beam,Y,Correct URL for subnetwork,Refactor: Update GCE subnetwork description and test This commit updates the description of the GCE subnetwork for launching workers in `DataflowPipelineWorkerPoolOptions.java` and modifies the `testSubnetworkConfig()` method in `DataflowPipelineTranslatorTest.java` to test if the subnetwork configuration is correctly set in the pipeline options and properly reflected in the job environment. The changes are part of a refactor and do not alter the functionality of the code.
https://github.com/apache/beam/commit/07544ef3a47bbdfacc00c75af875c3533a5fe477,07544ef3a47bbdfacc00c75af875c3533a5fe477,apache/beam,,Remove unused body of StreamingPCollectionViewWriterFn,"Refactor: Deprecate functionality of StreamingPCollectionViewWriterFn class The processElement(ProcessContext c) method in the StreamingPCollectionViewWriterFn class has been significantly refactored. The previous implementation, which processed each element in the input PCollection and ensured that there is only one element per window for a singleton, has been removed. Now, the method throws an UnsupportedOperationException, indicating that this class is intended to be a marker class and should not be executed. This change is consistent with the updated comments for the StreamingPCollectionViewWriterFn class."
https://github.com/apache/beam/commit/916fe65e5d63981026c132454ffbc56c3d0f1ca8,916fe65e5d63981026c132454ffbc56c3d0f1ca8,apache/beam,,Ignore HBaseIOTest temporarily,"Fix: Ignore HBaseIOTest and clean up imports In this commit, the HBaseIOTest class is annotated with @Ignore, indicating that the tests in this class are not to be executed. Additionally, some unused import statements are removed to clean up the code."
https://github.com/apache/beam/commit/b92b96643732b05326150decace502194656662c,b92b96643732b05326150decace502194656662c,apache/beam,,Fix Regex#FindAll javadoc,Feat: Update method documentation and example in Regex.java This commit updates the method documentation and example usage in the `Regex.java` file. The return type in the documentation has been corrected to `PCollection<List<String>>` and the example usage has been updated accordingly.
https://github.com/apache/beam/commit/059b351e58ab746ee699ee5d8ff746a27ec7586e,059b351e58ab746ee699ee5d8ff746a27ec7586e,apache/beam,,BigQuery: swap from asSingleton to asIterable for Cleanup asIterable can be simpler for runners to implement as it does not require semantically that the PCollection being viewed contains exactly one element.,"Refactor: Change handling of cleanup signal in PassThroughThenCleanup In the `expand` method of the `PassThroughThenCleanup.java` file, the handling of the cleanup signal has been refactored. Previously, the cleanup signal was viewed as a singleton with a default value of null. Now, it is viewed as an iterable. This change does not alter the functionality of the method but changes its internal structure."
https://github.com/apache/beam/commit/bfb13b650d9e34270fc171427aede11a57de7d1b,bfb13b650d9e34270fc171427aede11a57de7d1b,apache/beam,,Fixup after merge.,Refactor: Improve tagged output receiver in FnApiDoFnRunner This commit refactors the `taggedOutputReceiver` method in the `FnApiDoFnRunner.java` file. The changes ensure that the `MultiOutputReceiver` returned by the method outputs to the correct tagged output. This is an internal improvement that does not alter the external behavior of the code.
https://github.com/apache/beam/commit/481e7c0a4075079f45a4c5ff2822092656d5be12,481e7c0a4075079f45a4c5ff2822092656d5be12,apache/beam,,Fixing findbugs issue,"Refactor: Improve random long generation in SyntheticStep constructor In the SyntheticStep class, the way a random long is generated for the idAndThroughput has been improved. A new Random object is now created and used to generate the random long. This is a refactoring change that does not affect the functionality of the SyntheticStep class, which is a parameterizable DoFn that consumes and emits KV pairs, introducing a configurable delay for each record."
https://github.com/apache/beam/commit/96fbd8ca7525a85292dbeaf559041a5277d8f8b8,96fbd8ca7525a85292dbeaf559041a5277d8f8b8,apache/beam,,[euphoria-beam] add trigger to window in RBK (missing correct trigger wrapper),"Fix: Added triggering method in ReduceByKeyTranslator This commit modifies the doTranslate method in the ReduceByKeyTranslator.java file to include a new triggering method. The method translates a ReduceByKey operator into a Beam transformation, extracting keys and values from the input data using provided functions. The new triggering method is added to the input of the transformation."
https://github.com/apache/beam/commit/41dfd846919f350d07e2e2ccd375d30c11545da8,41dfd846919f350d07e2e2ccd375d30c11545da8,apache/beam,,Add Coder components for BufferedElement Coder,"Refactor: Update getCoderArguments() in BufferedElements.java The `getCoderArguments()` method in `BufferedElements.java` has been updated to return a list of coders for the elements and windows, instead of an empty list. This change improves the design of the existing code by providing the necessary coder arguments for the elements and windows."
https://github.com/apache/beam/commit/ae863d49a783d4e9fb0002f87ae195047614fce9,ae863d49a783d4e9fb0002f87ae195047614fce9,apache/beam,,Disambiguate method filter for toArray. Java 11 introduces additional overloads for the toArray method with one parameter.,"Refactor: Enhance convertArray method in ByteBuddyUtils.java The convertArray method in ByteBuddyUtils.java has been refactored to improve its functionality. The method now converts a collection to an array, and if the array is of primitive types, it converts the array of boxed objects to an array of unboxed objects. This change enhances the method's ability to handle arrays of different types and improves the overall functionality of the ByteBuddyUtils class."
https://github.com/apache/beam/commit/f1c6846f1bcc15207927aa704a8091b768003c1a,f1c6846f1bcc15207927aa704a8091b768003c1a,apache/beam,,Add TODO in GcpApiSurfaceTest: TODO: remove newly-exposed clasess once spanner updates its APIs.,"Feat: Add comments for future task in GcpApiSurfaceTest.java This commit adds comments in the GcpApiSurfaceTest.java file, indicating a future task to be done. The comments mention the removal of certain classes once the APIs of AsyncResultSet in Spanner are updated. The related issue can be found at https://github.com/googleapis/java-spanner/issues/410."
https://github.com/apache/beam/commit/22bc31a9e6d539ca61d42b58312d4927e9b47649,22bc31a9e6d539ca61d42b58312d4927e9b47649,apache/beam,Y,"Allow checkerframework on API surfaces This commit is independently useful, since checkerframework annotations are helpful for users. We should preserve them at runtime.","Fix: Add new pruning pattern to test files This commit adds a new pruning pattern ""org[.]checkerframework[.].*[.]qual[.].*"" to three test files: DirectRunnerApiSurfaceTest.java, GcpCoreApiSurfaceTest.java, and GcpApiSurfaceTest.java. This change is classified as a ""Fix"", indicating that it is meant to correct a problem in the code. No associated issues or pull requests were found for this commit."
https://github.com/apache/beam/commit/a954e6f5e03c7c9110c9d2b116e7774edbcda4fe,a954e6f5e03c7c9110c9d2b116e7774edbcda4fe,apache/beam,,Remove @hidden and @experimental annotation of CreateFromSnapshot pipelien option.,Refactor: Remove annotations from 'createFromSnapshot' method The 'Hidden' and 'Experimental' annotations were removed from the 'createFromSnapshot' method in the DataflowPipelineOptions.java file. This change does not affect the functionality of the method.
https://github.com/apache/cassandra/commit/8c04ffd52a43358a8eb56a68fa7aeae0bfa94577,8c04ffd52a43358a8eb56a68fa7aeae0bfa94577,apache/cassandra,Y,added CFS pending tasks JMX attribute CASSANDRA-173,Feat: Add getPendingTasks method to CFSMBean This commit adds a new method `getPendingTasks()` to both `ColumnFamilyStore.java` and `ColumnFamilyStoreMBean.java`. This method returns the number of tasks pending for this column family. This change was made in response to issue CASSANDRA-173.
https://github.com/apache/cassandra/commit/f6e15244da3418871f2ee4f076d08582cb967511,f6e15244da3418871f2ee4f076d08582cb967511,apache/cassandra,,add missing license header,Style: Add license header to RetryingScheduledThreadPoolExecutor.java A license header has been added to the file RetryingScheduledThreadPoolExecutor.java. This change is related to the style of the code and does not affect the functionality of the program.
https://github.com/apache/cassandra/commit/f75e364cba4b31a8d78574dc6cb62ad1a402660b,f75e364cba4b31a8d78574dc6cb62ad1a402660b,apache/cassandra,,r/m unused code,Refactor: Remove unused method from RowIteratorFactory The method `memtableEntryIterator` was removed from the `RowIteratorFactory` class. This method was previously used to get an entry iterator from a memtable starting at a specific key position. The removal of this method does not affect the functionality of the class as it was not being used.
https://github.com/apache/cassandra/commit/4dcd15f48dd21062fbe3a2ac4b3debb10fbbd14a,4dcd15f48dd21062fbe3a2ac4b3debb10fbbd14a,apache/cassandra,,Fix typo in log message,"Fix: Corrected typos in log messages in IncomingTcpConnection.java In the IncomingTcpConnection.java file, typos in the log messages of the 'run' and 'receiveMessage' methods were corrected. The typo ""Ignorning"" was corrected to ""Ignoring"". This change improves the readability and understanding of the log messages."
https://github.com/apache/cassandra/commit/ce807c6a22068edbed78d76367e9b35bd883fa77,ce807c6a22068edbed78d76367e9b35bd883fa77,apache/cassandra,,SSTableNamesIterator misses some tombstones CASSANDRA-4395,Refactor: Fix bug in SSTableNamesIterator This commit modifies the readSimpleColumns method in the SSTableNamesIterator.java file. The method now checks if the column is an instance of IColumn before adding it to the result list. This change was made to fix a bug where the SSTableNamesIterator was missing some tombstones. This change improves the accuracy of the SSTableNamesIterator and ensures that no tombstones are missed.
https://github.com/apache/cassandra/commit/3c93e8c6b5e96dcf4487e1b8f8cfe2a327237c6f,3c93e8c6b5e96dcf4487e1b8f8cfe2a327237c6f,apache/cassandra,,make CountingDownStreamCallback static to reduce footprint,Refactor: Change CountingDownStreamCallback to static class in StorageService.java This commit changes the CountingDownStreamCallback class in the StorageService.java file from a non-static class to a static class. This is a structural change that does not affect the external behavior of the code.
https://github.com/apache/cassandra/commit/a9b403e649aaa4de5e28d3bd4c562568d0ae3fbc,a9b403e649aaa4de5e28d3bd4c562568d0ae3fbc,apache/cassandra,,remove calculation of unused expected compacted filesize,Refactor: Remove unnecessary filesize calculation in cleanup compaction This commit removes the calculation of the expected compacted filesize in the `doCleanupCompaction` method of the `CompactionManager` class. The calculation was not necessary for the cleanup compaction process and its removal simplifies the code without altering functionality.
https://github.com/apache/cassandra/commit/579eb229519e5e3b276f918b89158a242c2dec34,579eb229519e5e3b276f918b89158a242c2dec34,apache/cassandra,,omit zero counts from compaction merge summary,"Fix: Skip iteration if count is zero in compaction operation This commit introduces a fix in the `runWith(File sstableDirectory)` method in the `CompactionTask.java` file. The change involves the addition of a conditional statement to skip an iteration if the count is zero during the compaction operation. This modification ensures that the compaction operation is only performed when necessary, and a snapshot is taken if required."
https://github.com/apache/cassandra/commit/ef67b60273d1d2b3e9b5b488311625717c161d34,ef67b60273d1d2b3e9b5b488311625717c161d34,apache/cassandra,,Make commitlog archiver thread pool name consistent CASSANDRA-7043,"Style: Standardize thread pool name in CommitLogArchiver This commit changes the thread pool name in the CommitLogArchiver class from ""commitlog_archiver"" to ""CommitLogArchiver"". This change was made to make the thread pool name consistent with others in the codebase, as per issue CASSANDRA-7043."
https://github.com/apache/cassandra/commit/7c93b04b34844afdc3a502af9e7fb296f43dc068,7c93b04b34844afdc3a502af9e7fb296f43dc068,apache/cassandra,,make sure streams get closed,Refactor: Improve resource handling in writeSnapshotManifest method This commit refactors the `writeSnapshotManifest` method in the `ColumnFamilyStore.java` file. The changes involve the use of a try-with-resources statement to ensure that the `PrintStream` object is properly closed after use. This improves the resource handling in the method and makes the code more robust and easier to maintain.
https://github.com/apache/cassandra/commit/2a9fc0e887612725a51b3822a266c1b3d3fadcaf,2a9fc0e887612725a51b3822a266c1b3d3fadcaf,apache/cassandra,,make scanner.close idempotent,"Refactor: Prevent multiple closings of files in BigTableScanner This commit introduces a new variable `isClosed` in the `BigTableScanner` class to track whether the data and index files have been closed. The `close()` method is modified to check this variable before closing the files. This change prevents the files from being closed multiple times, which could potentially lead to a NullPointerException as reported in issue CASSANDRA-9531."
https://github.com/apache/cassandra/commit/7bd577375ca5b661eb1fdb92954363546e864655,7bd577375ca5b661eb1fdb92954363546e864655,apache/cassandra,,move condition (ifile != null) to where it has some value as it is already checked for in validateSummarySamplingLevel(),"Refactor: Reorder conditions in load method of SSTableReader class In the load method of the SSTableReader class, the order of the conditions in an if statement has been changed. This method loads the SSTable, builds the summary, and checks for any erroneously downsampled index summary. If it finds any, it rebuilds it. This change is a refactor that improves the readability of the code."
https://github.com/apache/cassandra/commit/82ef1cfc3d5a62c4d0f6163e09a9690b43959a92,82ef1cfc3d5a62c4d0f6163e09a9690b43959a92,apache/cassandra,,ninja: fix logic to log msg w/cdc check on startup,"Fix: Correct condition check for 'cdc_enabled' in 'applyConfig' method This commit corrects the condition check for 'cdc_enabled' in the 'applyConfig' method of the 'DatabaseDescriptor' class. Previously, the condition checked if 'cdc_enabled' was not null. However, this has been changed to check if 'cdc_enabled' is true. This ensures that the configuration settings are correctly applied to the Cassandra instance when 'cdc_enabled' is true."
https://github.com/apache/cassandra/commit/eaced9a541d09d55973b6f88d720e16ac948a559,eaced9a541d09d55973b6f88d720e16ac948a559,apache/cassandra,,fix typo: wrong if guard variable,Refactor: Improve code readability in SecondaryIndexManager This commit refactors the SecondaryIndexManager class in two methods: `createInstance(IndexMetadata indexDef)` and `calculateIndexingPageSize()`. The changes are minor adjustments to the code that improve its readability and structure. No changes in functionality or behavior were made.
https://github.com/apache/cassandra/commit/256a74faa31fcf25bdae753c563fa2c69f7f355c,256a74faa31fcf25bdae753c563fa2c69f7f355c,apache/cassandra,,Add Config$RepairCommandPoolFullStrategy awareness to DatabaseDescriptorRefTest,"Feat: Add new strategy to config in DatabaseDescriptorRefTest This commit adds a new strategy, RepairCommandPoolFullStrategy, to the config in the DatabaseDescriptorRefTest.java file. This change is related to the issue [CASSANDRA-13594], which aims to use an ExecutorService for repair commands instead of starting a new thread."
https://github.com/apache/cassandra/commit/8f4ae7d825d90a18327c5555386f3cdaf414d836,8f4ae7d825d90a18327c5555386f3cdaf414d836,apache/cassandra,Y,Improve MV TTL error message CASSANDRA-16960,Fix: Improve error message for setting TTL on materialized view This commit modifies the error message thrown when trying to set or alter the default_time_to_live for a materialized view in the method announceMigration in AlterViewStatement.java. The error message now provides more information about why this operation is not allowed.  The test case testAlterMvWithTTL in ViewTest.java has been updated to check for this new error message. This change addresses the issue CASSANDRA-16960.
https://github.com/apache/cocoon/commit/de05e13417eb1e1ab77b3e28405a18a6e84a3526,de05e13417eb1e1ab77b3e28405a18a6e84a3526,apache/cocoon,,Replace hack with a more sensible test.,"Refactor: Improve structure of getContextObject method in XMLFileModule This commit refactors the getContextObject method in the XMLFileModule class. The changes improve the structure of the code without altering its behavior. The method retrieves a context object based on the provided configuration and object model, checking for a dynamic configuration and updating the source and reload if present. The changes ensure a more efficient handling of dynamic configurations."
https://github.com/apache/cocoon/commit/8bc546a37d8013be9f2bdbbee44c0b8502612bf7,8bc546a37d8013be9f2bdbbee44c0b8502612bf7,apache/cocoon,,unused variable removed,"Fix: Update version info and remove unused code in WebDAVSource.java This commit updates the version information in the comments of the WebDAVSource.java file. Additionally, an unused line of code in the getSourceProperty method has been removed."
https://github.com/apache/cocoon/commit/dde29593723a52e51e9da6dd75b3ee21b4fd7adf,dde29593723a52e51e9da6dd75b3ee21b4fd7adf,apache/cocoon,,import clean up,"Refactor: Remove unused import and update version comment The import statement for java.util.List has been removed from Sex.java as it was unused. Additionally, the version comment has been updated."
https://github.com/apache/cocoon/commit/63191d5b4f994455df9d8f2f39ad8f5cd563a16a,63191d5b4f994455df9d8f2f39ad8f5cd563a16a,apache/cocoon,,Remove debug msgs,"Refactor: Remove print statements in TestPortlet.java This commit removes the print statements in the destroy(), init(), and processAction() methods of the TestPortlet.java file. These methods now do not perform any actions. This is a refactoring change that improves the code without changing its external behavior."
https://github.com/apache/cocoon/commit/50507178cbe40b27b9052b487cfb1da475223da1,50507178cbe40b27b9052b487cfb1da475223da1,apache/cocoon,,"Remove author tag. Thanks Sylvain for pointing at this, this happens when you copy paste and don't think about what you're doing.",Style: Remove author information and update version in SitemapParameters.java The author information was removed from the SitemapParameters.java file and the version was updated. This change does not affect the functionality of the code.
https://github.com/apache/cocoon/commit/5c215e5480d1c462f8f83fdd67c2802655684b98,5c215e5480d1c462f8f83fdd67c2802655684b98,apache/cocoon,,Correct test case for DOMBuilder.,Refactor: Improve handling of multiple character events in test method This commit refactors the testMultipleCharactersEvents() method in the DOMBuilderTestCase.java file. The changes improve how multiple character events are handled and appended together in the test case. The refactor does not alter the functionality of the method but improves its design by ensuring that multiple character events are correctly concatenated into a single text node.
https://github.com/apache/cocoon/commit/b45a26454699645e58b8e09e207c194caf8f294b,b45a26454699645e58b8e09e207c194caf8f294b,apache/cocoon,,Fix inconsistent component name.,"Refactor: Rename component in SourceWritingTransformer The component name in the SourceWritingTransformer.java file has been changed from 'write-source' to 'sourcewriting'. This change is not associated with any method or class functionality, and there are no associated issues or pull requests."
https://github.com/apache/cocoon/commit/d0d38b7cdb8ff27e9b339d42de657143a97b4145,d0d38b7cdb8ff27e9b339d42de657143a97b4145,apache/cocoon,,Add missing javadoc attribute,"Style: Add annotation to IncludeTransformer.java Added a @cocoon.sitemap.component.documentation annotation to the IncludeTransformer.java file. This change does not affect the functionality of the code, but improves the style and readability."
https://github.com/apache/cocoon/commit/a28bb0e60dddc2729bed79a9e8ae754a888b2ed3,a28bb0e60dddc2729bed79a9e8ae754a888b2ed3,apache/cocoon,,fixing an obvious cut and paste glitch,"Refactor: Update getAttributeNames method in RealPathModule This commit updates the getAttributeNames method in the RealPathModule class. Previously, the method was returning an iterator of the attribute names of the RequestURIModule. Now, it returns an iterator of the attribute names of the RealPathModule. This change improves the structure of the code without changing its behavior."
https://github.com/apache/cocoon/commit/258d7f0a4f9bb6e6cf057ebcd7f9c30662d0aad2,258d7f0a4f9bb6e6cf057ebcd7f9c30662d0aad2,apache/cocoon,,Deprecate session-fw and auth-fw block,Style: Mark XSPSessionFwHelper class as deprecated The XSPSessionFwHelper class in the cocoon-xsp-impl module has been marked as deprecated. This class will be removed in future versions.
https://github.com/apache/cocoon/commit/b27c808c89bc0b06dad6c8428aa358e021d38f36,b27c808c89bc0b06dad6c8428aa358e021d38f36,apache/cocoon,,Throw exception *if* it happens,"Fix: Improve error handling in SourceUtil Changed the error handling in the method getSitemapServiceManager() of the class SourceUtil.java. Instead of printing the stack trace, now it throws a RuntimeException with a descriptive message."
https://github.com/apache/directory-server/commit/5ce848b860c02a77a8d45757b11ebd2ece71fbb9,5ce848b860c02a77a8d45757b11ebd2ece71fbb9,apache/directory-server,Y,These two classes should be reverted back to their old names.,Style: Add comments to suggest renaming classes Added comments in ContextFactoryConfiguration.java and DefaultContextFactoryConfiguration.java to suggest renaming the classes to ContextFactoryContext and DefaultContextFactoryContext respectively.
https://github.com/apache/directory-server/commit/3b0a395ff816fc239969a7a5defeaf96ce2f2457,3b0a395ff816fc239969a7a5defeaf96ce2f2457,apache/directory-server,,Ligth refactoring (nl added),"Style: Improve code readability in DbFileListing.java In the `getIndexedAttributes` method, added some lines to improve the readability of the code. The functionality of the method remains unchanged."
https://github.com/apache/directory-server/commit/9cbf06fcae73d281aa4804e574335d12fd0764ec,9cbf06fcae73d281aa4804e574335d12fd0764ec,apache/directory-server,,"Call the addNormalized(RDN) method which is much faster than the add(RDN), as the RDN is not normalized again. ","Refactor: Use addNormalized in getFarthestReferralAncestor method In the `getFarthestReferralAncestor` method of the `ReferralLut` class, replaced the `add` method with the `addNormalized` method. This is an internal change that does not alter the functionality of the method."
https://github.com/apache/directory-server/commit/ae5cfa26dd402d543dea6da01c881de67944572e,ae5cfa26dd402d543dea6da01c881de67944572e,apache/directory-server,,"Warnings clean-up, unnecessary casts.","Refactor: Remove explicit casting in generateRest method In the DirectorySchemaToolMojo.java file, the explicit casting of a variable in the generateRest(BootstrapSchema schema) method has been removed. This change improves the structure of the code without altering its functionality. The method is responsible for generating RESTful API code for each producer type in the schema, excluding ATTRIBUTE_TYPE_PRODUCER and OBJECT_CLASS_PRODUCER."
https://github.com/apache/directory-server/commit/90f45e658b8a39033a6d6f071fcae0fe79c57693,90f45e658b8a39033a6d6f071fcae0fe79c57693,apache/directory-server,,"Warnings clean-up: Javadocs, generics.",Refactor: Update return type and add comment to 'getRecords' method in 'RecordStore' interface The 'getRecords' method in the 'RecordStore' interface has been updated to return a set of 'ResourceRecord' objects instead of a generic set. A detailed comment has also been added to explain the functionality of the method. This change improves the readability and understandability of the code without altering its functionality.
https://github.com/apache/directory-server/commit/36ef3a8fdbcb278c67d576676f75ecb1458cb91e,36ef3a8fdbcb278c67d576676f75ecb1458cb91e,apache/directory-server,,Fixed minimal logging statement alignment issue.,"Style: Adjust string formatting in MonitorContext.java In the MonitorContext.java file, the formatting of the strings appended to the StringBuilder object in the ""execute"" method has been adjusted. This change does not affect the functionality of the method, which continues to log detailed information about the current authentication context if debug logging is enabled."
https://github.com/apache/directory-server/commit/1abda27855f8287fd3783c5bcc1ceac0f6b94a26,1abda27855f8287fd3783c5bcc1ceac0f6b94a26,apache/directory-server,Y,fixing compilation errors due to lack of confidentiality feature,Feat: Modify exception type and comment out lines in test methods This commit modifies the exception type thrown by the method testLogCheckRevision() in MemoryChangeLogStoreTest.java from NamingException to Exception. It also comments out some lines in the methods testConfidentiality() and configureLdapServer() in ConfidentialityRequiredITest.java with a TODO comment indicating that these lines should be uncommented when a certain feature is enabled.
https://github.com/apache/directory-server/commit/cd91e1c00ccb9d5c09a63496625eab262c8cfc73,cd91e1c00ccb9d5c09a63496625eab262c8cfc73,apache/directory-server,,"Fixed a NPE when trying to read an operational attribute, as we were using the clonedServerEntry, not the original entry.","Refactor: Update 'time' variable assignment in 'loadLdif' method This commit updates the way the 'time' variable is assigned in the 'loadLdif' method of the ApacheDS.java file. The change does not affect the overall functionality of the method, which is to load an LDIF file into the directory service if it hasn't been loaded before. The refactor improves the internal structure of the code without changing its external behavior."
https://github.com/apache/directory-server/commit/7c7346bcb4c320ab7c57e4cc8f572269c6da7e65,7c7346bcb4c320ab7c57e4cc8f572269c6da7e65,apache/directory-server,,"Fixed the patch, removing the two lines I forgot to remove","Refactor: Remove redundant addition of DefaultServerEntry in IntegrationUtils The two lines of code that were removed from IntegrationUtils.java were responsible for adding a new DefaultServerEntry to the admin session of the service. This operation was redundant and unnecessary, hence it was removed to improve the code structure without altering its functionality."
https://github.com/apache/directory-server/commit/e4409b9610c1c956d8c87ed89a32a689f36ba325,e4409b9610c1c956d8c87ed89a32a689f36ba325,apache/directory-server,,Applied the fix from trunk to make the build working,"Refactor: Remove unused import in LdapConnectionTest.java The import statement for LdapReferralException was removed from LdapConnectionTest.java. This is a refactor commit, aimed at improving the structure of the code without altering its functionality. The removal of this import statement suggests that the LdapReferralException class was not used in the file."
https://github.com/apache/directory-server/commit/36b3edc673d365f7ea9d1ddd4c3edf46c88f1c5f,36b3edc673d365f7ea9d1ddd4c3edf46c88f1c5f,apache/directory-server,Y,no decorator needed for DeleteRequestImpl,"Refactor: Update import statement for DeleteRequestImpl The import statement for DeleteRequestImpl has been updated in 'LdapCoreSessionConnection.java' and 'ClientDeleteRequestTest.java'. The class has been moved to a different package, which is reflected in the new import statement."
https://github.com/apache/directory-server/commit/f23f46acbc62a62f06cccf9bf12a3055d39827ec,f23f46acbc62a62f06cccf9bf12a3055d39827ec,apache/directory-server,Y,Made those classes not anymore serializable,"Refactor: Remove Serializable interface and serialVersionUID fields The Serializable interface was removed from the DnsOperation interface, and the serialVersionUID fields were removed from the GetFlatRecord and GetRecords classes. These changes suggest that serialization is no longer needed for these classes. This commit is a refactor, intended to improve the structure of the code without changing its behavior."
https://github.com/apache/directory-server/commit/b5546be3333d7a261e6db37ab6e36f34193cffbb,b5546be3333d7a261e6db37ab6e36f34193cffbb,apache/directory-server,Y,Moved the AddIT test to the operations package,Refactor: Update package name of AddIT.java and import in MigratedStockCoreISuite.java The package name of the AddIT.java file has been refactored from 'org.apache.directory.server.core.jndi' to 'org.apache.directory.server.core.operations.add'. The import statement in the MigratedStockCoreISuite.java file has been updated to reflect this change. This refactoring improves the structure of the code without changing its behavior.
https://github.com/apache/directory-server/commit/2ed79615de8834887948901fb4a3863166a62c24,2ed79615de8834887948901fb4a3863166a62c24,apache/directory-server,Y,Renamed the shared-ldap-extras-sp package,"Refactor: Update import statements in three files This commit updates the import statements in three files: TriggerInterceptorIT.java, StoredProcedureExtendedOperationHandler.java, and StoredProcedureIT.java. The changes are part of a refactor and do not alter the functionality of the code."
https://github.com/apache/directory-server/commit/87fdc2ea1c73d1bfada93fe8f6f7f158398eb402,87fdc2ea1c73d1bfada93fe8f6f7f158398eb402,apache/directory-server,,o The connect() and various bind() method don't throw an IoException anymore,"Refactor: Removed IOException from method signatures in LdapCoreSessionConnection This commit removes the IOException from the method signatures in the LdapCoreSessionConnection.java file. The methods affected include connect(), bind(), anonymousBind(), and bind(BindRequest bindRequest). These changes simplify the method signatures and reduce the need for exception handling in the methods that use these methods."
https://github.com/apache/directory-server/commit/0f9ab470354525d53ca5a2910b76fe9e95c751bf,0f9ab470354525d53ca5a2910b76fe9e95c751bf,apache/directory-server,,check for password attribute in all modifications,"Feat: Skip password hashing for remove attribute operation This commit introduces a new feature in the modify method of the PasswordHashingInterceptor class. Previously, the method would apply the password hashing algorithm to the 'userPassword' attribute if it was present in the modification items. Now, the method checks if the modification operation is to remove the attribute and skips the operation if so. This change enhances the functionality of the method by preventing unnecessary operations."
https://github.com/apache/flink/commit/b83fe8c2561188265445f64abe612d99a90e227c,b83fe8c2561188265445f64abe612d99a90e227c,apache/flink,,Switched to TransferEnvelopeQueue for network queue management,"Refactor: Improve handling of spilling queues in OutgoingConnection This commit refactors the OutgoingConnection class to improve the handling of spilling queues. The queuedEnvelopes object was changed from a Queue to a TransferEnvelopeQueue, and the registerSpillingQueue and unregisterSpillingQueue methods were modified to interact with this new object. These changes aim to enhance the management of overflow data."
https://github.com/apache/flink/commit/9034a54e63c66a9e79f457b926931af88f99999e,9034a54e63c66a9e79f457b926931af88f99999e,apache/flink,,fixed stub call estimation of MatchNode,"Fix: Correct calculation in computeStubCallsPerProcessedKey method This commit corrects the calculation of the average number of stub calls per processed key in the `computeStubCallsPerProcessedKey()` method of the `MatchNode.java` file. The positions of `numRecords1` and `numKey1`, and `numRecords2` and `numKey2` in the division operation have been swapped to ensure accurate calculation."
https://github.com/apache/flink/commit/0af7b5233b17dac022035429a4d2906f2d540b42,0af7b5233b17dac022035429a4d2906f2d540b42,apache/flink,,Fix incorrect scheduler test that sometimes produces a deadlock,"Refactor: Update Scheduler instantiation in testScheduleQueueing method This commit updates the way the Scheduler is instantiated in the testScheduleQueueing method of the SchedulerIsolatedTasksTest class. The Scheduler is now created with a fixed thread pool, which allows for asynchronous release of slots. This change is made to prevent potential deadlocks that could occur when releasing slots synchronously."
https://github.com/apache/flink/commit/51acd2cc9740cd3609983b7f9641d69324557774,51acd2cc9740cd3609983b7f9641d69324557774,apache/flink,,[hotfix] [javadoc] Fix typo in Javadoc of ManagedSnapshotContext#getCheckpointId() this closes #4913,"Style: Fix typo in Javadoc of ManagedSnapshotContext#getCheckpointId() This commit corrects a typo in the Javadoc comment of the getCheckpointId() method in the ManagedSnapshotContext class. The word ""it"" was removed from the sentence ""checkpoint <i>B</i>it contains a later state"" to make it grammatically correct. This change does not affect the functionality of the code."
https://github.com/apache/flink/commit/91dc1c9ad0bc4430b069ca09b59b750a5166fa86,91dc1c9ad0bc4430b069ca09b59b750a5166fa86,apache/flink,,[hotfix][runtime] Simplify RecordWriter code,"Refactor: Improve buffer handling in RecordWriter's sendToTarget method This commit refactors the `sendToTarget` method in the `RecordWriter` class. The changes improve how the buffer is handled when it is full. Previously, the buffer handling code was inside an else block. This commit moves the buffer handling code outside the if block, making the code cleaner and easier to understand."
https://github.com/apache/flink/commit/f487d8ca54dc3de030b3332825e3faa028f6e590,f487d8ca54dc3de030b3332825e3faa028f6e590,apache/flink,Y,"[hotfix][kafka,test] Add missing shutdown call propagation","Refactor: Improve shutdown process in KafkaTestEnvironmentImpl This commit refactors the `shutdown()` method in the `KafkaTestEnvironmentImpl.java` file in both `flink-connector-kafka-0.11` and `flink-connector-kafka` directories. The changes include adding a `throws Exception` declaration to the method signature and adding a call to `super.shutdown()`. This ensures that any shutdown procedures defined in a superclass are also executed, improving the robustness and maintainability of the shutdown process."
https://github.com/apache/flink/commit/8abb2599fb878b1b72c0a9d52b8cf956d9c5256d,8abb2599fb878b1b72c0a9d52b8cf956d9c5256d,apache/flink,,[hotfix][core] InstantiationUtil#serializeObject creates ObjectOutput Stream only when necessary.,"Refactor: Optimize ObjectOutputStream instantiation in serializeObject method This commit optimizes the instantiation of ObjectOutputStream in the serializeObject method of the InstantiationUtil class. Previously, a new ObjectOutputStream was always created. With this change, a new ObjectOutputStream is created only if necessary. This could potentially improve performance."
https://github.com/apache/flink/commit/b13d227047227551ffd5a6d81780d779d4d6b4b3,b13d227047227551ffd5a6d81780d779d4d6b4b3,apache/flink,,[hotfix][tests] Improve ProcessingTimeWindowCheckpointingITCase 1. Prevent from hanging out if stream contains duplicates 2. Improve error reporting,"Fix: Update checkResult method in ProcessingTimeWindowCheckpointingITCase This commit updates the `checkResult` method in the `ProcessingTimeWindowCheckpointingITCase.java` file. The method now checks if the count of elements in each window of the map matches the expected count per element and if the total count of elements is within the expected range. If the count of elements in a window is less than the expected count, it returns false. If the count is greater than the expected count, it fails with a specific error message indicating that the counter is too big."
https://github.com/apache/flink/commit/6ee501c93d05e5febc5dd61f145a60fcea53c192,6ee501c93d05e5febc5dd61f145a60fcea53c192,apache/flink,,[hotfix][yarn][tests] Improve assertion in case job failed,"Fix: Update error handling in `deployPerJob` method This commit updates the `deployPerJob` method in the `YARNFileReplicationITCase.java` file. The method now throws an AssertionError if a serialized throwable is present, providing a more robust error handling mechanism."
https://github.com/apache/flink/commit/c7d598a7c52224ab8ab2159d2885ffc8f64c67f3,c7d598a7c52224ab8ab2159d2885ffc8f64c67f3,apache/flink,,[hotfix][tests] Rename DefaultDeclarativeSlotPoolTest.testOfferingTooManySlots into testOfferingTooManySlotsWillRejectSuperfluousSlots,"Refactor: Rename test method in DefaultDeclarativeSlotPoolTest The test method `testOfferingTooManySlots()` has been renamed to `testOfferingTooManySlotsWillRejectSuperfluousSlots()` to better reflect its functionality. This change does not affect the functionality of the code, but improves the readability and understanding of the test."
https://github.com/apache/flink/commit/f2e3d204d6e8e49be4abe00b9db244901ab90eaf,f2e3d204d6e8e49be4abe00b9db244901ab90eaf,apache/flink,,[hotfix][tests] Replace assertThat with MatcherAssert.assertThat in PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest,Style: Update import statement in test file The import statement for the `assertThat` method in the `PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest.java` file has been updated. The old import statement has been replaced with a new one. This change does not affect the functionality of the code.
https://github.com/apache/flink/commit/6b92e07b7c6180edd54e54fb2725f01ca5e0f022,6b92e07b7c6180edd54e54fb2725f01ca5e0f022,apache/flink,,"[hotfix][table-planner] Beautify the assertion error message in BuiltInFunctionTestBase When testing multiple cases as multiple columns of a table separate them in error msg output for TableApi with a `, `.","Refactor: Improve readability of toString() method in BuiltInFunctionTestBase.java The toString() method in BuiltInFunctionTestBase.java has been refactored to improve its readability. Previously, the method returned a string representation of the object, including its definition name and description. The updated method now returns a string representation of the API, including a comma-separated list of summary strings for each expression in the expression stream. This change does not alter the external behavior of the code but improves the internal structure."
https://github.com/apache/flink/commit/84e1a529626427a184acc88a356e04f4f9f17007,84e1a529626427a184acc88a356e04f4f9f17007,apache/flink,,[hotfix][examples] Replace StreamingFileSink with FileSink,"Refactor: Update sink method in MatrixVectorMul.java This commit updates the method for adding a sink to the result in the main method of the MatrixVectorMul.java file. The import statement for StreamingFileSink is replaced with FileSink, and the method for adding a sink is changed from addSink to sinkTo. The functionality of the main method remains the same."
https://github.com/spepping/fop-cs/commit/b51021302ca755cd2e495d2dd8cfc54f70521f52,b51021302ca755cd2e495d2dd8cfc54f70521f52,spepping/fop-cs,,Correction for the text-align bug.,Refactor: Replace numerical values with TextAlign constants in ImageArea.java This commit replaces the numerical values in the switch statement in ImageArea.java with corresponding constants from the TextAlign class. This change improves the readability and maintainability of the code. No external behavior is changed.
https://github.com/spepping/fop-cs/commit/cc65cfaf8df8cbaec3ba9ec60544a13396358909,cc65cfaf8df8cbaec3ba9ec60544a13396358909,spepping/fop-cs,,fixed: leader didn't fill line in content table,Refactor: Improve conditions for setting leaderLength in addLeader method This commit refactors the `addLeader` method in the `LineArea` class. The conditions for setting the `leaderLength` variable have been improved to better handle the space in a line when adding a leader. A leader is a pattern that fills the space in a line. The changes made do not alter the functionality of the method but improve the structure of the code.
https://github.com/spepping/fop-cs/commit/9714e1d97fa8bd499d042f24499be4f43832ea29,9714e1d97fa8bd499d042f24499be4f43832ea29,spepping/fop-cs,,"fixed a refactoring error, deleted repeated vars","Refactor: Remove unused variables in PSRenderer class In the PSRenderer class of the org.apache.fop.render.ps package, three variables: currentXPosition, currentYPosition, and currentAreaContainerXPosition were removed. This is a code cleanup to remove unused variables."
https://github.com/spepping/fop-cs/commit/68f3cc378329f84ee257e8f80cc3a78b2f577db9,68f3cc378329f84ee257e8f80cc3a78b2f577db9,spepping/fop-cs,Y,Use Map instead of HashMap interface,Refactor: Replace HashMap with Map in AbstractRenderer and Renderer This commit replaces the usage of HashMap with Map in the setOptions methods of both AbstractRenderer.java and Renderer.java files. This change makes the methods more flexible as they can now accept any class that implements the Map interface.
https://github.com/spepping/fop-cs/commit/6979a0c5c2d1c8c4bdac29fa2c11cebdd55f8a5b,6979a0c5c2d1c8c4bdac29fa2c11cebdd55f8a5b,spepping/fop-cs,,public format() renamed to private formatPageSequence().,Refactor: Rename and change visibility of format method in Document.java The method `format` in `Document.java` has been renamed to `formatPageSequence` and its visibility has been changed from public to private. The method `foPageSequenceComplete` has been modified to call this new method instead of the old `format` method. The new method `formatPageSequence` is responsible for formatting a page sequence and adding it to the area tree.
https://github.com/spepping/fop-cs/commit/3ce8d2c782f832bb494634743c340ec0eaf3b248,3ce8d2c782f832bb494634743c340ec0eaf3b248,spepping/fop-cs,,Added a clarifying comment,Feat: Add nested call handling comment to flushText method This commit adds a comment to the `flushText()` method in the `FObjMixed.java` file. The comment clarifies that the method ensures that nested calls to itself do nothing. This additional documentation improves the understanding of the method's functionality.
https://github.com/spepping/fop-cs/commit/8faebbf0210814263bb945984d8cfae94d8220eb,8faebbf0210814263bb945984d8cfae94d8220eb,spepping/fop-cs,,"Fallback to default value if ""compression"" value is not given.","Refactor: Simplify assignment of 'comp' variable in 'configure' method This commit simplifies the assignment of the 'comp' variable in the 'configure' method of the 'TIFFRenderer' class. The change does not alter the functionality of the method, which is to configure the TIFF compression type based on the provided configuration. The refactor improves the structure of the code, making it easier to read and maintain."
https://github.com/spepping/fop-cs/commit/13058088c864f7998bcf7dd2f6e2e2b3afd2f34c,13058088c864f7998bcf7dd2f6e2e2b3afd2f34c,spepping/fop-cs,,"Added default empty String to the border shorthand. Avoids NPE mentioned in Bugzilla 38648. Still need to add a warning, since property now silently falls back to the default(s).","Feat: Add keywords to background-position and set default for border In the `createShorthandProperties()` method in the `FOPropertyMapping.java` file, more keywords were added to the `background-position` property and the default value for the `border` property was set. This enhances the functionality of the CSS parser by providing more options for the `background-position` property and a default value for the `border` property."
https://github.com/spepping/fop-cs/commit/5a0356fdfc4f2935a816d58d8de265b73e923794,5a0356fdfc4f2935a816d58d8de265b73e923794,spepping/fop-cs,,Simply subclassing did not work as expected. Made a copy now.,"Refactor: Improve handling of unknown XML objects in OldExtensionElementMapping In this commit, the class `OldExtensionElementMapping` has been refactored to improve the handling of unknown XML objects. The class now extends `ElementMapping` instead of `ExtensionElementMapping`. A new method `initialize()` has been added, which initializes a HashMap with ""outline"" and ""label"" objects if it is null. This setup allows for better handling of unknown XML objects in the mapping of the old FOP extension namespace."
https://github.com/spepping/fop-cs/commit/de9a33a49d34b5cff206f2a2d9d71708b5473c53,de9a33a49d34b5cff206f2a2d9d71708b5473c53,spepping/fop-cs,,Make PFM string parsing a little more robust,Fix: Handle unexpected end of stream in readString method This commit modifies the readString method in the PFMInputStream.java file to throw an EOFException when the end of the stream is reached unexpectedly. This change ensures that the method can handle unexpected end of stream scenarios and prevent potential errors.
https://github.com/spepping/fop-cs/commit/407189c905a232fff14c0ba7119ff0a1d2efb1f6,407189c905a232fff14c0ba7119ff0a1d2efb1f6,spepping/fop-cs,,Fixed copy/paste omission.,"fix: Correct intermediate file name in ExampleConcat program The main method in the ExampleConcat program has been updated to use a more appropriate intermediate file name. The file ""team.at.xml"" has been renamed to ""team.if.xml"" to better reflect its purpose in the process of generating a PDF document from an XML file using XSLT. This change helps to clarify the role of the intermediate file in the process."
https://github.com/apache/geronimo/commit/e771cafe134754efcb34fc646031ed54546326ca,e771cafe134754efcb34fc646031ed54546326ca,apache/geronimo,,Handle namespaces properly,"Fix: Correct method call in getChildren of LoaderUtil.java This commit corrects the method call in the `getChildren` method of the `LoaderUtil.java` file. Previously, `getNodeName()` was used to get the name of the node. This has been corrected to `getLocalName()`. The functionality of the method remains the same."
https://github.com/apache/geronimo/commit/128b786ba0d2b0ac942fd97ce6b532055326a616,128b786ba0d2b0ac942fd97ce6b532055326a616,apache/geronimo,,"when beginning/ending an imported xid/transaction, associate TransactionContext with thread","Feat: Set TransactionContext in TransactionContextManager This commit introduces a new feature in the TransactionContextManager class. The 'begin' method now sets the TransactionContext to a certain value, and the 'end' method sets the TransactionContext to null. This change enhances the functionality of these methods, providing more control over the transaction context during the transaction lifecycle."
https://github.com/apache/geronimo/commit/fc0eef46d6ab04cb5a8b1d0c171860430a890517,fc0eef46d6ab04cb5a8b1d0c171860430a890517,apache/geronimo,,added the setAllwaysMarshall method.,"Feat: Add alwaysMarshall flag to IntraVMRoutingInterceptor This commit introduces a new boolean variable `alwaysMarshall` to the `IntraVMRoutingInterceptor` class. This flag is used in the `resolveNext()` method to determine whether to avoid demarshalling/marshalling. If the current thread's context classloader is a child of the target's classloader and `alwaysMarshall` is false, then we can avoid demarshalling/marshalling. Additionally, getter and setter methods for `alwaysMarshall` were added. The `setAlwaysMarshall(boolean value)` method sets the `alwaysMarshall` flag to the provided value, and the `getAlwaysMarshall()` method returns the current state of the `alwaysMarshall` flag."
https://github.com/apache/geronimo/commit/85d0621be87e8d4c6cafb5717bf02abf5f2b8d42,85d0621be87e8d4c6cafb5717bf02abf5f2b8d42,apache/geronimo,,register the typeInfos correctly,"Refactor: Simplify type description registration in SEIFactoryImpl This commit simplifies the process of registering type descriptions in the `initialize()` method of the `SEIFactoryImpl.java` file. Previously, the method was setting up serializers and deserializers for each type of information. Now, it directly registers type descriptions for each type info in the service, which simplifies the code and improves readability without changing the external behavior of the method."
https://github.com/apache/geronimo/commit/9b935cb1bed5a7854fe9a80089048b2c26707bfb,9b935cb1bed5a7854fe9a80089048b2c26707bfb,apache/geronimo,,Add a more informative error msg,Fix: Update error message in ValveGBean class The error message in an IllegalArgumentException in the `ValveGBean` class has been updated to be more specific. The new message indicates that the class given as the NextValve attribute does not wrap an object of org.apache.catalina.Valve type.
https://github.com/apache/geronimo/commit/bd2f2315d786b27a9e3488b3b5b4003370eb2146,bd2f2315d786b27a9e3488b3b5b4003370eb2146,apache/geronimo,,This might help create the client cars,Fix: Ensure parent directories exist when installing configuration This commit modifies the `install` method in the `MavenConfigStore` class to create the necessary parent directories if they do not exist when installing a configuration from a source directory to a target file. This change ensures that the installation process does not fail due to missing parent directories.
https://github.com/apache/geronimo/commit/f815a7f594b74a0edfb00a9153447a6dcd33e112,f815a7f594b74a0edfb00a9153447a6dcd33e112,apache/geronimo,,One should always run unit tests before checking files in,"Final Answer: Refactor: Update version and remove operation in MBeanServerStub This commit updates the version and date comment in MBeanServerStub.java and removes the ""getName"" operation from the static block. No associated issues or pull requests were found for this commit."
https://github.com/apache/geronimo/commit/d6c975205eb426e5465a6d37ccc9623942031e44,d6c975205eb426e5465a6d37ccc9623942031e44,apache/geronimo,,Cement the naming provider in the vm,"Feat: Add InitialContext initialization and lookup in NamingProperties This commit introduces a new feature in the NamingProperties class. It adds import statements for InitialContext and NamingException. It also includes a try-catch block that initializes an InitialContext and performs a lookup operation. This change ensures that the system properties set are read in and cached by the VM, preventing them from being booted out by another module in the system."
https://github.com/apache/geronimo/commit/c1b48b342edc589109164e01e14b2bae4397b9e4,c1b48b342edc589109164e01e14b2bae4397b9e4,apache/geronimo,,return soap fault when runtime exception occurs,"Fix: Improve exception handling in EJBMethodInvoker In the invoke method of the EJBMethodInvoker class, additional exception handling has been added. Now, not only OpenEJBException is caught and handled, but also RuntimeException. This change improves the robustness of the method and ensures that any runtime exceptions are properly caught and handled."
https://github.com/apache/geronimo/commit/55b40d07d1ca33f2257e3e05529d83146ec62108,55b40d07d1ca33f2257e3e05529d83146ec62108,apache/geronimo,,Clean-up import,Style: Remove unused imports in WADISessionAdaptorTest.java The commit removes unused import statements in the file WADISessionAdaptorTest.java. This is a style-related change that helps to keep the code clean and easy to read. No associated issue or pull request was found for this commit.
https://github.com/apache/geronimo/commit/38712e1a6348088aebc4aa5d9a51c9852d9f8887,38712e1a6348088aebc4aa5d9a51c9852d9f8887,apache/geronimo,,set the bus on the thread to ensure the service class is initialized with the right bus,"Refactor: Set default bus in getContent method In the CXFServiceReference.java file, the getContent() method has been refactored. The method now sets the default bus before returning the content of the object. This change ensures that the default bus is properly set up each time the getContent() method is called."
https://github.com/apache/geronimo/commit/13c244d4a8139a4fdc27d10b34544ec037a30dbb,13c244d4a8139a4fdc27d10b34544ec037a30dbb,apache/geronimo,,Only destroy the classloader if it is TempClassLoader from OpenEBJ,"Fix: Update close method in EjbModule.java This commit updates the close() method in the EjbModule.java file. Previously, the method was destroying the class loaders associated with the EJB module and then closing the module. Now, the method destroys the class loaders only if they are instances of TempClassLoader before closing the module. This change ensures that only the appropriate class loaders are destroyed, preventing potential issues."
https://github.com/apache/hadoop/commit/6f2aae046d9ebeeae1cd82a687ed6fb165405988,6f2aae046d9ebeeae1cd82a687ed6fb165405988,apache/hadoop,,Resolve trivial compilation error after previous merge,feat: Modify transitionOtherNNActive method in BootstrapStandby.java This commit modifies the `transitionOtherNNActive()` method in the `BootstrapStandby.java` file to transition the running namenode to active state. Two import statements were added and the method call was modified. This is a feature enhancement to the Hadoop HDFS project.
https://github.com/apache/ignite/commit/cfcb9a42f34dfd038be2451a7a5ed62e3753810e,cfcb9a42f34dfd038be2451a7a5ed62e3753810e,apache/ignite,,ignite-sql-tests - replicated projection,"Refactor: Update logic in `projection(boolean local)` method in `IgniteCacheProxy.java` This commit refactors the `projection(boolean local)` method in the `IgniteCacheProxy.java` class. The method now determines the cluster group for the cache data based on the cache mode and local flag. This is a change in the internal logic of the method, but it does not affect the external behavior or functionality of the method."
https://github.com/apache/ignite/commit/d623d7e4913998b29a3ba91e78e8409cd1d89d46,d623d7e4913998b29a3ba91e78e8409cd1d89d46,apache/ignite,,# master fixed test,Fix: Handle exceptions in testReconnectTxCache method This commit adds exception handling for `IgniteClientDisconnectedException` and `IgniteException` in the `testReconnectTxCache` method of the `IgniteClientReconnectFailoverTest.java` file. The changes are made to ensure the correct behavior of the transactional cache during a client reconnect in a failover scenario.
https://github.com/apache/ignite/commit/5faffb98032f54ed1160279de9d52938aef94bd2,5faffb98032f54ed1160279de9d52938aef94bd2,apache/ignite,,# Properly handle ClusterTopologyServerNotFoundException for retries,Refactor: Make `topVer` transient in `CachePartialUpdateCheckedException` This commit makes the `topVer` variable transient in the `CachePartialUpdateCheckedException` class. This change does not affect any methods or class functionalities.
https://github.com/apache/ignite/commit/4aca49915215ba766c855b519af698e5a35ee1b5,4aca49915215ba766c855b519af698e5a35ee1b5,apache/ignite,,ignite-db-x Fixed javadoc,Style: Remove comments in GridDhtLocalPartition.java The comments in the methods onInsert() and onRemove() in the class GridDhtLocalPartition.java have been removed. This is a style change and does not affect the functionality of the code.
https://github.com/apache/ignite/commit/f519fc599e420638ad53b8e53b92b8d22bfdd773,f519fc599e420638ad53b8e53b92b8d22bfdd773,apache/ignite,,ignite-db-x - wal header,"Feat: Add non-negative assertion to position method and new enum value In the WALRecord.java file, the position method now includes an assertion that ensures the position value is non-negative. This is a new feature added to improve the robustness of the method. Additionally, a new enum value, HEADER_RECORD, has been added to the RecordType enum. The initial value for the size variable has also been removed."
https://github.com/apache/ignite/commit/f6d42f3e304a7947824650e5a7692fb787174ebf,f6d42f3e304a7947824650e5a7692fb787174ebf,apache/ignite,,Configure sequence batch size in IgniteAtomicSequenceBenchmark.,"Feat: Set batch size in IgniteAtomicSequenceBenchmark setUp method In the setUp method of the IgniteAtomicSequenceBenchmark class, the atomic sequence is now initialized with a specified batch size. This is a new feature added to the method, which allows for more flexible configuration of the atomic sequence for benchmark tests."
https://github.com/apache/ignite/commit/babfc2f051f8471f541bd054650a47cceb3cc09e,babfc2f051f8471f541bd054650a47cceb3cc09e,apache/ignite,,AttributeNodeFilter: added serialVersionUID.,Feat: Add serialVersionUID field to AttributeNodeFilter class This commit adds a new field `serialVersionUID` to the `AttributeNodeFilter` class. This field is necessary for the serialization of the class.
https://github.com/apache/isis/commit/a3baa4e8beeee9f69d9c92fa8e08da3135063194,a3baa4e8beeee9f69d9c92fa8e08da3135063194,apache/isis,,Moved the XAT to a separate source folder. This way the eploration build can exclude the XATs.,Style: Adjust indentation and remove comment in testNewMethods() The indentation of the method call `testBasicBooking();` in the `testNewMethods()` method of the `ECSAcceptanceTest.java` file has been adjusted. A comment line preceding this method call has also been removed. The context of the use of `testNewMethods()` has shifted from testing new methods in the customer class to testing new methods for customer booking. No associated issues or pull requests were found for this commit.
https://github.com/apache/isis/commit/b8aabc096aa14f43786f8b50e7b8aa270aaea9ba,b8aabc096aa14f43786f8b50e7b8aa270aaea9ba,apache/isis,,Moved the setting of the resovled flag in an object to before the call to the object store. This ensures that any recursive resolving will not attempt to resovlve the same object in an infinite loop,"Refactor: Improve structure of `resolveImmediately` method in `LocalObjectManager.java` This commit refactors the `resolveImmediately` method in the `LocalObjectManager.java` file. The method now resolves the specified object immediately if it is persistent and not already resolved, and throws an exception if the object cannot be resolved. This change improves the structure of the code and makes it easier to understand."
https://github.com/apache/isis/commit/75f8ac6890e5ff108b77207794a25b2480e0f6a3,75f8ac6890e5ff108b77207794a25b2480e0f6a3,apache/isis,,Fixed missing line spacing and line height properties.,"Fix: Update getLineHeight() and getLineSpacing() in AwtText.java The getLineHeight() and getLineSpacing() methods in AwtText.java were previously returning a fixed value of 0. This commit updates these methods to return the actual values, improving the functionality of the AwtText class."
https://github.com/apache/isis/commit/7490080673e5c686651a3224dca46d6cfb4d6d37,7490080673e5c686651a3224dca46d6cfb4d6d37,apache/isis,,"Reinstated the redrawing after a movement of the mouse. So changes to screen, such as showing the resize outline, are shown as the mouse moves.","Fix: Uncommented redraw in mouseMoved method In the `mouseMoved` method of the `InteractionHandler.java` file, the `redraw()` line was uncommented. This method handles the mouseMoved event by tracking the mouse movement within the viewer, identifying the view under the mouse, and triggering appropriate actions. The uncommented line of code redraws the viewer. This change is classified as a 'Fix'."
https://github.com/apache/jclouds/commit/861a7ba8549d06717a4d9c019000f172f7ac18a1,861a7ba8549d06717a4d9c019000f172f7ac18a1,apache/jclouds,,fixed gogrid deletebyname to by id,"Refactor: Change server deletion method in GoGridComputeServiceContextModule In the ""execute"" method of the GoGridComputeServiceContextModule.java file, the server deletion method was changed from deleting by name to deleting by id. This refactor improves the internal structure of the code without altering its external behavior."
https://github.com/apache/jclouds/commit/cb880cfcf0c31e341eb3ff3a2fedccd3ef9e4669,cb880cfcf0c31e341eb3ff3a2fedccd3ef9e4669,apache/jclouds,,Revert properties to use https,Fix: Update endpoint URLs in SimpleDBPropertiesBuilder This commit updates the endpoint URLs in the defaultProperties method of the SimpleDBPropertiesBuilder class from http to https. This change is likely made to enhance the security of the SimpleDB clients.
https://github.com/apache/jclouds/commit/783f137bb59e645880d30e4b70b52c4aba90ef0b,783f137bb59e645880d30e4b70b52c4aba90ef0b,apache/jclouds,,"Using the correct ""it's me"" header in the RUN@cloud integration tests","Fix: Update request property in testPrimeContainers method In the testPrimeContainers() method of the TweetStoreLiveTest.java file, the request property ""X-AppEngine-QueueName"" has been replaced with ""X-RUN@cloud-Submitter"". This change was made to correct an error in the code."
https://github.com/apache/jclouds/commit/7f9973e037f1e8b5387f4ac258bae082440bc862,7f9973e037f1e8b5387f4ac258bae082440bc862,apache/jclouds,,VAppAsyncClient.deleteVApp (deprecated API) requires @consume(TASK_XML) annotation,Feat: Add @Consumes annotation to deleteVApp method in VCloudAsyncClient This commit adds a @Consumes(TASK_XML) annotation to the deleteVApp method in the VCloudAsyncClient class. This annotation specifies the type of data the method consumes. The method is used to asynchronously delete a Virtual Application (VApp) given its URI.
https://github.com/apache/jclouds/commit/e82e198a9f848708b922038b280830246650e914,e82e198a9f848708b922038b280830246650e914,apache/jclouds,,changed gogrid to not use ssh ctor,"Refactor: Update SSH connection in testShellAccess method In the testShellAccess() method of the GoGridLiveTestDisabled.java file, the way an SSH connection is established has been refactored. Instead of creating a new SshjSshClient instance directly, the method now retrieves an instance of SshClient.Factory from the context's injector and uses it to create the SshClient. This change improves the structure of the code without altering its functionality."
https://github.com/apache/jclouds/commit/a760e409a42cb6c6c2e1e264736617081b924af2,a760e409a42cb6c6c2e1e264736617081b924af2,apache/jclouds,,Added test to check that the key is decoded as expected,Feat: Add test for parsing query with keys requiring decoding This commit adds a new test method `testParseQueryWithKeysThatRequireDecoding` to the `ModifyRequestTest` class. The test checks the parsing of a query with keys that require decoding.
https://github.com/apache/jclouds/commit/559a37ceff1f7d5dc83cd32e377610e410769eeb,559a37ceff1f7d5dc83cd32e377610e410769eeb,apache/jclouds,,master is not accessible via getComputer,"Fix: Exclude ""master"" from testGetComputerView() test In the testGetComputerView() method in the ComputerClientLiveTest.java file, a condition has been added to exclude the ""master"" from the test. This change ensures that the test only validates the display name of each computer in the view, excluding the ""master""."
https://github.com/apache/jclouds/commit/b84a923615e00ef9177498693883c90b489659be,b84a923615e00ef9177498693883c90b489659be,apache/jclouds,,added default list op,"Feat: Add list method to ELB class This commit introduces a new feature to the ELB class in the labs/elb module. A new method `list` has been added, which takes a `LoadBalancerClient` as an argument and returns an iterable of `LoadBalancer` objects. This method lists all load balancers using the provided `loadBalancerClient` and default options."
https://github.com/apache/jclouds/commit/b93cfa42e1498c65d452765b97fd9237d6884ed4,b93cfa42e1498c65d452765b97fd9237d6884ed4,apache/jclouds,,"Remove Nova instance metadata limitRackspace cloud limits instance metadata to 5 key-value pairs, but upstream Nova only sets the limit at 128 by default.  This patch removes the limit entirely; the official python clients don't check it and the server is responsible for enforcing it anyway.","Fix: Remove limit on metadata key-value pairs in CreateServerOptions The previous implementation of the metadata method in the CreateServerOptions class had a limit on the number of key-value pairs that could be supplied per server. This commit removes that limit, in line with the findings of issue JCLOUDS-507 that Nova instance metadata is not limited to 5 pairs."
https://github.com/apache/jclouds/commit/6cb1558424055972a6e04539b88cda29680fc31c,6cb1558424055972a6e04539b88cda29680fc31c,apache/jclouds,,zone -> region in Cinder AvailabilityZoneApiLiveTest,"Refactor: Update setupContext method in AvailabilityZoneApiLiveTest In the `setupContext()` method of the `AvailabilityZoneApiLiveTest.java` file, the testing context setup has been updated. Previously, the availability zone API was initialized for the first configured zone. Now, the availability zone API is initialized for a specified region. This change improves the structure of the code without altering its behavior."
https://github.com/apache/jclouds/commit/2a5928b55dff2e7e26a29c1c887400d4c645852e,2a5928b55dff2e7e26a29c1c887400d4c645852e,apache/jclouds,,Re-adding Reflection2.constructor Removed in 671749d but used downstream in jclouds-labs,Feat: Add constructor method to Reflection2 class This commit adds a new method `constructor` to the `Reflection2` class. This method returns an `Invokable` object that reflects a constructor present in the `TypeToken` type.
https://github.com/apache/jena/commit/60e43e5faef6dc63ca453d61ae65ead6d22ebc8c,60e43e5faef6dc63ca453d61ae65ead6d22ebc8c,apache/jena,,Fix - was using base URI for request URI.,"Refactor: Update URI determination in execHttpPost method In the execHttpPost method, the way the request URI is determined has been updated. The method determineBaseIRI(url) has been replaced with determineRequestURI(url). This change does not alter the functionality of the method but improves its structure."
https://github.com/apache/jena/commit/7d3fd73ee5e0ed47e256aa6e95609189f667e92b,7d3fd73ee5e0ed47e256aa6e95609189f667e92b,apache/jena,,"Allow lcoation '--mem--' on the command line (TDB, in-memory). Same effect as --memTDB","Feat: Add in-memory TDB dataset handling in FusekiCmd This commit adds the ability to handle in-memory TDB datasets in the FusekiCmd class. Specifically, the processModulesAndArgs() method has been modified to check if the directory is equal to Names.memName. If so, it logs that the TDB dataset is in-memory. If not, it checks if the directory exists and logs the directory of the TDB dataset. This feature enhances the flexibility of handling TDB datasets."
https://github.com/apache/jena/commit/ace3649faeac426eef52535019a9468d9f07cf76,ace3649faeac426eef52535019a9468d9f07cf76,apache/jena,,File copy helper,"Feat: Add copyFile method to FileOps class This commit adds a new method `copyFile` to the `FileOps` class. This method copies a file from a source to a destination using FileChannels. If the destination file exists, it will be overwritten. This feature enhances the file operation capabilities of the `FileOps` class."
https://github.com/apache/jena/commit/1c997c0dfa00796a3804b836668d9bcec44d9e15,1c997c0dfa00796a3804b836668d9bcec44d9e15,apache/jena,,Always explicitly set base URI,"feat: Add base URI to QueryFactory.create in SPARQL_Query.java This commit modifies the `execute` method in `SPARQL_Query.java` to add a base URI parameter to the `QueryFactory.create` method. This change affects how the query is executed. The base URI is set to ""http://example/query-base""."
https://github.com/apache/jena/commit/f8f254b6ff03eb206421385069b3bf8e6e8fee79,f8f254b6ff03eb206421385069b3bf8e6e8fee79,apache/jena,,Throw exception on unexpected condition.,Fix: Throw exception in 'promote' method of BPTreePage This commit modifies the 'promote' method in the BPTreePage.java file to throw an InternalErrorException when the newPtr does not equal the page ID. This change ensures the consistency of the B+ tree by preventing the promotion of a page when the access path is not consistent.
https://github.com/apache/jena/commit/cfaa3d72040b71d40dfb41c21684c48ed2f34240,cfaa3d72040b71d40dfb41c21684c48ed2f34240,apache/jena,,Fix comment typo.,"Fix: Correct typo in comment in NodeFormatterBase Corrected a typo in the comment of the `formatLiteral` method in the `NodeFormatterBase` class. The word ""outptu"" has been changed to ""output""."
https://github.com/apache/jena/commit/e9e6fa1c2b27b3e45bb0c17f4c948b8c025ac6cf,e9e6fa1c2b27b3e45bb0c17f4c948b8c025ac6cf,apache/jena,,Convert http://jena.hpl.hp.com/ARQ to http://jena.apache.org/ARQ,Refactor: Update PREFIX URLs in LibTestSPARQL.java The PREFIX URLs in the SPARQL query strings in LibTestSPARQL.java have been updated. The changes do not affect the functionality of the code.
https://github.com/apache/jena/commit/d0ce13b2587905859c9ed854f5114b8c86c2125c,d0ce13b2587905859c9ed854f5114b8c86c2125c,apache/jena,,add licence info for ExampleConstructQuads; retain QuadAcc unchanged,Refactor: Reformat import statements and remove method in QuadAcc.java This commit reformats the import statements in the `QuadAcc.java` file for better readability. It also removes the `getBGP()` method.
https://github.com/apache/jena/commit/01bc520eda0dce834d20a71c9b90781346570a57,01bc520eda0dce834d20a71c9b90781346570a57,apache/jena,,Remove out-of-date comment. This closes #83.,Refactor: Remove out-of-date comment from Dataset.java Removed an out-of-date comment from the Dataset class. The functionality of the class remains the same. This change is part of a larger effort to clean up the codebase.
https://github.com/apache/jena/commit/8a4a285d62642cbdba787464c9e2a64e808eda60,8a4a285d62642cbdba787464c9e2a64e808eda60,apache/jena,,Fix test data,Style: Update TestTableJoin class Updated the TestTableJoin class to improve code style. The changes are related to the testing of left joins in the reference query engine. No associated issues or pull requests.
https://github.com/apache/jena/commit/7a85483509b353e4abb30901532c529b58e16592,7a85483509b353e4abb30901532c529b58e16592,apache/jena,,fix accent-insensitive search unit test that didn't actually test the right thing,Fix: Update testConfigurableAnalyzerIsCaseAndAccentInsensitive() method The testConfigurableAnalyzerIsCaseAndAccentInsensitive() method in the TestDatasetWithConfigurableAnalyzer.java file has been updated. The changes involve modifying the rdfs:label and the text:query in the turtle and queryString respectively. This was done to enhance the testing of the case and accent insensitivity of the ConfigurableAnalyzer.
https://github.com/apache/jena/commit/f7693a68cca53df0292624e90254a9233b8d8504,f7693a68cca53df0292624e90254a9233b8d8504,apache/jena,Y,Remove javadoc errors.,"Refactor: Simplify comments and override method in PMapQuadTable and PMapTripleTable This commit simplifies the comments in the PMapQuadTable and PMapTripleTable classes and overrides a method. The changes do not affect the functionality of the classes, which are used for storing and managing quads and triples using nested persistent maps. The refactor aims to improve the structure and design of the code without changing its behavior."
https://github.com/apache/jena/commit/ecfe9eda7adf6f9fcc0d88e8538e436103e823b0,ecfe9eda7adf6f9fcc0d88e8538e436103e823b0,apache/jena,,Simplify script engine instantiation,Refactor: Update `createEngine` and `getEngine` methods in `ScriptFunction.java` This commit updates the `createEngine` method in `ScriptFunction.java` to be non-static and removes the language parameter. The `getEngine` method is also updated to call the new version of `createEngine`. These changes improve the structure of the code without changing its behavior.
https://github.com/apache/jmeter/commit/1f659ccfe6592fa13d62721ed85032a3797f7a6d,1f659ccfe6592fa13d62721ed85032a3797f7a6d,apache/jmeter,,"Remove unnecessary ""throws"" clauses.",Refactor: Remove print statement from AccessLogSamplerGui Removed a print statement from the createTestElement() method in the AccessLogSamplerGui class. This is a part of code cleanup and does not affect the functionality of the class. The AccessLogSamplerGui class is used for configuring and managing an AccessLogSampler in JMeter.
https://github.com/apache/jmeter/commit/bfaa285c92cb44742553d2035b26d8e20edba5d1,bfaa285c92cb44742553d2035b26d8e20edba5d1,apache/jmeter,,Add comment on ORO-vs-java.util.regex for posterity.,Refactor: Update comment in ParseRegexp.java The comment in the ParseRegexp.java file was updated to reflect that the consideration of using Java 1.4 regexp instead of ORO did not significantly improve performance.
https://github.com/apache/jmeter/commit/373a9a8d344ff5c23f58333990c331af60262398,373a9a8d344ff5c23f58333990c331af60262398,apache/jmeter,,Dummy implementation of getLabelResource(),"Feat: Add getLabelResource method in TestBeanGUI This commit adds a new method getLabelResource() in the TestBeanGUI.java file. The method is supposed to return the label resource, but it's not implemented yet and currently returns null. The author information was also removed from a comment in the same file."
https://github.com/apache/jmeter/commit/98ab7fd2575c5f8d78cdf22c28ad106ec5b6e56e,98ab7fd2575c5f8d78cdf22c28ad106ec5b6e56e,apache/jmeter,Y,added a method to Visualizer interface to indicate if a visualizer generates or displays calculated statistics,Feat: Add isStats method to Visualizer and AbstractVisualizer This commit introduces a new method `isStats()` to the `Visualizer` interface and `AbstractVisualizer` class. This method is used to check if the statistics tracking is enabled. It returns true if statistics tracking is enabled. The `AbstractVisualizer` class is a base class for JMeter GUI components that display or log test results. The `Visualizer` interface is used to display and log test results in JMeter. The addition of the `isStats()` method enhances the functionality of these classes by allowing them to check the status of statistics tracking.
https://github.com/apache/jmeter/commit/84cf363d55d5e49648d4c13952b3e26d0dd8007d,84cf363d55d5e49648d4c13952b3e26d0dd8007d,apache/jmeter,,Remove unused variable and corresponding import,Refactor: Remove unused LoginConfigGui from LdapExtTestSamplerGui The LoginConfigGui import and object declaration were removed from LdapExtTestSamplerGui.java as they were not being used. This simplifies the code and reduces unnecessary dependencies.
https://github.com/apache/jmeter/commit/2c24d688aad7e71a6760f902525a652489ccd9c9,2c24d688aad7e71a6760f902525a652489ccd9c9,apache/jmeter,,Remove unused imports,Refactor: Reorganize import statements in MonitorAccumModel.java The import statements in MonitorAccumModel.java have been reorganized for better readability and maintenance. No changes have been made to the functionality of the code.
https://github.com/apache/jmeter/commit/5692ba3f8a1ea6f37c2bbd7ac21f7b3ac0c93b98,5692ba3f8a1ea6f37c2bbd7ac21f7b3ac0c93b98,apache/jmeter,,Use HTTPSamplerFactory to create the sampler,"Refactor: Update generateRequest method in StandardGenerator.java This commit refactors the generateRequest method in the StandardGenerator.java file. The method now creates a new instance of HTTPSamplerFactory instead of using the HTTPSampler. This change improves the structure of the code without changing its behavior. If a NullPointerException occurs during the creation of the HTTPSamplerFactory instance, it is caught and the stack trace is printed."
https://github.com/apache/jmeter/commit/399d67f64b51a44ce72e702c0df7f853d943e682,399d67f64b51a44ce72e702c0df7f853d943e682,apache/jmeter,,Re-enabling test as it seems to have been fixed,"Fix: Re-enable testAlwaysFailBAD() in TestWhileController The testAlwaysFailBAD() method in TestWhileController.java was re-enabled. This method is expected to always fail, but currently, it is not failing as expected. Further investigation is needed to understand why the test is not failing."
https://github.com/apache/jmeter/commit/8e269061bac22627f76bfa280122cbafa38ba2b0,8e269061bac22627f76bfa280122cbafa38ba2b0,apache/jmeter,,Assumed that the timstamp was always at the end,"Fix: Improve end time calculation in SamplingStatCalculator In the `SamplingStatCalculator` class, the `getEndTime` method has been updated to return the end time of the current sample instead of the timestamp. This change provides a more accurate calculation of the end time of a sample."
https://github.com/apache/jmeter/commit/0b35e7c54b590d245f8e7e67c9013adc48852b7f,0b35e7c54b590d245f8e7e67c9013adc48852b7f,apache/jmeter,,Exclude ObsoleteGui from tests,Fix: Skip ObsoleteGui instances in suiteGUIComponents() The method suiteGUIComponents() in JMeterTest.java has been modified to skip GUI components that are instances of ObsoleteGui when creating a test suite. This change ensures that only relevant GUI components are included in the test suite.
https://github.com/apache/jmeter/commit/ea06fea815dc986f1940f40970d727ce5fc748f6,ea06fea815dc986f1940f40970d727ce5fc748f6,apache/jmeter,,Allow default cache size to be defined,feat: Update JDBCSampler.java Added import statement and modified MAX_ENTRIES constant in JDBCSampler.java. The MAX_ENTRIES constant now uses the JMeterUtils.getPropDefault method to get its value. This change is not associated with any issues or pull requests.
https://github.com/apache/jmeter/commit/9e9c17963dc2f148a5bbcd002764e42b68dc5d20,9e9c17963dc2f148a5bbcd002764e42b68dc5d20,apache/jmeter,,PostWriter is non-serializable,Refactor: Make 'postWriter' variable transient in HTTPSampler class This commit makes the 'postWriter' variable in the HTTPSampler class transient. This is a minor refactor with no associated issues or pull requests.
https://github.com/apache/jmeter/commit/b4d3fcd1df15af8d22c1d0c446b672ca480347f2,b4d3fcd1df15af8d22c1d0c446b672ca480347f2,apache/jmeter,,Correct the SampleEvent parameter Deliver excluded samples as [name],"Fix: Modify deliverSampler method in ProxyControl.java This commit modifies the deliverSampler method in the ProxyControl.java file. The method now filters the sampler based on content type and URL, modifies its configurations, and places it in the target controller node. If the sampler is excluded based on URL or content-type, it now notifies the sample listeners."
https://github.com/apache/jmeter/commit/aa4e1164fc1cf246a154e45338dadd0bedde8f66,aa4e1164fc1cf246a154e45338dadd0bedde8f66,apache/jmeter,,Tidy debug statement,Refactor: Improve readability of debug log statements in LdapExtClient This commit refactors the 'searchTest' method in the LdapExtClient.java file to improve the readability of the debug log statements. The functionality of the method remains the same.
https://github.com/apache/jmeter/commit/30f3e481a1f21ee8dce5bdbc3662ed30227d1b99,30f3e481a1f21ee8dce5bdbc3662ed30227d1b99,apache/jmeter,,Stop using deprecated methods,Refactor: Update file upload data setup in HTTP sampler This commit updates the setupFileUploadData method in the TestHTTPSamplersAgainstHttpMirrorServer.java file. The changes involve how the file upload data is set up for the HTTP sampler. The previous implementation has been replaced with a new approach that uses the HTTPFileArg class. This refactor improves the structure of the code without changing its behavior.
https://github.com/apache/jmeter/commit/793ada2cfd1276768b885f30036566dd174e8f07,793ada2cfd1276768b885f30036566dd174e8f07,apache/jmeter,,Count messages actually read,"Refactor: Improve accuracy of response message and sample count in SubscriberSampler In the `sampleWithListener()` method of the `SubscriberSampler.java` file, a new variable `read` was introduced to count the actual number of messages read from the queue. This variable is then used to set the response message and sample count, improving their accuracy."
https://github.com/apache/jmeter/commit/81ff872b26ce169faaae3df54d9f71cd28cf8da5,81ff872b26ce169faaae3df54d9f71cd28cf8da5,apache/jmeter,,Add fudge factor for overall time comparison,"Fix: Adjust time calculation in testSubResults method In the testSubResults method of the TestSampleResult.java file, the time calculation has been adjusted to account for the granularity of System.currentTimeMillis(). A ""fudge factor"" of 3ms has been added to the overall time to allow for minor variations in the value returned by SampleResult#currentTimeInMillis(). This change ensures that the test accurately reflects the time taken by the HTTP sample and its sub-samples."
https://github.com/apache/jmeter/commit/dfe51f026a532172863f27fd303cb26b0a48279d,dfe51f026a532172863f27fd303cb26b0a48279d,apache/jmeter,,Don't swallow IOException,"Refactor: Replace JOrphanUtils.closeQuietly with direct close method in FileServer In the FileServer.java file, the closeFile method has been refactored. The use of JOrphanUtils.closeQuietly to close the fileEntry.inputOutputObject has been replaced with the direct close method. This change improves the internal structure of the code without altering its external behavior."
https://github.com/apache/jmeter/commit/420947c1d431f2ce795d13e995c79eec4ae8d040,420947c1d431f2ce795d13e995c79eec4ae8d040,apache/jmeter,,Read return value of read,"Refactor: Simplify failure message assignment in ResponseAssertion In the `getResult` method of `ResponseAssertion.java`, the assignment of the failure message in the `AssertionResult` object has been simplified. The failure message is now set using `response.responseDatatoString()` instead of `new String((byte[]) response.getResponseData())`. This change improves readability and maintainability of the code."
https://github.com/apache/jmeter/commit/72b574cefec3c12cc534f64fd14a26d093f84a1c,72b574cefec3c12cc534f64fd14a26d093f84a1c,apache/jmeter,,make constants private as not used anywhere else,"Refactor: Change access modifiers of static variables in CounterConfig class The access modifiers of three static String variables (PER_USER, VAR_NAME, RESET_ON_THREAD_GROUP_ITERATION) in the CounterConfig class have been changed from public to private. This change is part of a refactoring effort to improve the encapsulation of the class."
https://github.com/apache/jmeter/commit/3eb16cd9abd44055599b6930028ca4d5b4cfefa9,3eb16cd9abd44055599b6930028ca4d5b4cfefa9,apache/jmeter,,remove final on method as class is final,"Refactor: Update setObjectValue and clone methods in NullProperty.java This commit adds a comment to the setObjectValue method indicating that it does nothing (NOOP), and modifies the clone method. The changes are made to improve the structure or design of the code without changing its behavior."
https://github.com/apache/jmeter/commit/8d609412395e97d79b09f18c2f0aded10bb055e4,8d609412395e97d79b09f18c2f0aded10bb055e4,apache/jmeter,,Add EOL at EOF,"Style: Add newline at end of NativeCommand.java This commit adds a newline at the end of the NativeCommand.java file. The change is purely stylistic and does not affect the functionality of the NativeCommand class, which executes system commands with specified environment variables and working directory."
https://github.com/apache/karaf/commit/42167f08f0e35229f6446ab3942d83914a7cb241,42167f08f0e35229f6446ab3942d83914a7cb241,apache/karaf,,Fix build after adding diagnostic stuff,"Refactor: Improve completeness of thread dump information In the `writeDump` method of the `ThreadDumpProvider.java` file, the number of threads and their detailed information are now written to the output stream, instead of just the number of daemon threads. This change improves the completeness of the thread dump information provided by the method."
https://github.com/apache/karaf/commit/5ea93654cf709383c1d59012e749e0fa20e70ffb,5ea93654cf709383c1d59012e749e0fa20e70ffb,apache/karaf,Y,Limit size of description to avoid ugly layout,"Refactor: Remove unused imports and limit description column size In this commit, unused imports are removed from the InfoFeatureCommand.java and ListFeaturesCommand.java files. Additionally, the size of the ""Description"" column in the ListFeaturesCommand.java file is set to 50 to improve the readability of the output. These changes are part of a code refactoring effort and do not alter the functionality of the affected classes."
https://github.com/apache/karaf/commit/b220722c3652bf02ca00150d0decb2509b83adc0,b220722c3652bf02ca00150d0decb2509b83adc0,apache/karaf,,add a NPE checker,Fix: Update initialization of PropertiesInstaller in PropertiesLoginModule This commit modifies the initialize method in the PropertiesLoginModule class. The changes involve the initialization of the PropertiesInstaller service. The condition check for 'propertiesInstaller' and 'usersFile' has been updated to prevent potential null pointer exceptions. The debug log message has also been updated for consistency.
https://github.com/apache/lenya/commit/6d2764319c6a87420767b8604c3d12f5022200a8,6d2764319c6a87420767b8604c3d12f5022200a8,apache/lenya,,The signature of the create method of the parent class had changed. That's why client's would invoke the create of the parent class which does nothing. Adapted the create method to match the signature.,feat: add childName parameter to create method The 'create' method in the 'DefaultCreator.java' file has been modified to include an additional parameter 'childName'. This method now creates a new file and its corresponding metadata file based on the child type and copies the content from the sample files to these new files.
https://github.com/apache/lenya/commit/27c5bd80093d211c4935f7f845dc0d75fb491995,27c5bd80093d211c4935f7f845dc0d75fb491995,apache/lenya,,removed buildEvent() method,"Refactor: Remove unused method and import in WorkflowFactory class The `buildEvent` method and the `import org.apache.lenya.workflow.impl.WorkflowImpl;` statement were removed from the `WorkflowFactory.java` file. This class is used to create new instances of workflows, workflow situations, and workflow documents. The removed method was previously used to create events, but it is no longer needed. This change improves the structure of the code without altering its behavior."
https://github.com/apache/lenya/commit/dce9cd620ac1d508a684477d6cd3cef596ec7a04,dce9cd620ac1d508a684477d6cd3cef596ec7a04,apache/lenya,,added file getters,"Feat: Add getFile and getFiles methods to DefaultDocument.java This commit introduces two new methods to the DefaultDocument.java file. The getFile method returns the file associated with a specific area and language in the publication, and the getFiles method returns an array of files for a specific area in the publication with the given ID. These methods enhance the functionality of the DefaultDocument class by providing more granular access to the files associated with a document in a publication."
https://github.com/apache/lenya/commit/983e12d5005d8b7450e389f867269e170d3dfe89,983e12d5005d8b7450e389f867269e170d3dfe89,apache/lenya,,Fixed my last checkin :),"Refactor: Update method of accessing authoringTree in SitetreeModule In the `SitetreeModule.java` file, the method of accessing the `authoringTree` object has been updated. Previously, the `authoringTree` was obtained from the `publication` object. Now, it is obtained from the `manager` object. This change is a refactor aimed at improving the internal structure of the code without altering its external behavior."
https://github.com/apache/lenya/commit/77eb1cd2c02961e62c50caf61d944ea835aac41c,77eb1cd2c02961e62c50caf61d944ea835aac41c,apache/lenya,,Use IOUtils instead of deprecated CopyUtils.,"Refactor: Replace CopyUtils with IOUtils in SourceUtil In the SourceUtil class, the CopyUtils.copy method has been replaced with IOUtils.copy and IOUtils.write methods. This change is made in the copy method which is responsible for copying data from a source to a destination, with an option to use a buffer for the operation. The functionality of the SourceUtil class remains the same, providing methods for handling and manipulating sources, such as checking existence, reading, and writing."
https://github.com/apache/lenya/commit/4f42be43b3cf21f5f08fdd0d7c4b9c777f56b1a3,4f42be43b3cf21f5f08fdd0d7c4b9c777f56b1a3,apache/lenya,,Made RepositoryTest abstract so it isn't executed by Junit,"Refactor: Make RepositoryTest class abstract The `RepositoryTest` class, used for testing the functionality of a JCR repository and setting up and managing a test repository for a web application, has been made abstract. This change does not affect any methods within the class."
https://github.com/apache/lenya/commit/b09b1c16b61a1a39aa6b6c371ba76d9d812e335c,b09b1c16b61a1a39aa6b6c371ba76d9d812e335c,apache/lenya,,Resetting listener after test,"Fix: Reset listener in testListener method In the `testListener` method of the `ObservationTest.java` file, a line of code was added to reset the listener after it gets notified. This ensures that the listener is ready for the next notification. This change is classified as a 'Fix', suggesting that it corrects an issue or bug."
https://github.com/apache/lenya/commit/cf66909a1c442b36ae3fc2324c1c55823f6f260e,cf66909a1c442b36ae3fc2324c1c55823f6f260e,apache/lenya,,[minor change] removed unused import,Refactor: Remove unused import in IndexUpdater.java This commit removes an unused import statement in the IndexUpdater.java file. The removed import is for the Document class. This change is a part of code refactoring and does not affect the functionality of the code.
https://github.com/apache/lenya/commit/c90b7af96858006bd95e2faa3040a0588c809eba,c90b7af96858006bd95e2faa3040a0588c809eba,apache/lenya,,add single resource Doc and not all docs in area to the ArrayList for each resource,"Fix: Corrected element addition in getResourceDocuments method In the 'getResourceDocuments' method of the 'Assets.java' file, corrected the addition of elements to the list. Previously, the entire 'docs' array was being added to the list. This has been fixed to add only the current element 'docs[i]'. This change ensures that the method correctly returns an array of documents that have a resource type of ""resource"" from the source document's area."
https://github.com/apache/lenya/commit/f3c5e70e7f9cdc18ac0dcef205bc5fcacdee2bf7,f3c5e70e7f9cdc18ac0dcef205bc5fcacdee2bf7,apache/lenya,,Avoid returning null-value DocumentLocator objects,"Refactor: Simplify the existence check in getLocator method The `getLocator` method in the `DocumentLocator` class has been refactored. The old code first checked if a key exists in the `locators` map and then retrieved the value associated with the key. The new code directly retrieves the value associated with the key and then checks if the retrieved value is null. This change simplifies the code and improves its readability. The functionality of the method remains the same: it returns a `DocumentLocator` for the given parameters. If a `DocumentLocator` for these parameters does not exist, a new one is created, stored, and then returned."
https://github.com/apache/logging-log4j2/commit/27c0a1556a47a2c594aece3c355e891ff4f19836,27c0a1556a47a2c594aece3c355e891ff4f19836,apache/logging-log4j2,,Remove getFilter method inadvertantly left in,"Refactor: Remove getFilter method from Appender class The getFilter method was removed from the Appender class in the log4j2-core module. This change is part of a refactor and affects how filters are managed in the Appender class. The Appender class is responsible for handling logging events, managing exceptions, and configuring layouts for logging."
https://github.com/apache/logging-log4j2/commit/45776f1f16a197428c3cb02520e9d1b28ab4dff6,45776f1f16a197428c3cb02520e9d1b28ab4dff6,apache/logging-log4j2,,Avoid problems on the Turkish Locale.,Refactor: Use Locale.ENGLISH in toUpperCase method call in SocketAppender This commit refactors the `createSocketManager` method in the `SocketAppender.java` file. The `toUpperCase` method call was changed to use `Locale.ENGLISH` to ensure consistent behavior across different locales. This change does not alter the external behavior of the method.
https://github.com/apache/logging-log4j2/commit/f0665f7f3807575bf510786b184486262db1e2e1,f0665f7f3807575bf510786b184486262db1e2e1,apache/logging-log4j2,,"Revert change to remove ""unnecessary"" cast. Compile fails on OS/X in Java 7 without it.","Refactor: Add cast for Java 7 compatibility in ResolverUtil In the 'loadImplementationsInBundle' method of the 'ResolverUtil.java' file, a cast has been added to the return value of a method call. This change ensures compatibility with Java 7. The method is used to load classes from a package in a bundle that match a given test condition."
https://github.com/apache/logging-log4j2/commit/a61bbe965d014f8d36ec59713e20ebee8cf07ff1,a61bbe965d014f8d36ec59713e20ebee8cf07ff1,apache/logging-log4j2,,Add comment regarding proper double-checked locking. Quiets the static code analyzers.,Refactor: Add comments to getInstance() method in ConfigurationFactory class This commit adds two lines of comments to the getInstance() method in the ConfigurationFactory class. The comments explain the use of volatile and double-checked locking in the method. The functionality of the method remains the same.
https://github.com/apache/logging-log4j2/commit/8ee19f2d2c54c10a99ff53c62c97b96953e60358,8ee19f2d2c54c10a99ff53c62c97b96953e60358,apache/logging-log4j2,,additional fix to prevent spurious test failures,"Fix: Increase tries and sleep time in testAppender() In the testAppender() method of the RollingAppenderTimeTest.java file, the number of tries was increased from 10 to 20 to ensure the test has enough attempts to pass. A debug log statement was added for better tracking of the test progress. The sleep time was also increased from 50 to 100 to allow more time for the rollover to complete. These changes aim to improve the reliability of the test."
https://github.com/apache/logging-log4j2/commit/0645447e8bfd7136f00d32b72ea9db2a304a2897,0645447e8bfd7136f00d32b72ea9db2a304a2897,apache/logging-log4j2,,Add missing Javadoc tags.,"Style: Refactor comments and add parameters in PatternLayout The comments in the PatternLayout class have been reformatted for better readability. Additionally, two new parameters, 'header' and 'footer', have been added to a method. These changes do not affect the functionality of the class."
https://github.com/apache/logging-log4j2/commit/1f7b97e92461f0943b8d1ba0f02ef289ee4c09a2,1f7b97e92461f0943b8d1ba0f02ef289ee4c09a2,apache/logging-log4j2,,Suppress serialization warnings where applicable.,Style: Add annotations to suppress warnings in StatusLogger class This commit adds two annotations to suppress warnings for non-serializable fields in the StatusLogger class. The StatusLogger class is responsible for recording and managing logging system events. The added annotations improve the style of the code and do not affect its functionality.
https://github.com/apache/logging-log4j2/commit/7831dde2eb0d0aa371639f8984b7a8b9f1b3aa53,7831dde2eb0d0aa371639f8984b7a8b9f1b3aa53,apache/logging-log4j2,,Clearer test assertion.,"Fix: Correct assertion in SslConfigurationTest In the method emptyConfigurationHasDefaultTrustStore() of the SslConfigurationTest.java file, the assertion has been corrected. Previously, the assertion was always passing (Assert.assertTrue(true)), which did not correctly test the functionality. The assertion has been replaced with Assert.assertNotNull(clientSocket) to ensure that the clientSocket is not null when the default trust store is used with an empty SSL configuration."
https://github.com/apache/logging-log4j2/commit/d2aea7458f08e8b9d48f3768b719aafaf4246007,d2aea7458f08e8b9d48f3768b719aafaf4246007,apache/logging-log4j2,,Use Apache Commons IOUtils instead of sun.misc.IOUtils.,"Refactor: Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils in TestClassLoader This commit refactors the TestClassLoader class by replacing the sun.misc.IOUtils with org.apache.commons.io.IOUtils. The change is made in the findClass method, which finds and loads the class with the specified name. The way the class file is loaded into a byte array has been modified. The commit does not change the functionality of the method or the class."
https://github.com/apache/logging-log4j2/commit/efa163b9a33a8c9bbe948e4de629fdbafccd0783,efa163b9a33a8c9bbe948e4de629fdbafccd0783,apache/logging-log4j2,,Set the class name and display name when executing a rule. This is to let configuration files to be more flexible in a large test suite. For example: I want to use one log file per test class.,"Feat: Add new system properties to LoggerContextRule This commit adds two new system properties to the LoggerContextRule class in the log4j-core module. These properties, SYS_PROP_KEY_DISPLAY_NAME and SYS_PROP_KEY_CLASS_NAME, are set and cleared in the apply method. This method sets up and tears down the Log4J context for each test. The addition of these properties does not change the overall functionality of the method."
https://github.com/apache/logging-log4j2/commit/856607faf268136fc6f2e27cf3716a5e16a0f48d,856607faf268136fc6f2e27cf3716a5e16a0f48d,apache/logging-log4j2,,Add getters for private ivars.,"Feat: Add getter methods to DefaultRolloverStrategy class This commit adds several getter methods to the DefaultRolloverStrategy class. These methods provide access to the properties of the class, including useMax, subst, customActions, and stopCustomActionsOnError. The addition of these methods enhances the functionality of the DefaultRolloverStrategy class, which is responsible for managing the renaming and deletion of log files."
https://github.com/apache/logging-log4j2/commit/11ab37bcc2c070c5baae055969aabfc403fe4163,11ab37bcc2c070c5baae055969aabfc403fe4163,apache/logging-log4j2,,"RingBufferLogEvent bugfix: do not use setValues(null, null....) to clear() the RingBufferLogEvent: Message is expected to be non-null in setValues()","Refactor: Simplify clearing of properties in RingBufferLogEvent In the `clear()` method of the `RingBufferLogEvent` class, the properties are now cleared individually instead of using the `setValues()` method. This refactor does not change the functionality of the method but makes the code more readable and easier to understand."
https://github.com/apache/logging-log4j2/commit/0fb4ed116d4ce7d90e43270eec7e00bc656d8fae,0fb4ed116d4ce7d90e43270eec7e00bc656d8fae,apache/logging-log4j2,,Implement MutableLogEvent.createMemento(),"Refactor: Update createMemento method in MutableLogEvent class The createMemento method in the MutableLogEvent class has been refactored. The method was previously creating a memento of the current log event state for later restoration. Now, it creates a memento of the current log event with the updated message. This change does not affect the external behavior or functionality of the method."
https://github.com/apache/logging-log4j2/commit/d219411e6834340cc4434e350e23e3f437a89b76,d219411e6834340cc4434e350e23e3f437a89b76,apache/logging-log4j2,,Fix test clean-up,Fix: Update tearDown method in MdcPatternConverterTest The tearDown method in MdcPatternConverterTest has been updated to clear the thread context map instead of the thread context stack after each test. This change is likely made to prevent potential memory leaks.
https://github.com/apache/logging-log4j2/commit/eae58c051fc1ca6f65e2157a066d104a49e4e544,eae58c051fc1ca6f65e2157a066d104a49e4e544,apache/logging-log4j2,,Add missing '@OverRide' annotations.,"Feat: Add @Override annotation to start() method in AsyncLoggerDisruptor class This commit adds the @Override annotation to the start() method in the AsyncLoggerDisruptor class. The start() method is responsible for starting the AsyncLogger disruptor for the current context. If a disruptor already exists for this context, it will not create a new one. This change ensures that the method correctly overrides a method from its superclass."
https://github.com/apache/logging-log4j2/commit/6c4a094b0834adfd1de04398582e723ef645cb3b,6c4a094b0834adfd1de04398582e723ef645cb3b,apache/logging-log4j2,Y,Remove unused imports.,"Refactor: Remove unused imports In this commit, unused import statements have been removed from the files LifeCycle.java and DefaultRolloverStrategy.java. This is a code cleanup activity that helps to keep the codebase clean and easy to maintain."
https://github.com/apache/logging-log4j2/commit/f9ff2d6f4ffd88957d298e397e11bbeb1d6f3dba,f9ff2d6f4ffd88957d298e397e11bbeb1d6f3dba,apache/logging-log4j2,,"ignore since these tests fail locally (for Gary Gregory) and on Travis E209CI. Passes on Jenkins somehow"".C210","Fix: Ignore failing tests in AbstractLoadBundleTest Two tests in AbstractLoadBundleTest.java are failing locally and on Travis CI, but passing on Jenkins. These tests have been annotated with @Ignore until the cause of the inconsistency is resolved."
https://github.com/apache/logging-log4j2/commit/d9a12634030d659e3754df960a802f72fd7f3ee3,d9a12634030d659e3754df960a802f72fd7f3ee3,apache/logging-log4j2,,Remove exception stack trace print This is already logged by the StatusLogger.,Refactor: Rearrange import statements and remove exception print in StringBuilderEncoder.java Rearranged the import statements for better organization and removed an exception print statement to improve code cleanliness. No associated issues or pull requests.
https://github.com/apache/logging-log4j2/commit/69c7b5a42f15f2b21e7b6b73822d47639ec15d5a,69c7b5a42f15f2b21e7b6b73822d47639ec15d5a,apache/logging-log4j2,,AbstractJacksonLayout - reformated new code,"Style: Improve code readability in AbstractJacksonLayout.java This commit enhances the readability and consistency of the code in AbstractJacksonLayout.java. The changes are related to the handling of additional fields in a log event. The changes do not alter the functionality of the methods, but rather improve the code quality. The changes include adjusting the spacing and formatting of the code."
https://github.com/apache/logging-log4j2/commit/edbd3e7d6a9212411b50b245d5c17d0c8a943273,edbd3e7d6a9212411b50b245d5c17d0c8a943273,apache/logging-log4j2,Y,Pull up logger() method.,"Refactor: Move logger() method to AbstractManager class The logger() method was moved from the JdbcDatabaseManager class to its superclass, AbstractManager. This change allows all managers that extend AbstractManager to have access to the logger() method, potentially improving code reuse and maintainability. No associated issues or pull requests were found for this commit."
https://github.com/apache/maven/commit/0fc31ef9a44015c45a8d7d9374a583340a79ba8f,0fc31ef9a44015c45a8d7d9374a583340a79ba8f,apache/maven,,o Adding ci management inhertiance.,"Feat: Inherit ciManagement from parent model In the `assembleModelInheritance` method of the `DefaultModelInheritanceAssembler.java` file, the code has been modified to inherit the `ciManagement` property from the parent model to the child model if it is not set in the child model. This is a new feature that enhances the inheritance functionality of the method."
https://github.com/apache/maven/commit/30eedfb62610381a93bad4187eb2283d07489674,30eedfb62610381a93bad4187eb2283d07489674,apache/maven,,add missing error message when the package goal is not found,"Fix: Add validation for mojo phase in verifyMojoPhase method This commit adds a validation in the `verifyMojoPhase` method of the `DefaultLifecycleExecutor` class to check if the given task is a valid mojo phase. If the task is not a valid mojo phase, an exception is thrown. This change improves the error handling in the method and ensures that only valid tasks are processed."
https://github.com/apache/maven/commit/657fde08f4a5d95dc99cc220716d54048716a89b,657fde08f4a5d95dc99cc220716d54048716a89b,apache/maven,,exclude svn directories in mboot,"Fix: Exclude certain files when creating jar in JarMojo.java In the execute method of the JarMojo.java file, an additional exclusion pattern ""**/.svn/**"" has been added to the addDirectory method call. This change ensures that certain files like package.html and .svn files are excluded when creating a jar file."
https://github.com/apache/maven/commit/40d47927dee5a419ad71add6a80789bfd07e52ee,40d47927dee5a419ad71add6a80789bfd07e52ee,apache/maven,,o Fixing a small bug that would cause a NPE if a plugin doesn't contain any mojos.,"Fix: Add null check before iterating over pluginDescriptor.getMojos() This commit adds a null check before iterating over the pluginDescriptor.getMojos() in the execute method of the PluginDescriptorGenerator.java file. This prevents a potential NullPointerException when the pluginDescriptor.getMojos() is null. The functionality of the method remains the same, but the implementation has been modified to handle this edge case."
https://github.com/apache/maven/commit/e53ecf1af2f069eb6e14827d9504468dd6c3eb12,e53ecf1af2f069eb6e14827d9504468dd6c3eb12,apache/maven,,remove old comments,Refactor: Remove outdated comments in CompilerMojo.java The comments about changing the debug parameter type to Boolean and changing the staleMillis parameter type to Long were removed from the CompilerMojo.java file. These comments were outdated and no longer relevant to the current state of the code.
https://github.com/apache/maven/commit/4c85dfc33154be5933b4ecb302e395ce72c226a0,4c85dfc33154be5933b4ecb302e395ce72c226a0,apache/maven,,Adding defensive code for one more place where cleanedPath length could cause a problem with string manipulation in appendPath(..).,"Fix: Improve path adjustment handling in appendPath method In the `appendPath` method of the `DefaultModelInheritanceAssembler.java` file, the handling of the path adjustment has been improved. A check has been added to ensure that the `cleanedPath` length is greater than 0 before reducing its length by 1. This prevents potential errors when the `cleanedPath` length is 0. A comment has also been added indicating that this method should eventually be migrated to `DefaultPathTranslator`."
https://github.com/apache/maven/commit/92e731eb8007890b624f8b88984980660a2e587a,92e731eb8007890b624f8b88984980660a2e587a,apache/maven,,Added @SInCE tag,Style: Add version comment to PluginException.java A comment indicating the version since the PluginException.java file exists was added. This change does not affect the functionality of the code.
https://github.com/apache/maven/commit/40aacad4f0d2b0b33f3a70b971030c5d42afa167,40aacad4f0d2b0b33f3a70b971030c5d42afa167,apache/maven,,"o Add a method that can be used with booting with a ClassWorld, we will just create one when the standard main method is invoked. Work required for Dan's new rework of the bootstrap to make it dead simple to understand.",Feat: Add main entry point for application A new `main` method has been added to the `MavenCli` class. This method serves as the main entry point for the application when run from the command-line. It is designed to provide a main entry point for the application when the classworld has not been set up.
https://github.com/apache/maven/commit/d5f5abeb5749318085df7dd07ecadcdb49567b8b,d5f5abeb5749318085df7dd07ecadcdb49567b8b,apache/maven,,o dead import,Style: Remove unused import in DefaultProfileManager.java The import statement for java.util.Properties was removed from DefaultProfileManager.java as it was unused. This change is part of code style maintenance.
https://github.com/apache/maven/commit/3571f9e2ac2552c6279cebd7c675254b9a785a62,3571f9e2ac2552c6279cebd7c675254b9a785a62,apache/maven,,"Do not return null collections, makes life easier for clients","Fix: Update exception handling in DefaultMavenExecutionResult This commit updates the getExceptions() and hasExceptions() methods in the DefaultMavenExecutionResult.java file. The getExceptions() method now returns an empty list if the exceptions list is null, and the hasExceptions() method now checks if the exceptions list is empty. This change ensures that the methods behave correctly when the exceptions list is null."
https://github.com/apache/maven/commit/1cb3190b0faf83c77f93dcf2ca9c76b62021e2bf,1cb3190b0faf83c77f93dcf2ca9c76b62021e2bf,apache/maven,,Make the error message construction a little more resilient to errors in classloading.,"Refactor: Improve error logging in executeMojo method In the `executeMojo` method of the `DefaultPluginManager.java` file, the way of logging an error message has been improved. Instead of using `mojo.getClass().getName()`, it now uses `mojoDescriptor.getImplementation()`. This change does not affect the functionality of the method, but it makes the error reporting and logging more accurate."
https://github.com/apache/maven/commit/3051c4974b0f7780528114c49492d8930b2fbd6d,3051c4974b0f7780528114c49492d8930b2fbd6d,apache/maven,Y,o Fix compilation error with mirrors,"feat: Add mirror to Maven Repository System This commit introduces a new feature to the Maven Repository System. Two new methods have been added to the classes ""LegacyMavenRepositorySystem"" and ""MavenRepositorySystem"". These methods allow adding a mirror to the mirror builder with the given id, mirrorOf, and url. This feature enhances the flexibility and configurability of the Maven Repository System."
https://github.com/apache/maven/commit/eb43b9be114e9fc2ccaa21d25fac8110fdf75331,eb43b9be114e9fc2ccaa21d25fac8110fdf75331,apache/maven,,Fix Checkstyle violation.,Style: Improve readability in ComparableVersion.java Split a line of code in the `main` method into two for better readability. The functionality of the method remains the same.
https://github.com/apache/mesos/commit/7e631d612896cd1b8d4de46ff500677de9c63900,7e631d612896cd1b8d4de46ff500677de9c63900,apache/mesos,,Fixed flaky ExamplesTest.JavaFramework.,Fix: Added sleep function to ensure SchedulerDriver teardown This commit adds a sleep function to the main method in the TestFramework.java file. The sleep function is added to ensure that the SchedulerDriver teardown is complete before the JVM starts running native object destructors after System.exit() is called. This change is a corrective action to handle a potential issue where the JVM might start running native object destructors before the SchedulerDriver teardown is complete.
https://github.com/helterskelterr/ofbizApp/commit/483eb1aa075f0c56fab07e5d04a0cc565c64909a,483eb1aa075f0c56fab07e5d04a0cc565c64909a,helterskelterr/ofbizApp,,"Added FreeMarkerWorker.getSiteParameters to render method. This data, particularly ""rootDir"", is used loading FTL content templates. I figured it could not hurt normal screen rendering.",Feat: Enhance render method in ScreenWidgetViewHandler class This commit enhances the render method in the ScreenWidgetViewHandler class. The method is now set up to decide whether to use an OutputStream or a Writer based on the servlet context. This change improves the flexibility of the method in rendering a page.
https://github.com/helterskelterr/ofbizApp/commit/aa92b107eca7e828d7e47dc9b7a37a5b888f39c4,aa92b107eca7e828d7e47dc9b7a37a5b888f39c4,helterskelterr/ofbizApp,,Changed to use FlexibleLocation so that for url resource loaders in component config files you can use the component:// style url for resources in components,"Refactor: Improve URL resolution in ComponentConfig This commit refactors the `getURL(String resourceLoaderName, String location)` method in the `ComponentConfig.java` file. The method now resolves the location in the context of the component, which improves the internal structure of the code without altering its external behavior."
https://github.com/helterskelterr/ofbizApp/commit/c5c2b2c9b3f2e5b8cb6e2960b2a6daf9eb9a335c,c5c2b2c9b3f2e5b8cb6e2960b2a6daf9eb9a335c,helterskelterr/ofbizApp,,Just implementing Adam's request.,"Fix: Correct index used in 'chooseClientAlias' method In the 'chooseClientAlias' method of the 'AliasKeyManager.java' file, the wrong index was being used in the if condition inside a for loop. This commit fixes this bug by replacing 'aliases[i]' with 'aliases[x]'."
https://github.com/helterskelterr/ofbizApp/commit/c882ee248d8dc0d770079f2ece6db68b8cab0a49,c882ee248d8dc0d770079f2ece6db68b8cab0a49,helterskelterr/ofbizApp,,"Remove was returning the *new* object, instead of the *old*. Closes https://issues.apache.org/jira/browse/OFBIZ-1322.",Refactor: Improve design of put method in CacheLineTable.java The put method in the CacheLineTable.java file has been refactored to return the previous value associated with the key instead of the new value. This change improves the design of the method without altering its functionality. The associated issue report [OFBIZ-1322] indicates that there may have been a similar issue with the remove method in the same class.
https://github.com/helterskelterr/ofbizApp/commit/cd5870de6af529b968547a6130aaafa33d0f4ffc,cd5870de6af529b968547a6130aaafa33d0f4ffc,helterskelterr/ofbizApp,,Collection size can not be negative.,"Fix: Ensure getEntityNamesByGroup returns empty collection for null or empty group cache In the method getEntityNamesByGroup in the ModelGroupReader.java file, the condition checking the size of the group cache has been modified. Previously, the method would return an empty collection if the group cache was null or if its size was less than 0. This has been corrected to return an empty collection if the group cache is null or if its size is 0. This ensures that the method correctly returns an empty collection when the group cache is null or empty."
https://github.com/helterskelterr/ofbizApp/commit/5fd95a9590a6fa7dc530bd85c37aa0bbed1f76db,5fd95a9590a6fa7dc530bd85c37aa0bbed1f76db,helterskelterr/ofbizApp,,Do not save the view if the last view is the same as the current view and saveCurrentView is false,"Style: Remove commented out print statements in CategoryContentWrapper This commit removes some commented out print statements in the CategoryContentWrapper class. These comments were not contributing to the functionality of the code and were removed to improve the readability of the code. The functionality of the CategoryContentWrapper class, which retrieves and displays content for a specific product category, remains unchanged."
https://github.com/helterskelterr/ofbizApp/commit/86b15e131cc28624d258b1415652c8b088e22d85,86b15e131cc28624d258b1415652c8b088e22d85,helterskelterr/ofbizApp,,Fixed problem preventing the correct number of records being determined when setting maxRows for the product search query,"Refactor: Change condition order in while loop of makeProductIdList method The condition order in the while loop of the makeProductIdList method in the ProductSearch class has been changed. This is a refactor and does not affect the overall functionality of the method or the class. The method is used to create a list of unique product IDs from the given EntityListIterator, handling pagination and avoiding duplicates. The class provides utilities for product search based on various constraints like categories, features, and keywords."
https://github.com/helterskelterr/ofbizApp/commit/015bfa6df25abf19fe8eb36a205d7ca8dfbc27ab,015bfa6df25abf19fe8eb36a205d7ca8dfbc27ab,helterskelterr/ofbizApp,,Don't force the session to be created in getProductStoreId.,"Fix: Handle potential null session in getProductStoreId method The getProductStoreId method in the ProductStoreWorker.java file has been updated to handle a potential null session. Previously, the method would create a new session if one did not already exist. This has been changed so that a new session is not created. Additionally, a null check has been added for the session before attempting to get the productStoreId attribute. This change ensures that a NullPointerException is not thrown if the session is null."
https://github.com/helterskelterr/ofbizApp/commit/0d0a229fdb24765078940b5f062bebcc82ef808d,0d0a229fdb24765078940b5f062bebcc82ef808d,helterskelterr/ofbizApp,,"For internal classes, you don't need to prefix with the containing class.","Refactor: Remove class name prefix in method calls and variable declarations This commit refactors the 'initialize' method in the JNDIConfigUtil class. The class name prefix in the method calls and variable declarations has been removed to improve code readability. Additionally, a new method 'getJndiServerInfo' has been added which retrieves the JNDI server information for the given name."
https://github.com/helterskelterr/ofbizApp/commit/42acc7a8a3f7f2b41927a2d6aa16e6ce36368477,42acc7a8a3f7f2b41927a2d6aa16e6ce36368477,helterskelterr/ofbizApp,,Minor code simplification: no functional changes.,"Refactor: Corrected logic in isSortField method The logic in the isSortField method of the ModelFormField class has been corrected. Previously, the method returned true if the sort field was not null, regardless of its boolean value. Now, it returns true only if the sort field is not null and its boolean value is true. This change ensures the correct behavior of the method."
https://github.com/helterskelterr/ofbizApp/commit/1659ab436259e12fe07292f55f1831520c10164f,1659ab436259e12fe07292f55f1831520c10164f,helterskelterr/ofbizApp,,ConfigurationException is now a RuntimeException.,"Refactor: Change ConfigurationException to extend RuntimeException In the class ObjectWrapper, the ConfigurationException class has been refactored to extend RuntimeException instead of ObjectException. This change is part of an effort to improve the handling of exceptions in the ObjectWrapper class, which provides a method to retrieve an object and handle exceptions related to it."
https://github.com/helterskelterr/ofbizApp/commit/380246944bc1fc1ef1cc39cf95810e3dc10c2243,380246944bc1fc1ef1cc39cf95810e3dc10c2243,helterskelterr/ofbizApp,,"Slight tweak to getOrCreateUtilCache, to get better code coverage.","Refactor: Simplify getOrCreateUtilCache method in UtilCache.java The getOrCreateUtilCache method in UtilCache.java has been refactored for simplicity. The new implementation directly puts the newCache in the utilCacheTable and returns the cache from the utilCacheTable, instead of checking if an oldCache was null and returning newCache if true, and oldCache if false. This change improves the structure of the code without altering its functionality."
https://github.com/apache/poi/commit/3234ce48d57222043d1fb8aec33d81315a5f30d9,3234ce48d57222043d1fb8aec33d81315a5f30d9,apache/poi,,test for parsing strings,Feat: Add new test method in TestFormulaParser A new test method `testFormulaWithString` has been added to the `TestFormulaParser` class. This method tests the formula parsing functionality with a string input.
https://github.com/apache/poi/commit/3a59e361ff066a5d3d25fbbf05fab8d848f1f6e0,3a59e361ff066a5d3d25fbbf05fab8d848f1f6e0,apache/poi,Y,Empty byte array case for HexDump,"Fix: Handle empty data array in HexDump.dump method In the HexDump.dump method, a condition was added to handle the case when the data array is empty. If the data array is empty, the method now writes ""No Data"" to the output stream and then returns. This change ensures that the method behaves correctly when given an empty data array. A test case was also added in TestHexDump.testDump to verify this new behavior. The test case checks that ""No Data"" is written to the output stream when an empty data array is passed to the HexDump.dump method."
https://github.com/apache/poi/commit/98b8864c401f8d3d605ea06ae7294ce226a19471,98b8864c401f8d3d605ea06ae7294ce226a19471,apache/poi,,Throw an exception if a picture claims to have a negative amount of data. Should avoid problem in bug #41357,"Fix: Handle negative image size in readPictures method This commit modifies the `readPictures()` method in `HSLFSlideShow.java` to handle a potential error situation where the image size is less than 0. A new exception `CorruptPowerPointFileException` is thrown when this condition is met, ensuring the integrity of the picture data."
https://github.com/apache/poi/commit/a817230732d857295ab7a1067aa8857af9e3502a,a817230732d857295ab7a1067aa8857af9e3502a,apache/poi,,Improve javadocs relating to getLastRowNumber,"Refactor: Improve clarity in HSSFSheet class comments and method descriptions This commit refactors the HSSFSheet class in the Apache POI project. The changes are mainly in the comments and method descriptions, which are intended to improve the clarity of the code. The HSSFSheet class represents a worksheet in an Excel file, and the changes allow for better understanding and manipulation of rows, cells, and sheet properties. No associated issues or pull requests were found for this commit."
https://github.com/apache/poi/commit/e07b60d81466c0d07ef2bfd694b222806ea18880,e07b60d81466c0d07ef2bfd694b222806ea18880,apache/poi,,add test case for lost cell properties,Feat: Add test method for inner table properties in TestWordToFoConverter A new test method `testInnerTable()` has been added to the `TestWordToFoConverter.java` file. This method tests if the inner table in the document has the correct padding and width properties.
https://github.com/apache/poi/commit/0c2415165f0da8e68e44979f580dfcbf5e886053,0c2415165f0da8e68e44979f580dfcbf5e886053,apache/poi,,Fix test to make it work on different date as well,"Fix: Corrected date handling in testBug56688_4() In the method `testBug56688_4()`, the code for setting a date two months from now, converting that date to Excel format, and checking the value was uncommented. This change allows the method to test the bug 56688_4 more accurately by considering the date handling."
https://github.com/apache/poi/commit/abae7473fccd54152563a9512d88c5b05de024f1,abae7473fccd54152563a9512d88c5b05de024f1,apache/poi,,extract string constant out of code,"Refactor: Extract constant string in HeadersFooters class This commit introduces a refactoring change in the HeadersFooters class. A constant string ""_ppt2007tag"" has been extracted and used in the class. This change does not affect the functionality of the class, which manages the visibility, formatting, and content of headers and footers in a PowerPoint slide."
https://github.com/apache/poi/commit/7ca959ac56dcf04e03d21443aa71bcb46dde0a42,7ca959ac56dcf04e03d21443aa71bcb46dde0a42,apache/poi,,simplify unit test code with IOUtils.write to a NullOutputStream,"Refactor: Simplify workbook writing in test53611 This commit simplifies the way the workbook is written out in the test method `test53611()`. The previous implementation used a `ByteArrayOutputStream` to write the workbook, which was then closed in a finally block. This has been replaced with a single line using `IOUtils.write()`, which automatically handles the closing of the stream. This change improves the readability and maintainability of the code without altering the functionality of the test."
https://github.com/apache/poi/commit/ad14771ed871c21038779ee4829e6520f24207bf,ad14771ed871c21038779ee4829e6520f24207bf,apache/poi,,add null guard in XSSFComment,Fix: Add null check in getClientAnchor() and format isVisible() This commit includes a minor formatting change in the isVisible() method and adds a null check for _vmlShape in the getClientAnchor() method in the XSSFComment.java file. The null check prevents potential NullPointerExceptions when trying to get the client anchor of a shape that does not have a VML shape associated with it.
https://github.com/apache/poi/commit/19005a4e63b6855c6cb889ba546781cb43fc22f5,19005a4e63b6855c6cb889ba546781cb43fc22f5,apache/poi,,Fix forbidden apis error,"Fix: Use LocaleUtil for obtaining year in DateUtil In the DateUtil class, the method for obtaining the current year has been updated. Previously, the year was obtained directly from the Calendar instance. This commit changes this to use the LocaleUtil.getLocaleCalendar() method instead. This change does not alter the overall functionality of the DateUtil class, which is responsible for handling and converting dates in Excel format in Java."
https://github.com/apache/poi/commit/d9776561954a112f257477c41911f802ba15b0bc,d9776561954a112f257477c41911f802ba15b0bc,apache/poi,,Remove invalid code,"Fix: Remove redundant line in setExternalId method This commit removes a redundant line of code in the setExternalId method of the XDDFChart class. The removed line was attempting to add new external data and set its id, which is unnecessary and could potentially cause errors. This fix ensures that the setExternalId method functions as expected."
https://github.com/apache/poi/commit/4682903e6ace561155a667e240b4736f89ab4805,4682903e6ace561155a667e240b4736f89ab4805,apache/poi,,more test issues with rate change,"Refactor: Adjust tolerance calculation in processFunctionRow method In the `processFunctionRow` method of the `TestFormulaEvaluatorOnXSSF.java` file, the tolerance calculation for the ""RATE"" function has been adjusted. The new calculation provides a specific tolerance for the ""RATE"" function, improving the precision of the test results. This change does not affect the overall behavior of the method."
https://github.com/apache/qpid/commit/a8ad56f53b6d476d1de0c084031bc61da27a519c,a8ad56f53b6d476d1de0c084031bc61da27a519c,apache/qpid,,generateQueueName now removes colons as well as semi-colons,"Fix: Update character replacement in generateQueueName method In the `generateQueueName()` method of the `AMQProtocolSession` class, the character replacement has been updated. Now, along with ""/"" and "";"", the "":"" character is also being replaced in the local address. This change ensures the generation of a unique name for a temporary queue by appending an incrementing id to the local address of the protocol session, which is now free of these special characters."
https://github.com/apache/qpid/commit/aa97383bc73a09213063dade4080f7b4c1cf84b8,aa97383bc73a09213063dade4080f7b4c1cf84b8,apache/qpid,,Fix for null virtual host (which got converted to the invalid string 'null').,"Fix: Add null check for virtual host name in ConnectionOpenMethodHandler This commit adds a null check for the 'virtualHost' field in the 'ConnectionOpenBody' object in the 'methodReceived' method of the 'ConnectionOpenMethodHandler' class. This change ensures that the method can handle null values for the virtual host name, preventing potential null pointer exceptions. The functionality of the method, which handles the receipt of a ConnectionOpen method from the client, sets the virtual host for the session, and sends a ConnectionOpenOk response back, remains unchanged."
https://github.com/apache/qpid/commit/20a61421b9f4821253fef6c25fbea2acae9da1ed,20a61421b9f4821253fef6c25fbea2acae9da1ed,apache/qpid,,Updated the references to the new SSL package.,Refactor: Update import statements for SSLReceiver and SSLSender The import statements for SSLReceiver and SSLSender in IoTransport.java have been updated to reflect the new package names. This is a refactor commit with no associated issues or pull requests.
https://github.com/apache/storm/commit/8336885d725e5dac598e86f174baa61aa731d1ed,8336885d725e5dac598e86f174baa61aa731d1ed,apache/storm,,check that nimbus host is set,"Fix: Add null check for host in NimbusClient constructor This commit adds a null check for the host parameter in the constructor of the NimbusClient class. If the host is null, an IllegalArgumentException is thrown with the message ""Nimbus host is not set"". This fix prevents the creation of a NimbusClient with a null host, ensuring that a valid host is always provided when establishing a connection to a Nimbus server."
https://github.com/apache/storm/commit/9d267e8da0b9ab81aecc39903517beeaaaf2ea53,9d267e8da0b9ab81aecc39903517beeaaaf2ea53,apache/storm,,tuple() -> new Values(),"Refactor: Refactored tuple emission in TwitterSampleSpout In the `nextTuple()` method of `TwitterSampleSpout.java`, the way tuples are emitted has been refactored for improved code structure. The method still retrieves and emits the next tuple from the queue, or sleeps for 50 milliseconds if the queue is empty. However, the tuple emission is now done using `new Values(ret)` instead of `tuple(ret)`. This change does not affect the functionality of the method."
https://github.com/apache/storm/commit/0449d31afae47c00ece64dd11aff8f7a261df5a6,0449d31afae47c00ece64dd11aff8f7a261df5a6,apache/storm,,Allow Debug filters to print an identifier,Feat: Add name to debug print statement This commit adds a new feature to the Debug.java file in the storm.trident.operation.builtin package. A new variable 'name' was added and two constructors were added to initialize this variable. The 'isKeep' method was also modified to include this 'name' variable in the print statement. This allows for more specific debugging with a name.
https://github.com/apache/storm/commit/76353a80ff8d0121cdd5ef53e518f07f0be95a0a,76353a80ff8d0121cdd5ef53e518f07f0be95a0a,apache/storm,,reportError when receiving an error-level message in ShellBolt.,"Fix: Add error reporting in ShellBolt's handleLog method In the ShellBolt class, the handleLog method has been modified to report an error when the log level is ERROR. This change involves the addition of a new method call to _collector.reportError. This fix ensures that errors are properly reported and handled."
https://github.com/apache/storm/commit/2059f23d8a30df9089f6a928b4a2bf51d608099f,2059f23d8a30df9089f6a928b4a2bf51d608099f,apache/storm,,"Made keyFactory public in RedisClusterMapState.Options To match the same change to RedisMapState.Options, for the same reasons. It can be set from the public API in other ways.  Having it public means we can set it along with other values like hkey.","Refactor: Change visibility of keyFactory in Options class The visibility of the `keyFactory` variable in the `Options` class of the `RedisClusterMapState.java` file has been changed from default to public. This is a refactor that does not alter the functionality of the `RedisClusterMapState` class, which manages state in a Redis cluster for different types of transactions."
https://github.com/apache/synapse/commit/6d4fcde16652de39b2f41498e076ed6c9634d66f,6d4fcde16652de39b2f41498e076ed6c9634d66f,apache/synapse,,print errors/exceptions until we enhance error handling to capture and handle non-blocking IO errors,"Fix: Add logging and exception printing to onError method In the AsyncCallback.java file, the onError method has been updated to log and print the stack trace of an exception. Previously, this method was not expected to be called due to the custom SynapseCallbackReceiver handling faults. Now, in the event that it is called, it will provide more detailed information about the error."
https://github.com/apache/synapse/commit/47671ae1b1101633347421477fe45d3e8e6e169e,47671ae1b1101633347421477fe45d3e8e6e169e,apache/synapse,,catch any Exception that may arise while trying to read from a URL,"Fix: Broaden exception handling in getOMElementFromURL method In the `getOMElementFromURL` method in the `Util.java` file, the exception handling has been broadened to catch all exceptions, not just `XMLStreamException`. The handling of these exceptions has also been changed to use the `handleException` method. This method retrieves an `OMElement` object from a given URL by parsing the XML content from the URL."
https://github.com/apache/synapse/commit/20546674ef9dfe96c8cc689d28e8a78b182edd45,20546674ef9dfe96c8cc689d28e8a78b182edd45,apache/synapse,,jms sender - added a simple null check,"Fix: Add null check for session in sendMessage method In the `sendMessage` method of the `JMSSender.java` file, a null check for the session has been added. If the session is null, an exception is thrown. This is a fix to prevent potential issues when the session is null."
https://github.com/apache/synapse/commit/f02e9889647bfac24d9020d6f9ea8dd982da3fc9,f02e9889647bfac24d9020d6f9ea8dd982da3fc9,apache/synapse,,Mail transport tests: avoid NPE in MailRequestResponseClient if no response is received,"Fix: Add assertion to ensure response in sendMessage method In the sendMessage method of the MailRequestResponseClient.java file, an assertion was added to ensure that a response is received after sending a message. This fix ensures that the method will not proceed without receiving a response, improving the reliability of the message sending process."
https://github.com/apache/synapse/commit/098a576d2171de1001ddc9725811c438fc7ac7b8,098a576d2171de1001ddc9725811c438fc7ac7b8,apache/synapse,Y,remove sun JDK sepecific class dependency,"Refactor: Modify methods in SynapseConfigUtils and XQueryMediatorFactory In this commit, we have made changes to two files: SynapseConfigUtils.java and XQueryMediatorFactory.java. In SynapseConfigUtils.java, we have modified the method getHttpsURLConnection. Now, it creates a HttpsURLConnection from a given URL, loads the Synapse properties, and creates the identity and trust key store information.In XQueryMediatorFactory.java, we have modified the method createMediator. Now, it creates an XQuery mediator with the given XML configuration.These changes are part of a refactor and there are no associated issues or pull requests."
https://github.com/apache/tomcat/commit/ddad1fad1b18d093ee7abed31d58d33e7aa3d1ed,ddad1fad1b18d093ee7abed31d58d33e7aa3d1ed,apache/tomcat,,Also check the support attribute.,"Fix: Add condition to start Comet process in CoyoteAdapter This commit adds a condition to the service method in the CoyoteAdapter class to start a Comet process. The new condition checks if the attribute ""org.apache.tomcat.comet.support"" of the request is true. This is a bug fix to ensure that the Comet process is started only when the attribute ""org.apache.tomcat.comet.support"" is true."
https://github.com/apache/tomcat/commit/de685def46dffd66bf918fca39e08b5a690ae350,de685def46dffd66bf918fca39e08b5a690ae350,apache/tomcat,,remove not used fields,"Refactor: Simplify ClusterJmxHelper class This commit simplifies the ClusterJmxHelper class by removing some code related to the registration of clusters. The changes do not affect the behavior of the class, but improve the structure of the code."
https://github.com/apache/tomcat/commit/097e43b2f6019eaafc062badb81fd11c76c9f5b6,097e43b2f6019eaafc062badb81fd11c76c9f5b6,apache/tomcat,,Fix generics and use of deprecated field,"Refactor: Update iteration and directory scanner retrieval in Txt2Html.java In the execute() method of Txt2Html.java, the way of iterating over filesets and getting the directory scanner for each fileset has been updated. The raw type Iterator has been replaced with a parameterized type Iterator<FileSet> to improve type safety. The project is now retrieved by calling the getProject() method instead of directly accessing the project variable. This change does not affect the functionality of the method, which is to convert files in the specified filesets to HTML format."
https://github.com/apache/tomcat/commit/4db6694a04c3da31ed33a146603f94b46665197b,4db6694a04c3da31ed33a146603f94b46665197b,apache/tomcat,,implement a toString for the CometEventImpl,"Feat: Add toString method to CometEventImpl class This commit adds a new method `toString()` to the `CometEventImpl.java` file. The method returns a string representation of the event object, including its type and subtype. This feature enhances the readability and debuggability of the event object by providing a clear and comprehensive string representation."
https://github.com/apache/tomcat/commit/55813d250b8c3f82bfd6401dc698ab669e42fd2d,55813d250b8c3f82bfd6401dc698ab669e42fd2d,apache/tomcat,,Already support httpOnly - update comments,Style: Update comments in Cookie.java The comments in the Cookie.java file have been updated for clarity. The changes do not affect the functionality of the class.
https://github.com/apache/tomcat/commit/1a3d4f84ba0b8a7bd4c33c87698d7b4928ab0da9,1a3d4f84ba0b8a7bd4c33c87698d7b4928ab0da9,apache/tomcat,,Minor correction to the JavaDoc for AttributeParser class,Style: Update comment in AttributeParser.java The comment in AttributeParser.java has been updated to reflect the correct special treatment of certain characters in JSP attribute unquoting. The changes are purely stylistic and do not affect the functionality of the code.
https://github.com/apache/tomcat/commit/40d4721b1f972e7b443bbce7b8b56176fed3260f,40d4721b1f972e7b443bbce7b8b56176fed3260f,apache/tomcat,,Prevent looping by correctly setting the socket wrapper async state,"Fix: Ensure socket is set to non-asynchronous in error conditions In the `asyncDispatch(SocketStatus status)` method of the `Http11Processor.java` file, the socket is now set to non-asynchronous when an error occurs or when the connection is not kept alive. This change ensures that the socket state is correctly managed in these conditions."
https://github.com/apache/tomcat/commit/77ccbf46068c863aedd20fe952185b8e67d30392,77ccbf46068c863aedd20fe952185b8e67d30392,apache/tomcat,,Typo in a comment,"Style: Correct spelling in comments In the file `TestContextConfigAnnotation.java`, corrected a spelling mistake in the comments. The word 'ingore' was changed to 'ignore'. This change does not affect the functionality of the code."
https://github.com/apache/tomcat/commit/aaaacec287f971b34657b48e43295a4f9a928c1d,aaaacec287f971b34657b48e43295a4f9a928c1d,apache/tomcat,Y,Fix import order,Refactor: Reorder import statements in AjpAprProtocol.java and AjpProtocol.java The import statements in AjpAprProtocol.java and AjpProtocol.java have been reordered for better code structure. This refactor does not affect the functionality of the code.
https://github.com/apache/tomcat/commit/8519139d27c24df5ad920bb12803abed19dc9ae2,8519139d27c24df5ad920bb12803abed19dc9ae2,apache/tomcat,Y,Remove unused code,"Refactor: Remove unused server socket timeout constant The server socket timeout constant, DEFAULT_SERVER_SOCKET_TIMEOUT, was removed from the Constants.java file. This constant was also removed from the AjpProtocol.java and AjpAprProtocol.java files where it was previously set but not used. This refactor does not affect the functionality of the classes and improves the clarity of the code."
https://github.com/apache/tomcat/commit/0d9d35ef8632cb18c13c8e89ed65f79245a6e31a,0d9d35ef8632cb18c13c8e89ed65f79245a6e31a,apache/tomcat,,Fix FindBugs and Eclipse warnings,"Refactor: Improve JMXProxyServlet code quality This commit refactors the JMXProxyServlet.java file. The listBeans method has been modified to handle Throwable instead of Exception, providing a more comprehensive error handling. A new method, isSupported, has been added which always returns true, indicating that all types are supported. These changes improve the code quality without altering the functionality of the JMXProxyServlet class."
https://github.com/apache/tomcat/commit/275ea1c12b31dcc9e7a9c52a6ab55cf85ff48a27,275ea1c12b31dcc9e7a9c52a6ab55cf85ff48a27,apache/tomcat,,Implement debug logging in InternalNioInputBuffer. Log what we got with the first read.,"Feat: Add logging capability to InternalNioInputBuffer class In the `parseRequestLine` method, a debug log statement has been added to log the received request. This will help in debugging and understanding the flow of requests in the system."
https://github.com/apache/tomcat/commit/ae008e80741e10bc005af7ab161bce792538a1f5,ae008e80741e10bc005af7ab161bce792538a1f5,apache/tomcat,,async more likely than comet,Refactor: Change condition order in process method The order of the conditions in the if statement in the process method of the AbstractHttp11Processor class has been changed. This is a refactor and does not affect the functionality of the method. The method still processes a socket connection and handles the request/response lifecycle.
https://github.com/apache/tomcat/commit/add52847f681e23f4cc6489946828f6af7304f8d,add52847f681e23f4cc6489946828f6af7304f8d,apache/tomcat,,Removed parameter from get(),"Refactor: Remove parameter from getLocalLoopbackDisabled method The getLocalLoopbackDisabled method in McastService.java no longer takes a parameter. The method now checks if the local loopback is disabled by retrieving the property value from the properties file. If the property is not set, it defaults to false. This change is a refactor, which means the code has been restructured without changing its external behavior."
https://github.com/apache/tomcat/commit/f4878ef9e4360cc3e1f0b94cc2e6d110b8defb78,f4878ef9e4360cc3e1f0b94cc2e6d110b8defb78,apache/tomcat,,Fix potential NPE,"Fix: Add null check before shutting down startStopExecutor In the `destroyInternal` method of the `ContainerBase` class, a null check is added before shutting down the `startStopExecutor`. This is to prevent a potential null pointer exception if the `startStopExecutor` is not initialized."
https://github.com/apache/tomcat/commit/de55e922010568aa727ac2e1f4171f0ef574046b,de55e922010568aa727ac2e1f4171f0ef574046b,apache/tomcat,,Correct typo that broke nearly all the tests,"Fix: Use Catalina home directory if base directory is not set This commit modifies the `initBaseDir` method in the `Tomcat.java` file. The condition `if (catalinaHome == null)` has been changed to `if (catalinaHome != null)`. This change ensures that the Catalina home directory is used if the base directory is not set, likely fixing a bug where the base directory was not being set correctly."
https://github.com/apache/tomcat/commit/136ad629273cb90b8d48ed6ab2115f95ace1f11b,136ad629273cb90b8d48ed6ab2115f95ace1f11b,apache/tomcat,,Minor performance tweak,"Refactor: Optimize getClassLoader() calls in StandardHostValve This commit optimizes the number of getClassLoader() calls in the invoke method of the StandardHostValve class. A new static final variable MY_CLASSLOADER is added to replace the previous getClassLoader() calls, which reduces the number of these calls under high load. This change does not alter the functionality of the invoke method."
https://github.com/apache/tomcat/commit/1824845878e59054c95339c2f8fe92e57c796729,1824845878e59054c95339c2f8fe92e57c796729,apache/tomcat,,Fix broken Javadoc,"Style: Add parameter name in method comment In the SSL class, which is responsible for managing SSL/TLS security protocols and certificate handling, a parameter name 'op' was added in the comment of a method. This change does not affect the functionality of the class."
https://github.com/apache/tomcat/commit/0dd98c1a6b04a3bfcb63b373ba905605f6aee83e,0dd98c1a6b04a3bfcb63b373ba905605f6aee83e,apache/tomcat,,Remove one deprecated and one unused method,"Refactor: Remove deprecated methods in B2CConverter class The deprecated methods 'isUndeflow' and 'convert(ByteChunk bc, CharChunk cc)' were removed from the B2CConverter class. This class is responsible for converting byte data to character data. The removal of these methods does not affect the overall functionality of the class."
https://github.com/apache/tomcat/commit/d5205523b8592dce9a54181546e100b804c65e26,d5205523b8592dce9a54181546e100b804c65e26,apache/tomcat,,Keep auth headers out of the StringCache,"Refactor: Change method call in BasicAuthenticator.java In the `authenticate(Request request, HttpServletResponse response)` method, the `toString()` method call has been replaced with `toStringInternal()`. This change does not affect the functionality of the method, which is to authenticate a user based on the request and response. The change is in the implementation details."
https://github.com/apache/tomcat/commit/6f31a1e42aa6ee3574874d4a32327c6572397068,6f31a1e42aa6ee3574874d4a32327c6572397068,apache/tomcat,,remove invalid comment.,style: Remove comment in FarmWarDeployer.java A comment was removed from the 'started' variable declaration in the FarmWarDeployer.java file. This change does not affect the functionality of the code.
https://github.com/apache/tomcat/commit/f136cb430084778482bb7e34577373e41d2030aa,f136cb430084778482bb7e34577373e41d2030aa,apache/tomcat,,Silence some Eclipse warnings,"feat: Add SuppressWarnings annotations to TesterClass This commit adds SuppressWarnings annotations to some fields and a constructor in the TesterClass.java file. The annotations are added to the private static string and private string fields, as well as to a private constructor. These changes are made to suppress warnings about these fields and constructor being unused, as they are actually used in TestStaticFieldELResolver."
https://github.com/apache/tomcat/commit/45f1fb3021b0ad2df4c800afa2e31ca171d63256,45f1fb3021b0ad2df4c800afa2e31ca171d63256,apache/tomcat,,Remove unused class. The name of Context configuration class is acquired from the Host.,"Refactor: Remove unused `configClass` variable in `HostConfig` The `configClass` variable and its getter and setter methods were removed from the `HostConfig` class. This class configures properties of a host and its associated contexts, and manages their lifecycle events. The removal of the `configClass` variable and its methods does not affect the functionality of the `HostConfig` class."
https://github.com/apache/tomcat/commit/e023baf3790eeac22ad53867e5d95e038342c9f4,e023baf3790eeac22ad53867e5d95e038342c9f4,apache/tomcat,,Observed a hard to reproduce test failure with the non-blocking IO tests. Can't reproduce it yet. Working assumption is that Poller and application thread have a different view of the async field on the SocketWrapper so make all the flags the Poller uses volatile.,"Refactor: Enhance thread safety in SocketWrapper class In the SocketWrapper class, three boolean variables (`comet`, `async`, and `upgraded`) have been changed from non-volatile to volatile. This change is aimed at enhancing the thread safety of the class, which is responsible for managing socket access, state, and properties."
https://github.com/apache/tomcat/commit/e0c00a8a55555ea1902b725ff37bcbfd0608b964,e0c00a8a55555ea1902b725ff37bcbfd0608b964,apache/tomcat,,Correct typo in message printed by validateAccessLog() when a testcase runs too long.,"Fix: Adjust duration check in validateAccessLog method In the validateAccessLog method of the TesterAccessLogValve class, the condition for the duration to be less than maxTime has been adjusted. Previously, the ERROR_MARGIN was subtracted from maxTime, but now it is added. This change does not affect the overall functionality of the method, which continues to validate the access log entries by checking the count, status, and duration of each entry."
https://github.com/apache/tomcat/commit/7605a452f697d0c1fed16e8f5c475015c74d5601,7605a452f697d0c1fed16e8f5c475015c74d5601,apache/tomcat,,Remove unnecessary method,"Refactor: Remove redundant setContentLength method in Response class The setContentLength(int contentLength) method was removed from the Response class. This change is a refactor and does not affect the overall functionality of the class, which handles HTTP responses, including status, headers, content, and error handling."
https://github.com/apache/tomcat/commit/0b41baf7500b79cfbdfb719bd084fd89bb8b253d,0b41baf7500b79cfbdfb719bd084fd89bb8b253d,apache/tomcat,Y,Add some info and disable the async test (one CVE saved hehe).,"Style: Add comments to EchoAnnotation, EchoAsyncAnnotation, and EchoStreamAnnotation classes This commit adds comments to the EchoAnnotation, EchoAsyncAnnotation, and EchoStreamAnnotation classes in the webapps/examples/WEB-INF/classes/websocket/echo directory. The comments provide information about the purpose of these classes and how to use them. In EchoAsyncAnnotation.java, the @ServerEndpoint annotation was also commented out."
https://github.com/apache/tomcat/commit/e6859225d43d86d7d7dba609b8401157f4bc6f15,e6859225d43d86d7d7dba609b8401157f4bc6f15,apache/tomcat,Y,Remove unnecessary cast,"Refactor: Simplify setUseSendfile method call in AJP protocol handlers This commit simplifies the method call to setUseSendfile in the AJP protocol handlers AjpAprProtocol, AjpNio2Protocol, and AjpNioProtocol by removing the explicit type casting. This is a refactoring change that improves the structure of the code without altering its functionality."
https://github.com/apache/tomcat/commit/5408cdef7bf9e22d47e2305cde278151b32813f3,5408cdef7bf9e22d47e2305cde278151b32813f3,apache/tomcat,,"When generating a list of package and class imports, the processing of classes was omitted.","Fix: Update condition in genPreambleStaticInitializers method The condition in the genPreambleStaticInitializers method of the Generator class has been updated. Previously, the condition checked if the size of the 'packages' set was zero. Now, it checks if the size of the 'classes' set is zero. This change ensures that the '_jspx_imports_classes' variable is correctly initialized. The Generator class is responsible for generating Java source code from Nodes for servlets and tag handlers. This change is crucial for the correct generation of the preamble of the static initializers for the JSP factory, dependencies, and imports."
https://github.com/apache/tomcat/commit/b8f901a11afe72d1e6b4f3fc8a33b97c92a41690,b8f901a11afe72d1e6b4f3fc8a33b97c92a41690,apache/tomcat,,Fix an infinite loop.,"Fix: Prevent blocking in writeNonBlocking method In the `writeNonBlocking` method of the `SocketWrapperBase.java` file, changes were made to prevent the method from blocking when the write buffer is full. Previously, if the write buffer was not writable, the data was added to the buffer and the method would block. Now, if the write buffer is full, the remaining data is buffered internally, preventing a blocking condition."
https://github.com/apache/tomcat/commit/5e6b3a21134e0d21e77396723250ade9ed9e37e8,5e6b3a21134e0d21e77396723250ade9ed9e37e8,apache/tomcat,,Exclude cipher suites that use RSA key exchange. The remaining ciphers (with Java 8 at least) all then support forward secrecy.,"Fix: Update default ciphers in AbstractEndpoint The default ciphers used in the AbstractEndpoint class, which manages server socket connections, have been updated. The previous cipher string ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5"" has been replaced with ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA"". This change is part of a fix to improve the security of the server socket connections managed by the AbstractEndpoint class."
https://github.com/apache/tomcat/commit/f122c5fa68414fe32f6d17abac954130f5864d60,f122c5fa68414fe32f6d17abac954130f5864d60,apache/tomcat,,"Use the right variable for null check; the method variable, that is.","Fix: Correct condition in setHostnameVerifierClassName method The condition checked before setting the hostNameVerifierClassName in the JNDIRealm class was corrected. Previously, the condition checked if the class variable hostNameVerifierClassName was not null. Now, it checks if the parameter verifierClassName is not null. This change ensures that the hostNameVerifierClassName is set correctly"
https://github.com/apache/tomcat/commit/50ba973a15874c2597b26f45fd7edc7d92dfd985,50ba973a15874c2597b26f45fd7edc7d92dfd985,apache/tomcat,,"In SlowQueryReportJmx, the LogSlow and logFailed attributes that inherited from SlowQueryReport are used as a condition of whether JMX notifications are sent.",Fix: Add logging condition before JMX notification in SlowQueryReportJmx This commit adds a condition to check if logging of slow or failed queries is enabled before notifying JMX in the `reportSlowQuery` and `reportFailedQuery` methods of the `SlowQueryReportJmx.java` file. This prevents unnecessary JMX notifications when logging is not enabled.
https://github.com/apache/tomcat/commit/02018b6a8c031145e1917e29ef1b62d0c06996f4,02018b6a8c031145e1917e29ef1b62d0c06996f4,apache/tomcat,,"Expand the test to ensure that once the flow control window goes negative, nothing is written until it becomes positive again.",Feat: Enhance testWindowSizeAndSettingsFrame() in TestHttp2Section_6_9.java This commit enhances the `testWindowSizeAndSettingsFrame()` method in the `TestHttp2Section_6_9.java` file to test the behavior of the HTTP/2 flow control mechanism. It checks if the window size is correctly updated and if the flow control window can handle changes in size. This enhancement provides more comprehensive testing of the HTTP/2 flow control mechanism.
https://github.com/apache/tomcat/commit/6bd6795f7596d2d711d1bf40fdb932d0b7ee26e4,6bd6795f7596d2d711d1bf40fdb932d0b7ee26e4,apache/tomcat,,A flush seems to be missing when writing a window update [for consistency at least].,Style: Correct indentation and add flush operation Corrected the indentation in the writeBody method and added a flush operation in the writeWindowUpdate method in the Http2UpgradeHandler class. The functionality of the methods remains unchanged.
https://github.com/apache/tomcat/commit/878dda058cd45b3d4c48d165daa351fb4bed698a,878dda058cd45b3d4c48d165daa351fb4bed698a,apache/tomcat,,Use methods updateLastRead/updateLastWrite instead of direct update of lastRead/lastWrite.,"Refactor: Replace direct calls to System.currentTimeMillis() in NioEndpoint.java In the methods doWrite and read in the NioEndpoint.java file, replaced direct calls to System.currentTimeMillis() with calls to the methods updateLastRead() and updateLastWrite(). This change does not affect the functionality of the methods, but rather how they handle time tracking."
https://github.com/apache/tomcat/commit/8ee194059d40bd3c51ff6893384ab7a00d15899a,8ee194059d40bd3c51ff6893384ab7a00d15899a,apache/tomcat,,Update test to check for new URL form,"Fix: Update expected URLs in TestWebappClassLoader This commit updates the expected URLs in the `testGetURLs()` method of the `TestWebappClassLoader` class. The URLs, which were previously expected to start with ""jar:"", are now expected to start with ""war:"". This change ensures that the test accurately reflects the URLs returned by the URLClassLoader when a WAR file is loaded into a Tomcat server."
https://github.com/apache/tomcat/commit/e2093b565580bcb6849b990db2838d21e0090b3a,e2093b565580bcb6849b990db2838d21e0090b3a,apache/tomcat,,Make it possible to extend the BasicDataSource object factory without having to copy everything.,Refactor: Update createDataSource and add configureDataSource in BasicDataSourceFactory This commit updates the `createDataSource` method in the `BasicDataSourceFactory` class to create and configure a `BasicDataSource` object using the provided properties. A new method `configureDataSource` has been added to configure a `BasicDataSource` object with properties from a `Properties` object. These changes improve the modularity and readability of the code.
https://github.com/apache/tomcat/commit/4f7a7e85eac3b6aef7d2148bf61e6c0dba173248,4f7a7e85eac3b6aef7d2148bf61e6c0dba173248,apache/tomcat,,Fix javadoc. remove old description.,Refactor: Update documentation in JvmRouteBinderValve.java This commit updates the documentation in the JvmRouteBinderValve.java file. The instructions on how to add this Valve to the configuration have been updated. The changes do not affect the functionality of the code.
https://github.com/apache/tomcat/commit/778890c392dda8cd845db6871ca3ab9ead8b38bc,778890c392dda8cd845db6871ca3ab9ead8b38bc,apache/tomcat,,Inlined strings that are used only once,Refactor: Remove redundant constants in JrePlatform.java This commit removes the constants OS_NAME_WINDOWS_PREFIX and OS_NAME_MAC_OS_LC_PREFIX in JrePlatform.java and uses their values directly in the code. This simplifies the code and improves readability.
https://github.com/apache/tomcat/commit/32520eb992d0bdf2fccbc5702f957fd66a267f33,32520eb992d0bdf2fccbc5702f957fd66a267f33,apache/tomcat,,Fix single quotes in strings with replacements on import/export rather than trying to do it manually in POEditor.,Feat: Handle single quotes within brackets in Utils.formatValue method This commit modifies the `formatValue` method in the `Utils` class to handle single quotes within brackets in addition to its previous functionality of adding continuation characters and escaping leading spaces. This change does not relate to any issue or pull request.
https://github.com/apache/tomcat/commit/563f85ab1076fdf7329b2c6cbae22d64a859d572,563f85ab1076fdf7329b2c6cbae22d64a859d572,apache/tomcat,,Remove deprecated code,"Refactor: Remove deprecated methods from Connector.java The deprecated methods `getAttribute(String name)` and `setAttribute(String name, Object value)` have been removed from the `Connector.java` file. These methods were previously marked for removal in Tomcat 10. The removal of these methods does not affect the functionality of the class."
https://github.com/apache/tomcat/commit/a4490a2af64308cfdd9cc92663fd390380aee1a2,a4490a2af64308cfdd9cc92663fd390380aee1a2,apache/tomcat,,Cleanup derby.log,"Feat: Add cleanup method and modify test methods in DataSourceUserDatabaseTests This commit introduces a new method, derbyCleanup(), to the DataSourceUserDatabaseTests class. This method is responsible for cleaning up the Derby database after all tests have run.  In addition, minor modifications were made to the testUserDatabase() and testBasicUserRoleDatabase() methods. These changes involve the addition of a new line after the db.close() call in each method.  These changes improve the cleanliness and readability of the test code, and ensure proper cleanup of resources after tests are run."
https://github.com/apache/tomee/commit/f1e8677a6cf85b899ba4727728b10cccdc79b39f,f1e8677a6cf85b899ba4727728b10cccdc79b39f,apache/tomee,,Don't try to config mdb destination if we aren't auto creating resources.,Feat: Add condition to check autoCreateResources in AutoConfig This commit adds a condition to check if autoCreateResources is true before proceeding with the deployment of the EJB module in the AutoConfig class. This change is likely to prevent unnecessary resource creation when it's not needed. The deploy method in the AutoConfig class has been modified to include this condition.
https://github.com/apache/tomee/commit/5704ec0bd450554706b69906e5cf519c59ca9a71,5704ec0bd450554706b69906e5cf519c59ca9a71,apache/tomee,Y,Fix property handling on Windows,"Fix: Standardize line separator in SuperProperties This commit standardizes the line separator in the SuperProperties class to ""\n"". Previously, the line separator was obtained from the system properties, which could vary across different systems. This change ensures consistency across all systems. Additionally, a new method, store(Properties properties), was added to the SuperPropertiesTest class. This method converts the given properties into a string format, which could be related to the change in the line separator."
https://github.com/apache/tomee/commit/5e73258c58c5a142d68ec19bf846a9ede8583c8c,5e73258c58c5a142d68ec19bf846a9ede8583c8c,apache/tomee,,Fix uri creation bug,"Fix: Use getRawSchemeSpecificPart in jarLocation method This commit changes the method `getSchemeSpecificPart()` to `getRawSchemeSpecificPart()` in the `jarLocation(Class clazz)` method in the JarLocation.java file. The functionality of the method remains the same, indicating that this change is likely a bug fix in the implementation details."
https://github.com/apache/tomee/commit/7f910176aa35fd411c6c7c82cca4c15f7bdf0553,7f910176aa35fd411c6c7c82cca4c15f7bdf0553,apache/tomee,,ejbds should be enabled,"Feat: Register new factory ""ejbds"" in ConnectionManager This commit registers a new factory ""ejbds"" with the ejbdFactory in the ConnectionManager class. The ConnectionManager class manages connections, strategies, and factories for different connection types and schemes. This change is part of a feature enhancement."
https://github.com/apache/tomee/commit/cf61a0e74d91b8bd28979cc747f529704b263993,cf61a0e74d91b8bd28979cc747f529704b263993,apache/tomee,,ManagedBean annotation should be available at runtime and be type-only assignable,Feat: Update annotations in ManagedBean.java This commit updates the ManagedBean.java file by adding two new annotations: @Target and @Retention. These annotations specify the applicable targets and the retention policy for the ManagedBean annotation. The version comment has also been updated.
https://github.com/apache/tomee/commit/c23bac9d2e69bb9b660a8b9e1eca3e39598264d5,c23bac9d2e69bb9b660a8b9e1eca3e39598264d5,apache/tomee,,Reverting unintentional change,"Refactor: Simplify URL to File conversion in URLs.java This commit simplifies the method toFile(URL url) in the URLs.java file. The method still converts a URL to a File object, but the implementation has been changed to use the decode method from the JarLocation class. This change simplifies the code and removes the need for a try-catch block."
https://github.com/apache/tomee/commit/919ffa4c42c0d2d37a3da8322a592d91796f2108,919ffa4c42c0d2d37a3da8322a592d91796f2108,apache/tomee,,Added some comments about the transaction-rollback example,Style: Add comment to MoviesTest.java A comment was added to the MoviesTest.java file to provide additional information about the transaction-rollback example. The comment suggests that the transaction-rollback example does the same thing via UserTransaction and shows more techniques for rollback.
https://github.com/apache/tomee/commit/5e52f14fc533ab7f29949f19830bc88a7c12c08f,5e52f14fc533ab7f29949f19830bc88a7c12c08f,apache/tomee,,"Use an ""empty"" context if there is no beans.xml","feat: Set WebBeansContext to noContext for apps without beans In the CdiBuilder class, the build method now sets the WebBeansContext to a new instance of WebBeansContext (noContext) if the application does not have any beans. This change could potentially affect the initialization and building of the CDI context."
https://github.com/apache/tomee/commit/7f64b4e307a62586421545c8448d89e7e6fac10a,7f64b4e307a62586421545c8448d89e7e6fac10a,apache/tomee,,Remove not relevant comment,"Refactor: Remove unnecessary comment in JmsProxyTest.java The comment line ""set up in the parent class"" was removed from the JmsProxyTest.java file. This change does not affect the functionality of the class, which tests the functionality of a JMS proxy using a test object and interface."
https://github.com/apache/tomee/commit/00b9c65f73a6b263b56f304a518e921434e357e8,00b9c65f73a6b263b56f304a518e921434e357e8,apache/tomee,,fixing modulename in readdescriptor for persistence,"Fix: Update condition in deploy method This commit updates the condition in the `deploy` method of the `ReadDescriptors` class. The change modifies the way the method processes the modules of an `AppModule` during deployment. The previous condition checked if the protocol of the `persistenceUrl` is ""file"". The updated condition checks if the `persistenceUrl` does not contain ""!"". This change is classified as a fix, suggesting it was made to correct a problem in the method's functionality."
https://github.com/apache/tomee/commit/3d812b426f7487bf07fadc9199f3903fa3958358,3d812b426f7487bf07fadc9199f3903fa3958358,apache/tomee,,use reflection to avoid direct dependency on hsqldb,"Refactor: Use reflection to set JDBC URL in DataSourceFactory In the DataSourceFactory.java file, the setJdbcUrl method has been refactored to use reflection to set the JDBC URL for the HSQL database. This change allows for a more generic handling of setting the JDBC URL, potentially accommodating other types of databases in the future. No associated issues or pull requests provide additional context for this change."
https://github.com/apache/tomee/commit/37080c6d8db4dd001d637fad907538b2de95bc0e,37080c6d8db4dd001d637fad907538b2de95bc0e,apache/tomee,,why couldn't we use an absolute path in ejbcontainer?,Fix: Update match method in OpenEjbContainer The 'match' method in the OpenEjbContainer.java file has been updated. The method now checks if the given string matches the name or absolute path of the file. This change enhances the matching accuracy and covers more cases.
https://github.com/apache/tomee/commit/542008fa962c21ae22828f66325062992b8bfb1b,542008fa962c21ae22828f66325062992b8bfb1b,apache/tomee,,fixing the default for the activation of the stat interceptor,"Fix: Modify default behavior of isStatsActivated method in StatsInterceptor class The `isStatsActivated()` method in the `StatsInterceptor` class, which checks if the statistics interceptor is activated, has been modified. The default value for the `DISABLE_STAT_INTERCEPTOR_PROPERTY` has been changed from `false` to `true`. This change modifies the default behavior of the `isStatsActivated()` method. The `StatsInterceptor` class is responsible for monitoring and recording statistics about method invocations in a Java application."
https://github.com/apache/tomee/commit/c812a342c8df1c3d9782897404211c4107f197f4,c812a342c8df1c3d9782897404211c4107f197f4,apache/tomee,,Trim config line to be sure it is empty.,Fix: Ensure correct setup of broker configuration in ActiveMQResourceAdapter This commit adds a trim() method to the brokerXmlConfig string before checking if it's empty in the start method of the ActiveMQResourceAdapter.java file. This change ensures that the broker configuration is set up correctly even when the brokerXmlConfig string contains only whitespace characters.
https://github.com/apache/tomee/commit/4573e844fde9e92120b5770cdcd2bf7ab3d12271,4573e844fde9e92120b5770cdcd2bf7ab3d12271,apache/tomee,,persistenceContextSynchronization in PersistenceContextRef propOrder,"Feat: Add persistenceContextSynchronization field to PersistenceContextRef class This commit adds a new field, ""persistenceContextSynchronization"", to the PersistenceContextRef class. This class manages persistence context references and their properties in a Java application. The addition of this new field is likely to enhance the functionality of managing persistence context references."
https://github.com/apache/tomee/commit/5c981f9c8275d6aaa465bee7ec33d467acf8ef83,5c981f9c8275d6aaa465bee7ec33d467acf8ef83,apache/tomee,,"too slow flush from idea, sorry for the noise",Style: Add missing semicolon in ManagedConnection.java A semicolon was added at the end of a line in the ManagedConnection.java file to correct a syntax error. This change does not affect the functionality of the code.
https://github.com/apache/usergrid/commit/269881d3725626f1a305b258d35f9a9285eccb02,269881d3725626f1a305b258d35f9a9285eccb02,apache/usergrid,,quick poke to detach the tracetag threadlocal so we don't log all over the tests,"Fix: Add TraceTag detachment in createAttachDetach test In the `createAttachDetach()` method of the `TraceTagUnitTest.java` file, a line of code was added to detach the TraceTag from the TraceTagManager. This change ensures that the TraceTag is properly detached after being used, which is crucial for the correct functioning of the TraceTagManager."
https://github.com/apache/usergrid/commit/8536f808d7d477652a14162213298381fd5d0d62,8536f808d7d477652a14162213298381fd5d0d62,apache/usergrid,,"not sure why this fails during batch testing, but it succeeds singly",Fix: Temporarily disable testCaseSensitivityAdminUser test The testCaseSensitivityAdminUser test in MUUserResourceIT.java has been temporarily disabled by adding an @Ignore annotation. This is a temporary fix and needs to be revisited.
https://github.com/apache/usergrid/commit/983ba69963de7c0f28d09b5a97c93d7d1c7e37ab,983ba69963de7c0f28d09b5a97c93d7d1c7e37ab,apache/usergrid,,Seeing some very odd behavior on different Java VMs with serialization of UUIDs.,Refactor: Handle non-UUID case in ApplicationQueueMessage generation This commit refactors the `generate` method in the `ApplicationQueueMessage.java` file to handle a case where the `MESSAGE_PROPERTY_DEVICE_UUID` object property is not an instance of `UUID`. This change ensures that the `ApplicationQueueMessage` is correctly generated from a given `Message` object.
https://github.com/apache/usergrid/commit/17cc01dc92c39878c7f917d4f361f129dee162ad,17cc01dc92c39878c7f917d4f361f129dee162ad,apache/usergrid,Y,Added TODO's,"chore: Add TODO comments for future work This commit adds TODO comments to two classes: EntityCollectionManager and EntityIndexBatch. These comments indicate future work to be done on these classes. In EntityCollectionManager, the comments suggest changing the load method to use multiget and return multiple entities, and adding a load versions method using a multiget that will return a latest version structure for a collection of entity Ids. In EntityIndexBatch, the comment suggests creating a delete method that deletes by Id, which will delete all documents from ES with the same entity Id."
https://github.com/apache/usergrid/commit/326c8effb05a1d71eca19eac03977f9aaea7dd8b,326c8effb05a1d71eca19eac03977f9aaea7dd8b,apache/usergrid,Y,Added version check to ensure correct versions,Feat: Add version check to testIdMapping method This commit introduces a new feature to the testIdMapping() method in both EntityTypeMappingMigrationIT.java and GraphShardVersionMigrationIT.java files. The method now checks the version of the migration and verifies if it matches the expected version. This enhancement ensures the correct migration of data from an old version to a new version.
https://github.com/apache/usergrid/commit/3c504f1cd9482fb8669ce8a447ae0d95f729ba37,3c504f1cd9482fb8669ce8a447ae0d95f729ba37,apache/usergrid,,add cache fig,"Style: Update comments in ApplicationIdCacheFig.java This commit updates the comments in the ApplicationIdCacheFig.java file. The changes are not related to any method or class functionality, but rather to the style of the code. No associated issues or pull requests were found for this commit."
https://github.com/apache/usergrid/commit/fbb5807e46a6270eadfc3822a60112d4a9e3faf1,fbb5807e46a6270eadfc3822a60112d4a9e3faf1,apache/usergrid,,"Revert ""Ignore non critical tests for now.""","Fix: Enable StaleIndexCleanupTest The `@Ignore` annotation was removed from the `StaleIndexCleanupTest` class, enabling the execution of tests for the cleanup of stale ElasticSearch indexes during entity updates and deletions."
https://github.com/apache/usergrid/commit/8814a144b66054048be96a1c892fd750ee327327,8814a144b66054048be96a1c892fd750ee327327,apache/usergrid,,Fix logging statement.,"Refactor: Improve handling of AsyncEvents in AsyncEventServiceImpl This commit refactors the AsyncEventServiceImpl class to improve the handling of different types of AsyncEvents in the queue system. The changes are mainly in the condition of an if statement in the callEventHandlers method, which processes a list of messages from a queue. Each message is expected to contain an AsyncEvent. The changes ensure that the method handles different types of AsyncEvents more effectively. There are no associated issues or pull requests."
https://github.com/apache/usergrid/commit/2af22a87105629f423463c4132ff9141bb95930c,2af22a87105629f423463c4132ff9141bb95930c,apache/usergrid,,Make sure to create keyspaces on initialization before trying to obtain sessions to the keyspaces.,"Refactor: Update initialization in DataStaxClusterImpl This commit refactors the initialization process in the DataStaxClusterImpl class. The initialization of clusterSession, applicationSession, and queueMessageSession has been removed, and the creation of an application local keyspace has been added. This change improves the structure of the code without altering the overall functionality of the class, which manages connections and sessions with a Cassandra database cluster."
https://github.com/apache/wicket/commit/d62a00f22daf79dda382e79cc7c9a6bd3ce31a0b,d62a00f22daf79dda382e79cc7c9a6bd3ce31a0b,apache/wicket,Y,bug fix for autolink,"Feat: Add new getMarkupParser method and update loadMarkup method This commit introduces a new method, getMarkupParser, in Application.java. This method creates a new instance of the markup parser, configures it with the current settings, and sets the base page for autolinking.  The loadMarkup method in Container.java has been updated to use the new getMarkupParser method. This change enhances the functionality of the loadMarkup method by allowing it to load the markup for a given application and key, read the markup from the provided resource, store it in the markup cache, and then return the markup.  These changes contribute to the overall functionality and efficiency of the application."
https://github.com/apache/wicket/commit/7fa7ef16132c29e8a4fa9c0feabbdd21ac5043cb,7fa7ef16132c29e8a4fa9c0feabbdd21ac5043cb,apache/wicket,,fix for serializable and content equals,"Refactor: Update VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE in AttributeModifier This commit updates the values of VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE in the AttributeModifier class from new Object() to new String(""VA_ADD"") and new String(""VA_REMOVE"") respectively. The comparison in the 'replaceAttibuteValue' method is also updated from '==' to '.equals'. These changes improve the structure of the code without changing its behavior."
https://github.com/apache/wicket/commit/3cc6fbd940b3f960866d8eaf383eb57605c7dadd,3cc6fbd940b3f960866d8eaf383eb57605c7dadd,apache/wicket,Y,removed unused variable,"Refactor: Remove rethrowRuntimeException feature from MockWebApplication The rethrowRuntimeException feature, which allowed runtime exceptions to be rethrown, has been removed from the MockWebApplication class. This change also affects the HeaderSectionTest class, where a line of code that called the removed method has been deleted. The functionality of the modified classes remains the same after the changes."
https://github.com/apache/wicket/commit/8515371d54c619eba3da2334d15ce7b2a6c17f6b,8515371d54c619eba3da2334d15ce7b2a6c17f6b,apache/wicket,,fixed a junit test set-up which succeded in Eclipse and failed on the comand line using maven,"Refactor: Update MarkupParserTest to extend WicketTestCase This commit updates the `MarkupParserTest` class to extend `WicketTestCase` instead of `TestCase`. A constructor has also been added to the class. The functionality of the `MarkupParserTest` class remains the same, it is used to test the functionality of the `MarkupParser` in parsing HTML and XML documents."
https://github.com/apache/wicket/commit/41ad9dfd682f2659301e133aa75e6e3775d92999,41ad9dfd682f2659301e133aa75e6e3775d92999,apache/wicket,,removed unused import,Style: Remove unused import in PagingNavigationIncrementLinkTest.java Removed an unused import statement in the file `PagingNavigationIncrementLinkTest.java` to improve the style of the code.
https://github.com/apache/wicket/commit/82aa4b1fc4b010100e051167f85662f439d92634,82aa4b1fc4b010100e051167f85662f439d92634,apache/wicket,,enable ajax debug in ajax examples,"Feat: Enable Ajax debug mode in application settings This commit involves a modification to the 'init()' method in the AjaxApplication.java file. The change enables the Ajax debugging mode in the application settings. This is part of the initialization of the Wicket application settings, which also includes exception handling and response filtering."
https://github.com/apache/wicket/commit/cf357dc5be777bfebdc9d7a9a48ab6c7dca900ec,cf357dc5be777bfebdc9d7a9a48ab6c7dca900ec,apache/wicket,,removed stale javadoc,Refactor: Simplify comments in formComponent method The comments in the formComponent method of the Form class have been simplified for better readability. The functionality of the method and the class remains the same.
https://github.com/apache/wicket/commit/413a7b5d98139b0b85fd76a237971b8f43eb1107,413a7b5d98139b0b85fd76a237971b8f43eb1107,apache/wicket,,removed Session.setApplication + fixed some warnings,Style: Add comments to getBeanDefinitionNames method in ApplicationContextMock class Added comments to the getBeanDefinitionNames method in the ApplicationContextMock class to provide more information about the method parameters and return value. The ApplicationContextMock class is a mock implementation of the ApplicationContext interface for unit testing purposes.
https://github.com/apache/wicket/commit/315614b2f80be8f621c92ed769c529215d6b53bf,315614b2f80be8f621c92ed769c529215d6b53bf,apache/wicket,,"make it consistent. nested models are results of wrapping, this is a result of composition",Refactor: Simplify AbstractPropertyModel class Removed unnecessary conditional check in the getNestedModel method of the AbstractPropertyModel class. The change does not affect the overall functionality of the class.
https://github.com/apache/wicket/commit/e5524f77003c96dcd492cb0f987085edff9daebe,e5524f77003c96dcd492cb0f987085edff9daebe,apache/wicket,,"Added default value ("""") for filterPath in case it's not specified in web.xml","Fix: Add null check for filterPath in WicketFilter init method This commit adds a null check for `filterPath` in the `init` method of the `WicketFilter.java` file. If `filterPath` is null, it is set to an empty string. This change is part of the initialization process of the filter configuration, which includes creating a web application instance, setting the filter for the web application, and storing the application object in the servlet context."
https://github.com/apache/wicket/commit/36945b352820de990e92d615e0452d1f4b2d005e,36945b352820de990e92d615e0452d1f4b2d005e,apache/wicket,,Fixed compilation issue for delayed session creation,feat: Update getSessionFactory method in QuickStartApplication This commit updates the `getSessionFactory` method in the `QuickStartApplication.java` file. The method now creates `QuickStartSession` instances for each new request. This change enhances the functionality of the application by allowing it to handle multiple requests more efficiently.
https://github.com/apache/wicket/commit/0c90bdc70bcbc485d045ac6944f2146b93649730,0c90bdc70bcbc485d045ac6944f2146b93649730,apache/wicket,,only notify behaviors when they are accepted,"Feat: Add condition check in notifyBehaviorsComponentRendered() This commit introduces a condition check in the method notifyBehaviorsComponentRendered() in the Component.java file. The condition checks if a behavior is accepted before it is notified that the component has been rendered. This change ensures that only the accepted behaviors are notified, enhancing the efficiency of the method."
https://github.com/apache/wicket/commit/a5888c2d7c2bc24b06bddacf857bac4ddae7fffa,a5888c2d7c2bc24b06bddacf857bac4ddae7fffa,apache/wicket,,formatted and reordered,"Refactor: Improve code readability in Objects.java In this commit, we have made several changes to improve the readability and maintainability of the code in the `Objects.java` file. We have moved the declaration of `primitiveDefaults` to a more appropriate location in the code. We have also added extra comments to the `cloneObject` method to provide more information about its functionality. Lastly, we have changed the formatting of the `sizeof` method to make it more readable."
https://github.com/apache/wicket/commit/06244350ea5e91ff55ec170578a7809e544f9987,06244350ea5e91ff55ec170578a7809e544f9987,apache/wicket,,hmm normally you don't have the build path that you have in eclipse. (how can we avoid this?),"Refactor: Update WordGeneratorTest to extend TestCase In this commit, the WordGeneratorTest class has been refactored to extend TestCase instead of WicketTestCase. A new instance variable 'tester' of type WicketTester has been added. Two new methods 'setUp' and 'tearDown' have been added. The 'setUp' method sets up the testing environment by initializing the WicketTester object before each test case. The 'tearDown' method destroys the tester instance after the test is completed."
https://github.com/apache/wicket/commit/526bb16ab2f8b770a052fc93069b8b38a1d6c1f5,526bb16ab2f8b770a052fc93069b8b38a1d6c1f5,apache/wicket,,"who thought it was a good idea to do ""wicket""->""org.apache.wicket"" ????",Style: Update comment in nextTag() method The comment in the `nextTag()` method of `WicketTagIdentifier.java` has been updated for clarity. The method retrieves the next XML tag from the markup and converts it into a WicketTag if it belongs to the Wicket namespace. The updated comment better reflects this functionality.
https://github.com/apache/wicket/commit/6af365b9b8a426020c412dc7727a17a87bad8ba9,6af365b9b8a426020c412dc7727a17a87bad8ba9,apache/wicket,,removed noop TODO,"Fix: Remove TODO comment in SelectPage class The TODO comment was removed from the SelectPage class in the Apache Wicket framework. This class provides examples of using the Select form component. The removal of the comment is a cleanup of the code, improving its readability."
https://github.com/apache/wicket/commit/7799aa5470f4f89550782a426a068ef555c0f242,7799aa5470f4f89550782a426a068ef555c0f242,apache/wicket,,enabled the failing test again,Feat: Adjust comment in SimplePageTest.java This commit adjusts the placement of a comment in the SimplePageTest.java file. The change is minor and does not affect the functionality of the code.
https://github.com/apache/wicket/commit/81585ff7b7def59aab719a9f6f386ff5d072e5f5,81585ff7b7def59aab719a9f6f386ff5d072e5f5,apache/wicket,,doc & style tweaks,"Refactor: Enhance RequestUtils class functionality The RequestUtils class in the Wicket Http package has been refactored. The class has been made final, and the method decodeParameters has been updated to decode query strings into key/value pairs and add them to a provided value map. A new private constructor has also been added. This commit does not have any associated issues or pull requests."
https://github.com/apache/wicket/commit/976399fdfae80a7bf3c2de40bca002c2472d30cb,976399fdfae80a7bf3c2de40bca002c2472d30cb,apache/wicket,,rollback call wrapModel before calling the instantiation listener (so wrap is called after the listener again now).,"Refactor: Move model wrapping after component instantiation notification In the Component class, the line 'this.model = wrap(model);' has been moved after the line 'getApplication().notifyComponentInstantiationListeners(this);'. This change does not affect the functionality of the Component class."
https://github.com/apache/wicket/commit/0c7ad3bd3fc4bcab38b4ad47e196b5ac1dd91cad,0c7ad3bd3fc4bcab38b4ad47e196b5ac1dd91cad,apache/wicket,,tweak to check for conversion errors,"Fix: Add validity check in validate() method This commit modifies the validate() method in FormComponent.java to include an additional check for validity before proceeding with the conversion of the input. This change ensures that only valid and required inputs are converted, improving the robustness of the input validation process."
https://github.com/apache/wicket/commit/8d8d7b3f5f0285c0481da3c49638a69c988d8e73,8d8d7b3f5f0285c0481da3c49638a69c988d8e73,apache/wicket,Y,override getInput to return a value that can be used for error reporting,"feat: Add getInput method for error reporting This commit adds a new method, getInput(), to the DateTimeField.java file. This method returns a string representation of the input from the date, hours, and minutes fields, primarily for error reporting purposes. The returned string is in the format of ""date, hours:minutes""."
https://github.com/apache/wicket/commit/8ed9abfbd7a4b215bcfa4d2ba863e0f4150f63cc,8ed9abfbd7a4b215bcfa4d2ba863e0f4150f63cc,apache/wicket,,allow to manually update tree rows on ajax request,"Feat: Add markNodeDirty method in AbstractTree class This commit adds a new method `markNodeDirty(TreeNode node)` in the `AbstractTree.java` file. This method marks a node as dirty, indicating that it needs to be re-rendered or recalculated."
https://github.com/apache/wicket/commit/3fc1edadca900947119d2aa3ce1375d051a946c2,3fc1edadca900947119d2aa3ce1375d051a946c2,apache/wicket,,detach the request cycle otherwise session thread locals are not cleaned and are breaking other tests,"Fix: Ensure correct serialization and deserialization of page references In the testPageReference() method of WicketOutputStreamTest.java, a line of code was added to ensure that the deserialized object is the same as the original one. This fix ensures the correct serialization and deserialization of page references."
https://github.com/apache/wicket/commit/cc5892f29261c6e58926aa4eea84b444e357c965,cc5892f29261c6e58926aa4eea84b444e357c965,apache/wicket,,try catch around close If it throws an exception then the finally block is not completely executed,"Fix: Handle exceptions when closing response In the 'doGet' method of the 'WicketFilter.java' file, a try-catch block has been added to handle exceptions when closing the response. This change ensures that any exceptions that occur during the closing of the response are properly caught and logged, preventing potential crashes or unexpected behavior."
https://github.com/apache/wicket/commit/31239099657a751fc4cd6e51cdf65a41164eca66,31239099657a751fc4cd6e51cdf65a41164eca66,apache/wicket,Y,fix typo in error message,"Fix: Correct typo in error messages This commit corrects a typo in the error messages in the methods convertValue in both CheckGroup.java and RadioGroup.java. The typo was in the word ""componment"", which has been corrected to ""component"". The error messages are shown when the CheckGroup or RadioGroup component cannot resolve the selected Check or Radio component due to an illegal value."
https://github.com/apache/wicket/commit/cc195638e57df89bcdb8f72b344107c673143d96,cc195638e57df89bcdb8f72b344107c673143d96,apache/wicket,,Fix exception message. The name of the method is onEndRequest(),"Fix: Correct log message in onDetach method of RequestCycle class The log message in the onDetach method of the RequestCycle class has been corrected. The old message was ""Exception occurred during onAfterRequest"", and the new message is ""Exception occurred during onEndRequest"". This change ensures that the log message accurately reflects the operation of the method."
https://github.com/apache/wicket/commit/638b55e428226b0bd39f9307320f46cb2b36e91a,638b55e428226b0bd39f9307320f46cb2b36e91a,apache/wicket,,"Fixes NPE when sessions are invalidated *outside* a request, e.g. due to session timeout","Refactor: Improve session destruction handling in RequestLogger This commit refactors the `sessionDestroyed` method in `RequestLogger.java` to handle the event of a session being destroyed more robustly. Previously, the method directly removed the session with the given session id from the live sessions and set the removed session data as metadata in the current request cycle. This commit adds a null check for `RequestCycle` before setting the metadata, preventing potential null pointer exceptions."
https://github.com/apache/wicket/commit/4e53b486fa162580dfc24deb1f4c1f47f5c7d2e1,4e53b486fa162580dfc24deb1f4c1f47f5c7d2e1,apache/wicket,,Reverse the check for rendered page's class. This way a sub-type can be checked against super-type.,"Refactor: Improve null check and class comparison in BaseWicketTester This commit refactors the `isRenderedPage` method in the `BaseWicketTester` class. A null check was added for `expectedRenderedPageClass` to prevent potential null pointer exceptions. Additionally, the condition for checking if the page class is assignable from `expectedRenderedPageClass` was modified to improve readability and maintainability. These changes do not alter the functionality of the method, which continues to check if the last rendered page is of the expected type."
https://github.com/apache/wicket/commit/9fb30084cbc737ec035ed0e76a425612db462b47,9fb30084cbc737ec035ed0e76a425612db462b47,apache/wicket,,Fix broken javadoc links,Style: Update comments in BookmarkableMapper.java Updated the comments in the `BookmarkableMapper.java` file to use a shorter form of the class name. This change improves the readability of the code and makes it easier to understand.
https://github.com/apache/wicket/commit/152e8b1af359284ec680e3799f019cc20411cc15,152e8b1af359284ec680e3799f019cc20411cc15,apache/wicket,Y,Make two new implementations of Comparator serializable. Just in case they are used by someone in a collection which is supposed to be serialized.,"Refactor: Make classes implement Serializable interface In this commit, the `PriorityFirstComparator` and `UrlExternalFormComparator` classes were made to implement the `Serializable` interface. In addition, the `HeaderItemType` enum in `PriorityFirstComparator` was made static and the `renderPageFirst` variable was made final. This change allows `PriorityFirstComparator` to prioritize `PriorityHeaderItems` and optionally render page headers first. The functionality of `UrlExternalFormComparator` remains the same."
https://github.com/apache/wicket/commit/9de425ea4b6285cd0916a96161ebb09056389165,9de425ea4b6285cd0916a96161ebb09056389165,apache/wicket,,Remove unneeded cast.,Refactor: Simplify initialization of IClassResolver in LazyInitProxyFactory This commit simplifies the way the IClassResolver classResolver is initialized in the createProxy method of the LazyInitProxyFactory.java file. The change does not alter the functionality of the method.
https://github.com/apache/wicket/commit/bcc601c23466d524a9dc80a6895c71ae4091d402,bcc601c23466d524a9dc80a6895c71ae4091d402,apache/wicket,,Remove unused code,Refactor: Remove unused imports and code in AutoCompletePage.java This commit removes unused import statements and code lines in AutoCompletePage.java. The removed code does not affect the functionality of the class.
https://github.com/apache/wicket/commit/7c4fb4de88885095557821342c7dafde870af231,7c4fb4de88885095557821342c7dafde870af231,apache/wicket,,Fix javadoc of AbstractOutputTransformerContainer,Style: Update comments in AbstractOutputTransformerContainer.java The comments in AbstractOutputTransformerContainer.java have been updated. The reference to IBehavior has been replaced with a reference to AbstractTransformerBehavior and Behavior. This change does not affect the functionality of the code.
https://github.com/apache/wicket/commit/ea6cbc11aa9cef21fdfd77bc36e1970927d06eee,ea6cbc11aa9cef21fdfd77bc36e1970927d06eee,apache/wicket,,Use Lambda to make the code shorter,Refactor: Simplify callback in ModalWindow.init The `init` method in `ModalWindow.java` has been refactored. The callback for when the window is closed has been simplified by replacing the old version of the method with a lambda expression. This change improves the readability of the code without altering its functionality. The `init` method is used to initialize the modal window with default settings and behaviors.
https://github.com/apache/wicket/commit/b924402a5d263b473075a06611edfd88ca2bdfce,b924402a5d263b473075a06611edfd88ca2bdfce,apache/wicket,,Class formatted according to the code style,"Style: Code style adjustments in PageAccessSynchronizerTest.java No changes were made to the functionality of the code. The adjustments are related to the code style, possibly import statements or comments."
https://github.com/apache/cxf/commit/91feb64c98ffe1835075e1fa8d782e43e0c785ee,91feb64c98ffe1835075e1fa8d782e43e0c785ee,apache/cxf,,Log the AccessTokenService error,Style: Clean up code and add logging in AccessTokenService This commit removes unnecessary spaces in the `injectContextIntoOAuthProviders` method and adds a log statement in the `handleTokenRequest` method for runtime exceptions. The logging will help in debugging by providing more information when an error occurs while creating the access token.
https://github.com/apache/cxf/commit/260efe56fc1bfc89950d1eda89114feb287490cd,260efe56fc1bfc89950d1eda89114feb287490cd,apache/cxf,,Add @lob annotation for application certificates,Refactor: Enhance getApplicationCertificates method in Client class The getApplicationCertificates method in the Client class has been refactored to return a list of application certificates that are eagerly fetched and ordered as per their insertion in the database. The @Lob annotation has been added to indicate that the application certificates are stored as a large object in the database.
https://github.com/apache/cxf/commit/fbbd85c9c4efb9a57a8d26b90ef475f651ab9b66,fbbd85c9c4efb9a57a8d26b90ef475f651ab9b66,apache/cxf,,Improve logging when the audience restriction fails,Fix: Enhance error logging in checkAudience method The `checkAudience` method in `AccessTokenService.java` has been updated to provide more detailed error logging. The log message now includes the supplied audience and the registered audiences for the client. This change will help in better understanding the cause of the error when the audience parameter does not match with the registered audiences.
https://github.com/apache/cxf/commit/e1a8df8e095b7c6c1c2a237b2f8469ef522fd22e,e1a8df8e095b7c6c1c2a237b2f8469ef522fd22e,apache/cxf,,"UI not resolved correctly if version not specificed When findSwaggerUiRootInternal(null, null) is called, the root is returned without the version number which is needed to locate the index.html and other resources within the bundle. /META-INF/resources/webjars/swagger-ui//index.html instead of  /META-INF/resources/webjars/swagger-ui/3.17.6/index.html","Fix: Update default swaggerUiVersion in getSwaggerUiRoot In the `getSwaggerUiRoot` method of the `OsgiSwaggerUiResolver` class, the default value of `swaggerUiVersion` has been updated. Previously, if `swaggerUiVersion` was not specified, it was set to an empty string. Now, it is set to the version of the provided bundle. This change ensures that the method returns the correct root directory of the Swagger UI resources for the given version."
https://github.com/apache/cxf/commit/5ae9b0a5b928b49fc2a4b3fb8dd9b68dca640eb7,5ae9b0a5b928b49fc2a4b3fb8dd9b68dca640eb7,apache/cxf,,NPE when annotations bundle found but not active bundle.getBundleContext() will give an NPE (in Equinox) if the bundle can be found but is not active. Would also be good to at least log the exception in debug mode to point to a possible problem.,"Fix: Ensure bundle is active in findSwaggerUiRootInternal method This commit modifies the `findSwaggerUiRootInternal` method in the `OsgiSwaggerUiResolver.java` file to check if the bundle containing the Swagger UI resources is active. If it's not, the bundle is started. This method is used to find the root directory of the Swagger UI resources in the classpath."
https://github.com/apache/cxf/commit/1a8fb5902ea2c8421494a809b551e1f4f4f2b66b,1a8fb5902ea2c8421494a809b551e1f4f4f2b66b,apache/cxf,,Update OsgiSwaggerUiResolver.java Fixed indent,Style: Adjust indentation in OsgiSwaggerUiResolver.java The indentation in the method findSwaggerUiRootInternal of the OsgiSwaggerUiResolver.java file has been adjusted for better readability. No changes have been made to the functionality of the code.
https://github.com/apache/cxf/commit/ab452c0eee1fd560bdc91324c4dfe838f1088877,ab452c0eee1fd560bdc91324c4dfe838f1088877,apache/cxf,,"ProviderFactory.createProviderFromConstructor should include exception cause If newInstance fails because the called constructor of a custom Application implementation throws an exception, the root cause is not included which would reduce the search time for the actual cause.","Fix: Improve error handling in ProviderFactory.java In the method createProviderFromConstructor, the RuntimeException now includes the original exception if the provider cannot be instantiated. This change provides more information about the error, improving error handling and debugging."
https://github.com/apache/cxf/commit/ec6d94d6cacc755044935615c371eba4f20fdea7,ec6d94d6cacc755044935615c371eba4f20fdea7,apache/cxf,,Fixing SAML SSO log error,"Fix: Correct log message in SAMLSSOResponseValidator The log message in the method validateSubjectConfirmation of the class SAMLSSOResponseValidator has been corrected. The word ""not"" has been added to the message to accurately reflect the condition being checked."
https://github.com/apache/cxf/commit/455938206f6fe0f5e9717c4a6363d4d11fd414b5,455938206f6fe0f5e9717c4a6363d4d11fd414b5,apache/cxf,,"introduce getStreamResult to allow override, e.g. for pdf generation using apache fop",Refactor: Extract StreamResult creation to a new method A new method `getStreamResult` has been added to the `XSLTJaxbProvider` class. This method creates a new `StreamResult` instance with the provided `OutputStream`. The `marshalToOutputStream` method has been refactored to use this new method instead of creating a new `StreamResult` instance directly. This change improves the structure of the code without changing its behavior.
https://github.com/apache/cxf/commit/e95413cbafbfa23fd2c82f6009166cd398e9caa6,e95413cbafbfa23fd2c82f6009166cd398e9caa6,apache/cxf,,Fixing previous commit,"Fix: Update exception logging in injectThroughMethod This commit updates the way exceptions are logged in the `injectThroughMethod` of the `InjectionUtils.java` file. Previously, the cause of the exception was logged using the `severe` method of the Logger. This has been changed to use the `log` method with the `Level.SEVERE` level, logging the entire exception instead of just its cause. This change provides more detailed information when an exception occurs during the injection of a parameter value into a request object through a specified method."
https://github.com/apache/cxf/commit/b5129ac6ebe3d24d6aac20b6f3ec273f39161c8a,b5129ac6ebe3d24d6aac20b6f3ec273f39161c8a,apache/cxf,,Fix checkstyle with latest eclipse plugin,"Style: Adjusted code formatting in StaxSource.java The changes in this commit are related to the formatting of the code in the StaxSource.java file. Specifically, the placement of the opening braces for several case statements has been adjusted to follow the project's coding style. These changes do not affect the functionality of the class."
https://github.com/apache/cxf/commit/ae994168f50894010f1f148ec3b6f35b17e4b63b,ae994168f50894010f1f148ec3b6f35b17e4b63b,apache/cxf,,Removing unused getSecureSocketsProtocol method,"Refactor: Remove secure socket protocol from SSLUtils The `getSecureSocketProtocol` method and the `DEFAULT_SECURE_SOCKET_PROTOCOL` constant were removed from the `SSLUtils` class. The functionality of the class remains the same, but it no longer provides a method to get the secure socket protocol. This change simplifies the `SSLUtils` class and reduces its responsibilities."
https://github.com/apache/cxf/commit/86d7c657499b73bdbbd6ba9f1579e76ca0715357,86d7c657499b73bdbbd6ba9f1579e76ca0715357,apache/cxf,,Remove default ciphersuite filter inclusion (which isn't used anyway),"Refactor: Update getFilteredCiphersuites method in SSLUtils.java In this commit, the getFilteredCiphersuites method in SSLUtils.java has been refactored. The method now filters the supported cipher suites based on the provided include/exclude filters. The constant list DEFAULT_CIPHERSUITE_FILTERS_INCLUDE has been removed and replaced with a call to Collections.emptyList(). This change simplifies the code and makes it easier to understand."
https://github.com/apache/cxf/commit/cfab2ec2eced0dc0b026bc4bfbeeb18fff28e1b6,cfab2ec2eced0dc0b026bc4bfbeeb18fff28e1b6,apache/cxf,,Add instanceof to the equals method,Fix: Update equals method in SimpleParameterizedType class The equals method in the SimpleParameterizedType class has been updated. The condition checking if the object is null has been replaced with a condition checking if the object is an instance of ParameterizedType. This change ensures a more accurate comparison between this parameterized type and another object.
https://github.com/apache/cxf/commit/82b24f6db4537623370ebfc7a229562253a16197,82b24f6db4537623370ebfc7a229562253a16197,apache/cxf,,Fix newRemoteAddr is never assigned * Using the wrong variable for not null validation before HttpServletRequestXForwardedFilter.newRemoteAddr assignment.,Fix: Correct condition check in AbstractHTTPServlet The condition in the AbstractHTTPServlet.java file has been modified to check if 'originalRemoteAddr' is not null instead of 'newRemoteAddr'. This change ensures that the correct variable is checked before proceeding with the method execution.
