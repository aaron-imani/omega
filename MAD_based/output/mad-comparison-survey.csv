project,commit,commit_url,OMG,AMG,vanilla,incremental,incremental-enhanced
apache/ant,89aa7775a83989345756349f99bd3556780eafee,https://github.com/apache/ant/commit/89aa7775a83989345756349f99bd3556780eafee,Feat: Improve documentation in Os.java Added detailed comments to the setFamily and eval methods in the Os.java file. The comments provide information about the functionality of the methods and the expected input for the setFamily method.,"feat: Add OS family type setter and evaluator
This commit introduces a new setter method to specify the desired OS family type and an evaluator method to determine if the current OS matches the specified type. The setter method converts the input to lowercase, and the evaluator method uses system properties to determine the OS name and path separator.","feat: Add OS family type setting and matching to Os class
Introduce setFamily method to configure desired OS family type and eval method to determine OS match. This enhancement enables more flexible OS-based conditionals in Ant tasks.","feat: Implement OS family type matching in Os class
Added setFamily method to configure the desired OS family type, and updated the eval method to match the specified type by comparing it with the system's os.name property. This enhancement allows for more precise OS family detection.","feat: Add OS family type setting and matching to Os class
This commit introduces OS family type setting and matching functionality to the Os class, enabling users to specify a desired OS family type (dos, mac, netware, unix, or windows) and evaluate if the current OS matches it via the setFamily and eval methods."
apache/archiva,6987e689ecc1c522d53cb661fa7842284807f471,https://github.com/apache/archiva/commit/6987e689ecc1c522d53cb661fa7842284807f471,"Refactor: Remove logging statement from processSnapshots method The logging statement ""Processing snapshots."" has been removed from the processSnapshots method in the DefaultRepositoryBrowsing class. This change is part of a refactoring effort to improve the code quality.","refactor: Remove unnecessary log statement
Removed an unnecessary log statement in DefaultRepositoryBrowsing class, which was logging 'Processing snapshots.' without any functional impact. This change simplifies the code and makes it easier to maintain.","refactor: Remove unnecessary log statement
DefaultRepositoryBrowsing no longer logs 'Processing snapshots.' as it was not essential for its functionality.","refactor: Remove unnecessary log statement
Removed unnecessary log statement to declutter the code and improve log readability. This change has no impact on the observable behavior of the DefaultRepositoryBrowsing class.","refactor: Remove unnecessary log statement in DefaultRepositoryBrowsing
Removed unnecessary log statement to improve code clarity and reduce logging noise. This change has no impact on the observable behavior of DefaultRepositoryBrowsing."
apache/cassandra,2a9fc0e887612725a51b3822a266c1b3d3fadcaf,https://github.com/apache/cassandra/commit/2a9fc0e887612725a51b3822a266c1b3d3fadcaf,"Refactor: Prevent multiple closings of files in BigTableScanner This commit introduces a new variable `isClosed` in the `BigTableScanner` class to track whether the data and index files have been closed. The `close()` method is modified to check this variable before closing the files. This change prevents the files from being closed multiple times, which could potentially lead to a NullPointerException as reported in issue CASSANDRA-9531.","fix: Fix NullPointerException in BigTableScanner close method
This commit fixes a NullPointerException that occurs when running MessagePayloadTest due to the close method of BigTableScanner being called twice, causing the segment to be deallocated. The fix ensures that the close operation is idempotent by marking the object as closed and only performing the close operation once.","fix: Mark BigTableScanner as closed on close() to prevent NullPointerException
Fixes CASSANDRA-9531. Ensures close operation is idempotent by marking the object as closed.","fix: fix: Ensure idempotent close operation in BigTableScanner
Fixes CASSANDRA-9531 by ensuring the close operation in BigTableScanner is idempotent. Previously, duplicate close calls led to NullPointerExceptions due to the segment being deallocated. This change introduces an AtomicBoolean to mark the object as closed, preventing such exceptions.","fix: Fix NullPointerException in BigTableScanner.close()
This commit fixes the NullPointerException in BigTableScanner.close() by ensuring that the close operation is only performed once, using an AtomicBoolean to mark the object as closed. This prevents multiple close method calls, which were causing the NullPointerException, and resolves CASSANDRA-9531."
apache/directory-server,9cbf06fcae73d281aa4804e574335d12fd0764ec,https://github.com/apache/directory-server/commit/9cbf06fcae73d281aa4804e574335d12fd0764ec,"Refactor: Use addNormalized in getFarthestReferralAncestor method In the `getFarthestReferralAncestor` method of the `ReferralLut` class, replaced the `add` method with the `addNormalized` method. This is an internal change that does not alter the functionality of the method.","refactor: Improve referral ancestor lookup
Refactor the getFarthestReferralAncestor method to use addNormalized instead of add, ensuring correct referral handling in LDAP referral scenarios.","refactor: Use addNormalized in getFarthestReferralAncestor
Ensure correct referral handling by using addNormalized instead of add.","refactor: Use addNormalized in getFarthestReferralAncestor
Replaced direct addition with addNormalized in getFarthestReferralAncestor to leverage its normalization capabilities, ensuring accurate referral ancestor identification.","refactor: Normalize RDNs when adding to farthest referral
Normalize RDNs when adding to farthest referral to ensure consistent referral handling. This change eliminates potential inconsistencies in referral ancestor lookup, making the ReferralLut class more robust and maintainable. The updated getFarthestReferralAncestor method now uses addNormalized instead of add, aligning with the expected behavior."
apache/directory-server,b5546be3333d7a261e6db37ab6e36f34193cffbb,https://github.com/apache/directory-server/commit/b5546be3333d7a261e6db37ab6e36f34193cffbb,Refactor: Update package name of AddIT.java and import in MigratedStockCoreISuite.java The package name of the AddIT.java file has been refactored from 'org.apache.directory.server.core.jndi' to 'org.apache.directory.server.core.operations.add'. The import statement in the MigratedStockCoreISuite.java file has been updated to reflect this change. This refactoring improves the structure of the code without changing its behavior.,"refactor: Rename AddIT.java to new package
Rename AddIT.java from org/apache/directory/server/core/jndi to org/apache/directory/server/core/operations/add and update its import statement in MigratedStockCoreISuite.java to reflect the new package location.","refactor: Move AddIT.java to org.apache.directory.server.core.operations.add package
Renamed package from org.apache.directory.server.core.jndi to org.apache.directory.server.core.operations.add","refactor: Relocate AddIT to org.apache.directory.server.core.operations.add
Relocated AddIT test class to org.apache.directory.server.core.operations.add package to better reflect its functionality. This change improves the organization of our test classes, making it easier for developers to find and understand the purpose of AddIT.","refactor: Relocate AddIT.java to org.apache.directory.server.core.operations.add package
Refactored the package structure by relocating AddIT.java to org.apache.directory.server.core.operations.add, ensuring consistency with the directory hierarchy. This change also required updates to import statements in dependent classes, such as MigratedStockCoreISuite.java, to maintain correct references."
apache/lenya,f3c5e70e7f9cdc18ac0dcef205bc5fcacdee2bf7,https://github.com/apache/lenya/commit/f3c5e70e7f9cdc18ac0dcef205bc5fcacdee2bf7,"Refactor: Simplify the existence check in getLocator method The `getLocator` method in the `DocumentLocator` class has been refactored. The old code first checked if a key exists in the `locators` map and then retrieved the value associated with the key. The new code directly retrieves the value associated with the key and then checks if the retrieved value is null. This change simplifies the code and improves its readability. The functionality of the method remains the same: it returns a `DocumentLocator` for the given parameters. If a `DocumentLocator` for these parameters does not exist, a new one is created, stored, and then returned.","refactor: Simplify getLocator method
The getLocator method has been refactored to reduce unnecessary null checks and improve code readability. The method's functionality remains the same, but the implementation is now more concise and efficient.","refactor: Simplify getLocator method implementation to reduce redundancy
Remove unnecessary null check and optimize the logic for creating a new DocumentLocator instance, making the code more concise and efficient.","refactor: Remove unnecessary null checks from getLocator method
Removed redundant null checks, as the method's logic ensures that the locator is always initialized or retrieved from the cache before being returned.","refactor: Simplify getLocator method by reducing null checks
Removed unnecessary null checks in getLocator method, directly retrieving the DocumentLocator instance from the cache and creating a new one if it doesn't exist, resulting in more concise and efficient code."
apache/logging-log4j2,7831dde2eb0d0aa371639f8984b7a8b9f1b3aa53,https://github.com/apache/logging-log4j2/commit/7831dde2eb0d0aa371639f8984b7a8b9f1b3aa53,"Fix: Correct assertion in SslConfigurationTest In the method emptyConfigurationHasDefaultTrustStore() of the SslConfigurationTest.java file, the assertion has been corrected. Previously, the assertion was always passing (Assert.assertTrue(true)), which did not correctly test the functionality. The assertion has been replaced with Assert.assertNotNull(clientSocket) to ensure that the clientSocket is not null when the default trust store is used with an empty SSL configuration.","fix: Improve assertion in SslConfigurationTest
The assertion in the emptyConfigurationHasDefaultTrustStore method was strengthened to verify that an SSL configuration with no custom trust store settings defaults to the JVM's truststore. This change ensures that the test is more robust and accurate.","fix: Verify default trust store in emptyConfigurationHasDefaultTrustStore test
Update assertion to assertNotNull, ensuring an SSL configuration with no custom trust store settings defaults to the system trust store.","fix: Update Assert statement to assertNotNull in SslConfigurationTest
Changed the assertion in SslConfigurationTest to assertNotNull, ensuring the test correctly verifies the default trust store behavior when no custom trust store settings are provided.","fix: Update assertion in emptyConfigurationHasDefaultTrustStore test
This change updates the assertion in the emptyConfigurationHasDefaultTrustStore test from assertTrue to assertNotNull, aligning with the test's intended purpose of verifying the default trust store is used when no custom settings are provided. The previous assertion was insufficient, and this update ensures the test is more effective in validating the expected behavior."
apache/logging-log4j2,d2aea7458f08e8b9d48f3768b719aafaf4246007,https://github.com/apache/logging-log4j2/commit/d2aea7458f08e8b9d48f3768b719aafaf4246007,"Refactor: Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils in TestClassLoader This commit refactors the TestClassLoader class by replacing the sun.misc.IOUtils with org.apache.commons.io.IOUtils. The change is made in the findClass method, which finds and loads the class with the specified name. The way the class file is loaded into a byte array has been modified. The commit does not change the functionality of the method or the class.","refactor: Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils
This commit replaces the usage of sun.misc.IOUtils with org.apache.commons.io.IOUtils in the TestClassLoader class. This change is a refactoring of the internal structure of the code to make it more maintainable and easier to understand.","refactor: Use org.apache.commons.io.IOUtils instead of sun.misc.IOUtils
Updated TestClassLoader to read bytecode from a URL connection using the Apache Commons IOUtils, replacing the sun.misc.IOUtils dependency.","refactor: Refactor TestClassLoader to use Apache Commons IOUtils
Switched to Apache Commons IOUtils for improved maintainability and to avoid using a proprietary Sun class.","fix: Fix TestClassLoader to use compatible IOUtils
Updated TestClassLoader to use compatible IOUtils from Apache Commons, replacing the sun.misc.IOUtils dependency to ensure compatibility with different Java environments and to prevent potential issues with internal API changes."
helterskelterr/ofbizApp,c5c2b2c9b3f2e5b8cb6e2960b2a6daf9eb9a335c,https://github.com/helterskelterr/ofbizApp/commit/c5c2b2c9b3f2e5b8cb6e2960b2a6daf9eb9a335c,"Fix: Correct index used in 'chooseClientAlias' method In the 'chooseClientAlias' method of the 'AliasKeyManager.java' file, the wrong index was being used in the if condition inside a for loop. This commit fixes this bug by replacing 'aliases[i]' with 'aliases[x]'.","fix: Fix alias matching in chooseClientAlias method
The method chooseClientAlias was incorrectly using the index 'i' instead of 'x' when comparing aliases, leading to incorrect alias matching. This commit fixes the issue by using the correct index 'x' in the comparison.","fix: Fix alias comparison in chooseClientAlias
The method was incorrectly comparing the alias with aliases[i] instead of aliases[x]. This fix ensures the correct index is used.","fix: Fix alias matching in chooseClientAlias method
Fixed incorrect alias matching in chooseClientAlias method by using the correct loop variable, preventing potential security issues.","fix: Use correct loop variable in chooseClientAlias method
This commit fixes a bug in the `chooseClientAlias` method where the loop variable `i` was incorrectly used, causing alias matching issues. The fix replaces `i` with `x` to ensure correct iteration and accurate alias selection based on provided key types and issuers."
apache/poi,3234ce48d57222043d1fb8aec33d81315a5f30d9,https://github.com/apache/poi/commit/3234ce48d57222043d1fb8aec33d81315a5f30d9,Feat: Add new test method in TestFormulaParser A new test method `testFormulaWithString` has been added to the `TestFormulaParser` class. This method tests the formula parsing functionality with a string input.,"feat: Add test for parsing formula with string concatenation
This commit introduces a new unit test, testFormulaWithString, to cover the parsing of formulas that concatenate two strings using the ampersand (&) operator. This test ensures the FormulaParser class correctly handles string concatenation operations.","feat: Add test for string concatenation formula parsing
Verify FormulaParser's ability to handle formulas that concatenate two strings using the ampersand (&) operator.","feat: Add test for string concatenation formula parsing
Adds a unit test to cover the parsing of formulas with string concatenation using the ampersand (&) operator, ensuring the FormulaParser class behaves correctly in this scenario.","feat: Add test for string concatenation formula parsing
This commit adds a new test case to the TestFormulaParser class, verifying that the FormulaParser can correctly parse formulas involving string concatenation with the ampersand (&) operator, thereby enhancing the test coverage of the FormulaParser class."
apache/usergrid,8814a144b66054048be96a1c892fd750ee327327,https://github.com/apache/usergrid/commit/8814a144b66054048be96a1c892fd750ee327327,"Refactor: Improve handling of AsyncEvents in AsyncEventServiceImpl This commit refactors the AsyncEventServiceImpl class to improve the handling of different types of AsyncEvents in the queue system. The changes are mainly in the condition of an if statement in the callEventHandlers method, which processes a list of messages from a queue. Each message is expected to contain an AsyncEvent. The changes ensure that the method handles different types of AsyncEvents more effectively. There are no associated issues or pull requests.","refactor: Improve event handling logic in AsyncEventServiceImpl
Refactored the callEventHandlers method to add additional checks for specific event types before logging a warning when no index operation messages are returned. This change improves the robustness and accuracy of event handling in the AsyncEventServiceImpl class.","fix: Handle empty index operation messages for non-index events
Avoid logging warnings when no index operation messages are returned from event processing for non-ElasticsearchIndexEvent and non-InitializeApplicationIndexEvent.","fix: Limit empty index operation warning to relevant events
Updated the warning logic to only trigger for specific event types, reducing noise in the logs.","fix: Fix unnecessary warnings for non-index events
This commit refines the logging mechanism to only warn about empty index operation messages when the event is an instance of ElasticsearchIndexEvent or InitializeApplicationIndexEvent, thereby reducing unnecessary warnings and improving system reliability."
apache/wicket,526bb16ab2f8b770a052fc93069b8b38a1d6c1f5,https://github.com/apache/wicket/commit/526bb16ab2f8b770a052fc93069b8b38a1d6c1f5,Style: Update comment in nextTag() method The comment in the `nextTag()` method of `WicketTagIdentifier.java` has been updated for clarity. The method retrieves the next XML tag from the markup and converts it into a WicketTag if it belongs to the Wicket namespace. The updated comment better reflects this functionality.,"refactor: Simplify WicketTagIdentifier
Refactor the WicketTagIdentifier class to use 'wicket component' instead of 'org.apache.wicket component', making the code more concise and easier to understand. This change does not affect the functionality of the class.","fix: Correctly set id for Wicket tags
Previously, WicketTagIdentifier was creating RawMarkup instead of setting the id for Wicket tags. This change fixes the issue.","refactor: Create wicket components instead of RawMarkup in WicketTagIdentifier
Replaced RawMarkup with wicket components in WicketTagIdentifier's nextTag() method to ensure consistent handling of Wicket namespace tags and attributes.","refactor: Use 'wicket' instead of 'org.apache.wicket' in WicketTagIdentifier
This commit updates the WicketTagIdentifier to use the shorter 'wicket' namespace, aligning with the convention used in the rest of the codebase, and reducing unnecessary verbosity."
apache/wicket,9fb30084cbc737ec035ed0e76a425612db462b47,https://github.com/apache/wicket/commit/9fb30084cbc737ec035ed0e76a425612db462b47,Style: Update comments in BookmarkableMapper.java Updated the comments in the `BookmarkableMapper.java` file to use a shorter form of the class name. This change improves the readability of the code and makes it easier to understand.,"refactor: Simplify Javadoc references
Removed redundant package names from Javadoc references in BookmarkableMapper, making the code more concise and easier to read.","refactor: Simplify Javadoc references
Removed redundant package names from Javadoc comments to improve code readability.","refactor: Simplify imports in BookmarkableMapper
Removed redundant package qualifications from Javadoc comments, aligning with Java best practices and improving code readability.","refactor: Simplify imports in BookmarkableMapper
Updated import statements to use shorter, more explicit references to superclass methods, aligning with Java best practices and reducing visual noise."
apache/cxf,260efe56fc1bfc89950d1eda89114feb287490cd,https://github.com/apache/cxf/commit/260efe56fc1bfc89950d1eda89114feb287490cd,Refactor: Enhance getApplicationCertificates method in Client class The getApplicationCertificates method in the Client class has been refactored to return a list of application certificates that are eagerly fetched and ordered as per their insertion in the database. The @Lob annotation has been added to indicate that the application certificates are stored as a large object in the database.,"refactor: Update getApplicationCertificates to store certificates as LOBs
This commit refactors the getApplicationCertificates method to store application certificates as large objects (LOBs) in the database, with eager fetching and ordering. This change improves the storage and retrieval of certificates associated with an application, likely for authentication or authorization purposes.","feat: Add LOB support to application certificates
Enable efficient storage and retrieval of large certificate data by annotating getApplicationCertificates with @Lob.","refactor: Annotate getApplicationCertificates with @Lob
Annotate getApplicationCertificates with @Lob to enable efficient storage and retrieval of large certificate lists, improving overall system performance.","refactor: Annotate getApplicationCertificates with @Lob in Client class
Annotated getApplicationCertificates with @Lob to enable efficient storage and retrieval of large certificate lists as LOBs in the database, improving the internal structure of the Client class."
apache/cxf,455938206f6fe0f5e9717c4a6363d4d11fd414b5,https://github.com/apache/cxf/commit/455938206f6fe0f5e9717c4a6363d4d11fd414b5,Refactor: Extract StreamResult creation to a new method A new method `getStreamResult` has been added to the `XSLTJaxbProvider` class. This method creates a new `StreamResult` instance with the provided `OutputStream`. The `marshalToOutputStream` method has been refactored to use this new method instead of creating a new `StreamResult` instance directly. This change improves the structure of the code without changing its behavior.,"refactor: Introduce getStreamResult method for overriding
This commit refactors the XSLTJaxbProvider class to introduce a new protected method getStreamResult, which allows for overriding the stream result creation, e.g., for PDF generation using Apache FOP. This change enables more flexibility in the serialization process.","refactor: Extract getStreamResult method from marshalToOutputStream
This change enables customization of output handling, such as PDF generation using Apache FOP, by allowing subclasses to override the getStreamResult method.","refactor: Introduce getStreamResult method
Extracted stream result creation into a separate `getStreamResult` method to improve flexibility and maintainability of `marshalToOutputStream`.","refactor: Introduce getStreamResult method to enable custom stream handling
This change extracts the stream result creation into a separate `getStreamResult` method, allowing for more flexibility in handling output streams. This refactoring enables customization of stream handling, as seen in the associated pull request, which targets PDF generation using Apache FOP."
