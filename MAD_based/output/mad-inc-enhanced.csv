commit,project,Multi-files?,patch,HM,Rationality (0-4),Comprehensiveness (0-4),Conciseness (0-4),Expressiveness (0-4),FIRA,Rationality (0-4).1,Comprehensiveness (0-4).1,Conciseness (0-4).1,Expressiveness (0-4).1,OMG,Rationality (0-4).2,Comprehensiveness (0-4).2,Conciseness (0-4).2,Expressiveness (0-4).2,MAD
e3e91155adb831bb487133b16c7ab78a230a713f,apache/ambari,,"File: ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineMetricCacheTest.java
Status: modified
```diff
@@ -419,7 +419,7 @@ public void testTimelineMetricCachePrecisionUpdates() throws Exception {
     long year = 365 * day;
 
     //Original Values
-    Map<String, TimelineMetric> valueMap = new HashMap();
+    Map<String, TimelineMetric> valueMap = new HashMap<String, TimelineMetric>();
     TimelineMetric timelineMetric = new TimelineMetric();
     timelineMetric.setMetricName(""cpu_user"");
     timelineMetric.setAppId(""app1"");
```","Revert ""Fix unnecessary type casting in Test"" This reverts commit f3ab77c.",0,0,4,3,remove unused parameter,0,0,4,4,"Refactor: Specify type of HashMap in `testTimelineMetricCachePrecisionUpdates()`In the `testTimelineMetricCachePrecisionUpdates()` method in the `TimelineMetricCacheTest.java` file, the type of the HashMap `valueMap` was specified in its initialization. This change improves the code's internal structure without altering its external behavior._x001B_",4,4,4,4,"style: Specify type parameter for HashMap instantiation in TimelineMetricCacheTest
This change explicitly specifies the type parameter for HashMap instantiation in TimelineMetricCacheTest, ensuring type safety and preventing potential ClassCastException at runtime. The modification is located in the testTimelineMetricCachePrecisionUpdates method."
89aa7775a83989345756349f99bd3556780eafee,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/condition/Os.java
Status: modified
```diff
@@ -65,8 +65,24 @@
 public class Os implements Condition {
     private String family;
 
+    /**
+     * Sets the desired OS family type
+     * 
+     * @param f      The OS family type desired<br />
+     *               Possible values:<br />
+     *               <ul><li>dos</li>
+     *               <li>mac</li>
+     *               <li>netware</li>
+     *               <li>unix</li>
+     *               <li>windows</li></ul>
+     */
     public void setFamily(String f) {family = f.toLowerCase();}
 
+    /**
+     * Determines if the OS on which Ant is executing matches the type of 
+     * that set in setFamily.
+     * @see Os#setFamily(String)
+     */
     public boolean eval() throws BuildException {
         String osName = System.getProperty(""os.name"").toLowerCase();
         String pathSep = System.getProperty(""path.separator"");
```",Added some javadocs for OS condition.,4,4,4,4,add javadoc for Os setFamily,4,4,4,4,Feat: Improve documentation in Os.java Added detailed comments to the setFamily and eval methods in the Os.java file. The comments provide information about the functionality of the methods and the expected input for the setFamily method.,3,4,4,4,"feat: Add OS family type setting and matching to Os class
This commit introduces OS family type setting and matching functionality to the Os class, enabling users to specify a desired OS family type (dos, mac, netware, unix, or windows) and evaluate if the current OS matches it via the setFamily and eval methods."
5b377d290d4ff3d4557987da9b3c2dd802203cde,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/ExecTask.java
Status: modified
```diff
@@ -323,7 +323,7 @@ protected void runExec(Execute exe) throws BuildException {
             runExecute(exe);
         } catch (IOException e) {
             if (failIfExecFails) {
-                throw new BuildException(""Execute failed: "",e, location);
+                throw new BuildException(""Execute failed: ""+e.toString(),e, location);
             } else {
                 log(""Execute failed: ""+e.toString(), Project.MSG_ERR);
             }
```",Last weeks changes took away helpful information about why exec failed to run; this puts it back in.,4,3,4,4,improve error message,3,2,4,4,"Fix: Provide more detailed exception message in `runExec` method In the `runExec` method of `ExecTask.java`, the exception message when the command line process execution fails has been updated to include more information about the exception. This change improves the error handling by providing more context about the exception, which can be helpful for debugging._x001B_[0m",4,4,4,4,"fix: Include exception details in BuildException message
This change modifies the `BuildException` constructor in the `runExec` method to include the exception's `toString()` representation, providing more detailed error information when the execution fails."
1a3090627d25c1ede9407003e24d7e76ca48f293,apache/ant,,"File: proposal/myrmidon/src/java/org/apache/antlib/xml/XMLValidateTask.java
Status: modified
```diff
@@ -243,7 +243,8 @@ private EntityResolver buildEntityResolver()
         final LocalResolver resolver = new LocalResolver();
         setupLogger( resolver );
 
-        for( int i = 0; i < m_dtdLocations.size(); i++ )
+        final int size = m_dtdLocations.size();
+        for( int i = 0; i < size; i++ )
         {
             final DTDLocation location = (DTDLocation)m_dtdLocations.get( i );
             resolver.registerDTD( location );
```",Made complex loop counter a simple constant Removing a Audit violation,4,3,3,4,fix a bug in XMLValidateTask,2,0,4,4,"Refactor: Optimize loop in XMLValidateTask This commit introduces a minor optimization in the XMLValidateTask class. A new variable 'size' is introduced to hold the size of 'm_dtdLocations', which is then used in the for loop condition. This change improves the structure of the code without altering its functionality._x001B_[0m",4,4,4,4,"refactor: Cache m_dtdLocations size in a local variable
Avoided redundant method calls by caching m_dtdLocations' size in a local variable, reducing the number of size() method invocations within the loop from O(n) to O(1)."
cfa604fd9941bf59641e989306c4356dab156015,apache/ant,,"File: src/testcases/org/apache/tools/ant/util/DateUtilsTest.java
Status: modified
```diff
@@ -92,7 +92,7 @@ public void testDateTimeISO(){
     public void testDateISO(){
         TimeZone timeZone = TimeZone.getTimeZone(""GMT"");
         Calendar cal = Calendar.getInstance(timeZone);
-        emailtaskcal.set(2002,1,23);
+        cal.set(2002,1,23);
         String text = DateUtils.format(cal.getTime(),
                 DateUtils.ISO8601_DATE_PATTERN);
         assertEquals(""2002-02-23"", text);
```",testcase wouldn't compile - slipping fingers?,3,0,1,2,fix broken test,4,2,4,4,"Fix: Correct object used to set date in testDateISO() method In the 'testDateISO()' method of the 'DateUtilsTest.java' file, the object used to set the calendar date has been corrected from 'emailtaskcal' to 'cal'. This change ensures that the method tests the conversion of a date to an ISO 8601 string correctly._x001B_[0m",4,4,4,4,"fix: Fix emailtaskcal usage in testDateISO method
Fixed incorrect usage of emailtaskcal in testDateISO method by replacing it with a Calendar instance, ensuring the test correctly formats dates in ISO 8601 format."
5e099552e5af434568a4294cf7bcebb732cd3bfa,apache/ant,Y,"File: proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java
Status: modified
```diff
@@ -86,10 +86,7 @@ public class Translate
      * Create new destination file? Defaults to false.
      */
     private boolean forceOverwrite;
-    /**
-     * Generated locale based on user attributes
-     */
-    private Locale locale;
+
     /**
      * Source file encoding scheme
      */
@@ -564,7 +561,6 @@ private void translate()
                         String line;
                         while( ( line = in.readLine() ) != null )
                         {
-                            StringBuffer newline = new StringBuffer( line );
                             int startIndex = -1;
                             int endIndex = -1;
                             outer :
```


File: proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java
Status: modified
```diff
@@ -86,10 +86,7 @@ public class Translate
      * Create new destination file? Defaults to false.
      */
     private boolean forceOverwrite;
-    /**
-     * Generated locale based on user attributes
-     */
-    private Locale locale;
+
     /**
      * Source file encoding scheme
      */
@@ -564,7 +561,6 @@ private void translate()
                         String line;
                         while( ( line = in.readLine() ) != null )
                         {
-                            StringBuffer newline = new StringBuffer( line );
                             int startIndex = -1;
                             int endIndex = -1;
                             outer :
```",Delete some unused variables,4,3,4,4,remove unused field,4,3,4,4,"Refactor: Remove unused variables in Translate.java In both the 'proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java' and 'proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java' files, the private Locale variable 'locale' and the StringBuffer 'newline' in the 'translate' method have been removed. These variables were not used, and their removal simplifies the code without affecting its functionality._x001B_[0m",4,4,4,4,"refactor: Simplify Translate class by removing redundant members
Refactored `Translate` class to eliminate redundant members, improving code organization and reducing technical debt."
4ffa9e1380956291543b6662e6ebfe89e859ebeb,apache/ant,,"File: src/main/org/apache/tools/ant/ComponentHelper.java
Status: modified
```diff
@@ -434,7 +434,15 @@ public Hashtable getAntTypeTable() {
      */
     public Task createTask(String taskType) throws BuildException {
         Task task=createNewTask(taskType);
-        if(task!=null) {
+        if (task == null && taskType.equals(""property"")) {
+            // quick fix for Ant.java use of property before
+            // initializeing the project
+            addTaskDefinition(""property"",
+                              org.apache.tools.ant.taskdefs.Property.class);
+            task = createNewTask(taskType);
+        }
+            
+        if (task != null) {
             addCreatedTask(taskType, task);
         }
         return task;
```",quick fix for Ant.java use of property in Ant#reinit,1,4,4,2,fix a bug in ComponentHelper,2,2,4,4,"Fix: Handle null task in createTask method In the createTask method of the ComponentHelper class, added a condition to handle a case where the task is null and the taskType equals ""property"". In this case, a new task definition is added and a new task is created. This is a fix for a situation where the ""property"" task is used before the project is initialized._x001B_[0m",4,4,4,4,"fix: fix: handle null task for 'property' task type creation
Address a specific edge case where Ant.java uses the 'property' task before initializing the project, by adding a task definition for 'property' tasks when they are null, ensuring that task creation succeeds even in this scenario."
ea0ea86ba268d63b39f8e608a746e4aad1eb1b3c,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java
Status: modified
```diff
@@ -372,7 +372,7 @@ private void loadResourceMaps() throws BuildException {
         processBundle(bundleFile, 5, false);
 
         bundleFile = bundle + language;
-        processBundle(bundleFile, 6, false);
+        processBundle(bundleFile, 6, true);
     }
 
     /**
```",cancel previous change,0,0,1,4,fix a bug in the Translate,2,2,4,4,"Fix: Update resource map loading in Translate.java This commit updates the method loadResourceMaps() in Translate.java to load resource maps for a specific locale and the default locale, processing each bundle file in a specific order. The change enhances the specificity of the resource map loading process._x001B_[0m",2,4,4,4,"fix: Pass true as third argument to processBundle
Fixed incorrect resource loading by passing true as the third argument to processBundle, ensuring that the most specific resource is used when loading locale-specific resource maps."
42e30982adb99585237d6b9c9478ca1d647cc074,apache/ant,,"File: src/main/org/apache/tools/bzip2/CBZip2OutputStream.java
Status: modified
```diff
@@ -411,8 +411,9 @@ private void writeRun() throws IOException {
 
     boolean closed = false;
 
-    public void finalize() throws Throwable {
+    protected void finalize() throws Throwable {
         close();
+        super.finalize();
     }
 
     public void close() throws IOException {
```",Fix incorrect finalize override,3,4,4,4,make finalize public,0,0,4,4,"Refactor: Change visibility of finalize method in CBZip2OutputStream The visibility of the `finalize` method in `CBZip2OutputStream.java` has been changed from `public` to `protected`, and a call to `super.finalize()` has been added. This ensures that the object is properly closed when it's garbage collected._x001B_[0m",4,4,4,4,"refactor: Make finalize method protected to ensure resource closure on garbage collection
Made finalize method protected to prevent external calls, ensuring it's only invoked by the garbage collector to release system resources, thus preventing potential resource leaks."
50f9f4ee6f3a436fe05a0360e6e1d09851aba00c,apache/ant,,"File: src/testcases/org/apache/tools/tar/TarRoundTripTest.java
Status: modified
```diff
@@ -54,6 +54,7 @@
 package org.apache.tools.tar;
 
 import java.io.IOException;
+import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import junit.framework.TestCase;
 
```",Add missing import,4,4,4,4,add missing import,4,4,4,4,Feat: Add import statement in TarRoundTripTest.java Added import statement for ByteArrayInputStream in TarRoundTripTest.java.,3,4,4,4,"style: Add import statement for ByteArrayInputStream
No functional changes; added missing import statement for ByteArrayInputStream to maintain code consistency."
4177bdb64e339c8ee010ab514d0670cdcee1d963,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java
Status: modified
```diff
@@ -291,7 +291,7 @@ protected void scandir(String dir, String vpath, boolean fast) {
                         } else {
                             String name = vpath + file.getName();
                             if (!isFollowSymlinks() && file.isSymbolicLink()) {
-                                dirsExcluded.addElement(name);
+                                filesExcluded.addElement(name);
                             } else if (isFunctioningAsFile(ftp, dir, file)) {
                                 if (isIncluded(name)) {
                                     if (!isExcluded(name)) {
```",mistake found ... oops ... Corrected,1,0,4,3,fix the build,1,2,4,4,"Fix: Correct classification of symbolic links in FTP.java In the method 'scandir' of the class 'FTP.java', symbolic links were previously classified as directories and added to 'dirsExcluded'. This commit corrects this misclassification by adding symbolic links to 'filesExcluded' instead. This change ensures that symbolic links are correctly identified and handled.",4,4,4,4,"fix: Correctly categorize symbolic links in FTP directory scan
This commit fixes a bug where symbolic links were incorrectly categorized as directories during FTP directory scans. By updating the scandir method, we ensure that symbolic links are now correctly excluded as files, maintaining the accuracy of our file and directory classification."
f26efe57b3dd44192d50ef1af3befe01a03c7bf6,apache/ant,,"File: src/testcases/org/apache/tools/ant/taskdefs/StyleTest.java
Status: modified
```diff
@@ -65,7 +65,7 @@
 
 
 /**
- * TestCases fuer <style> / <xslt> task.
+ * TestCases for <style> / <xslt> task.
  * @author Jan Materne
  * @version 2003-08-05
  */
```",typo - sort of,4,4,4,3,fix typo in javadoc,4,4,4,4,Style: Corrected language in comment Changed the language of a comment in the StyleTest.java file from German to English for better understanding.,0,2,4,4,"style: Update comment language to English
Updated the comment language in StyleTest.java to English for consistency and readability."
443bf819ed21ca24bcdf71d48e0c2fbc8cd1be3d,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/SQLExec.java
Status: modified
```diff
@@ -554,7 +554,7 @@ protected void execSQL(String sql, PrintStream out) throws SQLException {
                 ret = statement.getMoreResults();
                 updateCount = statement.getUpdateCount();
                 resultSet = statement.getResultSet();
-            } while ((resultSet != null) || (updateCount != -1));
+            } while (ret);
 
             log(updateCountTotal + "" rows affected"",
                 Project.MSG_VERBOSE);
```",Make SQL task work under Oracle,4,2,4,4,remove unnecessary code,0,0,4,4,Refactor: Modify loop condition in execSQL method This commit modifies the condition in the do-while loop in the execSQL method of the SQLExec.java file. The change is a refactor aimed at improving the structure or readability of the code. The execSQL method is responsible for executing a SQL statement and handling any SQL warnings or errors. The modification might affect how the method handles the SQL execution._x001B_[0m,4,4,4,4,"fix: Update loop condition to correctly handle multiple result sets
This fix addresses a bug in the `execSQL` method where it would incorrectly terminate when handling multiple result sets. The updated loop condition ensures that the method correctly processes all results, providing accurate output to the user."
efef302a3da9a9e063da729c92f6f2b997884a9a,apache/ant,,"File: src/main/org/apache/tools/ant/util/ScriptRunner.java
Status: modified
```diff
@@ -139,7 +139,15 @@ public void executeScript(String execName) throws BuildException {
             for (Iterator i = beans.keySet().iterator(); i.hasNext();) {
                 String key = (String) i.next();
                 Object value = beans.get(key);
-                manager.declareBean(key, value, value.getClass());
+                if (value != null) {
+                    manager.declareBean(key, value, value.getClass());
+                } else {
+                    // BSF uses a hashtable to store values
+                    // so cannot declareBean with a null value
+                    // So need to remove any bean of this name as
+                    // that bean should not be visible
+                    manager.undeclareBean(key);
+                }
             }
 
             // execute the script
```",Allow references and properties to be null without causing NPE in BSF,4,1,4,3,fix npe in ScriptRunner,4,2,4,4,"Fix: Add null check before declaring a bean in ScriptRunner In the `executeScript(String execName)` method of `ScriptRunner.java`, a null check is added before declaring a bean. If the value is null, the bean is undeclared. This change is made to ensure that the script is executed using the beanshell scripting framework.",4,3,4,4,"fix: Declare beans correctly when value is null
This change fixes a bug in ScriptRunner where declareBean was called with null values, which is not allowed by the Bean Scripting Framework (BSF). Now, when a null value is encountered, the corresponding bean is undeclared to maintain consistency with BSF's behavior."
1a5baa2ad88ff04ee5ffa0d12774bb824ae78082,apache/ant,,"File: src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java
Status: modified
```diff
@@ -130,7 +130,7 @@ public void targetStarted(BuildEvent event) {
             // Since task log category includes target, we don't really
             // need this message
             realLog(log, ""Start: "" + event.getTarget().getName(),
-                    Project.MSG_DEBUG, null);
+                    Project.MSG_VERBOSE, null);
         }
     }
 
```",raise log level of targets to match that of task events,4,4,4,4,fix checkstyle error,0,0,4,4,"Refactor: Change logging level in targetStarted method The logging level in the `targetStarted` method of the `CommonsLoggingListener` class has been changed from `Project.MSG_DEBUG` to `Project.MSG_VERBOSE`. This is a refactor commit, meaning the code has been changed to improve its internal structure without altering its external behavior. The functionality of the `targetStarted` method, which logs the start of a target during a build process, remains the same.",4,4,4,4,"refactor: Adjust logging level for target started event
Updated logging level for 'target started' event from DEBUG to VERBOSE, providing more user feedback. This refactoring improves logging informativeness without affecting CommonsLoggingListener's observable behavior."
2bc2f8e4fa99ff51eaec0156d0a7a97bad5eab53,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/EchoXML.java
Status: modified
```diff
@@ -32,10 +32,8 @@
 
 /**
  * Echo XML.
- * Notice how this is a ProjectComponent and not a task, which means that certain
- * well-known task operations (such as {@link org.apache.tools.ant.Task#getLocation()}) do not work.
  *
- * Other limitations
+ * Known limitations:
  * <ol>
  * <li>Currently no XMLNS support</li>
  * <li>Processing Instructions get ignored</li>
@@ -46,7 +44,6 @@
  */
 public class EchoXML extends XMLFragment {
 
-
     private File file;
     private boolean append;
     public static final String ERROR_NO_XML = ""No nested XML specified"";
```",Remove Steve's complaint ;) after Stefan and Peter's recent Location changes,1,0,4,4,fix a typo in javadoc,0,0,4,4,"Style: Refactor comments in EchoXML.java This commit refactors the comments in the EchoXML.java file for better readability and understanding. A line of code has also been removed. The functionality of the EchoXML class, which writes XML content to a specified file or log, remains unchanged.",4,4,2,4,"style: Remove redundant comments in EchoXML.java
Removed redundant comments in EchoXML.java, including obsolete notes on ProjectComponent and task operations, and reformatted the 'Known limitations' section for better readability. This change does not affect the class's functionality."
a2cedaed6c1a36e3550cc939393a9d77b3bb28ac,apache/ant,,"File: src/main/org/apache/tools/ant/util/depend/bcel/FullAnalyzer.java
Status: modified
```diff
@@ -24,6 +24,7 @@
 import org.apache.bcel.classfile.ClassParser;
 import org.apache.bcel.classfile.DescendingVisitor;
 import org.apache.bcel.classfile.JavaClass;
+import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.util.depend.AbstractAnalyzer;
 
 /**
@@ -41,8 +42,13 @@ public FullAnalyzer() {
         // force BCEL classes to load now
         try {
             new ClassParser(""force"");
-        } catch (IOException e) {
-            // ignore
+        } catch (Exception e) {
+            // all released versions of BCEL may throw an IOException
+            // here, but BCEL's trunk does no longer declare to do so
+            if (!(e instanceof IOException)) {
+                throw new BuildException(e);
+            }
+            // ignore IOException like we've always done
         }
     }
 
```",Same fix as for AncestorAnalyzer - make code compile with BCEL's trunk,2,3,4,4,don t throw exceptions in FullAnalyzer,0,0,4,3,"Fix: Improve exception handling in FullAnalyzer constructor In the FullAnalyzer class, the exception handling in the constructor has been improved. Previously, only IOExceptions were caught and ignored. Now, all exceptions are caught, and if the exception is not an IOException, a BuildException is thrown. This change ensures that unexpected exceptions do not go unnoticed, improving the robustness of the FullAnalyzer class, which is responsible for analyzing and determining all class-class dependencies in a Java application.",4,4,4,4,"fix: Handle non-IOException exceptions in FullAnalyzer's class loading
This change updates the exception handling in FullAnalyzer's class loading to throw a BuildException for non-IOException exceptions, ensuring that unexpected errors are properly propagated and handled."
0b3dbe0ca84c2239ed930097c355bc7896d2e1c0,apache/ant,,"File: src/tests/junit/org/apache/tools/ant/types/RedirectorElementTest.java
Status: modified
```diff
@@ -32,7 +32,7 @@ public void setUp() {
 
     public void test1() {
         executeTarget(""test1"");
-        assertTrue((getProject().getReference(""test1"")
+        assertTrue((getProject().<Object> getReference(""test1"")
             instanceof RedirectorElement));
     }
 
```","this kind of problem should be rare and should only affect recompiles, thus doesn't impact drop-in BC",0,0,3,4,fix failing test,4,2,4,4,"Refactor: Add type casting to getReference() method call in test1() In the `test1()` method of the `RedirectorElementTest.java` file, a type casting was added to the `getReference()` method call. This change improves the readability of the code without altering its functionality. The method tests if the project reference ""test1"" is an instance of RedirectorElement.",4,4,4,4,"refactor: Specify type parameter for getReference
Specified type parameter for getReference method to avoid raw type usage, ensuring correct type inference and making the test more robust."
6cd989e534dd52130f932ce04d3ca8aafe387cc9,apache/ant,,"File: src/main/org/apache/tools/ant/util/JavaEnvUtils.java
Status: modified
```diff
@@ -187,8 +187,12 @@ private JavaEnvUtils() {
             javaVersionNumber = VERSION_9;
             // at least Java9 and this should properly support the purely numeric version property
             String v = System.getProperty(""java.specification.version"");
-            javaVersionNumber = Integer.parseInt(v) * 10;
-            javaVersion = v;
+            DeweyDecimal pv = new DeweyDecimal(v);
+            javaVersionNumber = pv.get(0) * 10;
+            if (pv.getSize() > 1) {
+                javaVersionNumber += pv.get(1);
+            }
+            javaVersion = pv.toString();
         } catch (Throwable t) {
             // swallow as we've hit the max class version that
             // we have
```",deal with theoretical case of version scheme changing again,0,1,3,4,catch Throwable instead of DeweyDecimal,0,0,4,4,Refactor: Improved parsing and storing of java version number The parsing and storing of the java version number in JavaEnvUtils.java has been refactored. The java version number is now parsed using the DeweyDecimal class and stored as a string. This change improves the accuracy and readability of the java version number.,4,4,4,4,"refactor: Improve Java version number parsing
Replaced integer parsing with DeweyDecimal to accurately handle complex Java version numbers, such as those with multiple numeric parts."
9509706d70325bfd6a8f62b036d833f2fa0670db,apache/ant,,"File: src/tests/junit/org/apache/tools/ant/taskdefs/optional/PropertyFileTest.java
Status: modified
```diff
@@ -158,7 +158,7 @@ public void testDirect() throws Exception {
 
         Properties props = getTestProperties();
         LocalDate currentDate = LocalDate.now().plusDays(delta);
-        assertEquals(String.format(""%d/%02d/%d"", currentDate.getYear(), currentDate.getMonthValue(),
+        assertEquals(String.format(""%d/%02d/%02d"", currentDate.getYear(), currentDate.getMonthValue(),
                 currentDate.getDayOfMonth()), props.getProperty(""date""));
     }
 
```",Correct date formatting,4,4,4,4,fix the test,1,1,4,4,"Fix: Corrected date format in PropertyFileTest The testDirect() method in the PropertyFileTest class had an incorrect date format in the assertEquals method. The format was changed from ""%d/%02d/%d"" to ""%d/%02d/%02d"" to correctly represent the date. This change ensures that the test accurately checks the functionality of the PropertyFile class.",4,4,4,4,"fix: fix: Pad month and day with leading zeros in PropertyFileTest
Updated the date format in the testDirect method to include leading zeros for month and day, ensuring accurate date representation in PropertyFileTest. This change fixes the issue where dates were not properly formatted, leading to potential errors in the test results."
ce29219ee6409b111ce8f8191b1792c2b65a04a8,apache/archiva,Y,"File: maven-repository-proxy/src/test/java/org/apache/maven/repository/proxy/DefaultProxyManagerTest.java
Status: modified
```diff
@@ -43,7 +43,7 @@ protected void setUp()
 
         proxy = (ProxyManager) container.lookup( ProxyManager.ROLE );
 
-        configuration = getTestConfiguration();
+        configuration = getProxyConfiguration();
         proxy.setConfiguration( configuration );
     }
 
@@ -134,7 +134,7 @@ protected void tearDown()
         super.tearDown();
     }
 
-    private ProxyConfiguration getTestConfiguration()
+    private ProxyConfiguration getProxyConfiguration()
         throws ComponentLookupException
     {
         ProxyConfiguration config = new ProxyConfiguration();
```


File: maven-repository-proxy/src/test/java/org/apache/maven/repository/proxy/LegacyProxyManagerTest.java
Status: modified
```diff
@@ -43,7 +43,7 @@ protected void setUp()
 
         proxy = (ProxyManager) container.lookup( ProxyManager.ROLE );
 
-        configuration = getTestConfiguration();
+        configuration = getProxyConfiguration();
         proxy.setConfiguration( configuration );
     }
 
@@ -134,7 +134,7 @@ protected void tearDown()
         super.tearDown();
     }
 
-    private ProxyConfiguration getTestConfiguration()
+    private ProxyConfiguration getProxyConfiguration()
         throws ComponentLookupException
     {
         ProxyConfiguration config = new ProxyConfiguration();
```",change required after plexus update,1,0,3,3,renamed getTestConfiguration to getProxyConfiguration,4,4,4,4,"Refactor: Rename method to better reflect its functionality In the files `DefaultProxyManagerTest.java` and `LegacyProxyManagerTest.java`, the method `getTestConfiguration()` has been renamed to `getProxyConfiguration()`. This change does not alter the functionality of the `setUp()` method where it is used, but provides a more accurate description of the method's purpose, which is to create and return a proxy configuration for testing purposes.",4,4,4,4,"refactor: Unify configuration setup in test classes
This commit refactors the configuration setup in test classes by introducing a new `getProxyConfiguration()` method, replacing the previous `getTestConfiguration()` methods. This change simplifies and unifies the setup process across `DefaultProxyManagerTest` and `LegacyProxyManagerTest` classes."
6987e689ecc1c522d53cb661fa7842284807f471,apache/archiva,,"File: archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/browsing/DefaultRepositoryBrowsing.java
Status: modified
```diff
@@ -212,8 +212,6 @@ private void processSnapshots( List<String> versions )
     {
         Map<String, String> snapshots = new HashMap<String, String>();
 
-        log.info( ""Processing snapshots."" );
-
         for ( String version : versions )
         {
             if ( VersionUtil.isSnapshot( version ) )
```",Remove useless logging,4,4,4,4,remove debug logging,4,4,4,4,"Refactor: Remove logging statement from processSnapshots method The logging statement ""Processing snapshots."" has been removed from the processSnapshots method in the DefaultRepositoryBrowsing class. This change is part of a refactoring effort to improve the code quality.",3,4,4,4,"refactor: Remove unnecessary log statement in DefaultRepositoryBrowsing
Removed unnecessary log statement to improve code clarity and reduce logging noise. This change has no impact on the observable behavior of DefaultRepositoryBrowsing."
397e88dac8af348973197806c92cbc329aefd4c2,apache/archiva,,"File: archiva-modules/archiva-web/archiva-rest/archiva-rest-api/src/main/java/org/apache/archiva/rest/api/services/RepositoriesService.java
Status: modified
```diff
@@ -100,6 +100,7 @@ Boolean scheduleDownloadRemoteIndex( @QueryParam( ""repositoryId"" ) String reposi
     @RedbackAuthorization( noPermission = true )
     /**
      * permission are checked in impl
+     * @since 1.4-M2
      */
     Boolean deleteArtifact( @QueryParam( """" ) Artifact artifact, @QueryParam( ""repositoryId"" ) String repositoryId )
         throws ArchivaRestServiceException;
```",add @SInCE for new method,4,4,4,4,add missing javadoc,3,4,4,4,Style: Add comment to `deleteArtifact` method in `RepositoriesService.java` A comment line has been added to the `deleteArtifact` method in the `RepositoriesService.java` file. The comment indicates that permissions are checked in the implementation of the method. This change does not affect the functionality of the code.,4,3,3,4,"feat: Add @since 1.4-M2 annotation to deleteArtifact method
Added @since 1.4-M2 annotation to the deleteArtifact method in RepositoriesService, ensuring accurate version tracking and facilitating future maintenance."
f52bade117210719e138910be18fd2001ffd25a2,apache/archiva,,"File: archiva-modules/archiva-scheduler/archiva-scheduler-repository/src/test/java/org/apache/archiva/scheduler/repository/ArchivaRepositoryScanningTaskExecutorAbstractTest.java
Status: modified
```diff
@@ -40,6 +40,7 @@
 import org.apache.archiva.test.utils.ArchivaSpringJUnit4ClassRunner;
 
 import static org.mockito.Mockito.mock;
+import org.springframework.test.annotation.DirtiesContext;
 
 /**
  * ArchivaRepositoryScanningTaskExecutorPhase1Test
@@ -48,6 +49,7 @@
  */
 @RunWith( ArchivaSpringJUnit4ClassRunner.class )
 @ContextConfiguration( locations = { ""classpath*:/META-INF/spring-context.xml"", ""classpath:/spring-context.xml"" } )
+@DirtiesContext( classMode= DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD )
 public abstract class ArchivaRepositoryScanningTaskExecutorAbstractTest
     extends TestCase
 {
```",repository scanning test fix for idependance,3,4,3,3,add missing dirtiescontext,3,3,4,4,Feat: Add @DirtiesContext annotation to ArchivaRepositoryScanningTaskExecutorAbstractTest This commit adds the @DirtiesContext annotation to the ArchivaRepositoryScanningTaskExecutorAbstractTest class. This annotation is used to indicate that the Spring ApplicationContext should be dirtied and thus automatically closed after each test method. This is typically used when a test method dirties the context.,4,4,4,4,"refactor: Enable test context dirtying for ArchivaRepositoryScanningTaskExecutorAbstractTest
Enabled test context dirtying to prevent test failures caused by shared context between test methods, ensuring reliable test results for ArchivaRepositoryScanningTaskExecutorAbstractTest."
a9ebba65acafda26696d1ade1a19e909d93e8385,apache/archiva,,"File: archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/test/java/org/apache/archiva/admin/repository/AbstractRepositoryAdminTest.java
Status: modified
```diff
@@ -27,17 +27,21 @@
 import org.apache.archiva.admin.model.proxyconnector.ProxyConnectorAdmin;
 import org.apache.archiva.admin.model.proxyconnectorrule.ProxyConnectorRuleAdmin;
 import org.apache.archiva.admin.model.remote.RemoteRepositoryAdmin;
+import org.apache.archiva.configuration.ArchivaConfiguration;
 import org.apache.archiva.redback.role.RoleManager;
 import org.apache.archiva.redback.users.User;
 import org.apache.archiva.redback.users.memory.SimpleUser;
 import org.apache.archiva.test.utils.ArchivaSpringJUnit4ClassRunner;
 import org.apache.commons.lang.StringUtils;
+import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.runner.RunWith;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.test.context.ContextConfiguration;
 
 import javax.inject.Inject;
+import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -77,6 +81,23 @@ public abstract class AbstractRepositoryAdminTest
     @Inject
     protected ProxyConnectorRuleAdmin proxyConnectorRuleAdmin;
 
+    @Inject
+    private ArchivaConfiguration archivaConfiguration;
+
+    @Before
+    public void initialize() {
+        Path confFile = Paths.get(APPSERVER_BASE_PATH, ""conf/archiva.xml"");
+        try
+        {
+            Files.deleteIfExists( confFile );
+            archivaConfiguration.reload();
+        }
+        catch ( IOException e )
+        {
+            // ignore
+        }
+    }
+
     protected AuditInformation getFakeAuditInformation()
     {
         AuditInformation auditInformation = new AuditInformation( getFakeUser(), ""archiva-localhost"" );
```",Adding config file removal before tests,0,4,4,4,add support for delete,1,1,4,3,Feat: Add initialize method in AbstractRepositoryAdminTest This commit adds a new method 'initialize' in the AbstractRepositoryAdminTest.java file. The method is used to set up the test environment before each test. It deletes the existing configuration file if it exists and reloads the configuration. This ensures that the test environment is properly set up for each test case.,4,4,4,4,"refactor: Add initialize method to reset archiva configuration before each test
Ensure test isolation by introducing an initialize method to reset archiva configuration, allowing for reliable testing of repository administration functionality."
a024df32a4005fa32ef5314418aabe124a45516c,apache/archiva,,"File: archiva-modules/archiva-maven/archiva-maven-repository/src/main/java/org/apache/archiva/repository/maven2/MavenRepositoryProvider.java
Status: modified
```diff
@@ -248,8 +248,10 @@ public void updateRemoteInstance(EditableRemoteRepository repo, RemoteRepository
     @Override
     public RepositoryGroup createRepositoryGroup(RepositoryGroupConfiguration configuration) throws RepositoryException {
         Path repositoryGroupBase = getArchivaConfiguration().getRepositoryGroupBaseDir();
-        return new MavenRepositoryGroup(configuration.getId(), configuration.getId(),
+        MavenRepositoryGroup newGrp = new MavenRepositoryGroup(configuration.getId(), configuration.getName(),
                 repositoryGroupBase, fileLockManager);
+        updateRepositoryGroupInstance(newGrp, configuration);
+        return newGrp;
     }
 
     @Override
@@ -444,4 +446,8 @@ public void setArchivaConfiguration(ArchivaConfiguration archivaConfiguration) {
     public <T> void raise(RepositoryEvent<T> event) {
         //
     }
+
+    public void setRepositoryRegistry(RepositoryRegistry reg) {
+        this.repositoryRegistry = reg;
+    }
 }
```",Fixing repository group implementation,4,4,4,4,fix the build,1,2,4,4,Feat: Update 'createRepositoryGroup' method and add 'setRepositoryRegistry' method This commit updates the 'createRepositoryGroup' method in the 'MavenRepositoryProvider' class to create a new repository group with the given configuration. It also adds a new method 'setRepositoryRegistry' to set the repository registry. These changes enhance the functionality of the 'MavenRepositoryProvider' class._x001B_[0m,4,4,4,4,"refactor: Refactor MavenRepositoryProvider to use RepositoryRegistry
Refactored MavenRepositoryProvider to utilize RepositoryRegistry, enhancing the internal structure by decoupling repository group creation from Archiva configuration and introducing dependency injection through setRepositoryRegistry. This change improves the system's modularity and flexibility."
b0f88c3970d09a01c17016a7b8b9dee001d4dac7,apache/aries,,"File: blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
Status: modified
```diff
@@ -220,11 +220,16 @@ private Object getService() throws InterruptedException {
                   } 
                   
                   if (failed) {
-                    LOGGER.info(""Timeout expired when waiting for OSGi service {}"", getOsgiFilter());
-                    throw new ServiceUnavailableException(""Timeout expired when waiting for OSGi service"", getOsgiFilter());
+                    if (metadata.getAvailability() == ServiceReferenceMetadata.AVAILABILITY_MANDATORY) {
+                        LOGGER.info(""Timeout expired when waiting for mandatory OSGi service reference {}"", getOsgiFilter());
+                        throw new ServiceUnavailableException(""Timeout expired when waiting for mandatory OSGi service reference: "" + getOsgiFilter(), getOsgiFilter());
+                    } else {
+                        LOGGER.info(""No matching service for optional OSGi service reference {}"", getOsgiFilter());
+                        throw new ServiceUnavailableException(""No matching service for optional OSGi service reference: "" + getOsgiFilter(), getOsgiFilter());
+                    }
                   }
                 } else {
-                    throw new ServiceUnavailableException(""The Blueprint container is being or has been destroyed"", getOsgiFilter());
+                    throw new ServiceUnavailableException(""The Blueprint container is being or has been destroyed: "" + getOsgiFilter(), getOsgiFilter());
                 }
             } else {
             
```",Improve timeout exception when an osgi service can't be found,4,4,4,4,improve error message for ReferenceRecipe,4,4,4,4,"Fix: Handle different types of service availability in `getService()` In the `getService()` method of the `ReferenceRecipe.java` file, conditions have been added to handle different types of service availability. If the service is mandatory and not available, an exception is thrown after waiting for a specified timeout period. If the service is optional and not available, an exception is thrown immediately. This fix ensures that the method behaves correctly for different types of service availability.",3,2,2,4,"fix: Distinguish between mandatory and optional OSGi service references on timeout
This change improves the reliability and diagnostics of OSGi service reference handling by distinguishing between mandatory and optional references on timeout. It enhances the error messages to provide more context, enabling developers to better understand and troubleshoot service availability issues."
796af68ef69e7c40c41866afe6176d29feffae8a,apache/beam,,"File: sdk/src/test/java/com/google/cloud/dataflow/sdk/io/AvroSourceTest.java
Status: modified
```diff
@@ -47,7 +47,6 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.PushbackInputStream;
-import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
@@ -231,7 +230,7 @@ public void testMultipleFiles() throws Exception {
     }
 
     AvroSource<Bird> source =
-        AvroSource.from(Paths.get(tmpFolder.getRoot().toString(), baseName + ""*"").toString())
+        AvroSource.from(new File(tmpFolder.getRoot().toString(), baseName + ""*"").toString())
             .withSchema(Bird.class);
     List<Bird> actual = SourceTestUtils.readFromSource(source, null);
     assertThat(actual, containsInAnyOrder(expected.toArray()));
```","Fix an invalid path on Windows platforms Paths.get calls the platform's Filesystem.getPath, which validates that the path contains legal characters for file names. Since * is an illegal character for Windows, Paths.get can't be used for globs.",4,4,4,4,fix broken test,2,2,4,4,"Fix: Update path creation in testMultipleFiles method In the testMultipleFiles method of the AvroSourceTest.java file, the path to the AvroSource has been updated. Previously, the path was created using Paths.get(), but this has been changed to use new File(). This change ensures that the AvroSource can correctly read from multiple Avro files.",4,4,4,4,"fix: Fix AvroSourceTest to use File instead of Paths.get
""Replaced Paths.get with File in AvroSourceTest's testMultipleFiles method to fix the file path construction. This change is a minor refactoring as part of the initial Dataflow code drop to Apache Beam."""
4fa7bd3ab96975ff1618a01f0b2920d15fb46efb,apache/beam,,"File: sdk/src/main/java/com/google/cloud/dataflow/sdk/io/BigQueryIO.java
Status: modified
```diff
@@ -31,6 +31,8 @@
 import com.google.cloud.dataflow.sdk.coders.TableRowJsonCoder;
 import com.google.cloud.dataflow.sdk.coders.VarIntCoder;
 import com.google.cloud.dataflow.sdk.coders.VoidCoder;
+import com.google.cloud.dataflow.sdk.io.BigQueryIO.Write.CreateDisposition;
+import com.google.cloud.dataflow.sdk.io.BigQueryIO.Write.WriteDisposition;
 import com.google.cloud.dataflow.sdk.options.BigQueryOptions;
 import com.google.cloud.dataflow.sdk.options.GcpOptions;
 import com.google.cloud.dataflow.sdk.runners.DirectPipelineRunner;
@@ -1086,7 +1088,8 @@ public TableReference getOrCreateTable(BigQueryOptions options, String tableSpec
             TableSchema tableSchema = JSON_FACTORY.fromString(jsonTableSchema, TableSchema.class);
             Bigquery client = Transport.newBigQueryClient(options).build();
             BigQueryTableInserter inserter = new BigQueryTableInserter(client);
-            inserter.tryCreateTable(tableReference, tableSchema);
+            inserter.getOrCreateTable(tableReference, WriteDisposition.WRITE_APPEND,
+                CreateDisposition.CREATE_IF_NEEDED, tableSchema);
             createdTables.add(tableSpec);
           }
         }
```","StreamingWriteFn: check if table exists before creating In StreamingWriteFn, every worker tries to create the table without checking beforehand whether the table exists. This behavior can lead to temporarily violating the BigQuery API quota limits on table.insert:",4,4,3,4,fix bug in BigQueryIO,2,2,4,4,"Feat: Modify getOrCreateTable method in BigQueryIO.java This commit modifies the `getOrCreateTable` method in the `BigQueryIO.java` file. The method now checks if a BigQuery table exists based on the provided table specification. If the table does not exist, it creates a new one. This method is thread-safe.",4,4,4,4,"refactor: Use WriteDisposition and CreateDisposition when creating BigQuery tables
This commit refactors BigQueryIO to use WriteDisposition and CreateDisposition when creating BigQuery tables, ensuring thread-safety and avoiding duplicate creation attempts. This change improves the internal structure of the class, making it easier to understand and modify."
9ed1465699d017e1ea35771ca46ef8fd2fb498c3,apache/beam,Y,"File: sdks/java/core/src/main/java/com/google/cloud/dataflow/sdk/options/DataflowPipelineWorkerPoolOptions.java
Status: modified
```diff
@@ -149,7 +149,10 @@ public String create(PipelineOptions options) {
    * GCE <a href=""https://cloud.google.com/compute/docs/networking"">subnetwork</a> for launching
    * workers.
    *
-   * <p>Default is up to the Dataflow service. Expected format is zones/ZONE/subnetworks/SUBNETWORK.
+   * <p>Default is up to the Dataflow service. Expected format is
+   * regions/REGION/subnetworks/SUBNETWORK.
+   *
+   * <p>You may also need to specify network option.
    */
   @Description(""GCE subnetwork for launching workers. For more information, see the reference ""
       + ""documentation https://cloud.google.com/compute/docs/networking. ""
```


File: sdks/java/core/src/test/java/com/google/cloud/dataflow/sdk/runners/DataflowPipelineTranslatorTest.java
Status: modified
```diff
@@ -238,7 +238,7 @@ public void testNetworkConfigMissing() throws IOException {
 
   @Test
   public void testSubnetworkConfig() throws IOException {
-    final String testSubnetwork = ""zones/ZONE/subnetworks/SUBNETWORK"";
+    final String testSubnetwork = ""regions/REGION/subnetworks/SUBNETWORK"";
 
     DataflowPipelineOptions options = buildPipelineOptions();
     options.setSubnetwork(testSubnetwork);
```",Correct URL for subnetwork,4,4,4,4,fix typo in javadoc,0,0,4,4,Refactor: Update GCE subnetwork description and test This commit updates the description of the GCE subnetwork for launching workers in `DataflowPipelineWorkerPoolOptions.java` and modifies the `testSubnetworkConfig()` method in `DataflowPipelineTranslatorTest.java` to test if the subnetwork configuration is correctly set in the pipeline options and properly reflected in the job environment. The changes are part of a refactor and do not alter the functionality of the code.,4,4,4,4,"fix: Fix subnetwork format in DataflowPipelineWorkerPoolOptions to use regions instead of zones
This commit updates the subnetwork format in DataflowPipelineWorkerPoolOptions to use regions instead of zones, as per the GCE subnetwork format specification. The corresponding testSubnetworkConfig method in DataflowPipelineTranslatorTest is also updated to reflect this change, ensuring accurate subnetwork configuration and correct propagation to the job environment."
07544ef3a47bbdfacc00c75af875c3533a5fe477,apache/beam,,"File: runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java
Status: modified
```diff
@@ -2360,8 +2360,8 @@ public final PCollection<T> apply(PBegin input) {
   }
 
   /**
-   * A specialized {@link DoFn} for writing the contents of a {@link PCollection}
-   * to a streaming {@link PCollectionView} backend implementation.
+   * A marker {@link DoFn} for writing the contents of a {@link PCollection} to a streaming
+   * {@link PCollectionView} backend implementation.
    */
   @Deprecated
   public static class StreamingPCollectionViewWriterFn<T>
@@ -2389,13 +2389,9 @@ public Coder<T> getDataCoder() {
 
     @Override
     public void processElement(ProcessContext c) throws Exception {
-      List<WindowedValue<T>> output = new ArrayList<>();
-      for (T elem : c.element()) {
-        output.add(WindowedValue.of(elem, c.timestamp(), c.window(), c.pane()));
-      }
-
-      c.windowingInternals().writePCollectionViewData(
-          view.getTagInternal(), output, dataCoder);
+      throw new UnsupportedOperationException(
+          String.format(
+              ""%s is a marker class only and should never be executed."", getClass().getName()));
     }
   }
 
```",Remove unused body of StreamingPCollectionViewWriterFn,4,3,4,4,remove unnecessary code,4,2,4,4,"Refactor: Deprecate functionality of StreamingPCollectionViewWriterFn class The processElement(ProcessContext c) method in the StreamingPCollectionViewWriterFn class has been significantly refactored. The previous implementation, which processed each element in the input PCollection and ensured that there is only one element per window for a singleton, has been removed. Now, the method throws an UnsupportedOperationException, indicating that this class is intended to be a marker class and should not be executed. This change is consistent with the updated comments for the StreamingPCollectionViewWriterFn class.",4,4,4,4,"fix: fix: deprecate StreamingPCollectionViewWriterFn.processElement
Mark StreamingPCollectionViewWriterFn.processElement as deprecated by throwing an UnsupportedOperationException, indicating it's a marker class not intended for execution. This change prevents accidental usage and ensures clarity on its purpose."
916fe65e5d63981026c132454ffbc56c3d0f1ca8,apache/beam,,"File: sdks/java/io/hbase/src/test/java/org/apache/beam/sdk/io/hbase/HBaseIOTest.java
Status: modified
```diff
@@ -25,10 +25,8 @@
 import static org.junit.Assert.assertThat;
 
 import com.google.protobuf.ByteString;
-
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.beam.sdk.Pipeline;
 import org.apache.beam.sdk.io.BoundedSource;
 import org.apache.beam.sdk.io.hbase.HBaseIO.HBaseSource;
@@ -68,6 +66,7 @@
 import org.hamcrest.Matchers;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
@@ -78,6 +77,7 @@
 /**
  * Test HBaseIO.
  */
+@Ignore
 @RunWith(JUnit4.class)
 public class HBaseIOTest {
     @Rule public final transient TestPipeline p = TestPipeline.create();
```",Ignore HBaseIOTest temporarily,0,4,4,4,ignore failing HBaseIOTest,2,4,4,4,"Fix: Ignore HBaseIOTest and clean up imports In this commit, the HBaseIOTest class is annotated with @Ignore, indicating that the tests in this class are not to be executed. Additionally, some unused import statements are removed to clean up the code.",4,4,4,4,"fix: Disable HBaseIOTest until further investigation
To temporarily disable HBaseIOTest due to unknown test failures, allowing precommit and postcommit Maven install to pass, while investigation and resolution of the underlying issue are pending. This change is a temporary workaround to restore signal for CI pipelines, and a thorough investigation will be conducted to identify and fix the root cause of the test failure."
b92b96643732b05326150decace502194656662c,apache/beam,,"File: sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Regex.java
Status: modified
```diff
@@ -710,7 +710,8 @@ public void processElement(ProcessContext c) throws Exception {
 
   /**
    * {@code Regex.Find<String>} takes a {@code PCollection<String>} and returns a {@code
-   * PCollection<String>} representing the value extracted from the Regex groups of the input {@code
+   * PCollection<List<String>>} representing the value extracted from the
+   * Regex groups of the input {@code
    * PCollection} to the number of times that element occurs in the input.
    *
    * <p>This transform runs a Regex on the entire input line. If a portion of the line does not
@@ -721,8 +722,8 @@ public void processElement(ProcessContext c) throws Exception {
    *
    * <pre>{@code
    * PCollection<String> words = ...;
-   * PCollection<String> values =
-   *     words.apply(Regex.find(""myregex (mygroup)""));
+   * PCollection<List<String>> values =
+   *     words.apply(Regex.findAll(""myregex (mygroup)""));
    * }</pre>
    */
   public static class FindAll extends PTransform<PCollection<String>, PCollection<List<String>>> {
```",Fix Regex#FindAll javadoc,4,4,4,4,fix javadoc warnings,3,2,4,4,Feat: Update method documentation and example in Regex.java This commit updates the method documentation and example usage in the `Regex.java` file. The return type in the documentation has been corrected to `PCollection<List<String>>` and the example usage has been updated accordingly.,0,2,4,4,"refactor: Change return type of Regex.FindAll to PCollection<List<String>>
Updated `Regex.FindAll` return type to `PCollection<List<String>>` to correctly represent the extracted values from Regex groups, enhancing type safety and clarity in the `Regex` class."
059b351e58ab746ee699ee5d8ff746a27ec7586e,apache/beam,,"File: sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/PassThroughThenCleanup.java
Status: modified
```diff
@@ -53,9 +53,9 @@ public PCollection<T> expand(PCollection<T> input) {
     PCollectionTuple outputs = input.apply(ParDo.of(new IdentityFn<T>())
         .withOutputTags(mainOutput, TupleTagList.of(cleanupSignal)));
 
-    PCollectionView<Void> cleanupSignalView = outputs.get(cleanupSignal)
+    PCollectionView<Iterable<Void>> cleanupSignalView = outputs.get(cleanupSignal)
         .setCoder(VoidCoder.of())
-        .apply(View.<Void>asSingleton().withDefaultValue(null));
+        .apply(View.<Void>asIterable());
 
     input.getPipeline()
         .apply(""Create(CleanupOperation)"", Create.of(cleanupOperation))
```",BigQuery: swap from asSingleton to asIterable for Cleanup asIterable can be simpler for runners to implement as it does not require semantically that the PCollection being viewed contains exactly one element.,4,4,4,4,fix quality flaw,1,0,4,4,"Refactor: Change handling of cleanup signal in PassThroughThenCleanup In the `expand` method of the `PassThroughThenCleanup.java` file, the handling of the cleanup signal has been refactored. Previously, the cleanup signal was viewed as a singleton with a default value of null. Now, it is viewed as an iterable. This change does not alter the functionality of the method but changes its internal structure.",4,4,4,4,"refactor: Change cleanupSignalView to use asIterable instead of asSingleton
This refactoring replaces `asSingleton` with `asIterable` in `cleanupSignalView` to align with the expected type, improving code readability and maintainability without affecting the observable behavior of `PassThroughThenCleanup`."
bfb13b650d9e34270fc171427aede11a57de7d1b,apache/beam,,"File: sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java
Status: modified
```diff
@@ -173,7 +173,7 @@ public <T> void output(
     if (rowParameter != null) {
       checkArgument(schemaCoder != null,
           ""Cannot access object as a row if the input PCollection does not have a schema .""
-              + ""DoFn "" + doFn.getClass() + "" Coder "" + inputCoder.getClass());
+              + ""DoFn "" + context.doFn.getClass() + "" Coder "" + context.inputCoder.getClass());
       String id = rowParameter.fieldAccessId();
       if (id == null) {
         // This is the case where no FieldId is defined, just an @Element Row row. Default to all
@@ -326,7 +326,7 @@ public OutputReceiver<Row> outputRowReceiver(DoFn<InputT, OutputT> doFn) {
 
     @Override
     public MultiOutputReceiver taggedOutputReceiver(DoFn<InputT, OutputT> doFn) {
-      return DoFnOutputReceivers.windowedMultiReceiver(this, outputCoders);
+      return DoFnOutputReceivers.windowedMultiReceiver(this, context.outputCoders);
     }
 
     @Override
```",Fixup after merge.,0,0,4,2,remove unnecessary cast,0,0,4,4,Refactor: Improve tagged output receiver in FnApiDoFnRunner This commit refactors the `taggedOutputReceiver` method in the `FnApiDoFnRunner.java` file. The changes ensure that the `MultiOutputReceiver` returned by the method outputs to the correct tagged output. This is an internal improvement that does not alter the external behavior of the code.,1,1,4,4,"refactor: Use context objects to retrieve DoFn and coders in FnApiDoFnRunner
This commit refactors FnApiDoFnRunner to use context objects for DoFn and coder retrieval, improving code maintainability. Updates include checkArgument method using context.doFn and context.inputCoder, and taggedOutputReceiver method using context.outputCoders. This change supports the implementation of basic end-to-end Schemas support, as part of [BEAM-4076]."
481e7c0a4075079f45a4c5ff2822092656d5be12,apache/beam,,"File: sdks/java/io/synthetic/src/main/java/org/apache/beam/sdk/io/synthetic/SyntheticStep.java
Status: modified
```diff
@@ -58,8 +58,9 @@ public class SyntheticStep extends DoFn<KV<byte[], byte[]>, KV<byte[], byte[]>>
   public SyntheticStep(Options options) {
     options.validate();
     this.options = options;
+    Random rand = new Random();
     // use a random id so that a pipeline could have multiple SyntheticSteps
-    this.idAndThroughput = KV.of(new Random().nextLong(), options.maxWorkerThroughput);
+    this.idAndThroughput = KV.of(rand.nextLong(), options.maxWorkerThroughput);
   }
 
   private KV<byte[], byte[]> outputElement(
```",Fixing findbugs issue,0,0,4,2,fix a bug in SyntheticStep,2,2,4,4,"Refactor: Improve random long generation in SyntheticStep constructor In the SyntheticStep class, the way a random long is generated for the idAndThroughput has been improved. A new Random object is now created and used to generate the random long. This is a refactoring change that does not affect the functionality of the SyntheticStep class, which is a parameterizable DoFn that consumes and emits KV pairs, introducing a configurable delay for each record.",4,4,4,4,"feat: Use a single Random instance in SyntheticStep constructor
Unified random id generation in SyntheticStep constructor to prevent potential inconsistencies and improve performance, ensuring a single Random instance is used throughout the step."
96fbd8ca7525a85292dbeaf559041a5277d8f8b8,apache/beam,,"File: sdks/java/extensions/euphoria/euphoria-beam/src/main/java/cz/seznam/euphoria/beam/ReduceByKeyTranslator.java
Status: modified
```diff
@@ -37,6 +37,7 @@
 import org.apache.beam.sdk.transforms.MapElements;
 import org.apache.beam.sdk.transforms.ParDo;
 import org.apache.beam.sdk.transforms.SimpleFunction;
+import org.apache.beam.sdk.transforms.windowing.AfterWatermark;
 
 /**
  * Translator for {@code ReduceByKey} operator.
@@ -70,6 +71,8 @@ private static <IN, KEY, VALUE, OUT, W extends Window<W>> PCollection<Pair<KEY,
       input = context.getInput(operator)
           .apply(org.apache.beam.sdk.transforms.windowing.Window.into(
               BeamWindowFn.wrap(operator.getWindowing()))
+          // FIXME: trigger
+          .triggering(AfterWatermark.pastEndOfWindow())
           .discardingFiredPanes()
           .withAllowedLateness(context.getAllowedLateness(operator)));
     }
```",[euphoria-beam] add trigger to window in RBK (missing correct trigger wrapper),4,4,4,4,fix a bug where ReduceByKeyTranslator was not being used in,2,3,4,4,"Fix: Added triggering method in ReduceByKeyTranslator This commit modifies the doTranslate method in the ReduceByKeyTranslator.java file to include a new triggering method. The method translates a ReduceByKey operator into a Beam transformation, extracting keys and values from the input data using provided functions. The new triggering method is added to the input of the transformation.",4,3,4,4,"refactor: Trigger ReduceByKeyTranslator's windowing with AfterWatermark
This refactoring enables windowing in ReduceByKeyTranslator using AfterWatermark, aligning with Apache Beam's windowing mechanism. The doTranslate method now applies the AfterWatermark trigger, enhancing the internal structure of the software for better maintainability and understandability."
41dfd846919f350d07e2e2ccd375d30c11545da8,apache/beam,,"File: runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferedElements.java
Status: modified
```diff
@@ -20,7 +20,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.util.Collections;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Objects;
 import org.apache.beam.runners.core.DoFnRunner;
@@ -158,7 +158,7 @@ public BufferedElement decode(InputStream inStream) throws IOException {
 
     @Override
     public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {
-      return Collections.emptyList();
+      return Arrays.asList(elementCoder, windowCoder);
     }
 
     @Override
```",Add Coder components for BufferedElement Coder,0,4,4,4,use Arrays asList instead of Collections,0,3,4,4,"Refactor: Update getCoderArguments() in BufferedElements.java The `getCoderArguments()` method in `BufferedElements.java` has been updated to return a list of coders for the elements and windows, instead of an empty list. This change improves the design of the existing code by providing the necessary coder arguments for the elements and windows.",4,4,4,4,"feat: Update getCoderArguments to return element and window coders
This change updates the `getCoderArguments` method to return the element coder and window coder, which are required for encoding and decoding the pipeline's data. This modification is part of the Flink Runner cleanup effort, as described in the associated pull request."
ae863d49a783d4e9fb0002f87ae195047614fce9,apache/beam,,"File: sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/ByteBuddyUtils.java
Status: modified
```diff
@@ -995,7 +995,13 @@ protected StackManipulation convertArray(TypeDescriptor<?> type) {
                   COLLECTION_TYPE
                       .getDeclaredMethods()
                       .filter(
-                          ElementMatchers.named(""toArray"").and(ElementMatchers.takesArguments(1)))
+                          ElementMatchers.named(""toArray"")
+                              .and(
+                                  ElementMatchers.takesArguments(
+                                      TypeDescription.Generic.Builder.rawType(Object.class)
+                                          .asArray()
+                                          .build()
+                                          .asErasure())))
                       .getOnly()),
               // Cast the result to T[].
               TypeCasting.to(arrayType));
```",Disambiguate method filter for toArray. Java 11 introduces additional overloads for the toArray method with one parameter.,4,4,4,4,add support for üòÖ,0,0,0,0,"Refactor: Enhance convertArray method in ByteBuddyUtils.java The convertArray method in ByteBuddyUtils.java has been refactored to improve its functionality. The method now converts a collection to an array, and if the array is of primitive types, it converts the array of boxed objects to an array of unboxed objects. This change enhances the method's ability to handle arrays of different types and improves the overall functionality of the ByteBuddyUtils class.",1,1,3,4,"fix: Fix toArray method ambiguity for Java 11
Resolves ambiguity in toArray method filtering by specifying the correct method signature, considering Java 11's additional overloads and handling primitive types and boxing/unboxing. This change addresses the issue reported in BEAM-9985."
f1c6846f1bcc15207927aa704a8091b768003c1a,apache/beam,,"File: sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/GcpApiSurfaceTest.java
Status: modified
```diff
@@ -85,6 +85,8 @@ public void testGcpApiSurface() throws Exception {
             Matchers.<Class<?>>equalTo(com.google.cloud.ByteArray.class),
             Matchers.<Class<?>>equalTo(com.google.cloud.Date.class),
             Matchers.<Class<?>>equalTo(com.google.cloud.Timestamp.class),
+            // TODO: remove the following classes once spanner updates APIs of AsyncResultSet:
+            // https://github.com/googleapis/java-spanner/issues/410
             Matchers.<Class<?>>equalTo(com.google.common.collect.ImmutableCollection.class),
             Matchers.<Class<?>>equalTo(com.google.common.collect.ImmutableCollection.Builder.class),
             Matchers.<Class<?>>equalTo(com.google.common.collect.ImmutableList.class),
```",Add TODO in GcpApiSurfaceTest: TODO: remove newly-exposed clasess once spanner updates its APIs.,4,4,4,4,fix test on windows,0,0,4,4,"Feat: Add comments for future task in GcpApiSurfaceTest.java This commit adds comments in the GcpApiSurfaceTest.java file, indicating a future task to be done. The comments mention the removal of certain classes once the APIs of AsyncResultSet in Spanner are updated. The related issue can be found at https://github.com/googleapis/java-spanner/issues/410.",3,4,4,4,"refactor: Include additional classes in GcpApiSurfaceTest
This change refactors GcpApiSurfaceTest to include additional classes, ensuring the API surface only exposes allowed classes and prunes unnecessary ones. This is a necessary step for upgrading the spanner library to 1.59.0 and google_cloud_bigtable_client_core to 1.16.0, as part of BEAM-8758."
22bc31a9e6d539ca61d42b58312d4927e9b47649,apache/beam,Y,"File: runners/direct-java/src/test/java/org/apache/beam/runners/direct/DirectRunnerApiSurfaceTest.java
Status: modified
```diff
@@ -65,6 +65,7 @@ public void testDirectRunnerApiSurface() throws Exception {
                 WatermarkManager.class /* TODO: BEAM-4237 Consider moving to local-java */)
             .pruningPattern(""org[.]apache[.]beam[.].*Test.*"")
             .pruningPattern(""org[.]apache[.]beam[.].*IT"")
+            .pruningPattern(""org[.]checkerframework[.].*[.]qual[.].*"")
             .pruningPattern(""java[.]io.*"")
             .pruningPattern(""java[.]lang.*"")
             .pruningPattern(""java[.]util.*"");
```


File: sdks/java/extensions/google-cloud-platform-core/src/test/java/org/apache/beam/sdk/extensions/gcp/GcpCoreApiSurfaceTest.java
Status: modified
```diff
@@ -44,6 +44,7 @@ public void testGcpCoreApiSurface() throws Exception {
         ApiSurface.ofPackage(thisPackage, thisClassLoader)
             .pruningPattern(""org[.]apache[.]beam[.].*Test.*"")
             .pruningPattern(""org[.]apache[.]beam[.].*IT"")
+            .pruningPattern(""org[.]checkerframework[.].*[.]qual[.].*"")
             .pruningPattern(""java[.]lang.*"")
             .pruningPattern(""java[.]util.*"");
 
```


File: sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/GcpApiSurfaceTest.java
Status: modified
```diff
@@ -51,6 +51,7 @@ public void testGcpApiSurface() throws Exception {
             .pruningPattern(BigqueryClient.class.getName())
             .pruningPattern(""org[.]apache[.]beam[.].*Test.*"")
             .pruningPattern(""org[.]apache[.]beam[.].*IT"")
+            .pruningPattern(""org[.]checkerframework[.].*[.]qual[.].*"")
             .pruningPattern(""java[.]lang.*"")
             .pruningPattern(""java[.]util.*"");
 
```","Allow checkerframework on API surfaces This commit is independently useful, since checkerframework annotations are helpful for users. We should preserve them at runtime.",4,4,4,4,add tests for üòÖ,0,0,0,0,"Fix: Add new pruning pattern to test files This commit adds a new pruning pattern ""org[.]checkerframework[.].*[.]qual[.].*"" to three test files: DirectRunnerApiSurfaceTest.java, GcpCoreApiSurfaceTest.java, and GcpApiSurfaceTest.java. This change is classified as a ""Fix"", indicating that it is meant to correct a problem in the code. No associated issues or pull requests were found for this commit.",0,4,2,4,"feat: Prune checkerframework qual classes in API surface tests
Prune checkerframework qual classes from API surface tests by introducing a pruning pattern in DirectRunnerApiSurfaceTest, GcpCoreApiSurfaceTest, and GcpApiSurfaceTest classes, as a step towards enabling global checkerframework support (BEAM-10402)."
a954e6f5e03c7c9110c9d2b116e7774edbcda4fe,apache/beam,,"File: runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/options/DataflowPipelineOptions.java
Status: modified
```diff
@@ -95,8 +95,6 @@ public interface DataflowPipelineOptions
   void setUpdate(boolean value);
 
   /** If set, the snapshot from which the job should be created. */
-  @Hidden
-  @Experimental
   @Description(""If set, the snapshot from which the job should be created."")
   String getCreateFromSnapshot();
 
```",Remove @hidden and @experimental annotation of CreateFromSnapshot pipelien option.,0,4,4,4,remove experimental experimental annotation,0,2,4,4,Refactor: Remove annotations from 'createFromSnapshot' method The 'Hidden' and 'Experimental' annotations were removed from the 'createFromSnapshot' method in the DataflowPipelineOptions.java file. This change does not affect the functionality of the method.,3,4,4,4,"refactor: Remove @Hidden and @Experimental annotations from CreateFromSnapshot pipeline option
Removed unnecessary annotations to improve code readability and maintainability. This refactoring does not introduce any functional changes."
8c04ffd52a43358a8eb56a68fa7aeae0bfa94577,apache/cassandra,Y,"File: src/java/org/apache/cassandra/db/ColumnFamilyStore.java
Status: modified
```diff
@@ -1531,6 +1531,11 @@ public double getReadLatency()
     {_x000D_
         return readStats_.mean();_x000D_
     }_x000D_
+    _x000D_
+    public int getPendingTasks()_x000D_
+    {_x000D_
+        return memtableLock_.getQueueLength();_x000D_
+    }_x000D_
 _x000D_
     /**_x000D_
      * @return the number of write operations on this column family in the last minute_x000D_
```


File: src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
Status: modified
```diff
@@ -84,4 +84,10 @@ public interface ColumnFamilyStoreMBean
      */
     public double getWriteLatency();
     
+    /**
+     * 
+     * @return the estimated number of tasks pending for this column family
+     */
+    public int getPendingTasks();
+    
 }
```",added CFS pending tasks JMX attribute CASSANDRA-173,4,3,4,4,add getPendingTasks to ColumnFamilyStore,0,4,4,4,Feat: Add getPendingTasks method to CFSMBean This commit adds a new method `getPendingTasks()` to both `ColumnFamilyStore.java` and `ColumnFamilyStoreMBean.java`. This method returns the number of tasks pending for this column family. This change was made in response to issue CASSANDRA-173.,4,4,4,4,"feat: Introduce getPendingTasks metric to track memtable lock queue length
This commit introduces a new metric, getPendingTasks(), which exposes the memtable lock queue length, allowing for better monitoring and debugging of pending tasks. This change implements the required atomic counter and provides a corresponding MBean method, fulfilling the requirements of CASSANDRA-173."
f6e15244da3418871f2ee4f076d08582cb967511,apache/cassandra,,"File: src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java
Status: modified
```diff
@@ -1,4 +1,25 @@
 package org.apache.cassandra.concurrent;
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+
 
 import java.util.concurrent.*;
 
```",add missing license header,4,4,4,4,add missing license header,4,4,4,4,Style: Add license header to RetryingScheduledThreadPoolExecutor.java A license header has been added to the file RetryingScheduledThreadPoolExecutor.java. This change is related to the style of the code and does not affect the functionality of the program.,4,4,3,4,"style: Add Apache License header to RetryingScheduledThreadPoolExecutor.java
This change adds the Apache License header to RetryingScheduledThreadPoolExecutor.java, ensuring compliance with the Apache Software Foundation's licensing requirements and providing clear copyright information."
f75e364cba4b31a8d78574dc6cb62ad1a402660b,apache/cassandra,,"File: src/java/org/apache/cassandra/db/RowIteratorFactory.java
Status: modified
```diff
@@ -161,17 +161,6 @@ else if (colCollated.hasNext())
         return new RowIterator(reduced, iterators);
     }
 
-    /** 
-     * Used when locks are required before getting the entry iterator.
-     * @param memtable Memtable to get iterator from
-     * @param startWith Start at this key position
-     * @return entry iterator for the current memtable
-     */
-    private static Iterator<Map.Entry<DecoratedKey, ColumnFamily>> memtableEntryIterator(Memtable memtable, DecoratedKey startWith)
-    {
-        return memtable.getEntryIterator(startWith);
-    }
-
     /**
      * Get a ColumnIterator for a specific key in the memtable.
      */
```",r/m unused code,4,4,4,4,remove unused method,4,4,4,4,Refactor: Remove unused method from RowIteratorFactory The method `memtableEntryIterator` was removed from the `RowIteratorFactory` class. This method was previously used to get an entry iterator from a memtable starting at a specific key position. The removal of this method does not affect the functionality of the class as it was not being used.,4,4,3,4,"refactor: Remove unnecessary memtableEntryIterator method
Removed the unnecessary `memtableEntryIterator` method, which was not being used anywhere in the codebase, to reduce code clutter and improve maintainability."
4dcd15f48dd21062fbe3a2ac4b3debb10fbbd14a,apache/cassandra,,"File: src/java/org/apache/cassandra/net/IncomingTcpConnection.java
Status: modified
```diff
@@ -98,7 +98,7 @@ public void run()
             {
                 // save the endpoint so gossip will reconnect to it
                 Gossiper.instance.addSavedEndpoint(from);
-                logger.info(""Received "" + (isStream ? ""streaming "" : """") + ""connection from newer protocol version. Ignorning"");
+                logger.info(""Received "" + (isStream ? ""streaming "" : """") + ""connection from newer protocol version. Ignoring"");
             }
             else if (msg != null)
             {
@@ -160,7 +160,7 @@ private Message receiveMessage(DataInputStream input, int version) throws IOExce
             MessagingService.instance().receive(message, id);
             return message;
         }
-        logger.debug(""Received connection from newer protocol version {}. Ignorning message"", version);
+        logger.debug(""Received connection from newer protocol version {}. Ignoring message"", version);
         return null;
     }
 
```",Fix typo in log message,4,4,4,4,remove some logging,0,1,4,4,"Fix: Corrected typos in log messages in IncomingTcpConnection.java In the IncomingTcpConnection.java file, typos in the log messages of the 'run' and 'receiveMessage' methods were corrected. The typo ""Ignorning"" was corrected to ""Ignoring"". This change improves the readability and understanding of the log messages.",4,4,3,4,"fix: Correct 'ignoring' typos in IncomingTcpConnection
This commit fixes typos in IncomingTcpConnection's logging messages, correcting 'Ignorning' to 'Ignoring' in two instances, ensuring accurate logging without affecting the class's functionality."
ce807c6a22068edbed78d76367e9b35bd883fa77,apache/cassandra,,"File: src/java/org/apache/cassandra/db/columniterator/SSTableNamesIterator.java
Status: modified
```diff
@@ -202,11 +202,18 @@ private void readSimpleColumns(FileDataInput file, SortedSet<ByteBuffer> columnN
         for (int i = 0; i < columns; i++)
         {
             OnDiskAtom column = atomSerializer.deserializeFromSSTable(file, sstable.descriptor.version);
-            if (columnNames.contains(column.name()))
+            if (column instanceof IColumn)
+            {
+                if (columnNames.contains(column.name()))
+                {
+                    result.add(column);
+                    if (n++ > filteredColumnNames.size())
+                        break;
+                }
+            }
+            else
             {
                 result.add(column);
-                if (n++ > filteredColumnNames.size())
-                    break;
             }
         }
     }
```",SSTableNamesIterator misses some tombstones CASSANDRA-4395,4,2,4,3,fix a bug in SSTableNamesIterator,2,2,4,4,Refactor: Fix bug in SSTableNamesIterator This commit modifies the readSimpleColumns method in the SSTableNamesIterator.java file. The method now checks if the column is an instance of IColumn before adding it to the result list. This change was made to fix a bug where the SSTableNamesIterator was missing some tombstones. This change improves the accuracy of the SSTableNamesIterator and ensures that no tombstones are missed.,3,4,4,4,"fix: Fix handling of tombstones in readSimpleColumns method
This commit fixes the handling of tombstones in the readSimpleColumns method by introducing a conditional check for IColumn instances, which prevents incorrect additions to the result list and resolves issue CASSANDRA-4395."
3c93e8c6b5e96dcf4487e1b8f8cfe2a327237c6f,apache/cassandra,,"File: src/java/org/apache/cassandra/service/StorageService.java
Status: modified
```diff
@@ -3660,7 +3660,7 @@ private CountDownLatch streamRanges(final Map<String, Multimap<Range<Token>, Ine
         return latch;
     }
 
-    class CountingDownStreamCallback implements IStreamCallback
+    static class CountingDownStreamCallback implements IStreamCallback
     {
         private final CountDownLatch latch;
         private final InetAddress targetAddr;
```",make CountingDownStreamCallback static to reduce footprint,4,4,4,4,make CountingDownStreamCallback static,0,4,4,4,Refactor: Change CountingDownStreamCallback to static class in StorageService.java This commit changes the CountingDownStreamCallback class in the StorageService.java file from a non-static class to a static class. This is a structural change that does not affect the external behavior of the code.,1,4,4,4,"refactor: Make CountingDownStreamCallback a static inner class
Converted CountingDownStreamCallback to a static inner class, reducing its coupling to the enclosing StorageService class and improving overall code organization."
a9b403e649aaa4de5e28d3bd4c562568d0ae3fbc,apache/cassandra,,"File: src/java/org/apache/cassandra/db/compaction/CompactionManager.java
Status: modified
```diff
@@ -582,8 +582,7 @@ private void doCleanupCompaction(ColumnFamilyStore cfs, Collection<SSTableReader
             SSTableReader newSstable = null;
 
             logger.info(""Cleaning up "" + sstable);
-            // Calculate the expected compacted filesize
-            long expectedRangeFileSize = cfs.getExpectedCompactedFileSize(Arrays.asList(sstable), OperationType.CLEANUP);
+
             File compactionFileLocation = cfs.directories.getDirectoryForNewSSTables();
             if (compactionFileLocation == null)
                 throw new IOException(""disk full"");
```",remove calculation of unused expected compacted filesize,4,4,4,4,remove unnecessary cast,0,1,4,4,Refactor: Remove unnecessary filesize calculation in cleanup compaction This commit removes the calculation of the expected compacted filesize in the `doCleanupCompaction` method of the `CompactionManager` class. The calculation was not necessary for the cleanup compaction process and its removal simplifies the code without altering functionality.,4,4,4,4,"refactor: Simplify cleanup compaction logic
Simplified the internal logic of `doCleanupCompaction` method to reduce complexity and improve maintainability, without altering the method's functionality or external behavior."
579eb229519e5e3b276f918b89158a242c2dec34,apache/cassandra,,"File: src/java/org/apache/cassandra/db/compaction/CompactionTask.java
Status: modified
```diff
@@ -261,8 +261,11 @@ protected void runWith(File sstableDirectory) throws Exception
         Map<Integer, Long> mergedRows = new HashMap<Integer, Long>();
         for (int i = 0; i < counts.length; i++)
         {
-            int rows = i + 1;
             long count = counts[i];
+            if (count == 0)
+                continue;
+
+            int rows = i + 1;
             totalSourceRows += rows * count;
             mergeSummary.append(String.format(""%d:%d, "", rows, count));
             mergedRows.put(rows, count);
```",omit zero counts from compaction merge summary,0,4,4,4,fix a bug in CompactionTask,2,2,4,4,"Fix: Skip iteration if count is zero in compaction operation This commit introduces a fix in the `runWith(File sstableDirectory)` method in the `CompactionTask.java` file. The change involves the addition of a conditional statement to skip an iteration if the count is zero during the compaction operation. This modification ensures that the compaction operation is only performed when necessary, and a snapshot is taken if required.",4,3,3,4,"fix: Handle zero-count rows correctly in compaction
This commit fixes an issue where zero-count rows were incorrectly processed during compaction, leading to potential data inconsistencies. The fix involves skipping these rows in the `runWith` method of `CompactionTask`, ensuring accurate row counting and compaction results."
ef67b60273d1d2b3e9b5b488311625717c161d34,apache/cassandra,,"File: src/java/org/apache/cassandra/db/commitlog/CommitLogArchiver.java
Status: modified
```diff
@@ -51,7 +51,7 @@ public class CommitLogArchiver
     }
 
     public final Map<String, Future<?>> archivePending = new ConcurrentHashMap<String, Future<?>>();
-    public final ExecutorService executor = new JMXEnabledThreadPoolExecutor(""commitlog_archiver"");
+    public final ExecutorService executor = new JMXEnabledThreadPoolExecutor(""CommitLogArchiver"");
     private final String archiveCommand;
     private final String restoreCommand;
     private final String restoreDirectories;
```",Make commitlog archiver thread pool name consistent CASSANDRA-7043,4,4,4,4,fix typo in CommitLogArchiver,0,0,4,4,"Style: Standardize thread pool name in CommitLogArchiver This commit changes the thread pool name in the CommitLogArchiver class from ""commitlog_archiver"" to ""CommitLogArchiver"". This change was made to make the thread pool name consistent with others in the codebase, as per issue CASSANDRA-7043.",4,4,4,4,"fix: Update thread pool name to conform to CamelCase convention
This change updates the thread pool name in CommitLogArchiver to conform to the CamelCase convention, resolving the inconsistency reported in CASSANDRA-7043. This fix may affect monitoring applications that rely on the previous name."
7c93b04b34844afdc3a502af9e7fb296f43dc068,apache/cassandra,,"File: src/java/org/apache/cassandra/db/ColumnFamilyStore.java
Status: modified
```diff
@@ -2173,16 +2173,18 @@ public Set<SSTableReader> snapshotWithoutFlush(String snapshotName, Predicate<SS
     private void writeSnapshotManifest(final JSONArray filesJSONArr, final String snapshotName)
     {
         final File manifestFile = directories.getSnapshotManifestFile(snapshotName);
-        final JSONObject manifestJSON = new JSONObject();
-        manifestJSON.put(""files"", filesJSONArr);
 
         try
         {
             if (!manifestFile.getParentFile().exists())
                 manifestFile.getParentFile().mkdirs();
-            PrintStream out = new PrintStream(manifestFile);
-            out.println(manifestJSON.toJSONString());
-            out.close();
+            
+            try (PrintStream out = new PrintStream(manifestFile))
+            {
+                final JSONObject manifestJSON = new JSONObject();
+                manifestJSON.put(""files"", filesJSONArr);
+                out.println(manifestJSON.toJSONString());
+            }
         }
         catch (IOException e)
         {
```",make sure streams get closed,1,2,4,4,fix bug in ColumnFamilyStore,2,2,4,4,Refactor: Improve resource handling in writeSnapshotManifest method This commit refactors the `writeSnapshotManifest` method in the `ColumnFamilyStore.java` file. The changes involve the use of a try-with-resources statement to ensure that the `PrintStream` object is properly closed after use. This improves the resource handling in the method and makes the code more robust and easier to maintain.,4,4,4,4,"refactor: Rewrite writeSnapshotManifest to use try-with-resources
Rewrote `writeSnapshotManifest` to use try-with-resources, ensuring that the `PrintStream` is properly closed even in the event of an exception, thus preventing potential resource leaks and improving overall code reliability."
2a9fc0e887612725a51b3822a266c1b3d3fadcaf,apache/cassandra,,"File: src/java/org/apache/cassandra/io/sstable/format/big/BigTableScanner.java
Status: modified
```diff
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.util.*;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.Ordering;
@@ -51,6 +52,7 @@
 
 public class BigTableScanner implements ISSTableScanner
 {
+    private AtomicBoolean isClosed = new AtomicBoolean(false);
     protected final RandomAccessReader dfile;
     protected final RandomAccessReader ifile;
     public final SSTableReader sstable;
@@ -193,7 +195,8 @@ private void seekToCurrentRangeStart()
 
     public void close() throws IOException
     {
-        FileUtils.close(dfile, ifile);
+        if (isClosed.compareAndSet(false, true))
+            FileUtils.close(dfile, ifile);
     }
 
     public long getLengthInBytes()
```",make scanner.close idempotent,0,3,4,4,make BigTableScanner close private,0,0,4,4,"Refactor: Prevent multiple closings of files in BigTableScanner This commit introduces a new variable `isClosed` in the `BigTableScanner` class to track whether the data and index files have been closed. The `close()` method is modified to check this variable before closing the files. This change prevents the files from being closed multiple times, which could potentially lead to a NullPointerException as reported in issue CASSANDRA-9531.",3,4,4,4,"fix: Fix NullPointerException in BigTableScanner.close()
This commit fixes the NullPointerException in BigTableScanner.close() by ensuring that the close operation is only performed once, using an AtomicBoolean to mark the object as closed. This prevents multiple close method calls, which were causing the NullPointerException, and resolves CASSANDRA-9531."
7bd577375ca5b661eb1fdb92954363546e864655,apache/cassandra,,"File: src/java/org/apache/cassandra/io/sstable/format/SSTableReader.java
Status: modified
```diff
@@ -737,7 +737,7 @@ private void load(boolean recreateBloomFilter, boolean saveSummaryIfCreated) thr
 
             // Check for an index summary that was downsampled even though the serialization format doesn't support
             // that.  If it was downsampled, rebuild it.  See CASSANDRA-8993 for details.
-        if (!descriptor.version.hasSamplingLevel() && !builtSummary && !validateSummarySamplingLevel() && ifile != null)
+        if (ifile != null && !descriptor.version.hasSamplingLevel() && !builtSummary && !validateSummarySamplingLevel())
             {
                 indexSummary.close();
                 ifile.close();
```",move condition (ifile != null) to where it has some value as it is already checked for in validateSummarySamplingLevel(),4,4,4,4,add missing indexSummary call,0,0,4,4,"Refactor: Reorder conditions in load method of SSTableReader class In the load method of the SSTableReader class, the order of the conditions in an if statement has been changed. This method loads the SSTable, builds the summary, and checks for any erroneously downsampled index summary. If it finds any, it rebuilds it. This change is a refactor that improves the readability of the code.",2,1,2,4,"fix: Fix NPE in load method when ifile is null
This commit fixes a NullPointerException (NPE) in the load method by reordering the conditional statement to ensure that ifile is not null before accessing its methods, thereby preventing the NPE when ifile is null."
82ef1cfc3d5a62c4d0f6163e09a9690b43959a92,apache/cassandra,,"File: src/java/org/apache/cassandra/config/DatabaseDescriptor.java
Status: modified
```diff
@@ -593,7 +593,7 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)
             }
         }
 
-        if (conf.cdc_enabled != null)
+        if (conf.cdc_enabled == true)
         {
             logger.info(""cdc_enabled is true. Starting casssandra node with Change-Data-Capture enabled."");
         }
```",ninja: fix logic to log msg w/cdc check on startup,4,4,4,3,fix DatabaseDescriptor crash,3,3,4,4,"Fix: Correct condition check for 'cdc_enabled' in 'applyConfig' method This commit corrects the condition check for 'cdc_enabled' in the 'applyConfig' method of the 'DatabaseDescriptor' class. Previously, the condition checked if 'cdc_enabled' was not null. However, this has been changed to check if 'cdc_enabled' is true. This ensures that the configuration settings are correctly applied to the Cassandra instance when 'cdc_enabled' is true.",4,4,2,3,"refactor: Improve boolean value evaluation in applyConfig
Improved robustness of configuration settings application by ensuring cdc_enabled is correctly evaluated, preventing potential misconfigurations."
eaced9a541d09d55973b6f88d720e16ac948a559,apache/cassandra,,"File: src/java/org/apache/cassandra/index/SecondaryIndexManager.java
Status: modified
```diff
@@ -426,7 +426,7 @@ private Index createInstance(IndexMetadata indexDef)
             {
                 Class<? extends Index> indexClass = FBUtilities.classForName(className, ""Index"");
                 Constructor<? extends Index> ctor = indexClass.getConstructor(ColumnFamilyStore.class, IndexMetadata.class);
-                newIndex = (Index)ctor.newInstance(baseCfs, indexDef);
+                newIndex = ctor.newInstance(baseCfs, indexDef);
             }
             catch (Exception e)
             {
@@ -615,7 +615,7 @@ public int calculateIndexingPageSize()
             return DEFAULT_PAGE_SIZE;
 
         int columnsPerRow = baseCfs.metadata.partitionColumns().regulars.size();
-        if (meanCellsPerPartition <= 0)
+        if (columnsPerRow <= 0)
             return DEFAULT_PAGE_SIZE;
 
         int meanRowsPerPartition = meanCellsPerPartition / columnsPerRow;
```",fix typo: wrong if guard variable,4,4,3,3,remove unnecessary cast,2,2,4,4,Refactor: Improve code readability in SecondaryIndexManager This commit refactors the SecondaryIndexManager class in two methods: `createInstance(IndexMetadata indexDef)` and `calculateIndexingPageSize()`. The changes are minor adjustments to the code that improve its readability and structure. No changes in functionality or behavior were made.,0,1,3,4,"refactor: Remove unnecessary cast in SecondaryIndexManager
Removed unnecessary cast in SecondaryIndexManager, simplifying the constructor invocation in createInstance method and calculateIndexingPageSize method, without affecting the system's behavior."
256a74faa31fcf25bdae753c563fa2c69f7f355c,apache/cassandra,,"File: test/unit/org/apache/cassandra/config/DatabaseDescriptorRefTest.java
Status: modified
```diff
@@ -70,6 +70,7 @@ public class DatabaseDescriptorRefTest
     ""org.apache.cassandra.config.Config$DiskOptimizationStrategy"",
     ""org.apache.cassandra.config.Config$InternodeCompression"",
     ""org.apache.cassandra.config.Config$MemtableAllocationType"",
+    ""org.apache.cassandra.config.Config$RepairCommandPoolFullStrategy"",
     ""org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy"",
     ""org.apache.cassandra.config.ParameterizedClass"",
     ""org.apache.cassandra.config.EncryptionOptions"",
```",Add Config$RepairCommandPoolFullStrategy awareness to DatabaseDescriptorRefTest,0,4,4,4,add missing test,0,0,4,4,"Feat: Add new strategy to config in DatabaseDescriptorRefTest This commit adds a new strategy, RepairCommandPoolFullStrategy, to the config in the DatabaseDescriptorRefTest.java file. This change is related to the issue [CASSANDRA-13594], which aims to use an ExecutorService for repair commands instead of starting a new thread.",4,4,4,4,"feat: Include Config$RepairCommandPoolFullStrategy in DatabaseDescriptorRefTest
Expanded test coverage in DatabaseDescriptorRefTest to include Config$RepairCommandPoolFullStrategy, ensuring its proper loading with dependencies."
8f4ae7d825d90a18327c5555386f3cdaf414d836,apache/cassandra,Y,"File: src/java/org/apache/cassandra/cql3/statements/AlterViewStatement.java
Status: modified
```diff
@@ -79,9 +79,10 @@ public Event.SchemaChange announceMigration(QueryState queryState, boolean isLoc
 
         if (params.defaultTimeToLive > 0)
         {
-            throw new InvalidRequestException(""Cannot set or alter default_time_to_live for a materialized view. "" +
+            throw new InvalidRequestException(""Forbidden default_time_to_live detected for a materialized view. "" +
                                               ""Data in a materialized view always expire at the same time than "" +
-                                              ""the corresponding data in the parent table."");
+                                              ""the corresponding data in the parent table. default_time_to_live "" +
+                                              ""must be set to zero, see CASSANDRA-12868 for more information"");
         }
 
         viewCopy.metadata.params(params);
```


File: test/unit/org/apache/cassandra/cql3/ViewTest.java
Status: modified
```diff
@@ -1380,16 +1380,23 @@ public void testAlterMvWithTTL() throws Throwable
                     ""c int, "" +
                     ""val int) WITH default_time_to_live = 60"");
 
+        execute(""USE "" + keyspace());
+        executeNet(protocolVersion, ""USE "" + keyspace());
+
         createView(""mv_ttl2"", ""CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE k IS NOT NULL AND c IS NOT NULL PRIMARY KEY (k,c)"");
 
         // Must NOT include ""default_time_to_live"" on alter Materialized View
         try
         {
-            executeNet(protocolVersion, ""ALTER MATERIALIZED VIEW %s WITH default_time_to_live = 30"");
+            executeNet(protocolVersion, ""ALTER MATERIALIZED VIEW "" + keyspace() + "".mv_ttl2 WITH default_time_to_live = 30"");
             fail(""Should fail if TTL is provided while altering materialized view"");
         }
         catch (Exception e)
         {
+            // Make sure the message is clear. See CASSANDRA-16960
+            assertEquals(""Forbidden default_time_to_live detected for a materialized view. Data in a materialized view always expire at the same time than the corresponding ""
+                         + ""data in the parent table. default_time_to_live must be set to zero, see CASSANDRA-12868 for more information"",
+                         e.getMessage());
         }
     }
 
```",Improve MV TTL error message CASSANDRA-16960,4,4,4,4,improved error messages for AlterViewStatement,4,4,4,4,Fix: Improve error message for setting TTL on materialized view This commit modifies the error message thrown when trying to set or alter the default_time_to_live for a materialized view in the method announceMigration in AlterViewStatement.java. The error message now provides more information about why this operation is not allowed.  The test case testAlterMvWithTTL in ViewTest.java has been updated to check for this new error message. This change addresses the issue CASSANDRA-16960.,4,4,4,4,"fix: Improve error message for altering materialized views with default_time_to_live
This commit refines the error message for altering materialized views with default_time_to_live, providing a clear explanation and referencing CASSANDRA-12868. The accompanying unit test ensures the correct error message is thrown."
de05e13417eb1e1ab77b3e28405a18a6e84a3526,apache/cocoon,,"File: src/java/org/apache/cocoon/components/modules/input/XMLFileModule.java
Status: modified
```diff
@@ -86,7 +86,7 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
  *
  * @author <a href=""mailto:jefft@apache.org"">Jeff Turner</a>
  * @author <a href=""mailto:haul@apache.org"">Christian Haul</a>
- * @version CVS $Id: XMLFileModule.java,v 1.8 2003/05/19 00:25:51 jefft Exp $
+ * @version CVS $Id: XMLFileModule.java,v 1.9 2003/05/20 09:17:57 jefft Exp $
  */
 public class XMLFileModule extends AbstractJXPathModule
     implements Composable, ThreadSafe {
@@ -276,11 +276,12 @@ protected Object getContextObject(Configuration modeConf,
                         ""missing 'file' child element at "" + 
                         modeConf.getLocation());
                 */
+            } else {
+              hasDynamicConf = true;
             }
-            hasDynamicConf = true;
         }
 
-        if (hasDynamicConf && fileConf != null) {
+        if (hasDynamicConf) {
             src = fileConf.getAttribute(""src"");
         }
 
```",Replace hack with a more sensible test.,0,0,4,4,do not dynamic dynamic dynamic file,0,0,4,0,"Refactor: Improve structure of getContextObject method in XMLFileModule This commit refactors the getContextObject method in the XMLFileModule class. The changes improve the structure of the code without altering its behavior. The method retrieves a context object based on the provided configuration and object model, checking for a dynamic configuration and updating the source and reload if present. The changes ensure a more efficient handling of dynamic configurations.",4,4,3,4,"fix: Fix handling of dynamic configuration in getContextObject
This commit refactors the getContextObject method to correctly handle dynamic configuration, ensuring that the hasDynamicConf flag is set appropriately and the src attribute is retrieved from the correct configuration."
8bc546a37d8013be9f2bdbbee44c0b8502612bf7,apache/cocoon,,"File: src/blocks/webdav/java/org/apache/cocoon/components/source/impl/WebDAVSource.java
Status: modified
```diff
@@ -103,7 +103,7 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
  *  @author <a href=""mailto:g.casper@s-und-n.de"">Guido Casper</a>
  *  @author <a href=""mailto:gianugo@apache.org"">Gianugo Rabellino</a>
  *  @author <a href=""mailto:d.madama@pro-netics.com"">Daniele Madama</a>
- *  @version $Id: WebDAVSource.java,v 1.5 2003/08/22 12:23:41 gcasper Exp $
+ *  @version $Id: WebDAVSource.java,v 1.6 2003/08/22 21:33:56 joerg Exp $
 */
 public class WebDAVSource implements Composable, Source,
     RestrictableSource, ModifiableTraversableSource, InspectableSource {
@@ -765,7 +765,6 @@ public SourceProperty[] getSourceProperties() throws SourceException {
     public SourceProperty getSourceProperty (String namespace, String name)
     throws SourceException {
 
-          Vector sourceproperties = new Vector();
           DOMParser parser = null;
           String xml = """";
           Enumeration props= null;
```",unused variable removed,4,4,4,4,remove unused code,4,3,4,4,"Fix: Update version info and remove unused code in WebDAVSource.java This commit updates the version information in the comments of the WebDAVSource.java file. Additionally, an unused line of code in the getSourceProperty method has been removed.",4,4,4,4,"refactor: Update WebDAVSource.java to remove unnecessary code and bump version
Removed unnecessary code, including an unused Vector declaration, and updated the version number in WebDAVSource.java to improve code quality and maintainability."
dde29593723a52e51e9da6dd75b3ee21b4fd7adf,apache/cocoon,,"File: src/blocks/woody/java/org/apache/cocoon/woody/samples/Sex.java
Status: modified
```diff
@@ -52,14 +52,13 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.List;
 import java.util.Locale;
 
 import org.apache.cocoon.woody.datatype.Enum;
 
 /**
  * Description of Sex.
- * @version CVS $Id: Sex.java,v 1.3 2003/11/07 22:04:38 ugo Exp $
+ * @version CVS $Id: Sex.java,v 1.4 2003/11/08 14:27:03 joerg Exp $
  */
 public class Sex implements Enum {
 
```",import clean up,4,4,4,4,remove unused import,4,4,4,4,"Refactor: Remove unused import and update version comment The import statement for java.util.List has been removed from Sex.java as it was unused. Additionally, the version comment has been updated.",4,4,4,4,"style: Remove unnecessary import statement
Remove unnecessary import statement to declutter the code."
63191d5b4f994455df9d8f2f39ad8f5cd563a16a,apache/cocoon,,"File: src/blocks/portal/java/org/apache/cocoon/portal/pluto/test/TestPortlet.java
Status: modified
```diff
@@ -61,29 +61,30 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
  *
  * @author <a href=""mailto:cziegeler@apache.org"">Carsten Ziegeler</a>
  * 
- * @version CVS $Id: TestPortlet.java,v 1.1 2004/01/27 08:05:35 cziegeler Exp $
+ * @version CVS $Id: TestPortlet.java,v 1.2 2004/02/10 08:42:45 cziegeler Exp $
  */
 public class TestPortlet implements Portlet  {
     
     /* (non-Javadoc)
      * @see javax.portlet.Portlet#destroy()
      */
     public void destroy() {
-        System.out.println(""Destroying TestPortlet"");
+        // nothing to do
     }
 
     /* (non-Javadoc)
      * @see javax.portlet.Portlet#init(javax.portlet.PortletConfig)
      */
     public void init(PortletConfig config) throws PortletException {
-        System.out.println(""Initializing TestPortlet"");
+        // nothing to do
     }
 
     /* (non-Javadoc)
      * @see javax.portlet.Portlet#processAction(javax.portlet.ActionRequest, javax.portlet.ActionResponse)
      */
     public void processAction(ActionRequest req, ActionResponse res)
     throws PortletException, IOException {
+        // nothing to do
     }
 
     /* (non-Javadoc)
```",Remove debug msgs,4,4,4,4,remove debug output,4,4,4,4,"Refactor: Remove print statements in TestPortlet.java This commit removes the print statements in the destroy(), init(), and processAction() methods of the TestPortlet.java file. These methods now do not perform any actions. This is a refactoring change that improves the code without changing its external behavior.",4,4,4,4,"refactor: Make TestPortlet lifecycle methods no-op
This commit refactors TestPortlet's lifecycle methods (init, destroy, processAction) to no-op implementations, removing unnecessary console output and aligning with the Portlet interface's expectations, thereby simplifying the class's internal structure and improving its overall design."
50507178cbe40b27b9052b487cfb1da475223da1,apache/cocoon,,"File: src/java/org/apache/cocoon/sitemap/SitemapParameters.java
Status: modified
```diff
@@ -23,8 +23,7 @@
 /**
  * Extension to the Avalon Parameters
  *
- * @author <a href=""mailto:cziegeler@apache.org"">Carsten Ziegeler</a>
- * @version CVS $Id: SitemapParameters.java,v 1.2 2004/03/08 12:07:39 cziegeler Exp $
+ * @version CVS $Id: SitemapParameters.java,v 1.3 2004/03/09 11:24:43 cziegeler Exp $
  */
 public class SitemapParameters extends Parameters {
     
```","Remove author tag. Thanks Sylvain for pointing at this, this happens when you copy paste and don't think about what you're doing.",4,4,4,4,fix SitemapParameters javadoc,4,3,4,4,Style: Remove author information and update version in SitemapParameters.java The author information was removed from the SitemapParameters.java file and the version was updated. This change does not affect the functionality of the code.,4,3,4,4,"style: Remove redundant author tag
Removed unnecessary author tag, which is not required for code functionality, to conform to clean code standards and reduce visual noise."
5c215e5480d1c462f8f83fdd67c2802655684b98,apache/cocoon,,"File: src/test/org/apache/cocoon/xml/dom/DOMBuilderTestCase.java
Status: modified
```diff
@@ -26,7 +26,7 @@
 /**
  * JUnit Testcase for {@link DOMBuilder}.
  * 
- * @version CVS $Id: DOMBuilderTestCase.java,v 1.2 2004/05/07 13:11:26 ugo Exp $
+ * @version CVS $Id: DOMBuilderTestCase.java,v 1.3 2004/05/18 12:36:52 ugo Exp $
  */
 public class DOMBuilderTestCase extends TestCase {
 
@@ -57,8 +57,11 @@ public void testMultipleCharactersEvents() throws SAXException {
         builder.endElement("""", ""test"", ""test"");
         builder.endDocument();
         Document dom = builder.getDocument();
-        assertEquals(""Content of root element not what expected"", ""ABCDEF"", 
-                dom.getDocumentElement().getFirstChild().getNodeValue()
-                + dom.getDocumentElement().getLastChild().getNodeValue());
+        StringBuffer value = new StringBuffer();
+        for (int i = 0 ; i < dom.getDocumentElement().getChildNodes().getLength() ; ++i) {
+            value.append(dom.getDocumentElement().getChildNodes().item(i).getNodeValue());
+        }
+        assertEquals(""Content of root element not what expected"",
+                ""ABCDEF"", value.toString()); 
     }
 }
```",Correct test case for DOMBuilder.,4,4,4,4,fix unit test,4,2,4,4,Refactor: Improve handling of multiple character events in test method This commit refactors the testMultipleCharactersEvents() method in the DOMBuilderTestCase.java file. The changes improve how multiple character events are handled and appended together in the test case. The refactor does not alter the functionality of the method but improves its design by ensuring that multiple character events are correctly concatenated into a single text node.,1,3,3,4,"fix: Fix assertEquals in testMultipleCharactersEvents to handle multiple child nodes
This commit fixes a bug in the testMultipleCharactersEvents method where assertEquals was not correctly handling multiple child nodes. The fix involves iterating over all child nodes and concatenating their node values to ensure accurate testing of the DOMBuilder's handling of consecutive 'characters' events."
b45a26454699645e58b8e09e207c194caf8f294b,apache/cocoon,,"File: src/java/org/apache/cocoon/transformation/SourceWritingTransformer.java
Status: modified
```diff
@@ -49,7 +49,7 @@
  * @cocoon.sitemap.component.documentation
  * This transformer allows you to output to a ModifiableSource.
  *
- * @cocoon.sitemap.component.name   write-source
+ * @cocoon.sitemap.component.name   sourcewriting
  * @cocoon.sitemap.component.logger sitemap.transformer.write-source
  *
  * This transformer allows you to output to a ModifiableSource.
```",Fix inconsistent component name.,4,2,4,4,fix typo in javadoc,0,1,4,4,"Refactor: Rename component in SourceWritingTransformer The component name in the SourceWritingTransformer.java file has been changed from 'write-source' to 'sourcewriting'. This change is not associated with any method or class functionality, and there are no associated issues or pull requests.",2,4,3,4,"style: Rename sitemap component name in SourceWritingTransformer.java
Updated the sitemap component name to follow the class name convention, enhancing code maintainability."
d0d38b7cdb8ff27e9b339d42de657143a97b4145,apache/cocoon,,"File: src/blocks/scratchpad/java/org/apache/cocoon/transformation/IncludeTransformer.java
Status: modified
```diff
@@ -49,6 +49,7 @@
 import java.util.Map;
 
 /**
+ * @cocoon.sitemap.component.documentation
  * <p>A simple transformer including resolvable sources (accessed through
  * Cocoon's {@link SourceResolver} from its input.</p>
  *
```",Add missing javadoc attribute,4,4,4,4,add a todo,0,0,4,4,"Style: Add annotation to IncludeTransformer.java Added a @cocoon.sitemap.component.documentation annotation to the IncludeTransformer.java file. This change does not affect the functionality of the code, but improves the style and readability.",2,1,4,4,"style: Document IncludeTransformer.java with Cocoon sitemap component information
Added a brief description and a @cocoon.sitemap.component.documentation tag to the IncludeTransformer.java file, documenting its role as a Cocoon sitemap component."
a28bb0e60dddc2729bed79a9e8ae754a888b2ed3,apache/cocoon,,"File: src/java/org/apache/cocoon/components/modules/input/RealPathModule.java
Status: modified
```diff
@@ -33,7 +33,7 @@
  * running in a .war file), <code>null</code> will be returned.
  *
  * @author <a href=""mailto:jefft@apache.org"">Jeff Turner</a>
- * @version CVS $Id: RealPathModule.java,v 1.3 2004/03/05 13:02:48 bdelacretaz Exp $
+ * @version CVS $Id$
  */
 
 /*
@@ -59,7 +59,7 @@
  */
 public class RealPathModule extends AbstractInputModule implements ThreadSafe {
 
-    final static Vector returnNames;
+    private final static Vector returnNames;
     static {
         Vector tmp = new Vector();
         tmp.add(""realPath"");
@@ -79,7 +79,7 @@ public Object getAttribute( String name, Configuration modeConf, Map objectModel
 
     public Iterator getAttributeNames( Configuration modeConf, Map objectModel ) throws ConfigurationException {
 
-        return RequestURIModule.returnNames.iterator();
+        return RealPathModule.returnNames.iterator();
     }
 
 
```",fixing an obvious cut and paste glitch,4,3,4,4,make returnNames private,0,2,4,4,"Refactor: Update getAttributeNames method in RealPathModule This commit updates the getAttributeNames method in the RealPathModule class. Previously, the method was returning an iterator of the attribute names of the RequestURIModule. Now, it returns an iterator of the attribute names of the RealPathModule. This change improves the structure of the code without changing its behavior.",3,3,4,4,"fix: Fix iterator return in getAttributeNames to use RealPathModule
This commit fixes the iterator return in getAttributeNames method of RealPathModule to use its own static vector returnNames instead of RequestURIModule's, ensuring that the correct attribute names are returned for RealPathModule instances. This change is necessary to maintain the thread-safe behavior of RealPathModule."
258d7f0a4f9bb6e6cf057ebcd7f9c30662d0aad2,apache/cocoon,,"File: blocks/cocoon-xsp/cocoon-xsp-impl/src/main/java/org/apache/cocoon/components/language/markup/xsp/XSPSessionFwHelper.java
Status: modified
```diff
@@ -28,6 +28,7 @@
  * The <code>Session-fw</code> object helper
  *
  * @version $Id$
+ * @deprecated This class is deprecated and will be removed in future versions.
  * @since 2.1.1
  */
 public class XSPSessionFwHelper {
```",Deprecate session-fw and auth-fw block,4,4,4,2,add missing javadoc,0,1,4,4,Style: Mark XSPSessionFwHelper class as deprecated The XSPSessionFwHelper class in the cocoon-xsp-impl module has been marked as deprecated. This class will be removed in future versions.,4,4,4,4,"refactor: Mark XSPSessionFwHelper class as deprecated
Marked XSPSessionFwHelper as deprecated to indicate it's no longer recommended for use."
b27c808c89bc0b06dad6c8428aa358e021d38f36,apache/cocoon,,"File: core/cocoon-core/src/main/java/org/apache/cocoon/components/source/SourceUtil.java
Status: modified
```diff
@@ -87,7 +87,7 @@ static private ServiceManager getSitemapServiceManager() {
             uripattern = new RECompiler().compile(""^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$"");
         } catch (RESyntaxException e) {
             // Should not happen
-            e.printStackTrace();
+            throw new RuntimeException(""Error parsing regular expression."", e);
         }
     }
 
```",Throw exception *if* it happens,0,2,4,3,don t throw exceptions in SourceUtil,0,0,4,3,"Fix: Improve error handling in SourceUtil Changed the error handling in the method getSitemapServiceManager() of the class SourceUtil.java. Instead of printing the stack trace, now it throws a RuntimeException with a descriptive message.",4,4,4,4,"fix: Handle RESyntaxException more robustly
Improved the robustness of error handling in SourceUtil.java by propagating RESyntaxException as a RuntimeException, ensuring that errors are properly reported and handled."
5ce848b860c02a77a8d45757b11ebd2ece71fbb9,apache/directory-server,Y,"File: core/src/main/java/org/apache/ldap/server/jndi/ContextFactoryConfiguration.java
Status: modified
```diff
@@ -27,6 +27,7 @@
 import org.apache.ldap.server.invocation.Invocation;
 import org.apache.ldap.server.schema.GlobalRegistries;
 
+/** FIXME Rename to ContextFactoryContext */
 public interface ContextFactoryConfiguration
 {
     /**
```


File: core/src/main/java/org/apache/ldap/server/jndi/DefaultContextFactoryConfiguration.java
Status: modified
```diff
@@ -66,6 +66,7 @@
 
 /**
  * Provides everything required to {@link AbstractContextFactory}.
+ * FIXME Rename to DefaultContextFactoryContext
  * 
  * @author <a href=""mailto:dev@directory.apache.org"">Apache Directory Project</a>
  * @version $Rev$
```",These two classes should be reverted back to their old names.,2,4,4,4,add missing javadoc,0,0,4,4,Style: Add comments to suggest renaming classes Added comments in ContextFactoryConfiguration.java and DefaultContextFactoryConfiguration.java to suggest renaming the classes to ContextFactoryContext and DefaultContextFactoryContext respectively.,3,4,4,4,"style: Update JavaDoc comments and TODOs
Updated JavaDoc comments to improve code readability and added TODOs to track pending renames of ContextFactoryConfiguration and DefaultContextFactoryConfiguration classes."
3b0a395ff816fc239969a7a5defeaf96ce2f2457,apache/directory-server,,"File: bootstrap-partition/src/main/java/org/apache/directory/server/schema/bootstrap/partition/DbFileListing.java
Status: modified
```diff
@@ -112,14 +112,17 @@ public Set<String> getIndexedAttributes()
     {
         Set<String> attributes = new HashSet<String>();
         Iterator<String> ii = iterator();
+        
         while( ii.hasNext() )
         {
             String name = ii.next();
+            
             if ( name2type.get( name ) == DbFileType.USER_INDEX )
             {
                 attributes.add( getIndexAttributeName( name ) );
             }
         }
+        
         return attributes;
     }
 }
```",Ligth refactoring (nl added),4,4,4,4,add missing space,0,4,4,4,"Style: Improve code readability in DbFileListing.java In the `getIndexedAttributes` method, added some lines to improve the readability of the code. The functionality of the method remains unchanged.",4,4,3,4,"feat: Retrieve indexed attributes from database schema in getIndexedAttributes method
Retrieve indexed attributes from the database schema by iterating over database file names and filtering out non-indexed attributes. This change improves the getIndexedAttributes method to directly retrieve indexed attributes from the database schema."
9cbf06fcae73d281aa4804e574335d12fd0764ec,apache/directory-server,,"File: core/src/main/java/org/apache/directory/server/core/referral/ReferralLut.java
Status: modified
```diff
@@ -99,7 +99,7 @@ public LdapDN getFarthestReferralAncestor( LdapDN dn )
         
         for ( int ii = 0; ii < dn.size(); ii++ )
         {
-            farthest.add( dn.getRdn( ii ) );
+            farthest.addNormalized( dn.getRdn( ii ) );
 
             // do not return dn if it is the farthest referral
             if ( isReferral( farthest ) && ( farthest.size() != dn.size() ) )
```","Call the addNormalized(RDN) method which is much faster than the add(RDN), as the RDN is not normalized again. ",4,4,4,4,fix failing tests,0,0,4,4,"Refactor: Use addNormalized in getFarthestReferralAncestor method In the `getFarthestReferralAncestor` method of the `ReferralLut` class, replaced the `add` method with the `addNormalized` method. This is an internal change that does not alter the functionality of the method.",4,3,4,4,"refactor: Normalize RDNs when adding to farthest referral
Normalize RDNs when adding to farthest referral to ensure consistent referral handling. This change eliminates potential inconsistencies in referral ancestor lookup, making the ReferralLut class more robust and maintainable. The updated getFarthestReferralAncestor method now uses addNormalized instead of add, aligning with the expected behavior."
ae5cfa26dd402d543dea6da01c881de67944572e,apache/directory-server,,"File: core-plugin/src/main/java/org/apache/directory/server/core/tools/schema/DirectorySchemaToolMojo.java
Status: modified
```diff
@@ -152,7 +152,7 @@ protected void generateRest( BootstrapSchema schema ) throws Exception
         ProducerTypeEnum type = null;
         for ( int ii = 0; ii < types.size(); ii++ )
         {
-            type = ( ProducerTypeEnum ) types.get( ii );
+            type = types.get( ii );
 
             if ( exists( schema.getFullDefaultBaseClassName( type ), type ) )
             {
```","Warnings clean-up, unnecessary casts.",4,4,4,4,remove unnecessary cast,4,4,4,4,"Refactor: Remove explicit casting in generateRest method In the DirectorySchemaToolMojo.java file, the explicit casting of a variable in the generateRest(BootstrapSchema schema) method has been removed. This change improves the structure of the code without altering its functionality. The method is responsible for generating RESTful API code for each producer type in the schema, excluding ATTRIBUTE_TYPE_PRODUCER and OBJECT_CLASS_PRODUCER.",3,4,1,4,"refactor: Remove unnecessary type cast
Removed unnecessary type cast to `ProducerTypeEnum` in `generateRest` method, as the `types` collection already ensures the correct type."
90f45e658b8a39033a6d6f071fcae0fe79c57693,apache/directory-server,,"File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/RecordStore.java
Status: modified
```diff
@@ -23,6 +23,7 @@
 import java.util.Set;
 
 import org.apache.directory.server.dns.messages.QuestionRecord;
+import org.apache.directory.server.dns.messages.ResourceRecord;
 
 
 /**
@@ -33,5 +34,12 @@
  */
 public interface RecordStore
 {
-    public Set getRecords( QuestionRecord question ) throws Exception;
+    /**
+     * Returns a set of {@link ResourceRecord}s, given a DNS {@link QuestionRecord}.
+     *
+     * @param question
+     * @return The set of {@link ResourceRecord}s.
+     * @throws Exception
+     */
+    public Set<ResourceRecord> getRecords( QuestionRecord question ) throws Exception;
 }
```","Warnings clean-up: Javadocs, generics.",4,4,4,4,add some javadoc,3,3,4,4,Refactor: Update return type and add comment to 'getRecords' method in 'RecordStore' interface The 'getRecords' method in the 'RecordStore' interface has been updated to return a set of 'ResourceRecord' objects instead of a generic set. A detailed comment has also been added to explain the functionality of the method. This change improves the readability and understandability of the code without altering its functionality.,4,4,4,4,"feat: Add getRecords method to RecordStore interface
Extended the RecordStore interface with a new getRecords method, which retrieves a set of ResourceRecords associated with a given QuestionRecord. This method throws an Exception if an error occurs during the retrieval process. The addition of this method enhances the interface's functionality to provide a more comprehensive record retrieval mechanism."
36ef3a8fdbcb278c67d576676f75ecb1458cb91e,apache/directory-server,,"File: protocol-kerberos/src/main/java/org/apache/directory/server/kerberos/kdc/authentication/MonitorContext.java
Status: modified
```diff
@@ -96,9 +96,9 @@ public void execute( NextCommand next, IoSession session, Object message ) throw
                 EncryptionType encryptionType = authContext.getEncryptionType();
                 int clientKeyVersion = clientEntry.getKeyMap().get( encryptionType ).getKeyVersion();
                 int serverKeyVersion = serverEntry.getKeyMap().get( encryptionType ).getKeyVersion();
-                sb.append( ""\n\t"" + ""Request key type        "" + encryptionType );
-                sb.append( ""\n\t"" + ""Client key version    "" + clientKeyVersion );
-                sb.append( ""\n\t"" + ""Server key version    "" + serverKeyVersion );
+                sb.append( ""\n\t"" + ""Request key type       "" + encryptionType );
+                sb.append( ""\n\t"" + ""Client key version     "" + clientKeyVersion );
+                sb.append( ""\n\t"" + ""Server key version     "" + serverKeyVersion );
 
                 log.debug( sb.toString() );
             }
```",Fixed minimal logging statement alignment issue.,4,4,4,4,fix a typo in MonitorContext,0,0,4,4,"Style: Adjust string formatting in MonitorContext.java In the MonitorContext.java file, the formatting of the strings appended to the StringBuilder object in the ""execute"" method has been adjusted. This change does not affect the functionality of the method, which continues to log detailed information about the current authentication context if debug logging is enabled.",4,3,3,4,"style: Format MonitorContext.java for consistent spacing
Adjusted spacing in append statements within MonitorContext.java to maintain consistent formatting, enhancing code readability and adhering to coding standards."
1abda27855f8287fd3783c5bcc1ceac0f6b94a26,apache/directory-server,Y,"File: core/src/test/java/org/apache/directory/server/core/changelog/MemoryChangeLogStoreTest.java
Status: modified
```diff
@@ -54,7 +54,7 @@ public void tearDown() throws Exception
     }_x000D_
 _x000D_
 _x000D_
-    public void testLogCheckRevision() throws NamingException_x000D_
+    public void testLogCheckRevision() throws Exception_x000D_
     {_x000D_
         assertEquals( ""first revision is always 0"", 0, store.getCurrentRevision() );_x000D_
 _x000D_
```


File: server-unit/src/test/java/org/apache/directory/server/ssl/ConfidentialityRequiredITest.java
Status: modified
```diff
@@ -131,7 +131,12 @@ public void tearDown() throws Exception
     protected void configureLdapServer()
     {
     	super.configureLdapServer();
+    	/*
+    	 * TODO un-comment and enable tests after adding this feature to 1.5.4
+    	 * see https://issues.apache.org/jira/browse/DIRSERVER-1194
+    	 *
     	ldapServer.setConfidentialityRequired( true );
+    	*/
     }
 
     
@@ -181,7 +186,9 @@ public void testConfidentiality() throws Exception
     	try
     	{
     		getWiredContext();
-    		fail( ""Should not get here due to violation of confidentiality requirements"" );
+    		// TODO un comment when confidentiality requirement feature is enabled
+    		// see https://issues.apache.org/jira/browse/DIRSERVER-1194
+//    		fail( ""Should not get here due to violation of confidentiality requirements"" );
     	}
     	catch( AuthenticationNotSupportedException e )
     	{
```",fixing compilation errors due to lack of confidentiality feature,4,4,4,4,fix test for üòÖ,0,1,4,4,Feat: Modify exception type and comment out lines in test methods This commit modifies the exception type thrown by the method testLogCheckRevision() in MemoryChangeLogStoreTest.java from NamingException to Exception. It also comments out some lines in the methods testConfidentiality() and configureLdapServer() in ConfidentialityRequiredITest.java with a TODO comment indicating that these lines should be uncommented when a certain feature is enabled.,3,4,4,4,"refactor: Decouple test methods from confidentiality requirement enforcement
Refactored test methods to decouple them from confidentiality requirement enforcement, allowing for more flexible and modular testing. Specifically, the configureLdapServer method was modified to disable confidentiality requirement enforcement, and a new test method, testLogCheckRevision, was added to verify logging revisions in the store."
cd91e1c00ccb9d5c09a63496625eab262c8cfc73,apache/directory-server,,"File: server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java
Status: modified
```diff
@@ -353,7 +353,7 @@ private void loadLdif( File ldifFile ) throws Exception
         _x000D_
         if ( fileEntry != null )_x000D_
         {_x000D_
-            String time = fileEntry.get( SchemaConstants.CREATE_TIMESTAMP_AT ).getString();_x000D_
+            String time = ((ClonedServerEntry)fileEntry).getOriginalEntry().get( SchemaConstants.CREATE_TIMESTAMP_AT ).getString();_x000D_
             LOG.info( ""Load of LDIF file '"" + getCanonical( ldifFile )_x000D_
                     + ""' skipped.  It has already been loaded on "" + time + ""."" );_x000D_
         }_x000D_
```","Fixed a NPE when trying to read an operational attribute, as we were using the clonedServerEntry, not the original entry.",4,4,4,4,fix npe in ApacheDS,4,4,4,4,"Refactor: Update 'time' variable assignment in 'loadLdif' method This commit updates the way the 'time' variable is assigned in the 'loadLdif' method of the ApacheDS.java file. The change does not affect the overall functionality of the method, which is to load an LDIF file into the directory service if it hasn't been loaded before. The refactor improves the internal structure of the code without changing its external behavior.",0,2,2,4,"fix: Get create timestamp from original entry in loadLdif method
Previously, the create timestamp was retrieved from the cloned entry, which could lead to inaccurate timestamps when loading LDIF files. This fix ensures that the original entry's timestamp is used, maintaining data integrity and consistency."
7c7346bcb4c320ab7c57e4cc8f572269c6da7e65,apache/directory-server,,"File: core-integ/src/main/java/org/apache/directory/server/core/integ/IntegrationUtils.java
Status: modified
```diff
@@ -99,8 +99,6 @@ public static void injectEntries( DirectoryService service, String ldif ) throws
 _x000D_
         for ( LdifEntry entry : entries )_x000D_
         {_x000D_
-            service.getAdminSession().add( _x000D_
-                new DefaultServerEntry( service.getRegistries(), entry.getEntry() ) ); _x000D_
             if ( entry.isChangeAdd() )_x000D_
             {_x000D_
                 service.getAdminSession().add( _x000D_
```","Fixed the patch, removing the two lines I forgot to remove",3,4,4,4,remove unnecessary code,4,4,4,4,"Refactor: Remove redundant addition of DefaultServerEntry in IntegrationUtils The two lines of code that were removed from IntegrationUtils.java were responsible for adding a new DefaultServerEntry to the admin session of the service. This operation was redundant and unnecessary, hence it was removed to improve the code structure without altering its functionality.",0,3,4,4,"refactor: Remove unnecessary admin session operations
Simplified IntegrationUtils.java by removing redundant admin session operations, aligning with the class's refactored purpose of providing utility methods for integrating with a directory service."
e4409b9610c1c956d8c87ed89a32a689f36ba325,apache/directory-server,,"File: ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapConnectionTest.java
Status: modified
```diff
@@ -43,7 +43,6 @@
 import org.apache.directory.shared.ldap.entry.Entry;
 import org.apache.directory.shared.ldap.entry.StringValue;
 import org.apache.directory.shared.ldap.exception.LdapException;
-import org.apache.directory.shared.ldap.exception.LdapReferralException;
 import org.apache.directory.shared.ldap.filter.EqualityNode;
 import org.apache.directory.shared.ldap.filter.SearchScope;
 import org.apache.directory.shared.ldap.message.BindResponse;
```",Applied the fix from trunk to make the build working,3,4,4,4,remove unused import,4,4,4,4,"Refactor: Remove unused import in LdapConnectionTest.java The import statement for LdapReferralException was removed from LdapConnectionTest.java. This is a refactor commit, aimed at improving the structure of the code without altering its functionality. The removal of this import statement suggests that the LdapReferralException class was not used in the file.",4,4,4,4,"style: Remove unused LdapReferralException import
Removed unused import statement for LdapReferralException in LdapConnectionTest.java, which was not being utilized in the class. This change simplifies the code and reduces unnecessary dependencies, making the codebase more maintainable and efficient."
36b3edc673d365f7ea9d1ddd4c3edf46c88f1c5f,apache/directory-server,Y,"File: core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java
Status: modified
```diff
@@ -60,7 +60,7 @@
 import org.apache.directory.shared.ldap.model.message.CompareResponse;
 import org.apache.directory.shared.ldap.model.message.CompareResponseImpl;
 import org.apache.directory.shared.ldap.model.message.DeleteRequest;
-import org.apache.directory.shared.ldap.message.DeleteRequestImpl;
+import org.apache.directory.shared.ldap.model.message.DeleteRequestImpl;
 import org.apache.directory.shared.ldap.model.message.DeleteResponse;
 import org.apache.directory.shared.ldap.message.DeleteResponseImpl;
 import org.apache.directory.shared.ldap.model.message.ExtendedRequest;
```


File: ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/ClientDeleteRequestTest.java
Status: modified
```diff
@@ -43,7 +43,7 @@
 import org.apache.directory.server.core.integ.FrameworkRunner;
 import org.apache.directory.shared.ldap.model.exception.LdapException;
 import org.apache.directory.shared.ldap.model.message.DeleteRequest;
-import org.apache.directory.shared.ldap.message.DeleteRequestImpl;
+import org.apache.directory.shared.ldap.model.message.DeleteRequestImpl;
 import org.apache.directory.shared.ldap.model.message.DeleteResponse;
 import org.apache.directory.shared.ldap.model.message.ResultCodeEnum;
 import org.apache.directory.shared.ldap.model.name.Dn;
```",no decorator needed for DeleteRequestImpl,1,1,4,3,fix import order,0,0,4,4,"Refactor: Update import statement for DeleteRequestImpl The import statement for DeleteRequestImpl has been updated in 'LdapCoreSessionConnection.java' and 'ClientDeleteRequestTest.java'. The class has been moved to a different package, which is reflected in the new import statement.",3,4,4,4,"style: Use consistent package naming in import statements
Standardize import statements in `LdapCoreSessionConnection.java` and `ClientDeleteRequestTest.java` to use `org.apache.directory.shared.ldap.model.message` package, eliminating redundant `org.apache.directory.shared.ldap.message` imports."
f23f46acbc62a62f06cccf9bf12a3055d39827ec,apache/directory-server,Y,"File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/DnsOperation.java
Status: modified
```diff
@@ -20,7 +20,6 @@
 package org.apache.directory.server.dns.store.jndi;
 
 
-import java.io.Serializable;
 import java.util.Set;
 
 import javax.naming.Name;
@@ -34,7 +33,7 @@
  *
  * @author <a href=""mailto:dev@directory.apache.org"">Apache Directory Project</a>
  */
-public interface DnsOperation extends Serializable
+public interface DnsOperation
 {
     /**
      * The command pattern execute method.
```


File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/operations/GetFlatRecord.java
Status: modified
```diff
@@ -49,8 +49,6 @@
  */
 public class GetFlatRecord implements DnsOperation
 {
-    private static final long serialVersionUID = 4931303293468915435L;
-
     /** The name of the question to get. */
     private final QuestionRecord question;
 
```


File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/operations/GetRecords.java
Status: modified
```diff
@@ -56,8 +56,6 @@
  */
 public class GetRecords implements DnsOperation
 {
-    private static final long serialVersionUID = 1077580995617778894L;
-
     /** The name of the question to get. */
     private final QuestionRecord question;
 
```",Made those classes not anymore serializable,4,4,4,4,remove unused code,0,0,4,4,"Refactor: Remove Serializable interface and serialVersionUID fields The Serializable interface was removed from the DnsOperation interface, and the serialVersionUID fields were removed from the GetFlatRecord and GetRecords classes. These changes suggest that serialization is no longer needed for these classes. This commit is a refactor, intended to improve the structure of the code without changing its behavior.",4,4,4,4,"refactor: Remove unnecessary Serializable interface and serialVersionUID fields
Removed unnecessary Serializable interface and serialVersionUID fields from DnsOperation, GetFlatRecord, and GetRecords classes, which were not implementing any serialization logic. This refactoring eliminates redundant code and improves code maintainability."
b5546be3333d7a261e6db37ab6e36f34193cffbb,apache/directory-server,Y,"File: core-integ/src/test/java/org/apache/directory/server/core/operations/add/AddIT.java
Status: renamed
```diff
@@ -17,7 +17,7 @@
  *  under the License.
  *
  */
-package org.apache.directory.server.core.jndi;
+package org.apache.directory.server.core.operations.add;
 
 
 import static org.apache.directory.server.core.integ.IntegrationUtils.getAdminConnection;
```


File: core-integ/src/test/java/org/apache/directory/server/core/suites/MigratedStockCoreISuite.java
Status: modified
```diff
@@ -39,7 +39,7 @@
 import org.apache.directory.server.core.event.EventServiceIT;
 import org.apache.directory.server.core.exception.ExceptionServiceIT;
 import org.apache.directory.server.core.integ.FrameworkSuite;
-import org.apache.directory.server.core.jndi.AddIT;
+import org.apache.directory.server.core.operations.add.AddIT;
 import org.apache.directory.server.core.operations.add.PasswordHashingInterceptorTest;
 import org.apache.directory.server.core.operations.move.MoveIT;
 import org.junit.runner.RunWith;
```",Moved the AddIT test to the operations package,4,4,4,4,move üòÖ to the correct package,3,0,3,1,Refactor: Update package name of AddIT.java and import in MigratedStockCoreISuite.java The package name of the AddIT.java file has been refactored from 'org.apache.directory.server.core.jndi' to 'org.apache.directory.server.core.operations.add'. The import statement in the MigratedStockCoreISuite.java file has been updated to reflect this change. This refactoring improves the structure of the code without changing its behavior.,4,4,4,4,"refactor: Relocate AddIT.java to org.apache.directory.server.core.operations.add package
Refactored the package structure by relocating AddIT.java to org.apache.directory.server.core.operations.add, ensuring consistency with the directory hierarchy. This change also required updates to import statements in dependent classes, such as MigratedStockCoreISuite.java, to maintain correct references."
2ed79615de8834887948901fb4a3863166a62c24,apache/directory-server,Y,"File: core-integ/src/test/java/org/apache/directory/server/core/trigger/TriggerInterceptorIT.java
Status: modified
```diff
@@ -32,9 +32,9 @@
 import javax.naming.ldap.LdapContext;
 
 import org.apache.directory.api.ldap.model.entry.AttributeUtils;
+import org.apache.directory.api.ldap.sp.JavaStoredProcUtils;
 import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
 import org.apache.directory.server.core.integ.FrameworkRunner;
-import org.apache.directory.shared.ldap.sp.JavaStoredProcUtils;
 import org.apache.directory.shared.ldap.trigger.TriggerUtils;
 import org.junit.Ignore;
 import org.junit.Test;
```


File: protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/extended/StoredProcedureExtendedOperationHandler.java
Status: modified
```diff
@@ -31,6 +31,7 @@
 import org.apache.directory.api.ldap.codec.api.LdapApiServiceFactory;
 import org.apache.directory.api.ldap.model.entry.Entry;
 import org.apache.directory.api.ldap.model.name.Dn;
+import org.apache.directory.api.ldap.sp.LdapContextParameter;
 import org.apache.directory.server.core.api.sp.StoredProcEngine;
 import org.apache.directory.server.core.api.sp.StoredProcEngineConfig;
 import org.apache.directory.server.core.api.sp.StoredProcExecutionManager;
@@ -40,7 +41,6 @@
 import org.apache.directory.server.ldap.LdapSession;
 import org.apache.directory.shared.ldap.extras.extended.StoredProcedureRequest;
 import org.apache.directory.shared.ldap.extras.extended.StoredProcedureResponse;
-import org.apache.directory.shared.ldap.sp.LdapContextParameter;
 
 
 /**
```


File: server-integ/src/test/java/org/apache/directory/server/operations/extended/StoredProcedureIT.java
Status: modified
```diff
@@ -35,6 +35,7 @@
 import org.apache.directory.api.ldap.model.constants.SupportedSaslMechanisms;
 import org.apache.directory.api.ldap.model.schema.normalizers.DeepTrimToLowerNormalizer;
 import org.apache.directory.api.ldap.model.schema.normalizers.OidNormalizer;
+import org.apache.directory.api.ldap.sp.JavaStoredProcUtils;
 import org.apache.directory.junit.tools.MultiThreadedMultiInvoker;
 import org.apache.directory.server.annotations.CreateLdapServer;
 import org.apache.directory.server.annotations.CreateTransport;
@@ -47,7 +48,6 @@
 import org.apache.directory.server.ldap.handlers.bind.ntlm.NtlmMechanismHandler;
 import org.apache.directory.server.ldap.handlers.bind.plain.PlainMechanismHandler;
 import org.apache.directory.server.ldap.handlers.extended.StoredProcedureExtendedOperationHandler;
-import org.apache.directory.shared.ldap.sp.JavaStoredProcUtils;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
```",Renamed the shared-ldap-extras-sp package,3,1,4,4,remove unused imports,0,0,4,4,"Refactor: Update import statements in three files This commit updates the import statements in three files: TriggerInterceptorIT.java, StoredProcedureExtendedOperationHandler.java, and StoredProcedureIT.java. The changes are part of a refactor and do not alter the functionality of the code.",3,4,3,4,"refactor: Move JavaStoredProcUtils and LdapContextParameter imports to their respective packages
Moved JavaStoredProcUtils and LdapContextParameter imports to their respective packages, eliminating unnecessary dependencies and promoting a more modular code structure."
87fdc2ea1c73d1bfada93fe8f6f7f158398eb402,apache/directory-server,,"File: core-api/src/main/java/org/apache/directory/server/core/api/LdapCoreSessionConnection.java
Status: modified
```diff
@@ -154,7 +154,7 @@ public boolean close() throws IOException
     /**
      * {@inheritDoc}
      */
-    public boolean connect() throws LdapException, IOException
+    public boolean connect() throws LdapException
     {
         return true;
     }
@@ -1152,7 +1152,7 @@ public void abandon( int messageId )
     /**
      * {@inheritDoc}
      */
-    public void bind() throws LdapException, IOException
+    public void bind() throws LdapException
     {
         throw new UnsupportedOperationException(
             ""Bind operation using LdapConnectionConfig are not supported on CoreSession based connection"" );
@@ -1162,7 +1162,7 @@ public void bind() throws LdapException, IOException
     /**
      * {@inheritDoc}
      */
-    public void anonymousBind() throws LdapException, IOException
+    public void anonymousBind() throws LdapException
     {
         BindRequest bindRequest = new BindRequestImpl();
         bindRequest.setName( """" );
@@ -1177,7 +1177,7 @@ public void anonymousBind() throws LdapException, IOException
     /**
      * {@inheritDoc}
      */
-    public BindResponse bind( BindRequest bindRequest ) throws LdapException, IOException
+    public BindResponse bind( BindRequest bindRequest ) throws LdapException
     {
         if ( bindRequest == null )
         {
```",o The connect() and various bind() method don't throw an IoException anymore,0,4,4,3,remove unused parameter,0,0,4,4,"Refactor: Removed IOException from method signatures in LdapCoreSessionConnection This commit removes the IOException from the method signatures in the LdapCoreSessionConnection.java file. The methods affected include connect(), bind(), anonymousBind(), and bind(BindRequest bindRequest). These changes simplify the method signatures and reduce the need for exception handling in the methods that use these methods.",4,4,4,4,"refactor: Simplify exception handling in LdapCoreSessionConnection methods
This commit refactors the exception handling in LdapCoreSessionConnection methods by removing IOException throws clauses, which were not relevant to the methods' functionality. The changes improve code quality and maintainability by making the methods' signatures more accurate and easier to understand."
0f9ab470354525d53ca5a2910b76fe9e95c751bf,apache/directory-server,,"File: interceptors/hash/src/main/java/org/apache/directory/server/core/hash/PasswordHashingInterceptor.java
Status: modified
```diff
@@ -30,6 +30,7 @@
 import org.apache.directory.api.ldap.model.entry.DefaultAttribute;
 import org.apache.directory.api.ldap.model.entry.Entry;
 import org.apache.directory.api.ldap.model.entry.Modification;
+import org.apache.directory.api.ldap.model.entry.ModificationOperation;
 import org.apache.directory.api.ldap.model.entry.Value;
 import org.apache.directory.api.ldap.model.exception.LdapException;
 import org.apache.directory.api.ldap.model.password.PasswordUtil;
@@ -113,14 +114,17 @@ public void modify( ModifyOperationContext modifyContext ) throws LdapException
             // check for modification on 'userPassword' AT
             if ( SchemaConstants.USER_PASSWORD_AT_OID.equals( oid ) )
             {
+                if ( mod.getOperation() == ModificationOperation.REMOVE_ATTRIBUTE )
+                {
+                   continue; 
+                }
+                
                 Attribute newPwd = includeHashedPassword( mod.getAttribute() );
 
                 if ( newPwd != null )
                 {
                     mod.setAttribute( newPwd );
                 }
-
-                break;
             }
         }
 
```",check for password attribute in all modifications,0,4,4,4,remove unnecessary break,0,1,4,4,"Feat: Skip password hashing for remove attribute operation This commit introduces a new feature in the modify method of the PasswordHashingInterceptor class. Previously, the method would apply the password hashing algorithm to the 'userPassword' attribute if it was present in the modification items. Now, the method checks if the modification operation is to remove the attribute and skips the operation if so. This change enhances the functionality of the method by preventing unnecessary operations.",4,4,4,4,"feat: Handle removal of 'userPassword' attribute in modify operation
This change allows the interceptor to handle removal of the 'userPassword' attribute in modify operations, ensuring that the password is not unnecessarily hashed or processed during attribute removal."
b83fe8c2561188265445f64abe612d99a90e227c,apache/flink,,"File: nephele/nephele-server/src/main/java/eu/stratosphere/nephele/taskmanager/bytebuffered/OutgoingConnection.java
Status: modified
```diff
@@ -20,9 +20,7 @@
 import java.nio.channels.SelectionKey;
 import java.nio.channels.SocketChannel;
 import java.nio.channels.WritableByteChannel;
-import java.util.ArrayDeque;
 import java.util.Iterator;
-import java.util.Queue;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -65,7 +63,7 @@ public class OutgoingConnection {
 	/**
 	 * The queue of transfer envelopes to be transmitted.
 	 */
-	private final Queue<TransferEnvelope> queuedEnvelopes = new ArrayDeque<TransferEnvelope>();
+	private final TransferEnvelopeQueue queuedEnvelopes = new TransferEnvelopeQueue();
 
 	/**
 	 * The {@link DefaultSerializer} object used to transform the envelopes into a byte stream.
@@ -548,7 +546,9 @@ public int getNumberOfQueuedWriteBuffers() {
 	 */
 	void registerSpillingQueue(final SpillingQueue spillingQueue) {
 
-		System.out.println(""Registering spilling queue"");
+		synchronized (this.queuedEnvelopes) {
+			this.queuedEnvelopes.registerSpillingQueue(spillingQueue);
+		}
 	}
 
 	/**
@@ -560,6 +560,8 @@ void registerSpillingQueue(final SpillingQueue spillingQueue) {
 	 */
 	void unregisterSpillingQueue(final SpillingQueue spillingQueue) {
 
-		System.out.println(""Unregistering spilling queue"");
+		synchronized (this.queuedEnvelopes) {
+			this.queuedEnvelopes.unregisterSpillingQueue(spillingQueue);
+		}
 	}
 }
```",Switched to TransferEnvelopeQueue for network queue management,1,4,4,4,fix compilation error,0,0,4,4,"Refactor: Improve handling of spilling queues in OutgoingConnection This commit refactors the OutgoingConnection class to improve the handling of spilling queues. The queuedEnvelopes object was changed from a Queue to a TransferEnvelopeQueue, and the registerSpillingQueue and unregisterSpillingQueue methods were modified to interact with this new object. These changes aim to enhance the management of overflow data.",4,4,4,4,"refactor: Synchronize spilling queue registration and unregistration, and replace ArrayDeque with TransferEnvelopeQueue
This commit refactors the OutgoingConnection class to ensure thread safety in spilling queue registration and unregistration by synchronizing on the queuedEnvelopes collection. It replaces ArrayDeque with TransferEnvelopeQueue, improving the internal structure and maintainability of the class."
9034a54e63c66a9e79f457b926931af88f99999e,apache/flink,,"File: pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/MatchNode.java
Status: modified
```diff
@@ -1031,11 +1031,11 @@ protected double computeStubCallsPerProcessedKey() {
 		double callsPerKey = 1;
 		
 		if(numKey1 != -1) {
-			callsPerKey *= numKey1 / (double)numRecords1;
+			callsPerKey *= (double)numRecords1 / numKey1;
 		}
 		
 		if(numKey2 != -1) {
-			callsPerKey *= numKey2 / (double)numRecords2;
+			callsPerKey *= (double)numRecords2 / numKey2;
 		}
 
 		return callsPerKey;
```",fixed stub call estimation of MatchNode,4,4,4,4,fix bug in MatchNode üòÖ,2,1,4,4,"Fix: Correct calculation in computeStubCallsPerProcessedKey method This commit corrects the calculation of the average number of stub calls per processed key in the `computeStubCallsPerProcessedKey()` method of the `MatchNode.java` file. The positions of `numRecords1` and `numKey1`, and `numRecords2` and `numKey2` in the division operation have been swapped to ensure accurate calculation.",4,4,4,4,"fix: Fix division order in callsPerKey calculation
Fixed incorrect division order in `computeStubCallsPerProcessedKey` method, which previously led to inaccurate calculations of `callsPerKey`. This change ensures that the division is performed correctly, resulting in reliable estimates of stub calls per processed key."
0af7b5233b17dac022035429a4d2906f2d540b42,apache/flink,,"File: flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/scheduler/SchedulerIsolatedTasksTest.java
Status: modified
```diff
@@ -22,7 +22,6 @@
 import static org.apache.flink.runtime.jobmanager.scheduler.SchedulerTestUtils.getDummyTask;
 import static org.apache.flink.runtime.jobmanager.scheduler.SchedulerTestUtils.getTestVertex;
 import static org.apache.flink.runtime.jobmanager.scheduler.SchedulerTestUtils.getRandomInstance;
-
 import static org.junit.Assert.*;
 
 import org.junit.Test;
@@ -34,10 +33,12 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.apache.flink.runtime.instance.AllocatedSlot;
 import org.apache.flink.runtime.instance.Instance;
+import org.apache.flink.runtime.util.ExecutorThreadFactory;
 
 /**
  * Tests for the {@link Scheduler} when scheduling individual tasks.
@@ -181,7 +182,9 @@ public void testScheduleQueueing() {
 		final int NUM_TASKS_TO_SCHEDULE = 2000;
 		
 		try {
-			Scheduler scheduler = new Scheduler();
+			// note: since this test asynchronously releases slots, the executor needs release workers.
+			// doing the release call synchronous can lead to a deadlock
+			Scheduler scheduler = new Scheduler(Executors.newFixedThreadPool(4, ExecutorThreadFactory.INSTANCE));
 			
 			for (int i = 0;i < NUM_INSTANCES; i++) {
 				scheduler.newInstanceAvailable(getRandomInstance((int) (Math.random() * NUM_SLOTS_PER_INSTANCE) + 1));
```",Fix incorrect scheduler test that sometimes produces a deadlock,4,4,4,4,fix SchedulerIsolatedTasksTest to work with üòÖ,2,1,4,4,"Refactor: Update Scheduler instantiation in testScheduleQueueing method This commit updates the way the Scheduler is instantiated in the testScheduleQueueing method of the SchedulerIsolatedTasksTest class. The Scheduler is now created with a fixed thread pool, which allows for asynchronous release of slots. This change is made to prevent potential deadlocks that could occur when releasing slots synchronously.",3,4,4,4,"refactor: Use fixed thread pool for Scheduler in SchedulerIsolatedTasksTest
Replaced the default scheduler with a fixed thread pool of 4 threads, using ExecutorThreadFactory, to ensure correct slot allocation and release in concurrent environments."
51acd2cc9740cd3609983b7f9641d69324557774,apache/flink,,"File: flink-runtime/src/main/java/org/apache/flink/runtime/state/ManagedSnapshotContext.java
Status: modified
```diff
@@ -33,7 +33,7 @@ public interface ManagedSnapshotContext {
 	 * 
 	 * <p>The checkpoint ID is guaranteed to be strictly monotonously increasing across checkpoints.
 	 * For two completed checkpoints <i>A</i> and <i>B</i>, {@code ID_B > ID_A} means that checkpoint
-	 * <i>B</i> subsumes checkpoint <i>A</i>, i.e., checkpoint <i>B</i>it contains a later state
+	 * <i>B</i> subsumes checkpoint <i>A</i>, i.e., checkpoint <i>B</i> contains a later state
 	 * than checkpoint <i>A</i>.
 	 */
 	long getCheckpointId();
```",[hotfix] [javadoc] Fix typo in Javadoc of ManagedSnapshotContext#getCheckpointId() this closes #4913,4,4,4,4,fix javadoc typo,4,4,4,4,"Style: Fix typo in Javadoc of ManagedSnapshotContext#getCheckpointId() This commit corrects a typo in the Javadoc comment of the getCheckpointId() method in the ManagedSnapshotContext class. The word ""it"" was removed from the sentence ""checkpoint <i>B</i>it contains a later state"" to make it grammatically correct. This change does not affect the functionality of the code.",4,4,4,4,"fix: Fix typo in ManagedSnapshotContext Javadoc
This commit fixes a typo in the Javadoc of ManagedSnapshotContext, specifically in the description of the getCheckpointId() method. The correction ensures the Javadoc accurately reflects the method's behavior, resolving issue 4913."
91dc1c9ad0bc4430b069ca09b59b750a5166fa86,apache/flink,,"File: flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/writer/RecordWriter.java
Status: modified
```diff
@@ -130,13 +130,12 @@ private void sendToTarget(T record, int targetChannel) throws IOException, Inter
 					if (result.isFullRecord()) {
 						break;
 					}
-				} else {
-					BufferBuilder bufferBuilder =
-						targetPartition.getBufferProvider().requestBufferBuilderBlocking();
-					checkState(!bufferConsumers[targetChannel].isPresent());
-					bufferConsumers[targetChannel] = Optional.of(bufferBuilder.createBufferConsumer());
-					result = serializer.setNextBufferBuilder(bufferBuilder);
 				}
+				BufferBuilder bufferBuilder =
+					targetPartition.getBufferProvider().requestBufferBuilderBlocking();
+				checkState(!bufferConsumers[targetChannel].isPresent());
+				bufferConsumers[targetChannel] = Optional.of(bufferBuilder.createBufferConsumer());
+				result = serializer.setNextBufferBuilder(bufferBuilder);
 			}
 			checkState(!serializer.hasSerializedData(), ""All data should be written at once"");
 		}
```",[hotfix][runtime] Simplify RecordWriter code,4,4,4,4,fix bug in RecordWriter,0,1,4,4,"Refactor: Improve buffer handling in RecordWriter's sendToTarget method This commit refactors the `sendToTarget` method in the `RecordWriter` class. The changes improve how the buffer is handled when it is full. Previously, the buffer handling code was inside an else block. This commit moves the buffer handling code outside the if block, making the code cleaner and easier to understand.",4,1,4,4,"refactor: Consolidate buffer creation and consumption in RecordWriter
Consolidated buffer creation and consumption logic in RecordWriter, simplifying the internal structure and improving maintainability. This refactoring reduces complexity and makes the code easier to understand and modify."
f487d8ca54dc3de030b3332825e3faa028f6e590,apache/flink,Y,"File: flink-connectors/flink-connector-kafka-0.11/src/test/java/org/apache/flink/streaming/connectors/kafka/KafkaTestEnvironmentImpl.java
Status: modified
```diff
@@ -295,7 +295,7 @@ public void prepare(Config config) {
 	}
 
 	@Override
-	public void shutdown() {
+	public void shutdown() throws Exception {
 		for (KafkaServer broker : brokers) {
 			if (broker != null) {
 				broker.shutdown();
@@ -331,6 +331,7 @@ public void shutdown() {
 				// ignore
 			}
 		}
+		super.shutdown();
 	}
 
 	public ZkUtils getZkUtils() {
```


File: flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/KafkaTestEnvironmentImpl.java
Status: modified
```diff
@@ -359,6 +359,7 @@ public void shutdown() throws Exception {
 				// ignore
 			}
 		}
+		super.shutdown();
 	}
 
 	protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {
```","[hotfix][kafka,test] Add missing shutdown call propagation",4,3,4,4,add throws Exception,0,1,4,4,"Refactor: Improve shutdown process in KafkaTestEnvironmentImpl This commit refactors the `shutdown()` method in the `KafkaTestEnvironmentImpl.java` file in both `flink-connector-kafka-0.11` and `flink-connector-kafka` directories. The changes include adding a `throws Exception` declaration to the method signature and adding a call to `super.shutdown()`. This ensures that any shutdown procedures defined in a superclass are also executed, improving the robustness and maintainability of the shutdown process.",4,4,4,4,"refactor: Ensure KafkaTestEnvironmentImpl shutdown is complete
Modified the shutdown method to ensure a complete shutdown of the KafkaTestEnvironmentImpl by calling super.shutdown() after shutting down all Kafka brokers, which is essential for preventing resource leaks and ensuring a robust shutdown process. This change guarantees that all necessary resources are released, making the test environment more reliable and efficient."
8abb2599fb878b1b72c0a9d52b8cf956d9c5256d,apache/flink,,"File: flink-core/src/main/java/org/apache/flink/util/InstantiationUtil.java
Status: modified
```diff
@@ -590,7 +590,8 @@ public static byte[] serializeObject(Object o) throws IOException {
 	}
 
 	public static void serializeObject(OutputStream out, Object o) throws IOException {
-		ObjectOutputStream oos = new ObjectOutputStream(out);
+		ObjectOutputStream oos =
+			out instanceof ObjectOutputStream ? (ObjectOutputStream) out : new ObjectOutputStream(out);
 		oos.writeObject(o);
 	}
 
```",[hotfix][core] InstantiationUtil#serializeObject creates ObjectOutput Stream only when necessary.,4,4,4,4,fix bug in InstantiationUtil,2,2,4,4,"Refactor: Optimize ObjectOutputStream instantiation in serializeObject method This commit optimizes the instantiation of ObjectOutputStream in the serializeObject method of the InstantiationUtil class. Previously, a new ObjectOutputStream was always created. With this change, a new ObjectOutputStream is created only if necessary. This could potentially improve performance.",4,4,4,4,"refactor: Use existing ObjectOutputStream instance if available in serializeObject method
This commit refactors the `serializeObject` method to avoid creating a new `ObjectOutputStream` instance when the output stream is already an `ObjectOutputStream`, reducing object creation overhead. This change simplifies the internal structure of `InstantiationUtil`."
b13d227047227551ffd5a6d81780d779d4d6b4b3,apache/flink,,"File: flink-tests/src/test/java/org/apache/flink/test/checkpointing/ProcessingTimeWindowCheckpointingITCase.java
Status: modified
```diff
@@ -332,9 +332,14 @@ public boolean checkResult(Map<Long, Integer> windowCounts) {
                 return false;
             }
 
-            for (int i : windowCounts.values()) {
-                if (countPerElementExpected != i) {
+            for (Map.Entry<Long, Integer> e : windowCounts.entrySet()) {
+                if (e.getValue() < countPerElementExpected) {
                     return false;
+                } else if (e.getValue() > countPerElementExpected) {
+                    fail(
+                            String.format(
+                                    ""counter too big for %d: %d (expected %d)"",
+                                    e.getKey(), e.getValue(), countPerElementExpected));
                 }
             }
 
```",[hotfix][tests] Improve ProcessingTimeWindowCheckpointingITCase 1. Prevent from hanging out if stream contains duplicates 2. Improve error reporting,4,4,4,4,add check for expected expected expected count,0,2,3,2,"Fix: Update checkResult method in ProcessingTimeWindowCheckpointingITCase This commit updates the `checkResult` method in the `ProcessingTimeWindowCheckpointingITCase.java` file. The method now checks if the count of elements in each window of the map matches the expected count per element and if the total count of elements is within the expected range. If the count of elements in a window is less than the expected count, it returns false. If the count is greater than the expected count, it fails with a specific error message indicating that the counter is too big.",3,4,3,4,"fix: Handle duplicate elements in window counts correctly
This commit corrects the `checkResult` method in `ProcessingTimeWindowCheckpointingITCase` to handle duplicate elements in window counts. It now verifies that each element has the expected count, and fails with an error message if not. This change prevents test hangs on duplicate streams and improves error reporting."
6ee501c93d05e5febc5dd61f145a60fcea53c192,apache/flink,,"File: flink-yarn-tests/src/test/java/org/apache/flink/yarn/YARNFileReplicationITCase.java
Status: modified
```diff
@@ -114,7 +114,16 @@ private void deployPerJob(Configuration configuration, JobGraph jobGraph) throws
                 final JobResult jobResult = jobResultCompletableFuture.get();
 
                 assertThat(jobResult, is(notNullValue()));
-                assertThat(jobResult.getSerializedThrowable().isPresent(), is(false));
+                jobResult
+                        .getSerializedThrowable()
+                        .ifPresent(
+                                serializedThrowable -> {
+                                    throw new AssertionError(
+                                            ""Job failed"",
+                                            serializedThrowable.deserializeError(
+                                                    YARNFileReplicationITCase.class
+                                                            .getClassLoader()));
+                                });
 
                 extraVerification(configuration, applicationId);
 
```",[hotfix][yarn][tests] Improve assertion in case job failed,4,4,4,4,fix failing test,0,1,4,4,"Fix: Update error handling in `deployPerJob` method This commit updates the `deployPerJob` method in the `YARNFileReplicationITCase.java` file. The method now throws an AssertionError if a serialized throwable is present, providing a more robust error handling mechanism.",4,4,4,4,"refactor: Throw AssertionError on job failure in YARNFileReplicationITCase
This change refactors the YARNFileReplicationITCase test to propagate job failure errors by throwing an AssertionError when a job result's serialized throwable is present, improving the test's robustness and error handling."
c7d598a7c52224ab8ab2159d2885ffc8f64c67f3,apache/flink,,"File: flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/DefaultDeclarativeSlotPoolTest.java
Status: modified
```diff
@@ -195,7 +195,7 @@ public void testDuplicateSlotOfferings() throws InterruptedException {
     }
 
     @Test
-    public void testOfferingTooManySlots() {
+    public void testOfferingTooManySlotsWillRejectSuperfluousSlots() {
         final NewSlotsService notifyNewSlots = new NewSlotsService();
         final DefaultDeclarativeSlotPool slotPool =
                 createDefaultDeclarativeSlotPoolWithNewSlotsListener(notifyNewSlots);
```",[hotfix][tests] Rename DefaultDeclarativeSlotPoolTest.testOfferingTooManySlots into testOfferingTooManySlotsWillRejectSuperfluousSlots,4,4,4,4,fix typo in test name,0,0,4,4,"Refactor: Rename test method in DefaultDeclarativeSlotPoolTest The test method `testOfferingTooManySlots()` has been renamed to `testOfferingTooManySlotsWillRejectSuperfluousSlots()` to better reflect its functionality. This change does not affect the functionality of the code, but improves the readability and understanding of the test.",4,4,4,4,"refactor: Update test method name for clarity
Updated the test method name to better match its implementation, which checks that offering too many slots will result in rejection of superfluous slots. This change improves the test's naming consistency and reduces potential confusion."
f2e3d204d6e8e49be4abe00b9db244901ab90eaf,apache/flink,,"File: flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest.java
Status: modified
```diff
@@ -27,8 +27,8 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
 
 /**
  * Tests for {@link PhysicalSlotProviderImpl} using {@link
```",[hotfix][tests] Replace assertThat with MatcherAssert.assertThat in PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest,0,4,4,4,fix import order,0,0,4,4,Style: Update import statement in test file The import statement for the `assertThat` method in the `PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest.java` file has been updated. The old import statement has been replaced with a new one. This change does not affect the functionality of the code.,3,4,4,4,"style: Replace JUnit assertion import with Hamcrest
Replaced JUnit assertion import with Hamcrest to maintain consistency in assertion libraries used across the project."
6b92e07b7c6180edd54e54fb2725f01ca5e0f022,apache/flink,,"File: flink-table/flink-table-planner/src/test/java/org/apache/flink/table/planner/functions/BuiltInFunctionTestBase.java
Status: modified
```diff
@@ -411,7 +411,7 @@ public String toString() {
             return ""[API] ""
                     + expression.stream()
                             .map(Expression::asSummaryString)
-                            .collect(Collectors.joining());
+                            .collect(Collectors.joining("", ""));
         }
     }
 
```","[hotfix][table-planner] Beautify the assertion error message in BuiltInFunctionTestBase When testing multiple cases as multiple columns of a table separate them in error msg output for TableApi with a `, `.",4,4,4,4,fix broken test,0,0,4,4,"Refactor: Improve readability of toString() method in BuiltInFunctionTestBase.java The toString() method in BuiltInFunctionTestBase.java has been refactored to improve its readability. Previously, the method returned a string representation of the object, including its definition name and description. The updated method now returns a string representation of the API, including a comma-separated list of summary strings for each expression in the expression stream. This change does not alter the external behavior of the code but improves the internal structure.",4,4,3,4,"refactor: Separate sub-expressions with commas in API expression string representation
This change improves the readability of API expression string representation by separating sub-expressions with commas. Specifically, it updates the `toString()` method in `BuiltInFunctionTestBase` to use `Collectors.joining("", "")` for a more informative output."
84e1a529626427a184acc88a356e04f4f9f17007,apache/flink,,"File: flink-examples/flink-examples-streaming/src/main/java/org/apache/flink/streaming/examples/gpu/MatrixVectorMul.java
Status: modified
```diff
@@ -23,10 +23,10 @@
 import org.apache.flink.api.common.serialization.SimpleStringEncoder;
 import org.apache.flink.api.java.utils.ParameterTool;
 import org.apache.flink.configuration.Configuration;
+import org.apache.flink.connector.file.sink.FileSink;
 import org.apache.flink.core.fs.Path;
 import org.apache.flink.streaming.api.datastream.DataStream;
 import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
-import org.apache.flink.streaming.api.functions.sink.filesystem.StreamingFileSink;
 import org.apache.flink.streaming.api.functions.source.RichSourceFunction;
 import org.apache.flink.util.Preconditions;
 
@@ -101,8 +101,8 @@ public static void main(String[] args) throws Exception {
 
         // Emit result
         if (params.has(""output"")) {
-            result.addSink(
-                    StreamingFileSink.forRowFormat(
+            result.sinkTo(
+                    FileSink.forRowFormat(
                                     new Path(params.get(""output"")),
                                     new SimpleStringEncoder<List<Float>>())
                             .build());
```",[hotfix][examples] Replace StreamingFileSink with FileSink,0,4,4,4,fix matrix matrix path,0,0,3,3,"Refactor: Update sink method in MatrixVectorMul.java This commit updates the method for adding a sink to the result in the main method of the MatrixVectorMul.java file. The import statement for StreamingFileSink is replaced with FileSink, and the method for adding a sink is changed from addSink to sinkTo. The functionality of the main method remains the same.",4,4,4,4,"refactor: Replace StreamingFileSink with FileSink in MatrixVectorMul
Replaced StreamingFileSink with FileSink in MatrixVectorMul, removing unnecessary complexity and aligning with the latest Flink API. This change ensures the program's observable behavior remains unaffected, while simplifying the file sink implementation."
b51021302ca755cd2e495d2dd8cfc54f70521f52,spepping/fop-cs,,"File: src/org/apache/fop/image/ImageArea.java
Status: modified
```diff
@@ -52,6 +52,7 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 
 package org.apache.fop.image;
 
+import org.apache.fop.fo.properties.TextAlign;
 import org.apache.fop.layout.*;
 import org.apache.fop.render.Renderer;
 
@@ -72,16 +73,18 @@ public ImageArea(FontState fontState, FopImage img,
 	this.image = img;
 
 	switch (align) {
-	case 1: // should be TextAlign.START
+	case TextAlign.START:
 	    xOffset = startIndent;
 	    break;
-	case 2: //should be TextAlign.END
+	case TextAlign.END:
 	    if (endIndent == 0)
 		endIndent = AllocationWidth;
 	    xOffset = (endIndent - width);
 	    break;
-	case 3: //should be TextAlign.CENTER
-	case 4: //should be TextAlign.JUSTIFY
+	case TextAlign.JUSTIFY:
+	    xOffset = startIndent;
+	    break;
+	case TextAlign.CENTER:
 	    if (endIndent == 0)
 		endIndent = AllocationWidth;
 	    xOffset = startIndent + ((endIndent - startIndent) - width)/2;
```",Correction for the text-align bug.,3,4,4,4,fix image area,2,1,4,4,Refactor: Replace numerical values with TextAlign constants in ImageArea.java This commit replaces the numerical values in the switch statement in ImageArea.java with corresponding constants from the TextAlign class. This change improves the readability and maintainability of the code. No external behavior is changed.,0,4,4,4,"refactor: Replace magic numbers with TextAlign constants
Replaced hardcoded alignment values with TextAlign constants, aligning the code with the existing type-safe enumeration."
cc65cfaf8df8cbaec3ba9ec60544a13396358909,spepping/fop-cs,,"File: src/org/apache/fop/layout/LineArea.java
Status: modified
```diff
@@ -487,14 +487,18 @@ public void addLeader(int leaderPattern, int leaderLengthMinimum,
                           int ruleStyle, int ruleThickness, int leaderPatternWidth,
                           int leaderAlignment) {
         WordArea leaderPatternArea;
-        int leaderLength;
+        int leaderLength = 0;
         int remainingWidth =
           this.getContentWidth() - this.getCurrentXPosition();
-        //checks whether leaderLenghtOptimum fits into rest of line;
-        //should never overflow, asit has been checked already in BlockArea
-        if (remainingWidth < leaderLengthOptimum) {
+        /** checks whether leaderLenghtOptimum fits into rest of line;
+         *  should never overflow, as it has been checked already in BlockArea
+         *  first check: use remaining width if it smaller than optimum oder maximum
+         * */
+        if ((remainingWidth <= leaderLengthOptimum) ||   (remainingWidth <= leaderLengthMaximum)) {
             leaderLength = remainingWidth;
-        } else {
+        } else if ((remainingWidth > leaderLengthOptimum) && ( remainingWidth > leaderLengthMaximum)) {
+            leaderLength = leaderLengthMaximum;
+        } else if ((leaderLengthOptimum > leaderLengthMaximum) && (leaderLengthOptimum < remainingWidth)) {
             leaderLength = leaderLengthOptimum;
         }
         switch (leaderPattern) {
```",fixed: leader didn't fill line in content table,4,3,4,4,fix bug in LineArea,2,2,4,4,Refactor: Improve conditions for setting leaderLength in addLeader method This commit refactors the `addLeader` method in the `LineArea` class. The conditions for setting the `leaderLength` variable have been improved to better handle the space in a line when adding a leader. A leader is a pattern that fills the space in a line. The changes made do not alter the functionality of the method but improve the structure of the code.,0,3,3,4,"fix: Fix leader length overflow in addLeader
Update addLeader method to correctly calculate leader length by introducing conditional logic to handle cases where remaining width is less than or equal to leaderLengthOptimum or leaderLengthMaximum, preventing potential overflows and ensuring accurate layout rendering."
9714e1d97fa8bd499d042f24499be4f43832ea29,spepping/fop-cs,,"File: src/org/apache/fop/render/ps/PSRenderer.java
Status: modified
```diff
@@ -99,9 +99,6 @@ public class PSRenderer extends AbstractRenderer {
     private int currentFontSize;
     private int pageHeight;
     private int pageWidth;
-    private int currentXPosition = 0;
-    private int currentYPosition = 0;
-    private int currentAreaContainerXPosition = 0;
     private float currRed;
     private float currGreen;
     private float currBlue;
```","fixed a refactoring error, deleted repeated vars",4,4,4,4,remove unused field,4,4,4,4,"Refactor: Remove unused variables in PSRenderer class In the PSRenderer class of the org.apache.fop.render.ps package, three variables: currentXPosition, currentYPosition, and currentAreaContainerXPosition were removed. This is a code cleanup to remove unused variables.",4,4,4,4,"refactor: Remove unused fields from PSRenderer class
Removed three unused fields (currentXPosition, currentYPosition, currentAreaContainerXPosition) to declutter PSRenderer class, improving its maintainability and reducing potential sources of errors."
68f3cc378329f84ee257e8f80cc3a78b2f577db9,spepping/fop-cs,Y,"File: src/org/apache/fop/render/AbstractRenderer.java
Status: modified
```diff
@@ -1,6 +1,6 @@
 /*
  * $Id$
- * Copyright (C) 2001-2002 The Apache Software Foundation. All rights reserved.
+ * Copyright (C) 2001-2003 The Apache Software Foundation. All rights reserved.
  * For details on use and redistribution please refer to the
  * LICENSE file included with these sources.
  */
@@ -9,7 +9,7 @@
 // Java
 import java.awt.geom.Rectangle2D;
 import java.io.IOException;
-import java.util.HashMap;
+import java.util.Map;
 import java.util.List;
 import java.util.Iterator;
 
@@ -66,7 +66,7 @@ public abstract class AbstractRenderer extends AbstractLogEnabled
     /**
      * renderer configuration
      */
-    protected HashMap options;
+    protected Map options;
 
     /**
      * block progression position
@@ -109,7 +109,7 @@ public void setUserAgent(FOUserAgent agent) {
     }
 
     /** @see org.apache.fop.render.Renderer */
-    public void setOptions(HashMap opt) {
+    public void setOptions(Map opt) {
         options = opt;
     }
 
```


File: src/org/apache/fop/render/Renderer.java
Status: modified
```diff
@@ -9,7 +9,7 @@
 // Java
 import java.io.OutputStream;
 import java.io.IOException;
-import java.util.HashMap;
+import java.util.Map;
 
 // FOP
 import org.apache.fop.apps.FOPException;
@@ -86,7 +86,7 @@ void stopRenderer()
      *
      * @param options  The Configuration for the renderer
      */
-    void setOptions(HashMap options);
+    void setOptions(Map options);
 
     /**
      * Set the producer of the rendering. If this method isn't called the
```",Use Map instead of HashMap interface,0,4,4,4,remove unused code,0,0,4,4,Refactor: Replace HashMap with Map in AbstractRenderer and Renderer This commit replaces the usage of HashMap with Map in the setOptions methods of both AbstractRenderer.java and Renderer.java files. This change makes the methods more flexible as they can now accept any class that implements the Map interface.,4,4,4,4,"refactor: Use interface type for options in AbstractRenderer and Renderer
Updated `AbstractRenderer` and `Renderer` to use the interface type `Map` instead of the concrete implementation `HashMap` for the `options` field and `setOptions` method. This change improves the flexibility and maintainability of the code by decoupling it from a specific map implementation, making it easier to switch to alternative map implementations in the future."
6979a0c5c2d1c8c4bdac29fa2c11cebdd55f8a5b,spepping/fop-cs,,"File: src/java/org/apache/fop/apps/Document.java
Status: modified
```diff
@@ -120,7 +120,7 @@ public Driver getDriver() {
     public void foPageSequenceComplete (FOTreeEvent event) throws FOPException {
         PageSequence pageSeq = event.getPageSequence();
         areaTree.addBookmarksToAreaTree();
-        format(pageSeq, areaTree);
+        formatPageSequence(pageSeq, areaTree);
     }
 
     /**
@@ -187,7 +187,8 @@ public FOInputHandler getFOInputHandler() {
      * @param areaTree the area tree to format this page sequence into
      * @throws FOPException if there is an error formatting the contents
      */
-    public void format(PageSequence pageSeq, AreaTree areaTree) throws FOPException {
+    private void formatPageSequence(PageSequence pageSeq, AreaTree areaTree) 
+            throws FOPException {
         Title title = null;
         if (pageSeq.getTitleFO() != null) {
             title = getTitleArea(pageSeq.getTitleFO());
```",public format() renamed to private formatPageSequence().,4,4,4,4,fix Document foPageSequenceComplete,0,0,4,4,Refactor: Rename and change visibility of format method in Document.java The method `format` in `Document.java` has been renamed to `formatPageSequence` and its visibility has been changed from public to private. The method `foPageSequenceComplete` has been modified to call this new method instead of the old `format` method. The new method `formatPageSequence` is responsible for formatting a page sequence and adding it to the area tree.,4,4,4,4,"refactor: Extract formatPageSequence method from foPageSequenceComplete
Extracted `formatPageSequence` method to separate page sequence formatting logic from `foPageSequenceComplete`, enhancing code organization and readability."
3ce8d2c782f832bb494634743c340ec0eaf3b248,spepping/fop-cs,,"File: src/java/org/apache/fop/fo/FObjMixed.java
Status: modified
```diff
@@ -59,6 +59,7 @@ protected void endOfNode() throws FOPException {
 
     /**
      * Adds accumulated text as one FOText instance.
+     * Makes sure that nested calls to itself do nothing.
      * @throws FOPException if there is a problem during processing
      */
     protected void flushText() throws FOPException {
```",Added a clarifying comment,4,4,4,4,add missing javadoc,0,0,4,4,Feat: Add nested call handling comment to flushText method This commit adds a comment to the `flushText()` method in the `FObjMixed.java` file. The comment clarifies that the method ensures that nested calls to itself do nothing. This additional documentation improves the understanding of the method's functionality.,3,4,4,4,"refactor: Safeguard flushText() against recursive calls
Modified flushText() to detect and ignore recursive calls, ensuring the method's correctness and preventing potential stack overflow errors. This change enhances the robustness of FObjMixed, a mixed formatting object node in an XSL-FO tree, by avoiding unintended behavior."
8faebbf0210814263bb945984d8cfae94d8220eb,spepping/fop-cs,,"File: src/java/org/apache/fop/render/bitmap/TIFFRenderer.java
Status: modified
```diff
@@ -94,8 +94,7 @@ public TIFFRenderer() {
     public void configure(Configuration cfg) throws ConfigurationException {
 
         //TODO Support output of monochrome bitmaps (fax-style)
-        String c = cfg.getChild(""compression"").getAttribute(""value"");
-        int comp = Integer.parseInt(c);
+        int comp = cfg.getChild(""compression"").getAttributeAsInteger(""value"", 1);
         String name = null;
         switch (comp) {
         case TIFFEncodeParam.COMPRESSION_NONE:
```","Fallback to default value if ""compression"" value is not given.",3,4,4,4,remove unused code,0,0,4,4,"Refactor: Simplify assignment of 'comp' variable in 'configure' method This commit simplifies the assignment of the 'comp' variable in the 'configure' method of the 'TIFFRenderer' class. The change does not alter the functionality of the method, which is to configure the TIFF compression type based on the provided configuration. The refactor improves the structure of the code, making it easier to read and maintain.",4,4,4,4,"refactor: Simplify compression configuration
Simplified compression configuration by eliminating unnecessary string parsing, making the code more efficient and easier to maintain."
13058088c864f7998bcf7dd2f6e2e2b3afd2f34c,spepping/fop-cs,,"File: src/java/org/apache/fop/fo/FOPropertyMapping.java
Status: modified
```diff
@@ -2623,13 +2623,17 @@ private void createShorthandProperties() {
         // background-position
         m  = new ListProperty.Maker(PR_BACKGROUND_POSITION);
         m.setInherited(false);
+        m.addKeyword(""left"", ""0% 50%"");
+        m.addKeyword(""center"", ""50% 50%"");
+        m.addKeyword(""right"", ""100% 50%"");
         m.setDefault(""0% 0%"");
         m.setDatatypeParser(new BackgroundPositionShorthandParser());
         addPropertyMaker(""background-position"", m);
 
         // border
         m  = new ListProperty.Maker(PR_BORDER);
         m.setInherited(false);
+        m.setDefault("""");
         m.setDatatypeParser(new GenericShorthandParser());
         addPropertyMaker(""border"", m);
 
```","Added default empty String to the border shorthand. Avoids NPE mentioned in Bugzilla 38648. Still need to add a warning, since property now silently falls back to the default(s).",4,4,4,4,add some more property to the property,0,0,2,2,"Feat: Add keywords to background-position and set default for border In the `createShorthandProperties()` method in the `FOPropertyMapping.java` file, more keywords were added to the `background-position` property and the default value for the `border` property was set. This enhances the functionality of the CSS parser by providing more options for the `background-position` property and a default value for the `border` property.",4,2,4,4,"feat: Introduce shorthand properties for CSS styles
This commit adds shorthand properties for CSS styles, introducing keywords for 'left', 'center', and 'right' in background-position and a default value for border. The `createShorthandProperties` method is updated to support these enhancements."
5a0356fdfc4f2935a816d58d8de265b73e923794,spepping/fop-cs,,"File: src/java/org/apache/fop/fo/extensions/OldExtensionElementMapping.java
Status: modified
```diff
@@ -18,10 +18,15 @@
 
 package org.apache.fop.fo.extensions;
 
+import java.util.HashMap;
+
+import org.apache.fop.fo.ElementMapping;
+import org.apache.fop.fo.UnknownXMLObj;
+
 /**
- * Element mapping for the old FOP extension namespace. It is simply mapped to the new namespace.
+ * Element mapping for the old FOP extension namespace.
  */
-public class OldExtensionElementMapping extends ExtensionElementMapping {
+public class OldExtensionElementMapping extends ElementMapping {
     
     /** The old FOP extension namespace URI (FOP 0.20.5 and earlier) */
     public static final String URI = ""http://xml.apache.org/fop/extensions"";
@@ -33,4 +38,14 @@ public OldExtensionElementMapping() {
         namespaceURI = URI;
     }
 
+    /**
+     * Initialize the data structures.
+     */
+    protected void initialize() {
+        if (foObjs == null) {
+            foObjs = new HashMap();
+            foObjs.put(""outline"", new UnknownXMLObj.Maker(URI));
+            foObjs.put(""label"", new UnknownXMLObj.Maker(URI));
+        }
+    }
 }
```",Simply subclassing did not work as expected. Made a copy now.,4,3,4,3,add OldExtensionElementMapping ElementMapping,0,0,4,0,"Refactor: Improve handling of unknown XML objects in OldExtensionElementMapping In this commit, the class `OldExtensionElementMapping` has been refactored to improve the handling of unknown XML objects. The class now extends `ElementMapping` instead of `ExtensionElementMapping`. A new method `initialize()` has been added, which initializes a HashMap with ""outline"" and ""label"" objects if it is null. This setup allows for better handling of unknown XML objects in the mapping of the old FOP extension namespace.",3,4,4,4,"feat: Add lazy initialization to OldExtensionElementMapping's FO objects map
Implemented lazy initialization for FO objects map in OldExtensionElementMapping, deferring the creation of the map and its default values ('outline' and 'label') until they are actually needed. This approach reduces memory allocation and improves performance."
de9a33a49d34b5cff206f2a2d9d71708b5473c53,spepping/fop-cs,,"File: src/java/org/apache/fop/fonts/type1/PFMInputStream.java
Status: modified
```diff
@@ -19,6 +19,7 @@
 
 package org.apache.fop.fonts.type1;
 
+import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.DataInputStream;
@@ -30,7 +31,7 @@
  */
 public class PFMInputStream extends java.io.FilterInputStream {
 
-    private DataInputStream datain;
+    private final DataInputStream datain;
 
     /**
      * Constructs a PFMInputStream based on an InputStream representing the
@@ -97,10 +98,14 @@ public long readInt() throws IOException {
     public String readString() throws IOException {
         InputStreamReader reader = new InputStreamReader(in, ""ISO-8859-1"");
         StringBuffer buf = new StringBuffer();
+
         int ch = reader.read();
         while (ch != 0) {
             buf.append((char)ch);
             ch = reader.read();
+            if (ch == -1) {
+                throw new EOFException(""Unexpected end of stream reached"");
+            }
         }
         return buf.toString();
     }
```",Make PFM string parsing a little more robust,4,4,4,4,throw an exception if the datain is not read,0,0,4,4,Fix: Handle unexpected end of stream in readString method This commit modifies the readString method in the PFMInputStream.java file to throw an EOFException when the end of the stream is reached unexpectedly. This change ensures that the method can handle unexpected end of stream scenarios and prevent potential errors.,4,4,4,4,"fix: Handle end of stream in readString
This commit fixes a potential issue in the `readString` method where it would not handle the end of stream correctly, leading to unexpected behavior. By throwing an `EOFException` when the stream ends unexpectedly, this change ensures that the method behaves correctly and robustly in all scenarios."
407189c905a232fff14c0ba7119ff0a1d2efb1f6,spepping/fop-cs,,"File: examples/embedding/java/embedding/intermediate/ExampleStamp.java
Status: modified
```diff
@@ -115,7 +115,7 @@ public static void main(String[] args) {
 
             //Setup output file
             File xsltfile = new File(baseDir, ""xml/xslt/projectteam2fo.xsl"");
-            File iffile = new File(outDir, ""team.at.xml"");
+            File iffile = new File(outDir, ""team.if.xml"");
             File stampxsltfile = new File(baseDir, ""xml/xslt/ifstamp.xsl"");
             File pdffile = new File(outDir, ""ResultIFStamped.pdf"");
             System.out.println(""Intermediate file : "" + iffile.getCanonicalPath());
```",Fixed copy/paste omission.,4,4,4,4,fix a typo,4,3,4,4,"fix: Correct intermediate file name in ExampleConcat program The main method in the ExampleConcat program has been updated to use a more appropriate intermediate file name. The file ""team.at.xml"" has been renamed to ""team.if.xml"" to better reflect its purpose in the process of generating a PDF document from an XML file using XSLT. This change helps to clarify the role of the intermediate file in the process.",4,4,4,4,"refactor: Rename intermediate file from team.at.xml to team.if.xml
Refactored the intermediate file naming to improve consistency and clarity, replacing 'team.at.xml' with 'team.if.xml' in ExampleStamp.java, aligning with the project's naming conventions."
e771cafe134754efcb34fc646031ed54546326ca,apache/geronimo,,"File: modules/core/src/java/org/apache/geronimo/xml/deployment/LoaderUtil.java
Status: modified
```diff
@@ -74,7 +74,7 @@
 /**
  * Holds utility methods for parsing a DOM tree.
  *
- * @version $Revision: 1.8 $ $Date: 2003/10/01 19:02:05 $
+ * @version $Revision: 1.9 $ $Date: 2003/11/18 02:12:33 $
  */
 public final class LoaderUtil {
     private static final Log log = LogFactory.getLog(LoaderUtil.class);
@@ -137,7 +137,7 @@ public static Element[] getChildren(Element root, String childName) {
         for(int i=0; i<max; i++) {
             Node n = nl.item(i);
             if(n.getNodeType() == Node.ELEMENT_NODE &&
-                    n.getNodeName().equals(childName)) {
+                    n.getLocalName().equals(childName)) {
                 list.add(n);
             }
         }
```",Handle namespaces properly,4,4,4,4,fix bug in LoaderUtil,2,2,4,4,"Fix: Correct method call in getChildren of LoaderUtil.java This commit corrects the method call in the `getChildren` method of the `LoaderUtil.java` file. Previously, `getNodeName()` was used to get the name of the node. This has been corrected to `getLocalName()`. The functionality of the method remains the same.",4,4,4,4,"fix: fix: Use getLocalName instead of getNodeName for element name checks
Replaced getNodeName with getLocalName in LoaderUtil.java to improve XML element name checks, as getNodeName returns the qualified name, which may include namespace prefixes, whereas getLocalName returns the local part of the qualified name, ensuring more accurate matching in the getChildren method."
128b786ba0d2b0ac942fd97ce6b532055326a616,apache/geronimo,,"File: modules/transaction/src/java/org/apache/geronimo/transaction/context/TransactionContextManager.java
Status: modified
```diff
@@ -259,9 +259,11 @@ public void begin(Xid xid, long txTimeoutMillis) throws XAException, InvalidTran
             containerTransactionContext.resume();
         }
         importer.setTransactionTimeout(txTimeoutMillis);
+        TransactionContext.setContext(containerTransactionContext);
     }
 
     public void end(Xid xid) throws XAException, SystemException {
+        TransactionContext.setContext(null);
         synchronized (importedTransactions) {
             ContainerTransactionContext containerTransactionContext = (ContainerTransactionContext) importedTransactions.get(xid);
             if (containerTransactionContext == null) {
```","when beginning/ending an imported xid/transaction, associate TransactionContext with thread",0,3,4,4,set TransactionContext in TransactionContextManager,0,2,4,4,"Feat: Set TransactionContext in TransactionContextManager This commit introduces a new feature in the TransactionContextManager class. The 'begin' method now sets the TransactionContext to a certain value, and the 'end' method sets the TransactionContext to null. This change enhances the functionality of these methods, providing more control over the transaction context during the transaction lifecycle.",4,4,4,4,"refactor: Set TransactionContext in begin and end methods explicitly
This commit refactors the TransactionContextManager to explicitly set and reset the TransactionContext in the begin and end methods, respectively, ensuring a consistent and correct transaction context management. This change improves the internal structure of the class, making it easier to understand and maintain."
fc0eef46d6ab04cb5a8b1d0c171860430a890517,apache/geronimo,,"File: modules/core/src/java/org/apache/geronimo/remoting/IntraVMRoutingInterceptor.java
Status: modified
```diff
@@ -66,11 +66,12 @@
 import org.apache.geronimo.remoting.transport.NullTransportInterceptor;
 
 /**
- * @version $Revision: 1.4 $ $Date: 2003/09/08 04:33:54 $
+ * @version $Revision: 1.5 $ $Date: 2003/10/31 06:59:46 $
  */
 public class IntraVMRoutingInterceptor implements Interceptor, Externalizable {
 
     Long deMarshalingInterceptorID;
+    boolean allwaysMarshall=false;
     transient Interceptor next;
 
     /**
@@ -93,7 +94,7 @@ synchronized private void resolveNext() {
 
         // Did we deserialize with the same app classloader that
         // the target belongs to??  
-        if (InvocationSupport.isAncestor(parent, child)) {
+        if (InvocationSupport.isAncestor(parent, child) && !allwaysMarshall) {
             // Then we can avoid demarshalling/marshalling
             next = deMarshalingInterceptor.getNext();
         } else {
@@ -153,4 +154,11 @@ public void setDeMarshalingInterceptorID(Long deMarshalingInterceptorID) {
         this.deMarshalingInterceptorID = deMarshalingInterceptorID;
     }
 
+    public boolean getAllwaysMarshall() {
+        return allwaysMarshall;
+    }
+
+    public void setAllwaysMarshall(boolean value) {
+        allwaysMarshall=value;
+    }
 }
```",added the setAllwaysMarshall method.,0,4,4,4,fix failing test,0,0,4,4,"Feat: Add alwaysMarshall flag to IntraVMRoutingInterceptor This commit introduces a new boolean variable `alwaysMarshall` to the `IntraVMRoutingInterceptor` class. This flag is used in the `resolveNext()` method to determine whether to avoid demarshalling/marshalling. If the current thread's context classloader is a child of the target's classloader and `alwaysMarshall` is false, then we can avoid demarshalling/marshalling. Additionally, getter and setter methods for `alwaysMarshall` were added. The `setAlwaysMarshall(boolean value)` method sets the `alwaysMarshall` flag to the provided value, and the `getAlwaysMarshall()` method returns the current state of the `alwaysMarshall` flag.",4,4,3,4,"refactor: Refactor IntraVMRoutingInterceptor to support conditional marshalling
This commit refactors IntraVMRoutingInterceptor to conditionally marshal objects based on the 'allwaysMarshall' flag, which is configurable through setter and getter methods. This change allows the interceptor to adapt to different scenarios, improving its reusability and flexibility in invocation routing and serialization."
85d0621be87e8d4c6cafb5717bf02abf5f2b8d42,apache/geronimo,,"File: modules/axis/src/java/org/apache/geronimo/axis/client/SEIFactoryImpl.java
Status: modified
```diff
@@ -120,15 +120,10 @@ void initialize() {
                 new SimpleSerializerFactory(URI.class, Constants.XSD_ANYURI),
                 new SimpleDeserializerFactory(URI.class, Constants.XSD_ANYURI));
 
+        TypeInfo.register(typeInfo, typeMapping);
         for (Iterator iter = typeInfo.iterator(); iter.hasNext();) {
             TypeInfo info = (TypeInfo) iter.next();
             TypeDesc.registerTypeDescForClass(info.getClazz(), info.buildTypeDesc());
-
-            SerializerFactory sf =
-                    BaseSerializerFactory.createFactory(info.getSerFactoryClass(), info.getClazz(), info.getqName());
-            DeserializerFactory df =
-                    BaseDeserializerFactory.createFactory(info.getDeserFactoryClass(), info.getClazz(), info.getqName());
-            typeMapping.register(info.getClazz(), info.getqName(), sf, df);
         }
     }
 
```",register the typeInfos correctly,3,4,4,4,remove unused code,0,0,4,4,"Refactor: Simplify type description registration in SEIFactoryImpl This commit simplifies the process of registering type descriptions in the `initialize()` method of the `SEIFactoryImpl.java` file. Previously, the method was setting up serializers and deserializers for each type of information. Now, it directly registers type descriptions for each type info in the service, which simplifies the code and improves readability without changing the external behavior of the method.",3,4,4,4,"refactor: Register TypeInfo and setup serialization/deserialization factories in SEIFactoryImpl
Separated TypeInfo registration and serialization/deserialization factory setup into distinct steps, decoupling them from the initialize method and improving the overall structure of SEIFactoryImpl."
9b935cb1bed5a7854fe9a80089048b2c26707bfb,apache/geronimo,,"File: modules/tomcat/src/java/org/apache/geronimo/tomcat/ValveGBean.java
Status: modified
```diff
@@ -54,9 +54,8 @@ public ValveGBean(String className, Map initParams, ValveGBean nextValve) throws
         
         if (nextValve != null){
             if (!(nextValve.getInternalObject() instanceof Valve)){
-                throw new IllegalArgumentException(""className cannot be null."");                
+                throw new IllegalArgumentException(""The class given as the NextValve attribute does not wrap an object of org.apache.catalina.Valve type."");                
             }
-            
             this.nextValve = nextValve;
         } else {
             this.nextValve = null;
```",Add a more informative error msg,4,4,4,4,fix typo in exception message,0,1,4,4,Fix: Update error message in ValveGBean class The error message in an IllegalArgumentException in the `ValveGBean` class has been updated to be more specific. The new message indicates that the class given as the NextValve attribute does not wrap an object of org.apache.catalina.Valve type.,3,4,4,4,"fix: Improve error message for invalid NextValve attribute
Updated error message to specify that the NextValve attribute class must implement org.apache.catalina.Valve, improving error handling and debugging."
bd2f2315d786b27a9e3488b3b5b4003370eb2146,apache/geronimo,,"File: plugins/geronimo-packaging-plugin/src/java/org/apache/geronimo/plugin/packaging/MavenConfigStore.java
Status: modified
```diff
@@ -133,6 +133,9 @@ public void install(ConfigurationData configurationData, File source) throws IOE
         URI configId = configurationData.getId();_x000D_
         URL targetURL = repository.getURL(configId);_x000D_
         File targetFile = new File(targetURL.getPath());_x000D_
+        File parentFile = targetFile.getParentFile();_x000D_
+        parentFile.mkdirs();_x000D_
+        targetFile.createNewFile();_x000D_
         ExecutableConfigurationUtil.createExecutableConfiguration(configurationData, null, source, targetFile);_x000D_
     }_x000D_
 _x000D_
```",This might help create the client cars,1,0,4,4,create maven maven repository,0,0,4,3,Fix: Ensure parent directories exist when installing configuration This commit modifies the `install` method in the `MavenConfigStore` class to create the necessary parent directories if they do not exist when installing a configuration from a source directory to a target file. This change ensures that the installation process does not fail due to missing parent directories.,4,4,4,4,"refactor: Create parent directories for target files in MavenConfigStore
This change ensures parent directories are created before writing target files in MavenConfigStore, preventing potential errors from missing directories."
f815a7f594b74a0edfb00a9153447a6dcd33e112,apache/geronimo,,"File: modules/remoting/src/java/org/apache/geronimo/remoting/jmx/MBeanServerStub.java
Status: modified
```diff
@@ -71,7 +71,7 @@
 
 
 /**
- * @version $Revision: 1.9 $ $Date: 2004/01/31 20:20:44 $
+ * @version $Revision: 1.10 $ $Date: 2004/01/31 20:23:52 $
  */
 public class MBeanServerStub implements GBean, JMXTarget {
     private ProxyContainer serverContainer;
@@ -120,7 +120,6 @@ public void doFail() {
 
     static {
         GBeanInfoFactory infoFactory = new GBeanInfoFactory(MBeanServerStub.class.getName());
-        infoFactory.addOperation(new GOperationInfo(""getName""));
         infoFactory.addOperation(new GOperationInfo(""getRemotingEndpointInterceptor""));
         infoFactory.addReference(new GReferenceInfo(""Router"", JMXRouter.class.getName()));
         GBEAN_INFO = infoFactory.getBeanInfo();
```",One should always run unit tests before checking files in,3,1,4,4,fix npe in EARConfigBuilder,0,1,4,4,"Final Answer: Refactor: Update version and remove operation in MBeanServerStub This commit updates the version and date comment in MBeanServerStub.java and removes the ""getName"" operation from the static block. No associated issues or pull requests were found for this commit.",2,4,4,4,"refactor: Remove unnecessary GOperationInfo and update version
Removed the unnecessary 'getName' operation from GBeanInfoFactory, which was not being utilized. This refactoring simplifies the code and eliminates redundant information, making it easier to maintain and understand."
d6c975205eb426e5465a6d37ccc9623942031e44,apache/geronimo,,"File: modules/geronimo-system/src/main/java/org/apache/geronimo/system/properties/NamingProperties.java
Status: modified
```diff
@@ -19,6 +19,9 @@
 import org.apache.geronimo.gbean.GBeanInfo;
 import org.apache.geronimo.gbean.GBeanInfoBuilder;
 
+import javax.naming.InitialContext;
+import javax.naming.NamingException;
+
 /** java.naming.factory.initial=com.sun.jndi.rmi.registry.RegistryContextFactory
 java.naming.factory.url.pkgs=org.apache.geronimo.naming
 java.naming.provider.url=rmi://localhost:1099
@@ -34,6 +37,14 @@ public NamingProperties(String namingFactoryInitial, String namingFactoryUrlPkgs
         setNamingFactoryInitial(namingFactoryInitial);
         setNamingFactoryUrlPkgs(namingFactoryUrlPkgs);
         setNamingProviderUrl(namingProviderUrl);
+
+        try {
+            // Calling this causes the System properties we just set
+            // to be read in and cached by the vm ensuring we can't
+            // be booted out by another module in the system.
+            new InitialContext().lookup(""java:"");
+        } catch (Throwable ignore) {
+        }
     }
 
     public String getNamingFactoryInitial() {
```",Cement the naming provider in the vm,3,3,4,3,add getNamingFactoryInitial to NamingProperties,0,1,4,4,"Feat: Add InitialContext initialization and lookup in NamingProperties This commit introduces a new feature in the NamingProperties class. It adds import statements for InitialContext and NamingException. It also includes a try-catch block that initializes an InitialContext and performs a lookup operation. This change ensures that the system properties set are read in and cached by the VM, preventing them from being booted out by another module in the system.",4,4,4,4,"refactor: Ensure JNDI properties are read and cached by the VM
This refactor introduces a mechanism to ensure JNDI properties are read and cached by the VM, preventing potential overrides by other system modules. This is achieved by performing an `InitialContext` lookup during object construction, which triggers the caching of JNDI properties. The lookup is wrapped in a try-catch block to handle any exceptions that may occur."
c1b48b342edc589109164e01e14b2bae4397b9e4,apache/geronimo,,"File: modules/geronimo-cxf/src/main/java/org/apache/geronimo/cxf/ejb/EJBMethodInvoker.java
Status: modified
```diff
@@ -67,6 +67,8 @@ protected Object invoke(Exchange exchange,
         try {
             result = container.invoke(this.deploymentInfo.getDeploymentID(), m, paramArray, null, null);
         } catch (OpenEJBException e) {
+            throw new Fault(e);           
+        } catch (RuntimeException e) {
             throw new Fault(e);
         }
         
```",return soap fault when runtime exception occurs,4,3,4,3,throw RuntimeException in EJBMethodInvoker,4,4,4,4,"Fix: Improve exception handling in EJBMethodInvoker In the invoke method of the EJBMethodInvoker class, additional exception handling has been added. Now, not only OpenEJBException is caught and handled, but also RuntimeException. This change improves the robustness of the method and ensures that any runtime exceptions are properly caught and handled.",4,4,4,4,"fix: Handle OpenEJBException and RuntimeException in EJBMethodInvoker
This commit introduces fault-tolerant behavior in EJB method invocation by catching and re-throwing OpenEJBException and RuntimeException as Fault objects, ensuring that invocation failures are properly propagated."
55b40d07d1ca33f2257e3e05529d83146ec62108,apache/geronimo,,"File: plugins/clustering/geronimo-clustering-wadi/src/test/java/org/apache/geronimo/clustering/wadi/WADISessionAdaptorTest.java
Status: modified
```diff
@@ -26,8 +26,6 @@
 
 import com.agical.rmock.extension.junit.RMockTestCase;
 
-import junit.framework.TestCase;
-
 /**
  *
  * @version $Rev:$ $Date:$
```",Clean-up import,4,4,4,4,remove unused import,4,4,4,4,Style: Remove unused imports in WADISessionAdaptorTest.java The commit removes unused import statements in the file WADISessionAdaptorTest.java. This is a style-related change that helps to keep the code clean and easy to read. No associated issue or pull request was found for this commit.,4,4,4,4,"style: Remove unnecessary import statements
Removed unnecessary import statements, specifically junit.framework.TestCase, to declutter the code and improve its overall organization."
38712e1a6348088aebc4aa5d9a51c9852d9f8887,apache/geronimo,,"File: plugins/cxf/geronimo-cxf/src/main/java/org/apache/geronimo/cxf/client/CXFServiceReference.java
Status: modified
```diff
@@ -26,6 +26,8 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.apache.cxf.Bus;
+import org.apache.cxf.BusFactory;
 import org.apache.cxf.jaxws.context.WebServiceContextImpl;
 import org.apache.geronimo.cxf.CXFWebServiceContainer;
 import org.apache.geronimo.gbean.AbstractName;
@@ -52,7 +54,8 @@ public CXFServiceReference(String serviceClassName,
     }
        
     public Object getContent() throws NamingException {
-        CXFWebServiceContainer.getDefaultBus();
+        Bus bus = CXFWebServiceContainer.getDefaultBus();
+        BusFactory.setThreadDefaultBus(bus);
         Object reference = super.getContent();   
         SAAJInterceptor.registerInterceptors();        
         return reference;
```",set the bus on the thread to ensure the service class is initialized with the right bus,4,4,4,4,use the default bus in CXFServiceReference,0,3,4,4,"Refactor: Set default bus in getContent method In the CXFServiceReference.java file, the getContent() method has been refactored. The method now sets the default bus before returning the content of the object. This change ensures that the default bus is properly set up each time the getContent() method is called.",4,4,4,4,"feat: Initialize CXF bus and register interceptors in getContent method
This commit modifies the getContent method to initialize the CXF bus and set it as the thread default bus, ensuring that SAAJ interceptors are properly registered. This change enables the correct setup of the CXF bus and interceptors, which is essential for the getContent method to function correctly."
13c244d4a8139a4fdc27d10b34544ec037a30dbb,apache/geronimo,,"File: plugins/openejb/geronimo-openejb-builder/src/main/java/org/apache/geronimo/openejb/deployment/EjbModule.java
Status: modified
```diff
@@ -30,6 +30,7 @@
 import org.apache.geronimo.openejb.xbeans.ejbjar.OpenejbGeronimoEjbJarType;
 import org.apache.openejb.ClassLoaderUtil;
 import org.apache.openejb.config.ConfigurationFactory;
+import org.apache.openejb.core.TempClassLoader;
 import org.apache.openejb.jee.EjbJar;
 import org.apache.openejb.jee.EnterpriseBean;
 import org.apache.openejb.jee.oejb3.OpenejbJar;
@@ -125,8 +126,10 @@ public Map<JndiKey, Map<String, Object>> getEjbJndiContext() {
 
     @Override
     public void close() {
-        ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader().getParent());
-        ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader());
+        if (ejbModule.getClassLoader() instanceof TempClassLoader) {
+            ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader().getParent());
+            ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader());
+        }
         super.close();
     }
 
```",Only destroy the classloader if it is TempClassLoader from OpenEBJ,0,4,4,4,don t close class loader if it doesn t exist,0,1,4,4,"Fix: Update close method in EjbModule.java This commit updates the close() method in the EjbModule.java file. Previously, the method was destroying the class loaders associated with the EJB module and then closing the module. Now, the method destroys the class loaders only if they are instances of TempClassLoader before closing the module. This change ensures that only the appropriate class loaders are destroyed, preventing potential issues.",4,4,4,4,"refactor: Destroy TempClassLoader instances in EjbModule.close()
Destroy TempClassLoader instances in EjbModule.close() to free up resources. This refactoring ensures proper resource release by targeting only temporary class loaders, unlike the previous implementation which destroyed all class loaders."
6f2aae046d9ebeeae1cd82a687ed6fb165405988,apache/hadoop,,"File: hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/BootstrapStandby.java
Status: modified
```diff
@@ -36,6 +36,8 @@
 import org.apache.hadoop.ha.HAServiceProtocol;
 import org.apache.hadoop.ha.HAServiceStatus;
 import org.apache.hadoop.ha.HAServiceProtocol.HAServiceState;
+import org.apache.hadoop.ha.HAServiceProtocol.RequestSource;
+import org.apache.hadoop.ha.HAServiceProtocol.StateChangeRequestInfo;
 import org.apache.hadoop.ha.ServiceFailedException;
 import org.apache.hadoop.hdfs.DFSUtil;
 import org.apache.hadoop.hdfs.HAUtil;
@@ -251,7 +253,8 @@ private int doRun() throws IOException {
   private void transitionOtherNNActive()
       throws AccessControlException, ServiceFailedException, IOException {
     LOG.info(""Transitioning the running namenode to active..."");
-    createHAProtocolProxy().transitionToActive();    
+    createHAProtocolProxy().transitionToActive(
+        new StateChangeRequestInfo(RequestSource.REQUEST_BY_USER));
     LOG.info(""Successful"");
   }
 
```",Resolve trivial compilation error after previous merge,4,0,4,4,add StateChangeRequestInfo to createHAProtocolProxy,0,4,4,4,feat: Modify transitionOtherNNActive method in BootstrapStandby.java This commit modifies the `transitionOtherNNActive()` method in the `BootstrapStandby.java` file to transition the running namenode to active state. Two import statements were added and the method call was modified. This is a feature enhancement to the Hadoop HDFS project.,3,3,4,4,"feat: Specify request source when transitioning namenode to active state
This change enhances the reliability of the high availability (HA) cluster setup by specifying the request source when transitioning the namenode to active state, ensuring that the state change request is properly attributed and logged."
cfcb9a42f34dfd038be2451a7a5ed62e3753810e,apache/ignite,,"File: modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java
Status: modified
```diff
@@ -336,7 +336,13 @@ else if (filter instanceof SpiQuery) {
      * @return Local node cluster group.
      */
     private ClusterGroup projection(boolean local) {
-        return local || ctx.isLocal() || ctx.isReplicated() ? ctx.kernalContext().grid().cluster().forLocal() : null;
+        if (local || ctx.isLocal() || isReplicatedDataNode())
+            return ctx.kernalContext().grid().cluster().forLocal();
+
+        if (ctx.isReplicated())
+            return ctx.kernalContext().grid().cluster().forDataNodes(ctx.name()).forRandom();
+
+        return null;
     }
 
     /**
```",ignite-sql-tests - replicated projection,0,0,2,0,don t use deprecated method,0,0,4,4,"Refactor: Update logic in `projection(boolean local)` method in `IgniteCacheProxy.java` This commit refactors the `projection(boolean local)` method in the `IgniteCacheProxy.java` class. The method now determines the cluster group for the cache data based on the cache mode and local flag. This is a change in the internal logic of the method, but it does not affect the external behavior or functionality of the method.",3,4,4,4,"refactor: Split cluster group logic for local and replicated nodes
Refactored the `projection` method to separate the logic for local and replicated nodes, resulting in clearer and more modular code. This change enables more efficient handling of cluster groups for different node types."
d623d7e4913998b29a3ba91e78e8409cd1d89d46,apache/ignite,,"File: modules/core/src/test/java/org/apache/ignite/internal/IgniteClientReconnectFailoverTest.java
Status: modified
```diff
@@ -148,6 +148,12 @@ public void testReconnectTxCache() throws Exception {
 
                     assertEquals(map, res);
                 }
+                catch (IgniteClientDisconnectedException e) {
+                    throw e;
+                }
+                catch (IgniteException e) {
+                    log.info(""Ignore error: "" + e);
+                }
                 catch (CacheException e) {
                     if (e.getCause() instanceof IgniteClientDisconnectedException)
                         throw e;
```",# master fixed test,1,1,2,0,fix failing test,2,2,4,4,Fix: Handle exceptions in testReconnectTxCache method This commit adds exception handling for `IgniteClientDisconnectedException` and `IgniteException` in the `testReconnectTxCache` method of the `IgniteClientReconnectFailoverTest.java` file. The changes are made to ensure the correct behavior of the transactional cache during a client reconnect in a failover scenario.,4,4,4,4,"fix: Add exception handling for IgniteClientDisconnectedException and IgniteException in testReconnectTxCache
This commit improves the reliability of the testReconnectTxCache method by handling IgniteClientDisconnectedException and IgniteException, ensuring that the test can consistently verify the reconnect and failover functionality of the transactional cache."
5faffb98032f54ed1160279de9d52938aef94bd2,apache/ignite,,"File: modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CachePartialUpdateCheckedException.java
Status: modified
```diff
@@ -34,7 +34,7 @@ public class CachePartialUpdateCheckedException extends IgniteCheckedException {
     private final Collection<Object> failedKeys = new ArrayList<>();
 
     /** */
-    private AffinityTopologyVersion topVer;
+    private transient AffinityTopologyVersion topVer;
 
     /**
      * @param msg Error message.
```",# Properly handle ClusterTopologyServerNotFoundException for retries,1,2,4,4,make topVer transient,0,4,4,4,Refactor: Make `topVer` transient in `CachePartialUpdateCheckedException` This commit makes the `topVer` variable transient in the `CachePartialUpdateCheckedException` class. This change does not affect any methods or class functionalities.,0,4,4,4,"refactor: Make AffinityTopologyVersion field transient in CachePartialUpdateCheckedException
This change marks AffinityTopologyVersion as transient in CachePartialUpdateCheckedException, excluding it from serialization and reducing unnecessary data transfer, without altering the class's observable behavior."
4aca49915215ba766c855b519af698e5a35ee1b5,apache/ignite,,"File: modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java
Status: modified
```diff
@@ -282,12 +282,17 @@ else if (first == cntr0 + 1)
         return (int)storageSize.get();
     }
 
-    /** {@inheritDoc} */
+
+    /**
+     *
+     */
     public void onInsert() {
         storageSize.incrementAndGet();
     }
 
-    /** {@inheritDoc} */
+    /**
+     * 
+     */
     public void onRemove() {
         storageSize.decrementAndGet();
     }
```",ignite-db-x Fixed javadoc,4,3,4,4,add javadoc to GridDhtLocalPartition onInsert,4,2,4,4,Style: Remove comments in GridDhtLocalPartition.java The comments in the methods onInsert() and onRemove() in the class GridDhtLocalPartition.java have been removed. This is a style change and does not affect the functionality of the code.,4,3,4,4,"style: Remove redundant Javadoc comments
Removed redundant Javadoc comments in GridDhtLocalPartition.java to improve code readability and maintainability by reducing unnecessary clutter."
f519fc599e420638ad53b8e53b92b8d22bfdd773,apache/ignite,,"File: modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/record/WALRecord.java
Status: modified
```diff
@@ -41,7 +41,10 @@ public enum RecordType {
         STORE_OPERATION_RECORD,
 
         /** */
-        CHECKPOINT_RECORD;
+        CHECKPOINT_RECORD,
+
+        /** */
+        HEADER_RECORD;
 
         /** */
         private static final RecordType[] VALS = RecordType.values();
@@ -53,7 +56,7 @@ public static RecordType fromOrdinal(int ord) {
     }
 
     /** */
-    private int size = -1;
+    private int size;
 
     /** */
     private int chainSize;
@@ -104,15 +107,15 @@ public long position() {
      * @param pos Position in file.
      */
     public void position(long pos) {
+        assert pos >= 0: pos;
+
         this.pos = pos;
     }
 
     /**
      * @return Size of this record in bytes.
      */
     public int size() {
-        assert size != -1;
-
         return size;
     }
 
```",ignite-db-x - wal header,0,0,0,0,add more info to assertion,0,1,4,4,"Feat: Add non-negative assertion to position method and new enum value In the WALRecord.java file, the position method now includes an assertion that ensures the position value is non-negative. This is a new feature added to improve the robustness of the method. Additionally, a new enum value, HEADER_RECORD, has been added to the RecordType enum. The initial value for the size variable has also been removed.",4,4,4,4,"refactor: Introduce HEADER_RECORD and assert non-negative position in WALRecord
This commit introduces `HEADER_RECORD` and asserts non-negative position in `WALRecord`. The `position` method now checks for non-negative input, and the `size` field initialization is removed. This refactoring simplifies `WALRecord`'s internal structure, improving its maintainability."
f6d42f3e304a7947824650e5a7692fb787174ebf,apache/ignite,,"File: modules/yardstick/src/main/java/org/apache/ignite/yardstick/cache/IgniteAtomicSequenceBenchmark.java
Status: modified
```diff
@@ -34,6 +34,8 @@ public class IgniteAtomicSequenceBenchmark extends IgniteAbstractBenchmark {
         super.setUp(cfg);
 
         seq = ignite().atomicSequence(""benchSequence"", 0, true);
+
+        seq.batchSize(args.batch());
     }
 
     /** {@inheritDoc} */
```",Configure sequence batch size in IgniteAtomicSequenceBenchmark.,0,4,4,4,fix bug in IgniteAtomicSequenceBenchmark,2,2,4,4,"Feat: Set batch size in IgniteAtomicSequenceBenchmark setUp method In the setUp method of the IgniteAtomicSequenceBenchmark class, the atomic sequence is now initialized with a specified batch size. This is a new feature added to the method, which allows for more flexible configuration of the atomic sequence for benchmark tests.",4,4,4,4,"feat: Set batch size for Ignite atomic sequence in setup
This change configures the batch size of Ignite atomic sequence in setup method to be dynamic, based on benchmark arguments, enabling more flexible benchmarking."
babfc2f051f8471f541bd054650a47cceb3cc09e,apache/ignite,,"File: modules/core/src/main/java/org/apache/ignite/util/AttributeNodeFilter.java
Status: modified
```diff
@@ -65,6 +65,9 @@
  * {@code cpu-group} and {@code memory-group} attributes set to value {@code high}.
  */
 public class AttributeNodeFilter implements IgnitePredicate<ClusterNode> {
+    /** */
+    private static final long serialVersionUID = 0L;
+
     /** Attributes. */
     private final Map<String, Object> attrs;
 
```",AttributeNodeFilter: added serialVersionUID.,0,4,4,4,add serialVersionUID constant,0,4,4,4,Feat: Add serialVersionUID field to AttributeNodeFilter class This commit adds a new field `serialVersionUID` to the `AttributeNodeFilter` class. This field is necessary for the serialization of the class.,2,4,4,4,"style: Add serialVersionUID to AttributeNodeFilter
Added serialVersionUID to conform to Java serialization best practices."
a3baa4e8beeee9f69d9c92fa8e08da3135063194,apache/isis,,"File: example-ecs/xat/org/nakedobjects/example/ecs/ECSAcceptanceTest.java
Status: modified
```diff
@@ -177,8 +177,7 @@ public void testReuseBooking() {
     }
     
     public void testNewMethods() {
-//      setup
-        testBasicBooking();
+       testBasicBooking();
         // end of setup
        
         TestObject customer = getTestClass(Customer.class.getName()).findInstance(""Pawson"");
```",Moved the XAT to a separate source folder. This way the eploration build can exclude the XATs.,0,0,4,4,remove booking booking tests,0,0,4,4,Style: Adjust indentation and remove comment in testNewMethods() The indentation of the method call `testBasicBooking();` in the `testNewMethods()` method of the `ECSAcceptanceTest.java` file has been adjusted. A comment line preceding this method call has also been removed. The context of the use of `testNewMethods()` has shifted from testing new methods in the customer class to testing new methods for customer booking. No associated issues or pull requests were found for this commit.,4,1,3,4,"refactor: Remove unnecessary setup code from testNewMethods
Removed redundant setup code in testNewMethods, allowing the test to focus solely on verifying the new methods of the customer object. This refactoring simplifies the internal structure of ECSAcceptanceTest, making it easier to comprehend and modify."
b8aabc096aa14f43786f8b50e7b8aa270aaea9ba,apache/isis,,"File: no-core/src/org/nakedobjects/object/persistence/defaults/LocalObjectManager.java
Status: modified
```diff
@@ -403,17 +403,25 @@ public void resolveEagerly(NakedObject object, NakedObjectField field) {
     }
 
     public void resolveImmediately(NakedObject object) {
-        if (object.isResolved() || !isPersistent(object)) {
+        if (object.isResolved()) {
+            LOG.debug(""resolve requested, but already resolved: "" + object);
+           return;
+        }
+
+        if (!isPersistent(object)) {
+            LOG.debug(""resolve requested, but not persistent: "" + object);
             return;
         }
-        LOG.info(""resolve-immediately "" + object);
+
+        LOG.info(""resolve-immediately: "" + object);
         try {
+            object.setResolved();
             objectStore.resolveImmediately(object);
             objectsToBeSaved.remove(object);
         } catch (ObjectStoreException e) {
             throw new NakedObjectRuntimeException(e);
         }
-        object.setResolved();
+      //  object.setResolved();
     }
 
     public void saveChanges() {
```",Moved the setting of the resovled flag in an object to before the call to the object store. This ensures that any recursive resolving will not attempt to resovlve the same object in an infinite loop,4,4,4,4,add more logging,4,3,4,4,"Refactor: Improve structure of `resolveImmediately` method in `LocalObjectManager.java` This commit refactors the `resolveImmediately` method in the `LocalObjectManager.java` file. The method now resolves the specified object immediately if it is persistent and not already resolved, and throws an exception if the object cannot be resolved. This change improves the structure of the code and makes it easier to understand.",2,1,3,4,"fix: Resolve immediately only for unresolved and persistent objects
Updated resolveImmediately method to only resolve unresolved and persistent objects, adding debug logging for skipped cases and ensuring objects are marked as resolved after successful resolution."
75f8ac6890e5ff108b77207794a25b2480e0f6a3,apache/isis,,"File: viewer-skylark/src/org/nakedobjects/viewer/skylark/AwtText.java
Status: modified
```diff
@@ -65,11 +65,11 @@ public String toString() {
     }
 
     public int getLineHeight() {
-        return 0;
+        return getTextHeight() + getLineSpacing();
     }
 
     public int getLineSpacing() {
-        return 0;
+        return lineSpacing;
     }
 }
 
```",Fixed missing line spacing and line height properties.,4,4,4,4,fix toString for toString,0,0,2,0,"Fix: Update getLineHeight() and getLineSpacing() in AwtText.java The getLineHeight() and getLineSpacing() methods in AwtText.java were previously returning a fixed value of 0. This commit updates these methods to return the actual values, improving the functionality of the AwtText class.",4,4,4,4,"refactor: Implement correct calculation for getLineHeight and getLineSpacing in AwtText
This commit addresses the incorrect calculation of line height and spacing in the AwtText class, which previously returned hardcoded values of 0. The corrected implementation ensures accurate rendering of text components, improving the overall user experience."
7490080673e5c686651a3224dca46d6cfb4d6d37,apache/isis,,"File: viewer-skylark/src/org/nakedobjects/viewer/skylark/InteractionHandler.java
Status: modified
```diff
@@ -242,7 +242,7 @@ public void mouseMoved(MouseEvent me) {
                 viewer.mouseMoved(location);
                 spy.addTrace(overView, "" mouse location"", location);
 
-  //              redraw();
+                redraw();
             }
         }
     }
```","Reinstated the redrawing after a movement of the mouse. So changes to screen, such as showing the resize outline, are shown as the mouse moves.",4,4,3,4,remove redraw redraw call,0,3,2,0,"Fix: Uncommented redraw in mouseMoved method In the `mouseMoved` method of the `InteractionHandler.java` file, the `redraw()` line was uncommented. This method handles the mouseMoved event by tracking the mouse movement within the viewer, identifying the view under the mouse, and triggering appropriate actions. The uncommented line of code redraws the viewer. This change is classified as a 'Fix'.",4,4,3,4,"fix: Ensure view updates on mouse movement
This commit fixes an issue where the view was not updating on mouse movement by uncommenting the `redraw()` call in the `mouseMoved` method of `InteractionHandler`. This change ensures that the viewer component accurately reflects the user's interactions, improving the overall user experience."
861a7ba8549d06717a4d9c019000f172f7ac18a1,apache/jclouds,,"File: gogrid/src/main/java/org/jclouds/gogrid/compute/config/GoGridComputeServiceContextModule.java
Status: modified
```diff
@@ -209,7 +209,7 @@ protected GoGridDestroyNodeStrategy(GoGridClient client) {
       public boolean execute(String id) {
          Server server = Iterables.getOnlyElement(client.getServerServices().getServersById(
                   new Long(id)));
-         client.getServerServices().deleteByName(server.getName());
+         client.getServerServices().deleteById(server.getId());
          return serverLatestJobCompleted.apply(server);
       }
 
```",fixed gogrid deletebyname to by id,2,4,4,4,fix failing test,0,0,4,4,"Refactor: Change server deletion method in GoGridComputeServiceContextModule In the ""execute"" method of the GoGridComputeServiceContextModule.java file, the server deletion method was changed from deleting by name to deleting by id. This refactor improves the internal structure of the code without altering its external behavior.",3,4,4,4,"fix: Use server ID instead of name for deletion in execute method
Changed the deletion method from using the server's name to its ID to avoid potential name collisions and ensure the correct server is deleted."
cb880cfcf0c31e341eb3ff3a2fedccd3ef9e4669,apache/jclouds,,"File: aws/core/src/main/java/org/jclouds/aws/simpledb/SimpleDBPropertiesBuilder.java
Status: modified
```diff
@@ -36,7 +36,6 @@
  * Builds properties used in SimpleDB Clients
  * 
  * @author Adrian Cole
- * @author Luís A. Bastião Silva <bastiao@ua.pt>
  */
 public class SimpleDBPropertiesBuilder extends PropertiesBuilder {
    @Override
@@ -47,15 +46,15 @@ protected Properties defaultProperties() {
       properties.setProperty(PROPERTY_API_VERSION, SimpleDBAsyncClient.VERSION);
       properties.setProperty(PROPERTY_REGIONS, Joiner.on(',').join(Region.US_EAST_1,
                Region.US_WEST_1, Region.EU_WEST_1, Region.AP_SOUTHEAST_1));
-      properties.setProperty(PROPERTY_ENDPOINT, ""http://sdb.amazonaws.com"");
+      properties.setProperty(PROPERTY_ENDPOINT, ""https://sdb.amazonaws.com"");
       properties.setProperty(PROPERTY_ENDPOINT + ""."" + Region.US_EAST_1,
-               ""http://sdb.amazonaws.com"");
+               ""https://sdb.amazonaws.com"");
       properties.setProperty(PROPERTY_ENDPOINT + ""."" + Region.US_WEST_1,
-               ""http://sdb.us-west-1.amazonaws.com"");
+               ""https://sdb.us-west-1.amazonaws.com"");
       properties.setProperty(PROPERTY_ENDPOINT + ""."" + Region.EU_WEST_1,
-               ""http://sdb.eu-west-1.amazonaws.com"");
+               ""https://sdb.eu-west-1.amazonaws.com"");
       properties.setProperty(PROPERTY_ENDPOINT + ""."" + Region.AP_SOUTHEAST_1,
-               ""http://sdb.ap-southeast-1.amazonaws.com"");
+               ""https://sdb.ap-southeast-1.amazonaws.com"");
       return properties;
    }
 
```",Revert properties to use https,4,4,4,4,fix a typo in SimpleDBPropertiesBuilder,0,0,4,4,Fix: Update endpoint URLs in SimpleDBPropertiesBuilder This commit updates the endpoint URLs in the defaultProperties method of the SimpleDBPropertiesBuilder class from http to https. This change is likely made to enhance the security of the SimpleDB clients.,4,4,4,4,"refactor: Update SimpleDB endpoint URLs to use HTTPS protocol
This commit updates the default endpoint URLs for all regions in SimpleDBPropertiesBuilder to use HTTPS, ensuring secure communication between the client and AWS SimpleDB. This change aligns with best practices for secure data transmission and enhances the overall security posture of the system."
783f137bb59e645880d30e4b70b52c4aba90ef0b,apache/jclouds,,"File: demos/tweetstore/runatcloud-tweetstore/src/test/java/org/jclouds/demo/tweetstore/integration/TweetStoreLiveTest.java
Status: modified
```diff
@@ -202,7 +202,7 @@ public void testPrimeContainers() throws IOException, InterruptedException {
       for (String context : blobstores) {
          System.out.println(""storing at context: "" + context);
          HttpURLConnection connection = (HttpURLConnection) gurl.openConnection();
-         connection.addRequestProperty(""X-AppEngine-QueueName"", ""twitter"");
+         connection.addRequestProperty(""X-RUN@cloud-Submitter"", ""twitter"");
          connection.addRequestProperty(""context"", context);
          InputStream i = connection.getInputStream();
          String string = Strings2.toStringAndClose(i);
```","Using the correct ""it's me"" header in the RUN@cloud integration tests",3,3,4,4,fix a typo in TweetStoreLiveTest,0,0,4,4,"Fix: Update request property in testPrimeContainers method In the testPrimeContainers() method of the TweetStoreLiveTest.java file, the request property ""X-AppEngine-QueueName"" has been replaced with ""X-RUN@cloud-Submitter"". This change was made to correct an error in the code.",4,4,4,4,"refactor: Set X-RUN@cloud-Submitter request property in TweetStoreLiveTest
Changed the request property to `X-RUN@cloud-Submitter` to align with the updated testing approach for prime containers, which now verifies storage and retrieval after a delay for eventual consistency."
7f9973e037f1e8b5387f4ac258bae082440bc862,apache/jclouds,,"File: apis/vcloud/src/main/java/org/jclouds/vcloud/VCloudAsyncClient.java
Status: modified
```diff
@@ -616,6 +616,7 @@ ListenableFuture<? extends Task> updateNetworkConnectionOfVm(
     */
    @Deprecated
    @DELETE
+   @Consumes(TASK_XML)
    @ExceptionParser(ReturnVoidOnNotFoundOr404.class)
    @XMLResponseParser(TaskHandler.class)
    ListenableFuture<? extends Task> deleteVApp(@EndpointParam URI id);
```",VAppAsyncClient.deleteVApp (deprecated API) requires @consume(TASK_XML) annotation,2,4,4,4,add TASK_XML to VCloudAsyncClient interface,0,1,4,4,Feat: Add @Consumes annotation to deleteVApp method in VCloudAsyncClient This commit adds a @Consumes(TASK_XML) annotation to the deleteVApp method in the VCloudAsyncClient class. This annotation specifies the type of data the method consumes. The method is used to asynchronously delete a Virtual Application (VApp) given its URI.,4,4,4,4,"refactor: Update deleteVApp method to consume TASK_XML
Updated deleteVApp method to consume TASK_XML, enabling more efficient vApp deletion. This refactoring improves the internal structure of VCloudAsyncClient, making it easier to understand and modify."
e82e198a9f848708b922038b280830246650e914,apache/jclouds,,"File: providers/gogrid/src/test/java/org/jclouds/gogrid/GoGridLiveTestDisabled.java
Status: modified
```diff
@@ -354,8 +354,7 @@ public void testShellAccess() throws IOException {
 
       socketOpen.apply(socket);
 
-      SshClient sshClient = new SshjSshClient(new BackoffLimitedRetryHandler(), socket, 60000,
-               instanceCredentials.identity, instanceCredentials.credential, null);
+      SshClient sshClient = context.utils().injector().getInstance(SshClient.Factory.class).create(socket, instanceCredentials);
       sshClient.connect();
       String output = sshClient.exec(""df"").getOutput();
       assertTrue(output.contains(""Filesystem""),
```",changed gogrid to not use ssh ctor,0,1,1,0,fix the test,2,1,4,4,"Refactor: Update SSH connection in testShellAccess method In the testShellAccess() method of the GoGridLiveTestDisabled.java file, the way an SSH connection is established has been refactored. Instead of creating a new SshjSshClient instance directly, the method now retrieves an instance of SshClient.Factory from the context's injector and uses it to create the SshClient. This change improves the structure of the code without altering its functionality.",4,4,4,4,"refactor: Use dependency injection for SshClient creation in GoGridLiveTestDisabled
Extracted SshClient creation into a factory, utilizing dependency injection to decouple GoGridLiveTestDisabled from SshClient instantiation, enhancing maintainability and flexibility."
a760e409a42cb6c6c2e1e264736617081b924af2,apache/jclouds,,"File: core/src/test/java/org/jclouds/http/utils/ModifyRequestTest.java
Status: modified
```diff
@@ -147,4 +147,12 @@ public void testParseQueryEncodedWithDefaultJavaEncoder() {
       assertEquals(parsedMap.get(""publickey""), expected);
    }
 
+   @Test
+   public void testParseQueryWithKeysThatRequireDecoding() {
+      Multimap<String, String> parsedMap = parseQueryToMap(""network%5B0%5D.id=23&network%5B0%5D.address=192.168.0.1"");
+
+      assertEquals(parsedMap.get(""network[0].id""), ImmutableSet.of(""23""));
+      assertEquals(parsedMap.get(""network[0].address""), ImmutableSet.of(""192.168.0.1""));
+   }
+
 }
```",Added test to check that the key is decoded as expected,4,4,4,4,add unit test for Multimap of,1,3,4,4,Feat: Add test for parsing query with keys requiring decoding This commit adds a new test method `testParseQueryWithKeysThatRequireDecoding` to the `ModifyRequestTest` class. The test checks the parsing of a query with keys that require decoding.,4,4,4,4,"test: Introduce test for URL-encoded key parsing in query strings
Adds test coverage for parsing query strings with URL-encoded keys to ensure correctness and prevent potential issues."
559a37ceff1f7d5dc83cd32e377610e410769eeb,apache/jclouds,,"File: labs/jenkins/src/test/java/org/jclouds/jenkins/v1/features/ComputerClientLiveTest.java
Status: modified
```diff
@@ -39,8 +39,10 @@ public void testGetComputerView(){
       assertNotNull(view.getDisplayName());
       for (Computer computerFromView : view.getComputers()) {
          assertNotNull(computerFromView.getDisplayName());
-         Computer computerFromGetRequest = getClient().getComputer(computerFromView.getDisplayName());
-         assertEquals(computerFromGetRequest, computerFromView);
+         if (!""master"".equals(computerFromView.getDisplayName())) {
+            Computer computerFromGetRequest = getClient().getComputer(computerFromView.getDisplayName());
+            assertEquals(computerFromGetRequest, computerFromView);
+         }
       }
    }
 
```",master is not accessible via getComputer,4,4,4,4,fix failing test,2,2,4,4,"Fix: Exclude ""master"" from testGetComputerView() test In the testGetComputerView() method in the ComputerClientLiveTest.java file, a condition has been added to exclude the ""master"" from the test. This change ensures that the test only validates the display name of each computer in the view, excluding the ""master"".",4,4,4,4,"fix: Fix: Handle master computer differently in testGetComputerView
Handle master computer differently in testGetComputerView to prevent false failures due to differences between master computer and other computers."
b84a923615e00ef9177498693883c90b489659be,apache/jclouds,,"File: labs/elb/src/main/java/org/jclouds/elb/ELB.java
Status: modified
```diff
@@ -39,5 +39,9 @@ public String toString() {
          }
       });
    }
+   
+   public static Iterable<LoadBalancer> list(LoadBalancerClient loadBalancerClient) {
+      return list(loadBalancerClient, new ListLoadBalancersOptions());
+   }
 
 }
```",added default list op,3,3,4,4,add list to ELB,2,3,4,4,"Feat: Add list method to ELB class This commit introduces a new feature to the ELB class in the labs/elb module. A new method `list` has been added, which takes a `LoadBalancerClient` as an argument and returns an iterable of `LoadBalancer` objects. This method lists all load balancers using the provided `loadBalancerClient` and default options.",4,4,4,4,"feat: Add list method for load balancers with default options
This commit adds a convenience method, `list(LoadBalancerClient)`, to simplify listing all load balancers with default options. This enhancement allows the `ELB` class to provide a list of load balancers based on specified criteria, making it easier to use."
b93cfa42e1498c65d452765b97fd9237d6884ed4,apache/jclouds,,"File: apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/options/CreateServerOptions.java
Status: modified
```diff
@@ -292,13 +292,10 @@ public CreateServerOptions adminPass(String adminPass) {
     * Custom cloud server metadata can also be supplied at launch time. This
     * metadata is stored in the API system where it is retrievable by querying
     * the API for server status. The maximum size of the metadata key and value
-    * is each 255 bytes and the maximum number of key-value pairs that can be
-    * supplied per server is 5.
+    * is each 255 bytes.
     */
    public CreateServerOptions metadata(Map<String, String> metadata) {
       checkNotNull(metadata, ""metadata"");
-      checkArgument(metadata.size() <= 5,
-            ""you cannot have more then 5 metadata values.  You specified: "" + metadata.size());
       for (Entry<String, String> entry : metadata.entrySet()) {
          checkArgument(
                entry.getKey().getBytes().length < 255,
```","Remove Nova instance metadata limitRackspace cloud limits instance metadata to 5 key-value pairs, but upstream Nova only sets the limit at 128 by default.  This patch removes the limit entirely; the official python clients don't check it and the server is responsible for enforcing it anyway.",4,4,4,4,remove unused method,0,0,4,4,"Fix: Remove limit on metadata key-value pairs in CreateServerOptions The previous implementation of the metadata method in the CreateServerOptions class had a limit on the number of key-value pairs that could be supplied per server. This commit removes that limit, in line with the findings of issue JCLOUDS-507 that Nova instance metadata is not limited to 5 pairs.",4,4,4,4,"refactor: Relax metadata size constraints in CreateServerOptions
Removed the metadata size constraint of 5 key-value pairs per server, allowing for more metadata configuration flexibility."
6cb1558424055972a6e04539b88cda29680fc31c,apache/jclouds,,"File: apis/openstack-cinder/src/test/java/org/jclouds/openstack/cinder/v1/features/AvailabilityZoneApiLiveTest.java
Status: modified
```diff
@@ -40,8 +40,8 @@ public AvailabilityZoneApiLiveTest() {
    @BeforeClass(groups = {""integration"", ""live""})
    public void setupContext() {
       super.setup();
-      String zone = Iterables.getFirst(api.getConfiguredZones(), ""regionOne"");
-      availabilityZoneApi = api.getAvailabilityZoneApi(zone);
+      String region = Iterables.getFirst(api.getConfiguredRegions(), ""regionOne"");
+      availabilityZoneApi = api.getAvailabilityZoneApi(region);
    }
 
    public void testListAvailabilityZones() {
```",zone -> region in Cinder AvailabilityZoneApiLiveTest,0,4,4,4,fix unit test,2,2,4,4,"Refactor: Update setupContext method in AvailabilityZoneApiLiveTest In the `setupContext()` method of the `AvailabilityZoneApiLiveTest.java` file, the testing context setup has been updated. Previously, the availability zone API was initialized for the first configured zone. Now, the availability zone API is initialized for a specified region. This change improves the structure of the code without altering its behavior.",4,4,4,4,"refactor: Update setupContext to use region-based configuration
Updated setupContext to use region-based configuration, allowing for more targeted testing of Availability Zone API in different regions. This change improves the test setup by making it more flexible and adaptable to various region-specific scenarios."
2a5928b55dff2e7e26a29c1c887400d4c645852e,apache/jclouds,,"File: core/src/main/java/org/jclouds/reflect/Reflection2.java
Status: modified
```diff
@@ -71,6 +71,23 @@ public static <T> TypeToken<T> typeToken(Class<T> in) {
       return (TypeToken<T>) get(typeTokenForClass, checkNotNull(in, ""class""));
    }
 
+   /**
+    * returns an {@link Invokable} object that reflects a constructor present in the {@link TypeToken} type.
+    * 
+    * @param ownerType
+    *           corresponds to {@link Invokable#getOwnerType()}
+    * @param parameterTypes
+    *           corresponds to {@link Constructor#getParameterTypes()}
+    * 
+    * @throws IllegalArgumentException
+    *            if the constructor doesn't exist or a security exception occurred
+    */
+   @SuppressWarnings(""unchecked"")
+   public static <T> Invokable<T, T> constructor(Class<T> ownerType, Class<?>... parameterTypes) {
+      return (Invokable<T, T>) get(constructorForParams, new TypeTokenAndParameterTypes(typeToken(ownerType),
+            parameterTypes));
+   }
+
    /**
     * return all constructors present in the class as {@link Invokable}s.
     * 
```",Re-adding Reflection2.constructor Removed in 671749d but used downstream in jclouds-labs,4,4,4,4,add Reflection2 constructor,0,4,4,4,Feat: Add constructor method to Reflection2 class This commit adds a new method `constructor` to the `Reflection2` class. This method returns an `Invokable` object that reflects a constructor present in the `TypeToken` type.,4,4,4,4,"feat: Add constructor method to return Invokable object
This change adds a new constructor method to the Reflection2 class, enabling the creation of Invokable objects that reflect constructors with specific parameter types. This enhancement expands the utility methods for reflection operations, making it easier to work with Java reflection."
60e43e5faef6dc63ca453d61ae65ead6d22ebc8c,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/riot/web/HttpOp.java
Status: modified
```diff
@@ -241,7 +241,7 @@ public static void execHttpPost(String url,
     {
         try {
             long id = counter.incrementAndGet() ;
-            String requestURI = determineBaseIRI(url) ;
+            String requestURI = determineRequestURI(url) ;
             String baseIRI = determineBaseIRI(requestURI) ;
             
             HttpPost httppost = new HttpPost(requestURI);
```",Fix - was using base URI for request URI.,1,4,4,3,fix typo in HttpOp,0,0,4,4,"Refactor: Update URI determination in execHttpPost method In the execHttpPost method, the way the request URI is determined has been updated. The method determineBaseIRI(url) has been replaced with determineRequestURI(url). This change does not alter the functionality of the method but improves its structure.",1,3,3,4,"refactor: Use determineRequestURI to determine request URI
Replaced determineBaseIRI with determineRequestURI in execHttpPost to correctly determine the request URI, ensuring consistency with the HttpOp class's intended behavior of executing HTTP requests."
7d3fd73ee5e0ed47e256aa6e95609189f667e92b,apache/jena,,"File: jena-fuseki/src/main/java/org/apache/jena/fuseki/FusekiCmd.java
Status: modified
```diff
@@ -26,6 +26,7 @@
 
 import org.apache.jena.atlas.io.IO ;
 import org.apache.jena.atlas.lib.FileOps ;
+import org.apache.jena.atlas.lib.Lib ;
 import org.apache.jena.atlas.lib.StrUtils ;
 import org.apache.jena.atlas.logging.Log ;
 import org.apache.jena.fuseki.mgt.ManagementServer ;
@@ -49,6 +50,7 @@
 import com.hp.hpl.jena.sparql.core.DatasetGraphFactory ;
 import com.hp.hpl.jena.tdb.TDB ;
 import com.hp.hpl.jena.tdb.TDBFactory ;
+import com.hp.hpl.jena.tdb.sys.Names ;
 import com.hp.hpl.jena.tdb.transaction.TransactionManager ;
 
 public class FusekiCmd extends CmdARQ
@@ -284,9 +286,14 @@ protected void processModulesAndArgs()
         if ( contains(argTDB) )
         {
             String dir = getValue(argTDB) ;
-            log.info(""TDB dataset: directory=""+dir) ;
-            if ( ! FileOps.exists(dir) )
-                throw new CmdException(""Directory not found: ""+dir) ;
+            
+            if ( Lib.equal(dir, Names.memName) ) {
+                log.info(""TDB dataset: in-memory"") ;
+            } else {
+                if ( ! FileOps.exists(dir) )
+                    throw new CmdException(""Directory not found: ""+dir) ;
+                log.info(""TDB dataset: directory=""+dir) ;
+            }
             dsg = TDBFactory.createDatasetGraph(dir) ;
         }
         
```","Allow lcoation '--mem--' on the command line (TDB, in-memory). Same effect as --memTDB",4,4,4,4,improve exception message,0,0,4,4,"Feat: Add in-memory TDB dataset handling in FusekiCmd This commit adds the ability to handle in-memory TDB datasets in the FusekiCmd class. Specifically, the processModulesAndArgs() method has been modified to check if the directory is equal to Names.memName. If so, it logs that the TDB dataset is in-memory. If not, it checks if the directory exists and logs the directory of the TDB dataset. This feature enhances the flexibility of handling TDB datasets.",4,4,3,4,"refactor: Support in-memory TDB dataset directories
This commit enables support for in-memory TDB dataset directories by adding a conditional check for 'memName' and updating the `processModulesAndArgs` method to handle in-memory datasets, improving performance and simplifying dataset management."
ace3649faeac426eef52535019a9468d9f07cf76,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/atlas/lib/FileOps.java
Status: modified
```diff
@@ -19,8 +19,13 @@
 package org.apache.jena.atlas.lib;
 
 import java.io.File ;
+import java.io.FileInputStream ;
+import java.io.FileOutputStream ;
+import java.io.IOException ;
+import java.nio.channels.FileChannel ;
 
 import org.apache.jena.atlas.AtlasException ;
+import org.apache.jena.atlas.io.IO ;
 import org.apache.jena.atlas.logging.Log ;
 
 public class FileOps
@@ -189,6 +194,20 @@ public static String fullDirectoryPath(String filename)
         }
     }
     
+    /** Copy a file */
+    public static void copyFile(File source, File dest) {
+        try {
+            @SuppressWarnings(""resource"")
+            FileChannel sourceChannel = new FileInputStream(source).getChannel();
+            @SuppressWarnings(""resource"")
+            FileChannel destChannel = new FileOutputStream(dest).getChannel();
+            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
+            sourceChannel.close();
+            destChannel.close();
+        } catch (IOException ex) { IO.exception(ex); }
+    }
+
+    
 //    public static String getExt(String filename)
 //    {
 //        int i = filename.lastIndexOf('.') ;
```",File copy helper,2,4,4,4,add copyFile method to FileOps,0,4,4,4,"Feat: Add copyFile method to FileOps class This commit adds a new method `copyFile` to the `FileOps` class. This method copies a file from a source to a destination using FileChannels. If the destination file exists, it will be overwritten. This feature enhances the file operation capabilities of the `FileOps` class.",4,4,4,4,"feat: Add copyFile method to FileOps
This commit adds a copyFile method to FileOps for duplicating file contents, enhancing the class's file operation utilities."
1c997c0dfa00796a3804b836668d9bcec44d9e15,apache/jena,,"File: jena-fuseki/src/main/java/org/apache/jena/fuseki/servlets/SPARQL_Query.java
Status: modified
```diff
@@ -217,7 +217,7 @@ private void execute(String queryString, HttpAction action)
         Query query = null ;
         try {
             // NB syntax is ARQ (a superset of SPARQL)
-            query = QueryFactory.create(queryString, Syntax.syntaxARQ) ;
+            query = QueryFactory.create(queryString, ""http://example/query-base"", Syntax.syntaxARQ) ;
             queryStringLog = formatForLog(query) ;
             validateQuery(action, query) ;
         } catch (ActionErrorException ex) {
```",Always explicitly set base URI,0,2,4,4,remove unnecessary logging,0,0,4,4,"feat: Add base URI to QueryFactory.create in SPARQL_Query.java This commit modifies the `execute` method in `SPARQL_Query.java` to add a base URI parameter to the `QueryFactory.create` method. This change affects how the query is executed. The base URI is set to ""http://example/query-base"".",4,4,4,4,"refactor: Specify base URI for QueryFactory creation
Specify a base URI for QueryFactory creation to ensure consistent query behavior across the application. This change addresses a potential issue with query creation, making the system more robust and reliable."
f8f254b6ff03eb206421385069b3bf8e6e8fee79,apache/jena,,"File: dboe-trans-data/src/main/java/org/seaborne/dboe/trans/bplustree/BPTreePage.java
Status: modified
```diff
@@ -119,6 +119,7 @@ protected static void promote(AccessPath path, BPTreePage page) {
                     // newPtr == s.page.getId() ??
                     if ( newPtr != s.page.getId() ) {
                         System.err.println(""  Promotion: newPtr != s.page.getId(): ""+newPtr+"" != ""+s.page.getId()) ;
+                        throw new InternalErrorException() ;
                     }
                     n.ptrs.set(s.idx, newPtr) ;
                     newPtr = n.getId() ;
```",Throw exception on unexpected condition.,4,3,4,4,add missing newline,0,0,4,4,Fix: Throw exception in 'promote' method of BPTreePage This commit modifies the 'promote' method in the BPTreePage.java file to throw an InternalErrorException when the newPtr does not equal the page ID. This change ensures the consistency of the B+ tree by preventing the promotion of a page when the access path is not consistent.,4,4,4,4,"refactor: Ensure page ID consistency in promote method
This refactoring ensures page ID consistency in the promote method by introducing a check for mismatched page IDs and throwing an InternalErrorException when a mismatch is detected, thereby preventing potential data corruption and improving the overall robustness of the BPTreePage class."
cfaa3d72040b71d40dfb41c21684c48ed2f34240,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/riot/out/NodeFormatterBase.java
Status: modified
```diff
@@ -66,7 +66,7 @@ public void formatLiteral(AWriter w, Node n)
             // RDF 1.0, simple literal.
             formatLitString(w, lex) ;
         } else if ( JenaRuntime.isRDF11 && dt.equals(XSDDatatype.XSDstring) ) {
-            // RDF 1.1, xsd:string - outptu as short string.
+            // RDF 1.1, xsd:string - output as short string.
             formatLitString(w, lex) ;
         } else {
             // Datatype, no language tag, not short string.
```",Fix comment typo.,4,4,4,4,add a comment,0,0,4,4,"Fix: Correct typo in comment in NodeFormatterBase Corrected a typo in the comment of the `formatLiteral` method in the `NodeFormatterBase` class. The word ""outptu"" has been changed to ""output"".",4,4,4,4,"fix: Correct 'outptu' to 'output' in RDF 1.1 xsd:string formatting
This commit corrects a typo in NodeFormatterBase, replacing 'outptu' with 'output' in RDF 1.1 xsd:string formatting, ensuring accurate and consistent literal node formatting in RDF/XML according to RDF 1.0 and 1.1 specifications."
e9e6fa1c2b27b3e45bb0c17f4c948b8c025ac6cf,apache/jena,,"File: dboe-quack/src/test/java/org/seaborne/dboe/sparql/test/LibTestSPARQL.java
Status: modified
```diff
@@ -49,9 +49,9 @@ public class LibTestSPARQL
              ""PREFIX mf:     <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#>"",
              ""PREFIX qt:     <http://www.w3.org/2001/sw/DataAccess/tests/test-query#>"",
              ""PREFIX dawgt:   <http://www.w3.org/2001/sw/DataAccess/tests/test-dawg#>"",
-             ""PREFIX apf:     <http://jena.hpl.hp.com/ARQ/property#>"",
-             ""PREFIX afn:     <http://jena.hpl.hp.com/ARQ/function#>"",
-             ""PREFIX list:    <http://jena.hpl.hp.com/ARQ/list#>"") ;
+             ""PREFIX apf:     <http://jena.apache.org/ARQ/property#>"",
+             ""PREFIX afn:     <http://jena.apache.org/ARQ/function#>"",
+             ""PREFIX list:    <http://jena.apache.org/ARQ/list#>"") ;
 
     // qt:data and qt:graphData - multiple.
     private final static String testsQueryString =
@@ -276,4 +276,4 @@ public static String fixupName(String string) {
         string = string.replace(')', ']') ;
         return string ;
     }
-}
\ No newline at end of file
+}
```",Convert http://jena.hpl.hp.com/ARQ to http://jena.apache.org/ARQ,0,4,4,4,fix broken test,0,0,4,4,Refactor: Update PREFIX URLs in LibTestSPARQL.java The PREFIX URLs in the SPARQL query strings in LibTestSPARQL.java have been updated. The changes do not affect the functionality of the code.,3,4,4,4,"refactor: Update namespace prefixes to use apache.org
This change updates the namespace prefixes in LibTestSPARQL.java to use the apache.org domain, aligning with the current namespace convention. The outdated jena.hpl.hp.com references have been replaced with jena.apache.org, ensuring consistency and accuracy in the code."
d0ce13b2587905859c9ed854f5114b8c86c2125c,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/sparql/modify/request/QuadAcc.java
Status: modified
```diff
@@ -18,13 +18,12 @@
 
 package org.apache.jena.sparql.modify.request;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
+import java.util.ArrayList ;
+import java.util.Collections ;
+import java.util.List ;
 
-import org.apache.jena.atlas.lib.SinkToCollection;
-import org.apache.jena.sparql.core.BasicPattern;
-import org.apache.jena.sparql.core.Quad;
+import org.apache.jena.atlas.lib.SinkToCollection ;
+import org.apache.jena.sparql.core.Quad ;
 
 /** Accumulate quads (including allowing variables) during parsing. */
 public class QuadAcc extends QuadAccSink
@@ -61,13 +60,5 @@ public boolean equals(Object other)
         QuadAcc acc = (QuadAcc)other ;
         return quads.equals(acc.quads) ; 
     }
-    
-    public BasicPattern getBGP(){
-    	BasicPattern bgp = new BasicPattern();
-    	for(Quad qd: this.quadsView){
-    		bgp.add(qd.asTriple());
-    	}
-    	return bgp;
-    }
 
 }
```",add licence info for ExampleConstructQuads; retain QuadAcc unchanged,0,0,4,4,remove unused code,4,3,4,4,Refactor: Reformat import statements and remove method in QuadAcc.java This commit reformats the import statements in the `QuadAcc.java` file for better readability. It also removes the `getBGP()` method.,4,4,4,4,"refactor: Simplify QuadAcc by removing unused imports and method
Removed unused imports and simplified the QuadAcc class structure, making it easier to understand and maintain."
01bc520eda0dce834d20a71c9b90781346570a57,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/query/Dataset.java
Status: modified
```diff
@@ -30,9 +30,8 @@
  *  and a background graph (also called the default
  *  graph or unnamed graph). */
 
-public interface Dataset extends Transactional
+public interface Dataset extends Transactional 
 {
-    // Rather than pull in the internal ""Tranactional"" interface, we duplicate it here. 
     /** Get the default graph as a Jena Model */
     public Model getDefaultModel() ;
     
```",Remove out-of-date comment. This closes #83.,4,4,4,4,make Dataset public,0,0,4,4,Refactor: Remove out-of-date comment from Dataset.java Removed an out-of-date comment from the Dataset class. The functionality of the class remains the same. This change is part of a larger effort to clean up the codebase.,4,4,4,4,"style: Remove outdated comment and unnecessary @Override annotation from Dataset
Removed outdated comment and unnecessary @Override annotation, as Dataset now implements Transactional. Addresses issue #83."
8a4a285d62642cbdba787464c9e2a64e808eda60,apache/jena,,"File: jena-arq/src/test/java/org/apache/jena/sparql/engine/ref/TestTableJoin.java
Status: modified
```diff
@@ -44,13 +44,14 @@ public class TestTableJoin extends BaseTest
     Table zero = new TableEmpty() ;
     Table zeroData = SSE.parseTable(""(table)"") ;
     Table unitData = SSE.parseTable(""(table (row))"") ;
+    
     Table data1 = SSE.parseTable(""(table (row (?a 1) (?b 2)))"") ;
     Table data2 = SSE.parseTable(""(table (row (?a 1) (?c 3)) (row (?a 9) (?c 5))  )"") ;
     Table data3 = SSE.parseTable(""(table (row (?a 1) (?c 3)) (row (?a 1) (?c 4)) (row (?a 9) (?c 5))  )"") ;
-    
+
     Table data1J2 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) )"") ;
-    Table data1LJ2 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) (row (?a 9) (?c 5)) )"") ;
-    Table data2LJ1 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) )"") ;
+    Table data1LJ2 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) )"") ;
+    Table data2LJ1 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) (row (?a 9) (?c 5)) )"") ;
     
     Table data1J3 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) (row (?a 1) (?b 2) (?c 4)) )"") ;
     
```",Fix test data,2,1,4,4,fix test on windows,1,0,4,4,Style: Update TestTableJoin class Updated the TestTableJoin class to improve code style. The changes are related to the testing of left joins in the reference query engine. No associated issues or pull requests.,4,4,2,4,"refactor: Simplify TestTableJoin test data
Consolidated test data in TestTableJoin by removing redundant tables and reorganizing the remaining data to improve test clarity and reduce maintenance efforts."
7a85483509b353e4abb30901532c529b58e16592,apache/jena,,"File: jena-text/src/test/java/org/apache/jena/query/text/TestDatasetWithConfigurableAnalyzer.java
Status: modified
```diff
@@ -45,14 +45,17 @@ public void testConfigurableAnalyzerIsCaseAndAccentInsensitive() {
         final String turtle = StrUtils.strjoinNL(
                 TURTLE_PROLOG,
                 ""<"" + RESOURCE_BASE + testName + "">"",
-                ""  rdfs:label 'Feeling a déjà vu'"",
+                ""  rdfs:label 'déjà vu'"",
+                ""."",
+                ""<"" + RESOURCE_BASE + ""irrelevant>"",
+                ""  rdfs:label 'not déjà vu'"",
                 "".""
                 );
         String queryString = StrUtils.strjoinNL(
                 QUERY_PROLOG,
                 ""SELECT ?s"",
                 ""WHERE {"",
-                ""    ?s text:query ( rdfs:label '\""feeling ä déja\""*' 10 ) ."",
+                ""    ?s text:query ( rdfs:label '\""Déja Vü\""' 10 ) ."",
                 ""}""
                 );
         Set<String> expectedURIs = Sets.newHashSet(RESOURCE_BASE + testName);
```",fix accent-insensitive search unit test that didn't actually test the right thing,4,3,4,4,add a test for TestDatasetWithConfigurableAnalyzer,0,1,4,4,Fix: Update testConfigurableAnalyzerIsCaseAndAccentInsensitive() method The testConfigurableAnalyzerIsCaseAndAccentInsensitive() method in the TestDatasetWithConfigurableAnalyzer.java file has been updated. The changes involve modifying the rdfs:label and the text:query in the turtle and queryString respectively. This was done to enhance the testing of the case and accent insensitivity of the ConfigurableAnalyzer.,4,4,4,4,"fix: Update testConfigurableAnalyzerIsCaseAndAccentInsensitive to ignore case and accents
This commit updates the testConfigurableAnalyzerIsCaseAndAccentInsensitive test to ignore case and accents by modifying the turtle data and query string to use 'déjà vu' instead of 'feeling ä déja', ensuring the configurable analyzer's insensitivity to case and accents is correctly verified."
f7693a68cca53df0292624e90254a9233b8d8504,apache/jena,Y,"File: jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java
Status: modified
```diff
@@ -95,12 +95,6 @@ public Stream<Quad> find(Node g, Node s, Node p, Node o) {
     /**
      * We descend through the nested {@link PMap}s building up {@link Stream}s of partial tuples from which we develop a
      * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.
-     *
-     * @param first the value in the first slot of the tuple
-     * @param second the value in the second slot of the tuple
-     * @param third the value in the third slot of the tuple
-     * @param fourth the value in the fourth slot of the tuple
-     * @return a <code>Stream</code> of tuples matching the pattern
      */
     @SuppressWarnings(""unchecked"") // Because of (Stream<Quad>) -- but why is that needed?
     private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {
@@ -157,6 +151,7 @@ protected TConsumer4<Node> add() {
         };
     }
 
+    @Override
     protected TConsumer4<Node> delete() {
         return (first, second, third, fourth) -> {
             debug(""Removing four-tuple: {} {} {} {} ."", first, second, third, fourth);
```


File: jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java
Status: modified
```diff
@@ -94,11 +94,6 @@ public Stream<Triple> find(final Node s, final Node p, final Node o) {
     /**
      * We descend through the nested {@link PMap}s building up {@link Stream}s of partial tuples from which we develop a
      * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.
-     *
-     * @param first the value in the first slot of the tuple
-     * @param second the value in the second slot of the tuple
-     * @param third the value in the third slot of the tuple
-     * @return a <code>Stream</code> of tuples matching the pattern
      */
     @SuppressWarnings(""unchecked"") // Because of (Stream<Triple>) -- but why is that needed?
     private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {
```",Remove javadoc errors.,4,3,4,4,fix PMapQuadTable delete,0,1,4,2,"Refactor: Simplify comments and override method in PMapQuadTable and PMapTripleTable This commit simplifies the comments in the PMapQuadTable and PMapTripleTable classes and overrides a method. The changes do not affect the functionality of the classes, which are used for storing and managing quads and triples using nested persistent maps. The refactor aims to improve the structure and design of the code without changing its behavior.",4,4,4,4,"refactor: Consolidate Javadoc comments in PMapQuadTable and PMapTripleTable
Removed redundant Javadoc comments and consolidated remaining comments in PMapQuadTable and PMapTripleTable to improve code readability and maintainability. This refactoring does not alter the classes' observable behavior."
ecfe9eda7adf6f9fcc0d88e8538e436103e823b0,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/ScriptFunction.java
Status: modified
```diff
@@ -111,12 +111,11 @@ public NodeValue exec(List<NodeValue> args) {
         }
     }
 
-
     private Invocable getEngine() {
         Pool<Invocable> pool = enginePools.computeIfAbsent(lang, key -> PoolSync.create(new PoolBase<>()));
         Invocable engine = pool.get();
         if (engine == null) {
-            engine = createEngine(lang);
+            engine = createEngine();
         }
         return engine;
     }
@@ -125,7 +124,7 @@ private void recycleEngine(Invocable engine) {
         enginePools.get(lang).put(engine);
     }
 
-    private static Invocable createEngine(String lang) {
+    private Invocable createEngine() {
         ScriptEngine engine = scriptEngineManager.getEngineByName(lang);
         if (engine == null) {
             throw new ExprBuildException(""Unknown scripting language: "" + lang);
```",Simplify script engine instantiation,4,4,4,4,remove unused method,0,0,4,4,Refactor: Update `createEngine` and `getEngine` methods in `ScriptFunction.java` This commit updates the `createEngine` method in `ScriptFunction.java` to be non-static and removes the language parameter. The `getEngine` method is also updated to call the new version of `createEngine`. These changes improve the structure of the code without changing its behavior.,4,4,4,4,"feat: Decouple script engine creation from language parameter
Decoupled script engine creation from language parameter by introducing a new `createEngine()` method, which separates language-specific engine creation from the `getEngine()` method. This refactoring enables more flexible and maintainable script engine management."
1f659ccfe6592fa13d62721ed85032a3797f7a6d,apache/jmeter,,"File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/AccessLogSamplerGui.java
Status: modified
```diff
@@ -162,7 +162,6 @@ public String getStaticLabel()
     public TestElement createTestElement()
     {
     	if (SAMPLER == null){
-    		System.out.println(""the sampler was null, therefore we create a new one"");
 			SAMPLER = new AccessLogSampler();
 			SAMPLER.setSamplerGUI(this);
 			this.configureTestElement(SAMPLER);
```","Remove unnecessary ""throws"" clauses.",4,3,4,4,remove unused code,3,3,4,4,Refactor: Remove print statement from AccessLogSamplerGui Removed a print statement from the createTestElement() method in the AccessLogSamplerGui class. This is a part of code cleanup and does not affect the functionality of the class. The AccessLogSamplerGui class is used for configuring and managing an AccessLogSampler in JMeter.,4,4,4,4,"refactor: Eliminate debug print statement
Removed unnecessary debug print statement to align with best practices and reduce code noise, making the codebase more maintainable and easier to review."
bfaa285c92cb44742553d2035b26d8e20edba5d1,apache/jmeter,,"File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/ParseRegexp.java
Status: modified
```diff
@@ -72,7 +72,8 @@
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
-// TODO: look at using Java 1.4 regexp instead of ORO.
+// NOTE: Also looked at using Java 1.4 regexp instead of ORO. The change was
+// trivial. Performance did not improve -- at least not significantly. [Jordi]
 import org.apache.oro.text.regex.MatchResult;
 import org.apache.oro.text.regex.Pattern;
 import org.apache.oro.text.regex.PatternMatcherInput;
```",Add comment on ORO-vs-java.util.regex for posterity.,4,4,4,4,fix import order,0,0,4,4,Refactor: Update comment in ParseRegexp.java The comment in the ParseRegexp.java file was updated to reflect that the consideration of using Java 1.4 regexp instead of ORO did not significantly improve performance.,4,4,4,4,"style: Replace TODO comment with NOTE
Replaced TODO comment with a NOTE explaining that using Java 1.4 regexp instead of ORO was considered, but the performance improvement was not significant enough to warrant the change, as documented by Jordi."
373a9a8d344ff5c23f58333990c331af60262398,apache/jmeter,,"File: src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Status: modified
```diff
@@ -80,7 +80,6 @@
  * For efficiency reasons, most customizers should implement
  * SharedCustomizer.
  * 
- * @author <a href=""mailto:jsalvata@apache.org"">Jordi Salvat i Alabart</a>
  * @version $Revision$ updated on $Date$
  */
 public class TestBeanGUI
@@ -433,4 +432,12 @@ else if (SharedCustomizer.class.isAssignableFrom(customizerClass))
         
         if (customizer != null) add((Component)customizer, BorderLayout.CENTER);
     }
+
+	/* (non-Javadoc)
+	 * @see org.apache.jmeter.gui.JMeterGUIComponent#getLabelResource()
+	 */
+	public String getLabelResource() {
+		// TODO Auto-generated method stub
+		return null;
+	}
 }
```",Dummy implementation of getLabelResource(),3,4,4,4,add getLabelResource to TestBeanGUI,0,0,4,4,"Feat: Add getLabelResource method in TestBeanGUI This commit adds a new method getLabelResource() in the TestBeanGUI.java file. The method is supposed to return the label resource, but it's not implemented yet and currently returns null. The author information was also removed from a comment in the same file.",4,4,4,4,"refactor: Implement getLabelResource method in TestBeanGUI
Implemented getLabelResource method in TestBeanGUI class as a placeholder, currently returning null. This method is intended to be overridden or implemented later to retrieve a label resource, according to specific requirements."
98ab7fd2575c5f8d78cdf22c28ad106ec5b6e56e,apache/jmeter,Y,"File: src/core/org/apache/jmeter/visualizers/Visualizer.java
Status: modified
```diff
@@ -38,4 +38,11 @@ public interface Visualizer
      * the visualizer about the arrival of a new sample.
      */
     public void add(SampleResult sample);
+    
+    /**
+     * This method is used to indicate a visualizer generates
+     * statistics.
+     * @return
+     */
+    public boolean isStats();
 }
```


File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Status: modified
```diff
@@ -122,6 +122,7 @@ public abstract class AbstractVisualizer
     SampleSaveConfiguration saveConfig;
     
     protected ResultCollector collector = new ResultCollector();
+	private boolean isStats = true;
 
     public AbstractVisualizer()
     {
@@ -151,6 +152,10 @@ public void actionPerformed(ActionEvent e)
                 
     }
 
+	public boolean isStats(){
+        return isStats;
+	}
+
     /**
      * Gets the checkbox which selects whether or not only errors should be
      * logged.  Subclasses don't normally need to worry about this checkbox,
```",added a method to Visualizer interface to indicate if a visualizer generates or displays calculated statistics,4,4,4,4,add Visualizer isStats,0,4,4,4,Feat: Add isStats method to Visualizer and AbstractVisualizer This commit introduces a new method `isStats()` to the `Visualizer` interface and `AbstractVisualizer` class. This method is used to check if the statistics tracking is enabled. It returns true if statistics tracking is enabled. The `AbstractVisualizer` class is a base class for JMeter GUI components that display or log test results. The `Visualizer` interface is used to display and log test results in JMeter. The addition of the `isStats()` method enhances the functionality of these classes by allowing them to check the status of statistics tracking.,4,4,4,4,"feat: Add statistics indication to Visualizer interface and implementation
This change introduces a statistics indication feature to the Visualizer interface and its implementation in AbstractVisualizer, allowing JMeter to differentiate between visualizers that generate statistics and those that do not. This enhancement enables more informative visualization and logging of sample results."
84cf363d55d5e49648d4c13952b3e26d0dd8007d,apache/jmeter,,"File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java
Status: modified
```diff
@@ -21,7 +21,6 @@
 
 import javax.swing.JPanel;
 
-import org.apache.jmeter.config.gui.LoginConfigGui;
 import org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui;
 import org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler;
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
@@ -41,7 +40,6 @@
  ***************************************/
 
 public class LdapExtTestSamplerGui extends AbstractSamplerGui {
-    private LoginConfigGui loginPanel;
     private LdapExtConfigGui ldapDefaultPanel;
 
     /****************************************
```",Remove unused variable and corresponding import,4,4,4,4,remove unused field,4,3,4,4,Refactor: Remove unused LoginConfigGui from LdapExtTestSamplerGui The LoginConfigGui import and object declaration were removed from LdapExtTestSamplerGui.java as they were not being used. This simplifies the code and reduces unnecessary dependencies.,4,4,4,4,"refactor: Remove unnecessary imports and fields from LdapExtTestSamplerGui
Removed unused `LoginConfigGui` import and `loginPanel` field from `LdapExtTestSamplerGui`, eliminating unnecessary dependencies and simplifying the class structure."
2c24d688aad7e71a6760f902525a652489ccd9c9,apache/jmeter,,"File: src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java
Status: modified
```diff
@@ -1,4 +1,3 @@
-// $Header$
 /*
  * Copyright 2004 The Apache Software Foundation.
  *
@@ -17,22 +16,20 @@
 package org.apache.jmeter.visualizers;
 
 import java.io.Serializable;
-import java.net.HttpURLConnection;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
-import java.util.List;
 import java.util.LinkedList;
+import java.util.List;
 
-import org.apache.jmeter.samplers.Clearable;
-import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.monitor.model.ObjectFactory;
 import org.apache.jmeter.monitor.model.Status;
 import org.apache.jmeter.monitor.util.Stats;
 import org.apache.jmeter.protocol.http.sampler.HTTPSampleResult;
-import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
+import org.apache.jmeter.samplers.Clearable;
+import org.apache.jmeter.samplers.SampleResult;
 
 public class MonitorAccumModel implements Clearable, Serializable {
 
```",Remove unused imports,4,3,4,4,remove unused imports,4,3,4,4,Refactor: Reorganize import statements in MonitorAccumModel.java The import statements in MonitorAccumModel.java have been reorganized for better readability and maintenance. No changes have been made to the functionality of the code.,4,3,4,4,"style: Remove unnecessary imports and comments
Removed redundant imports and comments in MonitorAccumModel.java to improve code readability and maintainability by reducing clutter."
5692ba3f8a1ea6f37c2bbd7ac21f7b3ac0c93b98,apache/jmeter,,"File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/StandardGenerator.java
Status: modified
```diff
@@ -1,6 +1,5 @@
-// $Header$
 /*
- * Copyright 2003-2004 The Apache Software Foundation.
+ * Copyright 2003-2004,2006 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -19,13 +18,14 @@
 package org.apache.jmeter.protocol.http.util.accesslog;
 
 import java.io.File;
-import java.io.FileWriter;
 import java.io.FileOutputStream;
+import java.io.FileWriter;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.Serializable;
-import org.apache.jmeter.protocol.http.sampler.HTTPSampler;
+
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
+import org.apache.jmeter.protocol.http.sampler.HTTPSamplerFactory;
 
 /**
  * Description:<br>
@@ -48,9 +48,8 @@
  * so the user can pass the desired listener to the tool.
  * <p>
  * 
- * @author Peter Lin<br>
- * @version $Revision$ last updated $Date$ Created
- *          on: Jul 1, 2003<br>
+ * author Peter Lin<br>
+ * Created on: Jul 1, 2003<br>
  */
 
 public class StandardGenerator implements Generator, Serializable {
@@ -216,7 +215,7 @@ public void setTarget(Object target) {
 	 */
 	public Object generateRequest() {
 		try {
-			SAMPLE = new HTTPSampler();
+			SAMPLE = HTTPSamplerFactory.newInstance();
 		} catch (NullPointerException e) {
 			e.printStackTrace();
 		}
```",Use HTTPSamplerFactory to create the sampler,0,4,4,4,catch NullPointerException in StandardGenerator,0,0,4,4,"Refactor: Update generateRequest method in StandardGenerator.java This commit refactors the generateRequest method in the StandardGenerator.java file. The method now creates a new instance of HTTPSamplerFactory instead of using the HTTPSampler. This change improves the structure of the code without changing its behavior. If a NullPointerException occurs during the creation of the HTTPSamplerFactory instance, it is caught and the stack trace is printed.",4,3,4,4,"refactor: Replace HTTPSampler instantiation with HTTPSamplerFactory
Replaced direct HTTPSampler instantiation with HTTPSamplerFactory in StandardGenerator's generateRequest method, decoupling sampler creation and improving code maintainability."
399d67f64b51a44ce72e702c0df7f853d943e682,apache/jmeter,,"File: test/src/org/apache/jmeter/control/TestWhileController.java
Status: modified
```diff
@@ -164,8 +164,7 @@ public void testAlwaysFailOK() throws Exception {
 			runTestAlwaysFail(true); // Should be OK
 		}
 
-		// TODO - re-enable when fix found
-		public void disabletestAlwaysFailBAD() throws Exception {
+		public void testAlwaysFailBAD() throws Exception {
 			runTestAlwaysFail(false); // Currently fails
 		}
 
```",Re-enabling test as it seems to have been fixed,4,4,4,4,remove unused code,0,0,4,4,"Fix: Re-enable testAlwaysFailBAD() in TestWhileController The testAlwaysFailBAD() method in TestWhileController.java was re-enabled. This method is expected to always fail, but currently, it is not failing as expected. Further investigation is needed to understand why the test is not failing.",1,3,4,4,"refactor: Rename disabletestAlwaysFailBAD to testAlwaysFailBAD
Renamed `disabletestAlwaysFailBAD` to `testAlwaysFailBAD` to accurately reflect its intended failure, improving test method naming consistency and clarity."
8e269061bac22627f76bfa280122cbafa38ba2b0,apache/jmeter,,"File: src/core/org/apache/jmeter/visualizers/SamplingStatCalculator.java
Status: modified
```diff
@@ -224,7 +224,7 @@ public Sample getSample(int index) {
 	}
 
 	private long getEndTime(SampleResult res) {
-		long endTime = res.getTimeStamp();
+		long endTime = res.getEndTime();
 		long lastTime = getCurrentSample().getEndTime();
 		if (res.isStampedAtStart()) {
 			endTime += res.getTime();
@@ -364,4 +364,4 @@ public Number getPercentPoint(float percent) {
 	public double getStandardDeviation() {
 		return calculator.getStandardDeviation();
 	}
-} // class RunningSample
+}
```",Assumed that the timstamp was always at the end,3,0,4,4,fix SamplingStatCalculator getEndTime,0,0,4,4,"Fix: Improve end time calculation in SamplingStatCalculator In the `SamplingStatCalculator` class, the `getEndTime` method has been updated to return the end time of the current sample instead of the timestamp. This change provides a more accurate calculation of the end time of a sample.",4,4,4,4,"fix: Fix getEndTime method to use correct end time calculation
Fixed incorrect end time calculation in `getEndTime` method by using `res.getEndTime()` instead of `res.getTimeStamp()`, ensuring accurate results when `res.isStampedAtStart()` is true."
0b35e7c54b590d245f8e7e67c9013adc48852b7f,apache/jmeter,,"File: test/src/org/apache/jmeter/junit/JMeterTest.java
Status: modified
```diff
@@ -40,6 +40,7 @@
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
+import org.apache.jmeter.config.gui.ObsoleteGui;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.functions.Function;
 import org.apache.jmeter.gui.GuiPackage;
@@ -275,6 +276,9 @@ private static Test suiteGUIComponents() throws Exception {
 				System.out.println(""INFO: JMeterGUIComponent: skipping all tests  "" + item.getClass().getName());
 				continue;
 			}
+			if (item instanceof ObsoleteGui){
+				continue;
+			}
 			TestSuite ts = new TestSuite(item.getClass().getName());
 			ts.addTest(new JMeterTest(""GUIComponents1"", item));
 			if (item instanceof TestBeanGUI) {
```",Exclude ObsoleteGui from tests,0,4,4,4,do not add ObsoleteGui to the test case,0,4,4,4,Fix: Skip ObsoleteGui instances in suiteGUIComponents() The method suiteGUIComponents() in JMeterTest.java has been modified to skip GUI components that are instances of ObsoleteGui when creating a test suite. This change ensures that only relevant GUI components are included in the test suite.,4,4,4,4,"refactor: Exclude obsolete GUI components from test suites
This commit refactors the `suiteGUIComponents` method to exclude obsolete GUI components from test suites by skipping `ObsoleteGui` instances. This change improves test suite efficiency and accuracy by only including relevant components."
ea06fea815dc986f1940f40970d727ce5fc748f6,apache/jmeter,,"File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Status: modified
```diff
@@ -37,6 +37,7 @@
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testbeans.TestBean;
+import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.Data;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
@@ -50,7 +51,10 @@
 public class JDBCSampler extends AbstractSampler implements TestBean {
 	private static final Logger log = LoggingManager.getLoggerForClass();
 
-	private static final int MAX_ENTRIES = 200;
+	// This value is used for both the connection (perConnCache) and statement (preparedStatementMap) caches.
+	// TODO - do they have to be the same size?
+	private static final int MAX_ENTRIES = 
+		JMeterUtils.getPropDefault(""jdbcsampler.cachesize"",200); // $NON-NLS-1$
 
 	private static final Map mapJdbcNameToInt;
 
```",Allow default cache size to be defined,3,4,4,4,use a jdbc name for JDBCSampler,0,1,4,4,feat: Update JDBCSampler.java Added import statement and modified MAX_ENTRIES constant in JDBCSampler.java. The MAX_ENTRIES constant now uses the JMeterUtils.getPropDefault method to get its value. This change is not associated with any issues or pull requests.,1,4,4,4,"refactor: Make JDBCSampler's MAX_ENTRIES configurable via property
Extracted the hardcoded MAX_ENTRIES value into a configurable property, allowing for easier maintenance and customization of the cache size. This change also introduces a default value of 200 to ensure backward compatibility."
9e9c17963dc2f148a5bbcd002764e42b68dc5d20,apache/jmeter,,"File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Status: modified
```diff
@@ -69,7 +69,7 @@ public class HTTPSampler extends HTTPSamplerBase {
 	private static final byte[] NULL_BA = new byte[0];// can share these
 
 	/** Handles writing of a post request */
-    private PostWriter postWriter;
+    private transient PostWriter postWriter;
 
 	/**
 	 * Constructor for the HTTPSampler object.
```",PostWriter is non-serializable,4,4,4,4,remove unused field,0,0,4,4,Refactor: Make 'postWriter' variable transient in HTTPSampler class This commit makes the 'postWriter' variable in the HTTPSampler class transient. This is a minor refactor with no associated issues or pull requests.,3,4,4,4,"refactor: Declare postWriter as transient
Marked postWriter as transient to avoid unnecessary serialization, as it's an internal implementation detail not relevant to the sampler's state."
b4d3fcd1df15af8d22c1d0c446b672ca480347f2,apache/jmeter,,"File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Status: modified
```diff
@@ -381,12 +381,14 @@ public synchronized void deliverSampler(HTTPSamplerBase sampler, TestElement[] s
 
 			placeSampler(sampler, subConfigs, myTarget);
 
-			notifySampleListeners(new SampleEvent(result, sampler.getName()));
+			notifySampleListeners(new SampleEvent(result, ""WorkBench"")); // TODO - is this the correct threadgroup name?
 		}
 		else {
 			if(log.isDebugEnabled()) {
 				log.debug(""Sample excluded based on url or content-type: "" + result.getUrlAsString() + "" - "" + result.getContentType());
 			}
+			result.setSampleLabel(""[""+result.getSampleLabel()+""]"");
+			notifySampleListeners(new SampleEvent(result, ""WorkBench"")); // TODO - is this the correct threadgroup name?
 		}
 	}
 
```",Correct the SampleEvent parameter Deliver excluded samples as [name],3,2,4,4,do not notify the listeners to the sample,0,0,4,4,"Fix: Modify deliverSampler method in ProxyControl.java This commit modifies the deliverSampler method in the ProxyControl.java file. The method now filters the sampler based on content type and URL, modifies its configurations, and places it in the target controller node. If the sampler is excluded based on URL or content-type, it now notifies the sample listeners.",3,2,3,4,"refactor: Update deliverSampler method to use 'WorkBench' thread group name
Refactored deliverSampler method to consistently use 'WorkBench' thread group name for notifying sample listeners, ensuring uniformity in sample labeling and exclusion logic."
aa4e1164fc1cf246a154e45338dadd0bedde8f66,apache/jmeter,,"File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
Status: modified
```diff
@@ -129,10 +129,20 @@ public NamingEnumeration searchTest(DirContext dirContext, String searchBase, St
 		if (dirContext == null) {
 			throw new NamingException(CONTEXT_IS_NULL);
 		}
+        if (log.isDebugEnabled()){
+            log.debug(
+                    ""searchBase="" + searchBase +
+                    "" scope="" + scope +
+                    "" countlim="" + countlim +
+                    "" timelim="" + timelim +
+                    "" attrs="" + attrs +
+                    "" retobj="" + retobj +
+                    "" deref="" + deref +
+                    "" filter="" + searchFilter
+                      );
+        }
 		SearchControls searchcontrols = null;
 		searchcontrols = new SearchControls(scope, countlim, timelim, attrs, retobj, deref);
-		log.debug(""scope, countlim, timelim, attrs, retobj, deref= "" + searchFilter + scope + countlim + timelim
-				+ attrs + retobj + deref);
 		return dirContext.search(searchBase, searchFilter, searchcontrols);
 	}
 
```",Tidy debug statement,4,4,4,4,add more logging for üòÖ,0,0,3,0,Refactor: Improve readability of debug log statements in LdapExtClient This commit refactors the 'searchTest' method in the LdapExtClient.java file to improve the readability of the debug log statements. The functionality of the method remains the same.,4,4,4,4,"refactor: Log search parameters in LdapExtClient search method
This commit refactors the `search` method in `LdapExtClient` to log search parameters, including search base, scope, count limit, time limit, attributes, return object, dereference, and filter, when debug logging is enabled, improving LDAP search operation debug logging."
30f3e481a1f21ee8dce5bdbc3662ed30227d1b99,apache/jmeter,,"File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Status: modified
```diff
@@ -34,6 +34,7 @@
 import org.apache.jmeter.protocol.http.control.TestHTTPMirrorThread;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
@@ -1091,7 +1092,6 @@ private void setupFormData(HTTPSamplerBase httpSampler, boolean isEncoded, Strin
      * 
      * @param httpSampler
      */
-    @SuppressWarnings(""deprecation"")
     private void setupFileUploadData(
             HTTPSamplerBase httpSampler,
             boolean isEncoded,
@@ -1105,9 +1105,9 @@ private void setupFileUploadData(
         // Set the form data
         setupFormData(httpSampler, isEncoded, titleField, titleValue, descriptionField, descriptionValue);
         // Set the file upload data
-        httpSampler.setFileField(fileField);
-        httpSampler.setFilename(fileValue.getAbsolutePath());
-        httpSampler.setMimetype(fileMimeType);      
+        HTTPFileArg[] hfa = {new HTTPFileArg(fileValue == null ? """" : fileValue.getAbsolutePath(), fileField, fileMimeType)};
+        httpSampler.setHTTPFiles(hfa);
+
     }
 
     /**
```",Stop using deprecated methods,4,4,4,4,remove unused code,0,0,4,4,Refactor: Update file upload data setup in HTTP sampler This commit updates the setupFileUploadData method in the TestHTTPSamplersAgainstHttpMirrorServer.java file. The changes involve how the file upload data is set up for the HTTP sampler. The previous implementation has been replaced with a new approach that uses the HTTPFileArg class. This refactor improves the structure of the code without changing its behavior.,4,4,4,4,"refactor: Use HTTPFileArg to configure file upload in setupFileUploadData
Replaced deprecated file upload configuration methods with `setHTTPFiles` using `HTTPFileArg` in `setupFileUploadData`, improving code maintainability and efficiency."
793ada2cfd1276768b885f30036566dd174e8f07,apache/jmeter,,"File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Status: modified
```diff
@@ -169,9 +169,11 @@ private SampleResult sampleWithListener() {
         }
         result.sampleEnd();
        
+        int read = 0;
         for(cnt = 0; cnt < loop ; cnt++) {
             TextMessage msg = queue.poll();
             if (msg != null) {
+                read++;
                 try {
                     buffer.append(msg.getText());
                     Enumeration<?> props = msg.getPropertyNames();
@@ -197,9 +199,9 @@ private SampleResult sampleWithListener() {
         result.setDataType(SampleResult.TEXT);
         result.setSuccessful(true);
         result.setResponseCodeOK();
-        result.setResponseMessage(loop + "" messages received""); // TODO fix
+        result.setResponseMessage(read + "" messages received"");
         result.setSamplerData(loop + "" messages expected"");
-        result.setSampleCount(loop);
+        result.setSampleCount(read);
 
         return result;
     }
```",Count messages actually read,3,4,4,4,fix sampler sampler,0,0,2,0,"Refactor: Improve accuracy of response message and sample count in SubscriberSampler In the `sampleWithListener()` method of the `SubscriberSampler.java` file, a new variable `read` was introduced to count the actual number of messages read from the queue. This variable is then used to set the response message and sample count, improving their accuracy.",4,4,4,4,"fix: fix: Update SubscriberSampler to accurately count received messages
Fix incorrect message count reporting in SubscriberSampler by accurately counting received messages, ensuring reliable test results."
81ff872b26ce169faaae3df54d9f71cd28cf8da5,apache/jmeter,,"File: test/src/org/apache/jmeter/samplers/TestSampleResult.java
Status: modified
```diff
@@ -215,8 +215,15 @@ private void testSubResults(boolean nanoTime) throws Exception {
             if (totalTime < allsamplesTime) {
                 fail(""Total: ""+totalTime+"" < sum(samples): ""+ allsamplesTime);
             }
-            if (totalTime > overallTime) {
-                fail(""Total: ""+totalTime+"" > overall time: ""+ overallTime);
+            /*
+             * The granularity of System.currentTimeMillis() - plus the fact that the nanoTime()
+             * offset is now calculated for each sampleResult - means that there can be some
+             * minor variation in the value returned by SampleResult#currentTimeInMillis().
+             * 
+             * Allow for this by adding a fudge factor - 3ms seems to be sufficient.
+            */
+            if (totalTime > overallTime+3) {
+                fail(""Total: ""+totalTime+"" > 3 + overall time: ""+ overallTime);
             }
             
             // Check that calculator gets the correct statistics from the sample
```",Add fudge factor for overall time comparison,3,4,4,4,fix TestSampleResult üòÖ javadoc,0,0,2,0,"Fix: Adjust time calculation in testSubResults method In the testSubResults method of the TestSampleResult.java file, the time calculation has been adjusted to account for the granularity of System.currentTimeMillis(). A ""fudge factor"" of 3ms has been added to the overall time to allow for minor variations in the value returned by SampleResult#currentTimeInMillis(). This change ensures that the test accurately reflects the time taken by the HTTP sample and its sub-samples.",4,4,4,4,"fix: Relax timing comparison to accommodate System.currentTimeMillis() granularity
Relax timing comparison to account for minor variations in SampleResult#currentTimeInMillis() output due to System.currentTimeMillis() granularity and nanoTime() offset calculation for each sampleResult. This change ensures accurate timing comparisons despite these variations."
dfe51f026a532172863f27fd303cb26b0a48279d,apache/jmeter,,"File: src/core/org/apache/jmeter/services/FileServer.java
Status: modified
```diff
@@ -40,7 +40,6 @@
 import org.apache.jmeter.gui.JMeterFileFilter;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
-import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 /**
@@ -395,7 +394,7 @@ public synchronized void closeFile(String name) throws IOException {
     private void closeFile(String name, FileEntry fileEntry) throws IOException {
         if (fileEntry != null && fileEntry.inputOutputObject != null) {
             log.info(""Close: ""+name);
-            JOrphanUtils.closeQuietly(fileEntry.inputOutputObject);
+            fileEntry.inputOutputObject.close();
             fileEntry.inputOutputObject = null;
         }
     }
```",Don't swallow IOException,0,4,4,4,remove unnecessary call to closeQuietly,0,1,4,4,"Refactor: Replace JOrphanUtils.closeQuietly with direct close method in FileServer In the FileServer.java file, the closeFile method has been refactored. The use of JOrphanUtils.closeQuietly to close the fileEntry.inputOutputObject has been replaced with the direct close method. This change improves the internal structure of the code without altering its external behavior.",3,4,4,4,"refactor: Remove dependency on JOrphanUtils in FileServer's closeFile method
Removed unnecessary dependency on JOrphanUtils by replacing its closeQuietly method with a direct close call, aligning with the principle of minimal dependencies and reducing external coupling."
420947c1d431f2ce795d13e995c79eec4ae8d040,apache/jmeter,,"File: src/core/org/apache/jmeter/engine/util/FunctionParser.java
Status: modified
```diff
@@ -134,9 +134,9 @@ Object makeFunction(StringReader reader) throws InvalidVariableException {
                         if (reader.read(current) == 0 || current[0] != '}') {
                             reader.reset();// set to start of string
                             char []cb = new char[100];
-                            reader.read(cb);// return deliberately ignored
+                            int nbRead = reader.read(cb);
                             throw new InvalidVariableException
-                            (""Expected } after ""+funcName+"" function call in ""+new String(cb));
+                            (""Expected } after ""+funcName+"" function call in ""+new String(cb, 0, nbRead));
                         }
                         if (function instanceof TestListener) {
                             StandardJMeterEngine.register((TestListener) function);
```",Read return value of read,0,3,4,3,add a variable to FunctionParser,0,1,4,4,"Refactor: Simplify failure message assignment in ResponseAssertion In the `getResult` method of `ResponseAssertion.java`, the assignment of the failure message in the `AssertionResult` object has been simplified. The failure message is now set using `response.responseDatatoString()` instead of `new String((byte[]) response.getResponseData())`. This change improves readability and maintainability of the code.",3,2,4,4,"fix: Throw InvalidVariableException with correct buffer content
Fixed incorrect substring representation in `InvalidVariableException` by using the correct buffer content length, preventing potential errors in function parsing."
72b574cefec3c12cc534f64fd14a26d093f84a1c,apache/jmeter,,"File: src/components/org/apache/jmeter/modifiers/CounterConfig.java
Status: modified
```diff
@@ -48,11 +48,11 @@ public class CounterConfig extends AbstractTestElement
 
     private final static String FORMAT = ""CounterConfig.format""; // $NON-NLS-1$
 
-    public final static String PER_USER = ""CounterConfig.per_user""; // $NON-NLS-1$
+    private final static String PER_USER = ""CounterConfig.per_user""; // $NON-NLS-1$
 
-    public final static String VAR_NAME = ""CounterConfig.name""; // $NON-NLS-1$
+    private final static String VAR_NAME = ""CounterConfig.name""; // $NON-NLS-1$
 
-    public final static String RESET_ON_THREAD_GROUP_ITERATION = ""CounterConfig.reset_on_tg_iteration""; // $NON-NLS-1$
+    private final static String RESET_ON_THREAD_GROUP_ITERATION = ""CounterConfig.reset_on_tg_iteration""; // $NON-NLS-1$
 
 	private static final boolean RESET_ON_THREAD_GROUP_ITERATION_DEFAULT = false;
 
```",make constants private as not used anywhere else,4,4,4,4,fix typo in CounterConfig,0,0,4,4,"Refactor: Change access modifiers of static variables in CounterConfig class The access modifiers of three static String variables (PER_USER, VAR_NAME, RESET_ON_THREAD_GROUP_ITERATION) in the CounterConfig class have been changed from public to private. This change is part of a refactoring effort to improve the encapsulation of the class.",4,4,4,4,"refactor: Make static constants private
Restricted access to static constants in CounterConfig.java by changing their visibility from public to private, adhering to the principle of least privilege and improving the overall encapsulation of the class."
3eb16cd9abd44055599b6930028ca4d5b4cfefa9,apache/jmeter,,"File: src/core/org/apache/jmeter/testelement/property/NullProperty.java
Status: modified
```diff
@@ -48,6 +48,7 @@ public String getStringValue() {
     }
 
     public void setObjectValue(Object v) {
+        // NOOP
     }
 
     /**
@@ -81,7 +82,7 @@ public void mergeIn(JMeterProperty prop) {
     }
 
     @Override
-    public final NullProperty clone() {
+    public NullProperty clone() {
         return this;
     }
 
```",remove final on method as class is final,4,4,4,4,fix the build,0,0,4,4,"Refactor: Update setObjectValue and clone methods in NullProperty.java This commit adds a comment to the setObjectValue method indicating that it does nothing (NOOP), and modifies the clone method. The changes are made to improve the structure or design of the code without changing its behavior.",2,2,3,4,"refactor: Remove implementation of setObjectValue
Removed unnecessary setObjectValue method implementation in NullProperty, which was a no-op, to simplify the internal structure of the software."
8d609412395e97d79b09f18c2f0aded10bb055e4,apache/jmeter,,"File: src/protocol/native/org/apache/jmeter/protocol/system/NativeCommand.java
Status: modified
```diff
@@ -48,4 +48,4 @@ public NativeCommand(File directory, Map<String, String> env, String stdin, Stri
         super(directory, 0L, 100, env, stdin, stdout, stderr);
     }
 
-}
\ No newline at end of file
+}
```",Add EOL at EOF,4,4,4,3,fix checkstyle error,0,0,4,4,"Style: Add newline at end of NativeCommand.java This commit adds a newline at the end of the NativeCommand.java file. The change is purely stylistic and does not affect the functionality of the NativeCommand class, which executes system commands with specified environment variables and working directory.",4,4,2,4,"style: Remove trailing whitespace at end of NativeCommand.java file
No functional changes were introduced; this commit solely removes trailing whitespace at the end of NativeCommand.java to conform to the project's coding conventions, ensuring a cleaner and more maintainable codebase."
42167f08f0e35229f6446ab3942d83914a7cb241,apache/karaf,,"File: diagnostic/common/src/main/java/org/apache/karaf/diagnostic/common/ThreadDumpProvider.java
Status: modified
```diff
@@ -40,11 +40,12 @@ public ThreadDumpProvider() {
     protected void writeDump(OutputStreamWriter outputStream) throws Exception {_x000D_
         ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();_x000D_
 _x000D_
-        outputStream.write(""Number of threads: "" + threadMXBean.getDaemonThreadCount() + ""\n"");_x000D_
-        ThreadInfo[] threadDump = threadMXBean.dumpAllThreads(true, true);_x000D_
-        for (ThreadInfo threadInfo : threadDump) {_x000D_
+        outputStream.write(""Number of threads: "" + threadMXBean.getThreadCount() + ""\n"");_x000D_
+_x000D_
+        for (ThreadInfo threadInfo : threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(), Integer.MAX_VALUE)) {_x000D_
             outputStream.write(threadInfo.toString() + ""\n\n"");_x000D_
         }_x000D_
+_x000D_
     }_x000D_
 _x000D_
 }_x000D_
```",Fix build after adding diagnostic stuff,3,3,4,4,fix dump of ThreadDumpProvider,3,3,4,4,"Refactor: Improve completeness of thread dump information In the `writeDump` method of the `ThreadDumpProvider.java` file, the number of threads and their detailed information are now written to the output stream, instead of just the number of daemon threads. This change improves the completeness of the thread dump information provided by the method.",3,3,3,4,"fix: Fix thread count reporting in writeDump method
Fixed incorrect thread count reporting in `writeDump` method by switching from `getDaemonThreadCount` to `getThreadCount`, which provides a more comprehensive view of the system's thread state. This change ensures that the thread dump accurately reflects the total number of threads, rather than just daemon threads."
5ea93654cf709383c1d59012e749e0fa20e70ffb,apache/karaf,Y,"File: features/command/src/main/java/org/apache/karaf/features/command/InfoFeatureCommand.java
Status: modified
```diff
@@ -17,11 +17,9 @@
 package org.apache.karaf.features.command;
 
 import java.util.Iterator;
-import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import org.apache.karaf.features.Conditional;
 import org.apache.karaf.shell.commands.Argument;
```


File: features/command/src/main/java/org/apache/karaf/features/command/ListFeaturesCommand.java
Status: modified
```diff
@@ -16,7 +16,6 @@
  */
 package org.apache.karaf.features.command;
 
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
@@ -46,7 +45,7 @@ protected void doExecute(FeaturesService featuresService) throws Exception {
         table.column(""Version"");
         table.column(""Installed"");
         table.column(""Repository"");
-        table.column(""Description"");
+        table.column(""Description"").maxSize(50);
         table.emptyTableText(onlyInstalled ? ""No features installed"" : ""No features available"");
 
         List<Repository> repos = Arrays.asList(featuresService.listRepositories());
```",Limit size of description to avoid ugly layout,4,4,4,4,remove unused imports,0,0,4,4,"Refactor: Remove unused imports and limit description column size In this commit, unused imports are removed from the InfoFeatureCommand.java and ListFeaturesCommand.java files. Additionally, the size of the ""Description"" column in the ListFeaturesCommand.java file is set to 50 to improve the readability of the output. These changes are part of a code refactoring effort and do not alter the functionality of the affected classes.",4,4,4,4,"refactor: Remove unused imports
No functional changes were introduced, but the removal of unused imports improves code maintainability and reduces the risk of future errors."
b220722c3652bf02ca00150d0decb2509b83adc0,apache/karaf,,"File: jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesLoginModule.java
Status: modified
```diff
@@ -59,9 +59,10 @@ public void initialize(Subject sub, CallbackHandler handler, Map sharedState, Ma
             LOGGER.debug(""Initialized debug={} usersFile={}"", debug, usersFile);
         }
        
-        if (propertiesInstaller == null || !usersFile.equals(propertiesInstaller.getUsersFileName()) ) {
+        if (propertiesInstaller == null 
+            || (usersFile != null && !usersFile.equals(propertiesInstaller.getUsersFileName())) ) {
        
-            LOG.debug(""Register PropertiesInstaller service"");
+            LOGGER.debug(""Register PropertiesInstaller service"");
             
             propertiesInstaller = new PropertiesInstaller(this, usersFile);
             if (this.bundleContext != null) {
```",add a NPE checker,4,3,4,4,fix potential npe,4,3,4,4,Fix: Update initialization of PropertiesInstaller in PropertiesLoginModule This commit modifies the initialize method in the PropertiesLoginModule class. The changes involve the initialization of the PropertiesInstaller service. The condition check for 'propertiesInstaller' and 'usersFile' has been updated to prevent potential null pointer exceptions. The debug log message has also been updated for consistency.,4,4,4,4,"fix: Handle null usersFile in PropertiesLoginModule's initialize method
This change ensures that the PropertiesInstaller service is registered correctly even when the usersFile is null, preventing potential issues during the authentication process. The null check is added to handle this edge case and maintain the stability of the PropertiesLoginModule."
6d2764319c6a87420767b8604c3d12f5022200a8,apache/lenya,,"File: src/java/org/apache/lenya/cms/authoring/DefaultCreator.java
Status: modified
```diff
@@ -1,5 +1,5 @@
 /*
- * $Id: DefaultCreator.java,v 1.3 2003/02/07 12:14:07 ah Exp $
+ * $Id: DefaultCreator.java,v 1.4 2003/02/10 14:45:45 egliwyona Exp $
  * <License>
  * The Apache Software License
  *
@@ -195,7 +195,8 @@ public String generateTreeId(String childId, short childType)
      *
      * @throws Exception DOCUMENT ME!
      */
-    public void create(File samplesDir, File parentDir, String childId, short childType)
+    public void create(File samplesDir, File parentDir,
+		       String childId, short childType, String childName)
         throws Exception {
         String filename = null;
         String filenameMeta = null;
```",The signature of the create method of the parent class had changed. That's why client's would invoke the create of the parent class which does nothing. Adapted the create method to match the signature.,4,4,4,4,fix a bug in DefaultCreator,2,2,4,4,feat: add childName parameter to create method The 'create' method in the 'DefaultCreator.java' file has been modified to include an additional parameter 'childName'. This method now creates a new file and its corresponding metadata file based on the child type and copies the content from the sample files to these new files.,1,4,3,4,"feat: Add childName parameter to create method
Added childName parameter to create method, enabling creation of child nodes with customized names and enhancing flexibility in XML file generation."
27c5bd80093d211c4935f7f845dc0d75fb491995,apache/lenya,,"File: src/java/org/apache/lenya/cms/workflow/WorkflowFactory.java
Status: modified
```diff
@@ -16,7 +16,6 @@
 import org.apache.lenya.workflow.*;
 import org.apache.lenya.workflow.Workflow;
 import org.apache.lenya.workflow.impl.WorkflowBuilder;
-import org.apache.lenya.workflow.impl.WorkflowImpl;
 import org.apache.lenya.xml.DocumentHelper;
 import org.apache.lenya.xml.NamespaceHelper;
 import org.w3c.dom.Element;
@@ -99,12 +98,4 @@ public Situation buildSituation(User user) throws WorkflowException {
         return new CMSSituation(user);
     }
     
-    /**
-     * Creates an event object for a given command.
-     */
-    public Event buildEvent(WorkflowInstance instance, String command) throws WorkflowException {
-        WorkflowImpl workflow = (WorkflowImpl) instance.getWorkflow();
-        return workflow.getEvent(command);
-    }
-    
 }
```",removed buildEvent() method,0,4,4,4,remove unused method,4,4,4,4,"Refactor: Remove unused method and import in WorkflowFactory class The `buildEvent` method and the `import org.apache.lenya.workflow.impl.WorkflowImpl;` statement were removed from the `WorkflowFactory.java` file. This class is used to create new instances of workflows, workflow situations, and workflow documents. The removed method was previously used to create events, but it is no longer needed. This change improves the structure of the code without altering its behavior.",4,4,2,4,"refactor: Simplify WorkflowFactory by eliminating redundant dependencies and methods
Simplified WorkflowFactory by removing unnecessary dependencies and methods, reducing complexity and improving maintainability. This refactoring enables easier understanding and modification of the workflow instance creation process."
dce9cd620ac1d508a684477d6cd3cef596ec7a04,apache/lenya,,"File: src/java/org/apache/lenya/cms/publication/DefaultDocument.java
Status: modified
```diff
@@ -43,6 +43,8 @@
  */
 package org.apache.lenya.cms.publication;
 
+import java.io.File;
+
 /**
  * A typical CMS document.
  * 
@@ -75,5 +77,25 @@ public String getId() {
     public Publication getPublication() {
         return publication;
     }
+    
+    /**
+     * Returns the file for this document in a certain area and language.
+     * @param area The area.
+     * @param language The language.
+     * @return A file object.
+     */
+    public File getFile(String area, String language) {
+        return getPublication().getPathMapper().getFile(
+            getPublication(), area, getId(), language);
+    }
+    
+    /**
+     * Returns the files for this document in a certain area and all languages.
+     * @param area The area.
+     * @return A file object.
+     */
+    public File[] getFiles(String area) {
+        return getPublication().getPathMapper().getFiles(getPublication(), area, getId());
+    }
 
 }
```",added file getters,3,4,4,4,add DefaultDocument getFile,3,4,3,4,"Feat: Add getFile and getFiles methods to DefaultDocument.java This commit introduces two new methods to the DefaultDocument.java file. The getFile method returns the file associated with a specific area and language in the publication, and the getFiles method returns an array of files for a specific area in the publication with the given ID. These methods enhance the functionality of the DefaultDocument class by providing more granular access to the files associated with a document in a publication.",4,4,4,4,"feat: Add getFile and getFiles methods to DefaultDocument
Added getFile and getFiles methods to DefaultDocument, enabling retrieval of files associated with a document in a publication. getFile returns a file object based on area and language, while getFiles returns an array of files for a specific area. This enhancement facilitates working with document files by providing a programmatic way to access them."
983e12d5005d8b7450e389f867269e170d3dfe89,apache/lenya,,"File: src/java/org/apache/lenya/cms/cocoon/components/modules/input/SitetreeModule.java
Status: modified
```diff
@@ -68,7 +68,7 @@ public Object getAttribute(String name, Configuration modeConf, Map objectModel)
             }
             
             if (name.equals(TRASH_NODE)) {
-                SiteTree authoringTree = publication.getSiteTree(Publication.TRASH_AREA);
+                SiteTree authoringTree = manager.getTree(Publication.TRASH_AREA);
                 value = authoringTree.getNode(envelope.getDocument().getId());
             }
         } catch (Exception e) {
```",Fixed my last checkin :),1,0,4,4,fix npe in SitetreeModule,0,0,4,4,"Refactor: Update method of accessing authoringTree in SitetreeModule In the `SitetreeModule.java` file, the method of accessing the `authoringTree` object has been updated. Previously, the `authoringTree` was obtained from the `publication` object. Now, it is obtained from the `manager` object. This change is a refactor aimed at improving the internal structure of the code without altering its external behavior.",4,4,4,4,"refactor: Use site manager to get site tree for trash area
Extracted site tree retrieval logic from publication to utilize SiteManager, decoupling the SitetreeModule from publication-specific implementations and enhancing code flexibility."
77eb1cd2c02961e62c50caf61d944ea835aac41c,apache/lenya,,"File: src/java/org/apache/lenya/cms/cocoon/source/SourceUtil.java
Status: modified
```diff
@@ -30,7 +30,7 @@
 
 import org.apache.avalon.framework.service.ServiceException;
 import org.apache.avalon.framework.service.ServiceManager;
-import org.apache.commons.io.CopyUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.output.ByteArrayOutputStream;
 import org.apache.excalibur.source.ModifiableSource;
 import org.apache.excalibur.source.Source;
@@ -75,10 +75,10 @@ public static void copy(Source source, ModifiableSource destination, boolean use
 
             if (useBuffer) {
                 final ByteArrayOutputStream sourceBos = new ByteArrayOutputStream();
-                CopyUtils.copy(sourceInputStream, sourceBos);
-                CopyUtils.copy(sourceBos.toByteArray(), destOutputStream);
+                IOUtils.copy(sourceInputStream, sourceBos);
+                IOUtils.write(sourceBos.toByteArray(), destOutputStream);
             } else {
-                CopyUtils.copy(sourceInputStream, destOutputStream);
+                IOUtils.copy(sourceInputStream, destOutputStream);
             }
         } finally {
             if (destOutputStream != null) {
```",Use IOUtils instead of deprecated CopyUtils.,4,4,4,4,fix a bug in SourceUtil,0,1,4,4,"Refactor: Replace CopyUtils with IOUtils in SourceUtil In the SourceUtil class, the CopyUtils.copy method has been replaced with IOUtils.copy and IOUtils.write methods. This change is made in the copy method which is responsible for copying data from a source to a destination, with an option to use a buffer for the operation. The functionality of the SourceUtil class remains the same, providing methods for handling and manipulating sources, such as checking existence, reading, and writing.",4,4,1,4,"refactor: Switch copy implementation from CopyUtils to IOUtils in SourceUtil
This commit replaces `CopyUtils` with `IOUtils` in `SourceUtil`'s `copy` method to leverage the more efficient and flexible IO utilities, improving the internal structure of the software without changing its observable behavior."
4f42be43b3cf21f5f08fdd0d7c4b9c777f56b1a3,apache/lenya,,"File: src/modules/repository/java/test/org/apache/lenya/cms/repo/RepositoryTest.java
Status: modified
```diff
@@ -28,7 +28,7 @@
 /**
  * JCR repository test.
  */
-public class RepositoryTest extends TestCase {
+public abstract class RepositoryTest extends TestCase {
 
     protected static final String AREA_ID = ""authoring"";
     protected static final String PUBLICATION_ID = ""test"";
@@ -43,7 +43,7 @@ public RepositoryTest() {
         setWebappDirectory(System.getProperty(""test.repo.webappDirectory""));
         setRepositoryFactory(System.getProperty(""test.repo.repositoryFactory""));
     }
-
+    
     private String webappDirectory;
     private String repositoryFactory;
 
```",Made RepositoryTest abstract so it isn't executed by Junit,4,4,4,4,make RepositoryTest abstract,1,4,4,4,"Refactor: Make RepositoryTest class abstract The `RepositoryTest` class, used for testing the functionality of a JCR repository and setting up and managing a test repository for a web application, has been made abstract. This change does not affect any methods within the class.",4,4,4,4,"refactor: Make RepositoryTest an abstract class
Made RepositoryTest abstract by removing implementation details, preparing it for subclassing and extension."
b09b1c16b61a1a39aa6b6c371ba76d9d812e335c,apache/lenya,,"File: src/modules-core/observation-impl/java/test/org/apache/lenya/cms/observation/ObservationTest.java
Status: modified
```diff
@@ -92,6 +92,7 @@ protected void testListener(Document doc, TestListener listener) throws Exceptio
         Thread.currentThread().sleep(100);
         
         assertTrue(listener.wasNotified());
+        listener.reset();
     }
 
 }
```",Resetting listener after test,2,4,4,4,fix unit test,0,1,4,4,"Fix: Reset listener in testListener method In the `testListener` method of the `ObservationTest.java` file, a line of code was added to reset the listener after it gets notified. This ensures that the listener is ready for the next notification. This change is classified as a 'Fix', suggesting that it corrects an issue or bug.",4,4,4,4,"fix: Ensure TestListener is reset after notification
Adds a call to `listener.reset()` after notification to ensure the TestListener is properly reset, which was previously missing in the `testListener` method."
cf66909a1c442b36ae3fc2324c1c55823f6f260e,apache/lenya,,"File: src/modules/lucene/java/src/org/apache/lenya/cms/lucene/IndexUpdater.java
Status: modified
```diff
@@ -28,7 +28,6 @@
 import org.apache.lenya.cms.observation.ObservationRegistry;
 import org.apache.lenya.cms.observation.RepositoryEvent;
 import org.apache.lenya.cms.observation.RepositoryListener;
-import org.apache.lenya.cms.publication.Document;
 
 /**
  * Index updater which updates the index when a document changes.
```",[minor change] removed unused import,4,4,4,4,remove unused import,4,4,4,4,Refactor: Remove unused import in IndexUpdater.java This commit removes an unused import statement in the IndexUpdater.java file. The removed import is for the Document class. This change is a part of code refactoring and does not affect the functionality of the code.,4,4,4,4,"refactor: Remove unnecessary import statement
No functional changes were introduced by removing the unnecessary import statement of org.apache.lenya.cms.publication.Document, which was not being utilized in the IndexUpdater class."
c90b7af96858006bd95e2faa3040a0588c809eba,apache/lenya,,"File: src/modules-core/sitemanagement/java/src/org/apache/lenya/cms/site/usecases/Assets.java
Status: modified
```diff
@@ -114,7 +114,7 @@ protected Document[] getResourceDocuments() throws DocumentException {
         Document[] docs = getSourceDocument().area().getDocuments();
         for (int i = 0; i < docs.length; i++) {
             if (docs[i].getResourceType().getName().equals(""resource"")) {
-                list.add(docs);
+                list.add(docs[i]);
             }
         }
         return (Document[]) list.toArray(new Document[list.size()]);
```",add single resource Doc and not all docs in area to the ArrayList for each resource,0,4,4,4,fix bug in Assets,1,2,4,4,"Fix: Corrected element addition in getResourceDocuments method In the 'getResourceDocuments' method of the 'Assets.java' file, corrected the addition of elements to the list. Previously, the entire 'docs' array was being added to the list. This has been fixed to add only the current element 'docs[i]'. This change ensures that the method correctly returns an array of documents that have a resource type of ""resource"" from the source document's area.",4,4,4,4,"fix: Correctly add resource documents to list
Fixed incorrect population of the list in `getResourceDocuments()` method, which previously added the entire `docs` array instead of individual resource documents. This change ensures that only documents with type 'resource' are added to the list, resolving the issue."
f3c5e70e7f9cdc18ac0dcef205bc5fcacdee2bf7,apache/lenya,,"File: src/java/org/apache/lenya/cms/publication/DocumentLocator.java
Status: modified
```diff
@@ -38,10 +38,8 @@ public class DocumentLocator {
      */
     public static DocumentLocator getLocator(String pubId, String area, String path, String language) {
         String key = DocumentLocator.getKey(pubId, area, path, language);
-        DocumentLocator locator = null;
-        if (locators.containsKey(key)) {
-            locator = (DocumentLocator) locators.get(key);
-        } else {
+        DocumentLocator locator = (DocumentLocator) locators.get(key);
+        if (locator == null) {
             locator = new DocumentLocator(pubId, area, path, language);
             locators.put(key, locator);
         }
```",Avoid returning null-value DocumentLocator objects,1,4,4,4,fix quality flaw,0,0,4,4,"Refactor: Simplify the existence check in getLocator method The `getLocator` method in the `DocumentLocator` class has been refactored. The old code first checked if a key exists in the `locators` map and then retrieved the value associated with the key. The new code directly retrieves the value associated with the key and then checks if the retrieved value is null. This change simplifies the code and improves its readability. The functionality of the method remains the same: it returns a `DocumentLocator` for the given parameters. If a `DocumentLocator` for these parameters does not exist, a new one is created, stored, and then returned.",4,4,4,4,"refactor: Simplify getLocator method by reducing null checks
Removed unnecessary null checks in getLocator method, directly retrieving the DocumentLocator instance from the cache and creating a new one if it doesn't exist, resulting in more concise and efficient code."
27c0a1556a47a2c594aece3c355e891ff4f19836,apache/logging-log4j2,,"File: log4j2-core/src/main/java/org/apache/logging/log4j/core/Appender.java
Status: modified
```diff
@@ -65,12 +65,6 @@ public interface Appender extends Lifecycle {
      */
     boolean requiresLayout();
 
-    /**
-     * Returns a Filter if one is present.
-     * @return the Filter or null if no Filter is associated with the Appender.
-     */
-    Filter getFilter();
-
     /**
      * If set to true any exceptions thrown by the Appender will be logged but not thrown.
      * @return true if Exceptions should be suppressed, false otherwise.
```",Remove getFilter method inadvertantly left in,4,4,4,4,remove unused method,4,4,4,4,"Refactor: Remove getFilter method from Appender class The getFilter method was removed from the Appender class in the log4j2-core module. This change is part of a refactor and affects how filters are managed in the Appender class. The Appender class is responsible for handling logging events, managing exceptions, and configuring layouts for logging.",2,4,3,4,"refactor: Remove getFilter method from Appender interface
Removed the getFilter method from the Appender interface, which was previously used to return a Filter associated with the Appender, but is no longer required. This change aligns with the interface's purpose of handling logging events and providing configuration options."
45776f1f16a197428c3cb02520e9d1b28ab4dff6,apache/logging-log4j2,,"File: core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Status: modified
```diff
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core.appender;
 
+import java.util.Locale;
+
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -87,7 +89,7 @@ public static SocketAppender createAppender(@PluginAttr(""host"") String host,
     }
 
     protected static AbstractSocketManager createSocketManager(String protocol, String host, int port, int delay) {
-        Protocol p = Protocol.valueOf(protocol.toUpperCase());
+        Protocol p = Protocol.valueOf(protocol.toUpperCase(Locale.ENGLISH));
         switch (p) {
             case TCP:
                 return TCPSocketManager.getSocketManager(host, port, delay);
```",Avoid problems on the Turkish Locale.,4,4,4,4,use the correct locale in SocketAppender,4,4,4,4,Refactor: Use Locale.ENGLISH in toUpperCase method call in SocketAppender This commit refactors the `createSocketManager` method in the `SocketAppender.java` file. The `toUpperCase` method call was changed to use `Locale.ENGLISH` to ensure consistent behavior across different locales. This change does not alter the external behavior of the method.,4,4,4,4,"refactor: Use Locale.ENGLISH when converting protocol to uppercase
Previously, the protocol conversion to uppercase was locale-dependent, which could lead to inconsistent results. By specifying Locale.ENGLISH, we ensure that the uppercase conversion is consistent across different locales, making the SocketAppender more robust and reliable."
f0665f7f3807575bf510786b184486262db1e2e1,apache/logging-log4j2,,"File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/ResolverUtil.java
Status: modified
```diff
@@ -276,7 +276,8 @@ public void findInPackage(final Test test, String packageName) {
     }
 
     private void loadImplementationsInBundle(final Test test, final String packageName) {
-        final BundleWiring wiring = FrameworkUtil.getBundle(ResolverUtil.class).adapt(BundleWiring.class);
+        //Do not remove the cast on the next line as removing it will cause a compile error on Java 7.
+        final BundleWiring wiring = (BundleWiring)FrameworkUtil.getBundle(ResolverUtil.class).adapt(BundleWiring.class);
         final Collection<String> list = wiring.listResources(packageName, ""*.class"", BundleWiring.LISTRESOURCES_RECURSE);
         for (final String name : list) {
             addIfMatching(test, name);
```","Revert change to remove ""unnecessary"" cast. Compile fails on OS/X in Java 7 without it.",4,4,4,4,fix ResolverUtil loadImplementationsInBundle,1,1,4,4,"Refactor: Add cast for Java 7 compatibility in ResolverUtil In the 'loadImplementationsInBundle' method of the 'ResolverUtil.java' file, a cast has been added to the return value of a method call. This change ensures compatibility with Java 7. The method is used to load classes from a package in a bundle that match a given test condition.",4,4,3,4,"fix: Add explicit cast to FrameworkUtil.getBundle in loadImplementationsInBundle method
Explicitly cast FrameworkUtil.getBundle to BundleWiring in loadImplementationsInBundle method to prevent compile errors on Java 7, ensuring correct retrieval of BundleWiring object for loading and registering test implementations from specific bundles/packages."
a61bbe965d014f8d36ec59713e20ebee8cf07ff1,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Status: modified
```diff
@@ -112,6 +112,8 @@ public abstract class ConfigurationFactory {
      * @return the ConfigurationFactory.
      */
     public static ConfigurationFactory getInstance() {
+        // volatile works in Java 1.6+, so double-checked locking also works properly
+        //noinspection DoubleCheckedLocking
         if (factories == null) {
             synchronized(TEST_PREFIX) {
                 if (factories == null) {
```",Add comment regarding proper double-checked locking. Quiets the static code analyzers.,4,4,4,3,fix ConfigurationFactory getInstance,0,0,4,4,Refactor: Add comments to getInstance() method in ConfigurationFactory class This commit adds two lines of comments to the getInstance() method in the ConfigurationFactory class. The comments explain the use of volatile and double-checked locking in the method. The functionality of the method remains the same.,4,4,4,4,"refactor: Ensure thread-safety in getInstance() method using double-checked locking
This change introduces double-checked locking to ensure thread-safety in the getInstance() method, which lazily initializes the configuration factory. This mechanism prevents concurrent modifications, making the method safe for use in multi-threaded environments."
8ee19f2d2c54c10a99ff53c62c97b96953e60358,apache/logging-log4j2,,"File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java
Status: modified
```diff
@@ -67,7 +67,7 @@ public void testAppender() throws Exception {
         final File dir = new File(DIR);
         assertTrue(""Directory not created"", dir.exists() && dir.listFiles().length > 0);
 
-        final int MAX_TRIES = 10;
+        final int MAX_TRIES = 20;
         for (int i = 0; i < MAX_TRIES; i++) {
             final File[] files = dir.listFiles();
             assertTrue(""No files created"", files.length > 0);
@@ -76,7 +76,8 @@ public void testAppender() throws Exception {
                     return; // test succeeded
                 }
             }
-            Thread.sleep(50); // Allow time for rollover to complete
+            logger.debug(""Adding additional event "" + i);
+            Thread.sleep(100); // Allow time for rollover to complete
         }
         fail(""No compressed files found"");
     }
```",additional fix to prevent spurious test failures,4,2,4,4,fix unit test,2,2,4,4,"Fix: Increase tries and sleep time in testAppender() In the testAppender() method of the RollingAppenderTimeTest.java file, the number of tries was increased from 10 to 20 to ensure the test has enough attempts to pass. A debug log statement was added for better tracking of the test progress. The sleep time was also increased from 50 to 100 to allow more time for the rollover to complete. These changes aim to improve the reliability of the test.",4,4,4,4,"refactor: Increase timeout and add debug logging in RollingAppenderTimeTest
Increased the maximum number of tries from 10 to 20 and added debug logging to improve the test's robustness and facilitate debugging in case of failures in RollingAppenderTimeTest."
0645447e8bfd7136f00d32b72ea9db2a304a2897,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Status: modified
```diff
@@ -238,20 +238,23 @@ public String toString() {
 
     /**
      * Create a pattern layout.
-     *
+     * 
      * @param pattern
-     *            The pattern. If not specified, defaults to DEFAULT_CONVERSION_PATTERN.
+     *        The pattern. If not specified, defaults to DEFAULT_CONVERSION_PATTERN.
      * @param config
-     *            The Configuration. Some Converters require access to the Interpolator.
+     *        The Configuration. Some Converters require access to the Interpolator.
      * @param replace
-     *            A Regex replacement String.
+     *        A Regex replacement String.
      * @param charsetName
-     *            The character set.
+     *        The character set.
      * @param always
-     *            If {@code ""true""} (default) exceptions are always written even if the pattern contains no exception
-     *            tokens.
+     *        If {@code ""true""} (default) exceptions are always written even if the pattern contains no exception tokens.
      * @param noConsoleNoAnsiStr
-     *            If {@code ""true""} (default is false) and {@link System#console()} is null, do not output ANSI escape codes
+     *        If {@code ""true""} (default is false) and {@link System#console()} is null, do not output ANSI escape codes
+     * @param header
+     *        The footer to place at the end of the document, once.
+     * @param footer
+     *        The footer to place at the top of the document, once.
      * @return The PatternLayout.
      */
     @PluginFactory
```",Add missing Javadoc tags.,4,4,4,4,fix PatternLayout javadoc,4,3,4,4,"Style: Refactor comments and add parameters in PatternLayout The comments in the PatternLayout class have been reformatted for better readability. Additionally, two new parameters, 'header' and 'footer', have been added to a method. These changes do not affect the functionality of the class.",4,4,4,4,"refactor: Standardize Javadoc comment formatting in PatternLayout
Improved code readability by standardizing Javadoc comment formatting, ensuring consistent parameter descriptions and adding missing articles."
1f7b97e92461f0943b8d1ba0f02ef289ee4c09a2,apache/logging-log4j2,,"File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Status: modified
```diff
@@ -63,9 +63,11 @@ public final class StatusLogger extends AbstractLogger {
     private final SimpleLogger logger;
 
     private final Collection<StatusListener> listeners = new CopyOnWriteArrayList<StatusListener>();
+    @SuppressWarnings(""NonSerializableFieldInSerializableClass"") // ReentrantReadWriteLock is Serializable
     private final ReadWriteLock listenersLock = new ReentrantReadWriteLock();
 
     private final Queue<StatusData> messages = new BoundedQueue<StatusData>(MAX_ENTRIES);
+    @SuppressWarnings(""NonSerializableFieldInSerializableClass"") // ReentrantLock is Serializable
     private final Lock msgLock = new ReentrantLock();
 
     private int listenersLevel;
```",Suppress serialization warnings where applicable.,0,4,4,4,suppress unchecked warning,0,1,4,4,Style: Add annotations to suppress warnings in StatusLogger class This commit adds two annotations to suppress warnings for non-serializable fields in the StatusLogger class. The StatusLogger class is responsible for recording and managing logging system events. The added annotations improve the style of the code and do not affect its functionality.,4,4,4,4,"refactor: Synchronize access to StatusLogger's listeners and messages
Synchronized access to listeners and messages to prevent concurrent modifications and ensure data integrity, improving the overall reliability of the StatusLogger class."
7831dde2eb0d0aa371639f8984b7a8b9f1b3aa53,apache/logging-log4j2,,"File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/SslConfigurationTest.java
Status: modified
```diff
@@ -41,7 +41,7 @@ public void emptyConfigurationHasDefaultTrustStore() throws IOException {
         final SslConfiguration sc = SslConfiguration.createSSLConfiguration(null, null, null);
         final SSLSocketFactory factory = sc.getSslSocketFactory();
         final SSLSocket clientSocket = (SSLSocket) factory.createSocket(TLS_TEST_HOST, TLS_TEST_PORT);
-        Assert.assertTrue(true);
+        Assert.assertNotNull(clientSocket);
     }
 
     @Test(expected = IOException.class)
```",Clearer test assertion.,0,1,4,4,fix failing test,0,0,4,4,"Fix: Correct assertion in SslConfigurationTest In the method emptyConfigurationHasDefaultTrustStore() of the SslConfigurationTest.java file, the assertion has been corrected. Previously, the assertion was always passing (Assert.assertTrue(true)), which did not correctly test the functionality. The assertion has been replaced with Assert.assertNotNull(clientSocket) to ensure that the clientSocket is not null when the default trust store is used with an empty SSL configuration.",4,4,4,4,"fix: Update assertion in emptyConfigurationHasDefaultTrustStore test
This change updates the assertion in the emptyConfigurationHasDefaultTrustStore test from assertTrue to assertNotNull, aligning with the test's intended purpose of verifying the default trust store is used when no custom settings are provided. The previous assertion was insufficient, and this update ensures the test is more effective in validating the expected behavior."
d2aea7458f08e8b9d48f3768b719aafaf4246007,apache/logging-log4j2,,"File: log4j-core/src/test/java/org/apache/logging/log4j/core/selector/TestClassLoader.java
Status: modified
```diff
@@ -22,10 +22,10 @@
 import java.net.URL;
 import java.net.URLConnection;
 
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.core.util.Closer;
 import org.apache.logging.log4j.core.util.Throwables;
 import org.apache.logging.log4j.util.LoaderUtil;
-import sun.misc.IOUtils;
 
 /**
  * ClassLoader that loads class in this package (or sub-package) by hand, otherwise delegating to the TCCL.
@@ -57,10 +57,9 @@ protected Class<?> findClass(final String name) throws ClassNotFoundException {
             final URLConnection uc = resource.openConnection();
             final int len = uc.getContentLength();
             final InputStream in = new BufferedInputStream(uc.getInputStream());
-            byte[] bytecode;
+            byte[] bytecode = new byte[len];
             try {
-                // laziness means using sun.misc
-                bytecode = IOUtils.readFully(in, len, true);
+                IOUtils.readFully(in, bytecode);
             } finally {
                 Closer.closeSilently(in);
             }
```",Use Apache Commons IOUtils instead of sun.misc.IOUtils.,0,4,4,4,remove unnecessary code,0,0,4,4,"Refactor: Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils in TestClassLoader This commit refactors the TestClassLoader class by replacing the sun.misc.IOUtils with org.apache.commons.io.IOUtils. The change is made in the findClass method, which finds and loads the class with the specified name. The way the class file is loaded into a byte array has been modified. The commit does not change the functionality of the method or the class.",4,4,4,4,"fix: Fix TestClassLoader to use compatible IOUtils
Updated TestClassLoader to use compatible IOUtils from Apache Commons, replacing the sun.misc.IOUtils dependency to ensure compatibility with different Java environments and to prevent potential issues with internal API changes."
efa163b9a33a8c9bbe948e4de629fdbafccd0783,apache/logging-log4j2,,"File: log4j-core/src/test/java/org/apache/logging/log4j/junit/LoggerContextRule.java
Status: modified
```diff
@@ -40,6 +40,8 @@
  */
 public class LoggerContextRule implements TestRule {
 
+    private static final String SYS_PROP_KEY_DISPLAY_NAME = ""org.apache.logging.log4j.junit.LoggerContextRule#DisplayName"";
+    private static final String SYS_PROP_KEY_CLASS_NAME = ""org.apache.logging.log4j.junit.LoggerContextRule#ClassName"";
     private final String configLocation;
     private final Class<? extends ContextSelector> contextSelectorClass;
 
@@ -81,6 +83,8 @@ public void evaluate() throws Throwable {
                 if (contextSelectorClass != null) {
                     System.setProperty(Constants.LOG4J_CONTEXT_SELECTOR, contextSelectorClass.getName());
                 }
+                System.setProperty(SYS_PROP_KEY_CLASS_NAME, description.getClassName());
+                System.setProperty(SYS_PROP_KEY_DISPLAY_NAME, description.getDisplayName());
                 context = Configurator.initialize(
                     description.getDisplayName(),
                     description.getTestClass().getClassLoader(),
@@ -92,6 +96,8 @@ public void evaluate() throws Throwable {
                     Configurator.shutdown(context);
                     StatusLogger.getLogger().reset();
                     System.clearProperty(Constants.LOG4J_CONTEXT_SELECTOR);
+                    System.clearProperty(SYS_PROP_KEY_CLASS_NAME);
+                    System.clearProperty(SYS_PROP_KEY_DISPLAY_NAME);
                 }
             }
         };
```",Set the class name and display name when executing a rule. This is to let configuration files to be more flexible in a large test suite. For example: I want to use one log file per test class.,4,4,4,4,add support for LoggerContextRule class,0,1,4,4,"Feat: Add new system properties to LoggerContextRule This commit adds two new system properties to the LoggerContextRule class in the log4j-core module. These properties, SYS_PROP_KEY_DISPLAY_NAME and SYS_PROP_KEY_CLASS_NAME, are set and cleared in the apply method. This method sets up and tears down the Log4J context for each test. The addition of these properties does not change the overall functionality of the method.",4,4,4,4,"refactor: Update LoggerContextRule to set test class name and display name system properties
This commit refactors LoggerContextRule to set test class name and display name as system properties, enabling custom logging configurations and context selectors for JUnit tests. It introduces two new system properties, `org.apache.logging.log4j.junit.LoggerContextRule#ClassName` and `org.apache.logging.log4j.junit.LoggerContextRule#DisplayName`, which are set and cleared during test execution, improving logging context management."
856607faf268136fc6f2e27cf3716a5e16a0f48d,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Status: modified
```diff
@@ -549,4 +549,20 @@ public String toString() {
         return ""DefaultRolloverStrategy(min="" + minIndex + "", max="" + maxIndex + ')';
     }
 
+    public boolean isUseMax() {
+        return useMax;
+    }
+
+    public StrSubstitutor getSubst() {
+        return subst;
+    }
+
+    public List<Action> getCustomActions() {
+        return customActions;
+    }
+
+    public boolean isStopCustomActionsOnError() {
+        return stopCustomActionsOnError;
+    }
+
 }
```",Add getters for private ivars.,4,4,4,3,add isUseMax to DefaultRolloverStrategy,0,1,4,4,"Feat: Add getter methods to DefaultRolloverStrategy class This commit adds several getter methods to the DefaultRolloverStrategy class. These methods provide access to the properties of the class, including useMax, subst, customActions, and stopCustomActionsOnError. The addition of these methods enhances the functionality of the DefaultRolloverStrategy class, which is responsible for managing the renaming and deletion of log files.",4,4,4,4,"feat: Add getters for underlying state in DefaultRolloverStrategy
This commit adds getters for internal state variables in DefaultRolloverStrategy, enabling external access to StrSubstitutor, custom actions, and configuration flags, which were previously inaccessible. This change improves the class's extensibility and flexibility by allowing users to tap into these internal components."
11ab37bcc2c070c5baae055969aabfc403fe4163,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java
Status: modified
```diff
@@ -343,21 +343,17 @@ public void mergePropertiesIntoContextMap(final Map<Property, Boolean> propertie
      * Release references held by ring buffer to allow objects to be garbage-collected.
      */
     public void clear() {
-        setValues(null, // asyncLogger
-                null, // loggerName
-                null, // marker
-                null, // fqcn
-                null, // level
-                null, // data
-                null, // t
-                null, // map
-                null, // contextStack
-                0, // threadName
-                null, // location
-                0, // currentTimeMillis
-                null,
-                0, 0 // nanoTime
-        );
+        this.asyncLogger = null;
+        this.loggerName = null;
+        this.marker = null;
+        this.fqcn = null;
+        this.level = null;
+        this.message = null;
+        this.thrown = null;
+        this.thrownProxy = null;
+        this.contextMap = null;
+        this.contextStack = null;
+        this.location = null;
         trimMessageText();
     }
 
```","RingBufferLogEvent bugfix: do not use setValues(null, null....) to clear() the RingBufferLogEvent: Message is expected to be non-null in setValues()",4,4,4,4,remove unused code,0,0,0,0,"Refactor: Simplify clearing of properties in RingBufferLogEvent In the `clear()` method of the `RingBufferLogEvent` class, the properties are now cleared individually instead of using the `setValues()` method. This refactor does not change the functionality of the method but makes the code more readable and easier to understand.",4,4,4,4,"fix: Clear RingBufferLogEvent fields
Simplify clear() method by removing unnecessary setter calls and directly setting fields to null, improving code readability and maintainability."
0fb4ed116d4ce7d90e43270eec7e00bc656d8fae,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java
Status: modified
```diff
@@ -422,8 +422,9 @@ private void readObject(final ObjectInputStream stream) throws InvalidObjectExce
      * @return a new immutable copy of the data in this {@code MutableLogEvent}
      */
     public Log4jLogEvent createMemento() {
-        // TODO implement MutableLogEvent.createMemento()
-        return Log4jLogEvent.deserialize(Log4jLogEvent.serialize(this, includeLocation));
+        Log4jLogEvent.Builder builder = new Log4jLogEvent.Builder(this);
+        builder.setMessage(memento());
+        return builder.build();
     }
 
 }
```",Implement MutableLogEvent.createMemento(),4,4,4,4,remove unnecessary serialize,0,0,4,3,"Refactor: Update createMemento method in MutableLogEvent class The createMemento method in the MutableLogEvent class has been refactored. The method was previously creating a memento of the current log event state for later restoration. Now, it creates a memento of the current log event with the updated message. This change does not affect the external behavior or functionality of the method.",0,2,2,3,"refactor: Use Log4jLogEvent.Builder to create memento in createMemento method
Refactored createMemento method to utilize Log4jLogEvent.Builder, eliminating the need for serialization and deserialization, and providing a more straightforward implementation."
d219411e6834340cc4434e350e23e3f437a89b76,apache/logging-log4j2,,"File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/MdcPatternConverterTest.java
Status: modified
```diff
@@ -92,7 +92,7 @@ public void testConverterWithKeys() {
 
     @After
     public void tearDown() {
-        ThreadContext.clearStack();
+        ThreadContext.clearMap();
     }
 }
 
```",Fix test clean-up,4,2,4,4,fix unit test,2,2,4,4,Fix: Update tearDown method in MdcPatternConverterTest The tearDown method in MdcPatternConverterTest has been updated to clear the thread context map instead of the thread context stack after each test. This change is likely made to prevent potential memory leaks.,4,4,4,4,"fix: Update tearDown to clear thread context map
Updates tearDown to clear the thread context map instead of the stack, ensuring that thread-local variables are properly cleaned up after each test, and preventing potential interference between tests."
eae58c051fc1ca6f65e2157a066d104a49e4e544,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java
Status: modified
```diff
@@ -74,6 +74,7 @@ Disruptor<RingBufferLogEvent> getDisruptor() {
      *
      * @see #stop()
      */
+    @Override
     public synchronized void start() {
         if (disruptor != null) {
             LOGGER.trace(
```",Add missing '@OverRide' annotations.,3,4,4,4,add missing override annotation,3,4,4,4,"Feat: Add @Override annotation to start() method in AsyncLoggerDisruptor class This commit adds the @Override annotation to the start() method in the AsyncLoggerDisruptor class. The start() method is responsible for starting the AsyncLogger disruptor for the current context. If a disruptor already exists for this context, it will not create a new one. This change ensures that the method correctly overrides a method from its superclass.",3,4,2,4,"feat: Implement start method for disruptor-based asynchronous logging
This commit introduces the `start` method to `AsyncLoggerDisruptor`, which initializes and starts the disruptor for asynchronous logging, setting up the ring buffer, wait strategy, executor, and event handlers. This implementation enables the `AsyncLoggerDisruptor` class to manage asynchronous logging using a Disruptor ring buffer, as intended."
6c4a094b0834adfd1de04398582e723ef645cb3b,apache/logging-log4j2,Y,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/LifeCycle.java
Status: modified
```diff
@@ -17,8 +17,6 @@
 
 package org.apache.logging.log4j.core;
 
-import java.util.concurrent.TimeUnit;
-
 /**
  * All proper Java frameworks implement some sort of object life cycle. In Log4j, the main interface for handling
  * the life cycle context of an object is this one. An object first starts in the {@link State#INITIALIZED} state
```


File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Status: modified
```diff
@@ -25,7 +25,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.zip.Deflater;
 
-import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.appender.rolling.action.Action;
 import org.apache.logging.log4j.core.appender.rolling.action.CommonsCompressAction;
 import org.apache.logging.log4j.core.appender.rolling.action.CompositeAction;
@@ -40,7 +39,6 @@
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.core.util.Integers;
-import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  * When rolling over, <code>DefaultRolloverStrategy</code> renames files according to an algorithm as described below.
```",Remove unused imports.,4,4,4,4,remove unused imports,4,4,4,4,"Refactor: Remove unused imports In this commit, unused import statements have been removed from the files LifeCycle.java and DefaultRolloverStrategy.java. This is a code cleanup activity that helps to keep the codebase clean and easy to maintain.",4,4,4,4,"style: Remove unused imports
Removed unnecessary imports from LifeCycle.java and DefaultRolloverStrategy.java to maintain a clean and efficient codebase, reducing potential conflicts and improving overall code readability."
f9ff2d6f4ffd88957d298e397e11bbeb1d6f3dba,apache/logging-log4j2,,"File: log4j-api/src/test/java/org/apache/logging/log4j/osgi/AbstractLoadBundleTest.java
Status: modified
```diff
@@ -27,6 +27,7 @@
 import org.junit.Assert;
 import org.junit.Assume;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.osgi.framework.Bundle;
@@ -117,6 +118,7 @@ public void testLoadStartStop() throws BundleException {
      * Tests the log of a simple message in an OSGi container
      */
     @Test
+    @Ignore(""Fails locally (for Gary Gregory) and on Travis CI. Passes on Jenkins somehow"")
     public void testSimpleLogInAnOsgiContext() throws BundleException, ReflectiveOperationException {
 
         final BundleContext bundleContext = osgi.getFramework().getBundleContext();
@@ -160,6 +162,7 @@ public void testSimpleLogInAnOsgiContext() throws BundleException, ReflectiveOpe
      * Tests LOG4J2-920.
      */
     @Test
+    @Ignore(""Fails locally (for Gary Gregory) and on Travis CI. Passes on Jenkins somehow"")
     public void testMissingImportOfCoreOsgiPackage() throws BundleException, ReflectiveOperationException {
 
         final BundleContext bundleContext = osgi.getFramework().getBundleContext();
```","ignore since these tests fail locally (for Gary Gregory) and on Travis E209CI. Passes on Jenkins somehow"".C210",4,4,4,4,ignore test for now,3,4,4,4,"Fix: Ignore failing tests in AbstractLoadBundleTest Two tests in AbstractLoadBundleTest.java are failing locally and on Travis CI, but passing on Jenkins. These tests have been annotated with @Ignore until the cause of the inconsistency is resolved.",4,4,4,4,"test: Mark tests as ignored due to inconsistent environment behavior
This commit ignores two tests, `testSimpleLogInAnOsgiContext` and `testMissingImportOfCoreOsgiPackage`, due to inconsistent environment behavior on local and Travis CI environments, despite passing on Jenkins. The ignore annotations are added to prevent these tests from running until the underlying issues are resolved."
d9a12634030d659e3754df960a802f72fd7f3ee3,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/StringBuilderEncoder.java
Status: modified
```diff
@@ -16,16 +16,16 @@
  */
 package org.apache.logging.log4j.core.layout;
 
-import org.apache.logging.log4j.core.util.Constants;
-import org.apache.logging.log4j.status.StatusLogger;
-
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.Charset;
 import java.nio.charset.CharsetEncoder;
 import java.nio.charset.CodingErrorAction;
 import java.util.Objects;
 
+import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.status.StatusLogger;
+
 /**
  * Encoder for StringBuilders that uses ThreadLocals to avoid locking as much as possible.
  */
@@ -69,7 +69,6 @@ private void encodeWithThreadLocals(final CharsetEncoder charsetEncoder, final C
         try {
             TextEncoderHelper.encodeTextWithCopy(charsetEncoder, charBuffer, temp, source, destination);
         } catch (final Exception ex) {
-            ex.printStackTrace();
             logEncodeTextException(ex, source, destination);
             TextEncoderHelper.encodeTextFallBack(charset, source, destination);
         }
```",Remove exception stack trace print This is already logged by the StatusLogger.,4,4,4,4,don t printStackTrace the stack trace,0,4,4,4,Refactor: Rearrange import statements and remove exception print in StringBuilderEncoder.java Rearranged the import statements for better organization and removed an exception print statement to improve code cleanliness. No associated issues or pull requests.,3,4,4,4,"refactor: Remove unnecessary imports and logging statement
Removed redundant imports of Constants and StatusLogger, which were not utilized in the StringBuilderEncoder class. Additionally, eliminated the printStackTrace call, as it was unnecessary and generated excessive log output."
69c7b5a42f15f2b21e7b6b73822d47639ec15d5a,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java
Status: modified
```diff
@@ -271,7 +271,7 @@ private static LogEvent convertMutableToLog4jEvent(final LogEvent event) {
     }
 
     protected Object wrapLogEvent(final LogEvent event) {
-         if (additionalFields.length > 0) {
+        if (additionalFields.length > 0) {
             // Construct map for serialization - note that we are intentionally using original LogEvent
             Map<String, String> additionalFieldsMap = resolveAdditionalFields(event);
             // This class combines LogEvent with AdditionalFields during serialization
@@ -282,9 +282,9 @@ protected Object wrapLogEvent(final LogEvent event) {
         }
     }
 
-    private Map<String,String> resolveAdditionalFields(LogEvent logEvent) {
+    private Map<String, String> resolveAdditionalFields(LogEvent logEvent) {
         // Note: LinkedHashMap retains order
-        final Map<String,String> additionalFieldsMap = new LinkedHashMap<>(additionalFields.length);
+        final Map<String, String> additionalFieldsMap = new LinkedHashMap<>(additionalFields.length);
         final StrSubstitutor strSubstitutor = configuration.getStrSubstitutor();
 
         // Go over each field
```",AbstractJacksonLayout - reformated new code,4,4,4,4,fix bug in AbstractJacksonLayout,0,0,4,4,"Style: Improve code readability in AbstractJacksonLayout.java This commit enhances the readability and consistency of the code in AbstractJacksonLayout.java. The changes are related to the handling of additional fields in a log event. The changes do not alter the functionality of the methods, but rather improve the code quality. The changes include adjusting the spacing and formatting of the code.",4,4,2,4,"style: Remove redundant whitespace in AbstractJacksonLayout.java
Removed redundant whitespace in AbstractJacksonLayout.java, specifically in the wrapLogEvent and resolveAdditionalFields methods, to improve code readability and maintainability."
edbd3e7d6a9212411b50b245d5c17d0c8a943273,apache/logging-log4j2,Y,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java
Status: modified
```diff
@@ -164,6 +164,10 @@ protected static <M extends AbstractManager> M narrow(final Class<M> narrowClass
                         manager.getName() + ""'"");
     }
 
+    protected static StatusLogger logger() {
+        return StatusLogger.getLogger();
+    }
+
     /**
      * May be overridden by managers to perform processing while the manager is being released and the
      * lock is held. A timeout is passed for implementors to use as they see fit.
```


File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java
Status: modified
```diff
@@ -45,7 +45,6 @@
 import org.apache.logging.log4j.message.MapMessage;
 import org.apache.logging.log4j.spi.ThreadContextMap;
 import org.apache.logging.log4j.spi.ThreadContextStack;
-import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.IndexedReadOnlyStringMap;
 import org.apache.logging.log4j.util.ReadOnlyStringMap;
 import org.apache.logging.log4j.util.Strings;
@@ -55,10 +54,6 @@
  */
 public final class JdbcDatabaseManager extends AbstractDatabaseManager {
 
-    private static StatusLogger logger() {
-        return StatusLogger.getLogger();
-    }
-
     private static final JdbcDatabaseManagerFactory INSTANCE = new JdbcDatabaseManagerFactory();
 
     // NOTE: prepared statements are prepared in this order: column mappings, then column configs
```",Pull up logger() method.,4,4,4,4,remove unused method,0,0,4,4,"Refactor: Move logger() method to AbstractManager class The logger() method was moved from the JdbcDatabaseManager class to its superclass, AbstractManager. This change allows all managers that extend AbstractManager to have access to the logger() method, potentially improving code reuse and maintainability. No associated issues or pull requests were found for this commit.",4,4,4,4,"refactor: Introduce protected static logger method in AbstractManager
Extracted the logger method into a protected static method in AbstractManager, making it accessible to subclasses and reducing code duplication in JdbcDatabaseManager."
0fc31ef9a44015c45a8d7d9374a583340a79ba8f,apache/maven,,"File: maven-core/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java
Status: modified
```diff
@@ -159,6 +159,12 @@ public void assembleModelInheritance( Model child, Model parent )
             }
         }
 
+        // ciManagement
+        if ( child.getCiManagement() == null )
+        {
+            child.setCiManagement( parent.getCiManagement() );
+        }
+
         // developers
         if ( child.getDevelopers().size() == 0 )
         {
```",o Adding ci management inhertiance.,0,3,4,4,fix a bug in assembleModelInheritance,0,1,4,4,"Feat: Inherit ciManagement from parent model In the `assembleModelInheritance` method of the `DefaultModelInheritanceAssembler.java` file, the code has been modified to inherit the `ciManagement` property from the parent model to the child model if it is not set in the child model. This is a new feature that enhances the inheritance functionality of the method.",4,4,4,4,"refactor: Set ciManagement on child model if not present
This refactoring ensures that `ciManagement` is properly initialized on child models by inheriting from parent models, making the `DefaultModelInheritanceAssembler` more robust and easier to maintain."
30eedfb62610381a93bad4187eb2283d07489674,apache/maven,,"File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Status: modified
```diff
@@ -211,7 +211,12 @@ private void verifyMojoPhase( String task, MavenSession session )
         {
             pluginManager.verifyPluginForGoal( task, session );
             mojoDescriptor = pluginManager.getMojoDescriptor( task );
-            if ( mojoDescriptor != null && mojoDescriptor.getPhase() != null )
+            if ( mojoDescriptor == null )
+            {
+                throw new LifecycleExecutionException( ""Required goal not found: "" + task );
+            }
+
+            if ( mojoDescriptor.getPhase() != null )
             {
                 Phase phase = (Phase) phaseMap.get( mojoDescriptor.getPhase() );
                 phase.getGoals().add( task );
```",add missing error message when the package goal is not found,4,4,4,4,fix potential npe,0,1,4,4,"Fix: Add validation for mojo phase in verifyMojoPhase method This commit adds a validation in the `verifyMojoPhase` method of the `DefaultLifecycleExecutor` class to check if the given task is a valid mojo phase. If the task is not a valid mojo phase, an exception is thrown. This change improves the error handling in the method and ensures that only valid tasks are processed.",4,4,4,4,"fix: Handle null mojo descriptor in verifyMojoPhase
Prevents NullPointerExceptions in verifyMojoPhase by handling null mojo descriptors, ensuring that required goals are properly configured and executed during the Maven build lifecycle."
657fde08f4a5d95dc99cc220716d54048716a89b,apache/maven,,"File: maven-mboot2/src/main/java/jar/JarMojo.java
Status: modified
```diff
@@ -26,7 +26,7 @@ public void execute( File basedir, String outputDirectory, String jarName )
 
         Map includes = new LinkedHashMap();
 
-        addDirectory( includes, ""**/**"", ""**/package.html"", """", basedir );
+        addDirectory( includes, ""**/**"", ""**/package.html,**/.svn/**"", """", basedir );
 
         createJar( jarFile, includes );
     }
```",exclude svn directories in mboot,0,4,4,4,fix directory includes,0,2,4,3,"Fix: Exclude certain files when creating jar in JarMojo.java In the execute method of the JarMojo.java file, an additional exclusion pattern ""**/.svn/**"" has been added to the addDirectory method call. This change ensures that certain files like package.html and .svn files are excluded when creating a jar file.",4,4,4,4,"fix: Exclude .svn directories when creating a jar file
Exclude .svn directories to prevent unnecessary packaging and potential conflicts with version control systems. This change ensures a cleaner and more efficient jar file creation process."
40d47927dee5a419ad71add6a80789bfd07e52ee,apache/maven,,"File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGenerator.java
Status: modified
```diff
@@ -76,10 +76,13 @@ public void execute( File destinationDirectory, PluginDescriptor pluginDescripto
             
             w.startElement( ""mojos"" );
 
-            for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
+            if ( pluginDescriptor.getMojos() != null )
             {
-                MojoDescriptor descriptor = (MojoDescriptor) it.next();
-                processMojoDescriptor( descriptor, w );
+                for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
+                {
+                    MojoDescriptor descriptor = (MojoDescriptor) it.next();
+                    processMojoDescriptor( descriptor, w );
+                }
             }
 
             w.endElement();
@@ -362,4 +365,4 @@ public void element( XMLWriter w, String name, String value )
 
         w.endElement();
     }
-}
\ No newline at end of file
+}
```",o Fixing a small bug that would cause a NPE if a plugin doesn't contain any mojos.,4,4,4,4,do not merge fix npe,0,3,4,4,"Fix: Add null check before iterating over pluginDescriptor.getMojos() This commit adds a null check before iterating over the pluginDescriptor.getMojos() in the execute method of the PluginDescriptorGenerator.java file. This prevents a potential NullPointerException when the pluginDescriptor.getMojos() is null. The functionality of the method remains the same, but the implementation has been modified to handle this edge case.",4,4,4,4,"fix: Handle null mojo descriptors when generating plugin.xml
Previously, the PluginDescriptorGenerator would throw a NullPointerException when encountering a null mojo descriptor. This change adds a null check to handle such cases, ensuring that plugin.xml files are generated correctly even when mojo descriptors are null. This fix improves the robustness of the plugin generation process."
e53ecf1af2f069eb6e14827d9504468dd6c3eb12,apache/maven,,"File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/CompilerMojo.java
Status: modified
```diff
@@ -23,8 +23,6 @@
  * @phase compile
  * @requiresDependencyResolution compile
  * @description Compiles application sources
- * @todo change debug parameter type to Boolean
- * @todo change staleMillis parameter type to Long
  */
 
 public class CompilerMojo
```",remove old comments,4,4,4,4,remove author tag,0,0,4,4,Refactor: Remove outdated comments in CompilerMojo.java The comments about changing the debug parameter type to Boolean and changing the staleMillis parameter type to Long were removed from the CompilerMojo.java file. These comments were outdated and no longer relevant to the current state of the code.,4,4,4,4,"style: Remove TODO comments from CompilerMojo.java
Removed two TODO comments from the class-level documentation in CompilerMojo.java, specifically those related to changing debug parameter type to Boolean and staleMillis parameter type to Long, as they were no longer relevant or actionable."
4c85dfc33154be5933b4ecb302e395ce72c226a0,apache/maven,,"File: maven-project/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java
Status: modified
```diff
@@ -482,6 +482,7 @@ private static DeploymentRepository copyDistributionRepository( DeploymentReposi
         return repository;
     }
 
+    // TODO: This should eventually be migrated to DefaultPathTranslator.
     protected String appendPath( String parentPath, String childPath, String pathAdjustment, boolean appendPaths )
     {
         List pathFragments = new ArrayList();
@@ -570,7 +571,12 @@ else if ( !""."".equals( currentToken ) )
         
         if ( appendPaths && lastPathPart != null && !lastPathPart.endsWith( ""/"" ) )
         {
-            cleanedPath.setLength( cleanedPath.length() - 1 );
+            int cleanedPathLen = cleanedPath.length();
+            
+            if ( cleanedPathLen > 0 )
+            {
+                cleanedPath.setLength( cleanedPathLen - 1 );
+            }            
         }
 
         return cleanedPath.toString();
```",Adding defensive code for one more place where cleanedPath length could cause a problem with string manipulation in appendPath(..).,4,4,4,4,add appendPath method to copyDistributionRepository,0,1,4,4,"Fix: Improve path adjustment handling in appendPath method In the `appendPath` method of the `DefaultModelInheritanceAssembler.java` file, the handling of the path adjustment has been improved. A check has been added to ensure that the `cleanedPath` length is greater than 0 before reducing its length by 1. This prevents potential errors when the `cleanedPath` length is 0. A comment has also been added indicating that this method should eventually be migrated to `DefaultPathTranslator`.",4,4,4,4,"fix: Handle null or empty cleanedPath in appendPath method
This change ensures that the `appendPath` method handles null or empty `cleanedPath` inputs correctly, making the method more robust and reliable."
92e731eb8007890b624f8b88984980660a2e587a,apache/maven,,"File: maven-core/src/main/java/org/apache/maven/plugin/PluginException.java
Status: modified
```diff
@@ -21,6 +21,7 @@
  *
  * @author <a href=""mailto:carlos@apache.org"">Carlos Sanchez</a>
  * @version $Id$
+ * @since 2.0.5
  */
 public abstract class PluginException
     extends Exception
```",Added @SInCE tag,4,4,4,4,add missing javadoc,0,0,4,4,Style: Add version comment to PluginException.java A comment indicating the version since the PluginException.java file exists was added. This change does not affect the functionality of the code.,4,4,4,4,"style: Update Javadoc in PluginException.java
Added the missing @since 2.0.5 Javadoc tag to PluginException.java, ensuring consistency in versioning information."
40aacad4f0d2b0b33f3a70b971030c5d42afa167,apache/maven,,"File: maven-cli/src/main/java/org/apache/maven/cli/MavenCli.java
Status: modified
```diff
@@ -43,6 +43,13 @@
  */
 public class MavenCli
 {
+    public static int main( String[] args )
+    {
+        ClassWorld classWorld = new ClassWorld( ""plexus.core"", Thread.currentThread().getContextClassLoader() );
+        
+        return main( args, classWorld );
+    }
+
     /**
      * @noinspection ConfusingMainMethod
      */
```","o Add a method that can be used with booting with a ClassWorld, we will just create one when the standard main method is invoked. Work required for Dan's new rework of the bootstrap to make it dead simple to understand.",3,4,4,4,add main to MavenCli,0,1,4,4,Feat: Add main entry point for application A new `main` method has been added to the `MavenCli` class. This method serves as the main entry point for the application when run from the command-line. It is designed to provide a main entry point for the application when the classworld has not been set up.,4,4,4,4,"refactor: Introduce separate main method for Plexus application initialization
This commit separates the Plexus application initialization into a dedicated main method, decoupling it from the main execution logic. This refactoring improves the internal structure of the MavenCli class, enhancing its maintainability and readability."
d5f5abeb5749318085df7dd07ecadcdb49567b8b,apache/maven,,"File: maven-project/src/main/java/org/apache/maven/profiles/manager/DefaultProfileManager.java
Status: modified
```diff
@@ -33,7 +33,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Properties;
 
 public class DefaultProfileManager
     implements ProfileManager
```",o dead import,3,3,4,2,remove unused import,4,4,4,4,Style: Remove unused import in DefaultProfileManager.java The import statement for java.util.Properties was removed from DefaultProfileManager.java as it was unused. This change is part of code style maintenance.,4,4,4,4,"style: Remove unnecessary import statement
No functional changes were introduced by this commit. The removal of the unnecessary import statement conforms to the best practices of clean coding."
3571f9e2ac2552c6279cebd7c675254b9a785a62,apache/maven,,"File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Status: modified
```diff
@@ -29,6 +29,7 @@
 import org.apache.maven.reactor.MavenExecutionException;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /** @author Jason van Zyl */
@@ -83,7 +84,7 @@ public MavenExecutionResult setArtifactResolutionResult( ArtifactResolutionResul
 
     public List getExceptions()
     {
-        return exceptions;
+        return exceptions == null ? Collections.EMPTY_LIST : exceptions;
     }
 
     public MavenExecutionResult addExtensionScanningException( ExtensionScanningException e )
@@ -147,7 +148,7 @@ private void addException( Throwable t )
 
     public boolean hasExceptions()
     {
-        return (( exceptions != null ) && ( exceptions.size() > 0 ) );
+        return !getExceptions().isEmpty();
     }
 
     public ReactorManager getReactorManager()
```","Do not return null collections, makes life easier for clients",4,4,4,4,fix npe in setArtifactResolutionResult,0,0,4,4,"Fix: Update exception handling in DefaultMavenExecutionResult This commit updates the getExceptions() and hasExceptions() methods in the DefaultMavenExecutionResult.java file. The getExceptions() method now returns an empty list if the exceptions list is null, and the hasExceptions() method now checks if the exceptions list is empty. This change ensures that the methods behave correctly when the exceptions list is null.",1,4,4,4,"refactor: Handle empty exceptions list in getExceptions and hasExceptions
This commit ensures that getExceptions and hasExceptions in DefaultMavenExecutionResult behave consistently when no exceptions are present, making the API more robust and easier to use."
1cb3190b0faf83c77f93dcf2ca9c76b62021e2bf,apache/maven,,"File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Status: modified
```diff
@@ -609,7 +609,7 @@ public void executeMojo( MavenProject project,
             if ( getLogger().isFatalErrorEnabled() )
             {
                 getLogger().fatalError(
-                                        mojo.getClass().getName() + ""#execute() caused a linkage error (""
+                                        mojoDescriptor.getImplementation() + ""#execute() caused a linkage error (""
                                             + e.getClass().getName() + "") and may be out-of-date. Check the realms:"" );
 
                 StringBuffer sb = new StringBuffer();
```",Make the error message construction a little more resilient to errors in classloading.,3,3,4,4,use the correct implementation of the mojo,0,0,4,4,"Refactor: Improve error logging in executeMojo method In the `executeMojo` method of the `DefaultPluginManager.java` file, the way of logging an error message has been improved. Instead of using `mojo.getClass().getName()`, it now uses `mojoDescriptor.getImplementation()`. This change does not affect the functionality of the method, but it makes the error reporting and logging more accurate.",4,4,4,4,"fix: Use mojoDescriptor.getImplementation() instead of mojo.getClass().getName() in linkage error message
This change addresses a potential issue in linkage error messages by using the implementation class name from the mojo descriptor, rather than the mojo instance's class name. This ensures that the error message accurately reflects the implementation being executed, which can help with debugging and troubleshooting."
3051c4974b0f7780528114c49492d8930b2fbd6d,apache/maven,Y,"File: maven-repository/src/main/java/org/apache/maven/repository/LegacyMavenRepositorySystem.java
Status: modified
```diff
@@ -90,6 +90,9 @@ public class LegacyMavenRepositorySystem
     @Requirement
     private ArtifactMetadataSource artifactMetadataSource;
 
+    @Requirement
+    private MirrorBuilder mirrorBuilder;
+    
     @Requirement
     private Logger logger;
 
@@ -626,4 +629,11 @@ public Artifact retrieveRelocatedArtifact( Artifact artifact, ArtifactRepository
     {
         return artifactMetadataSource.retrieveRelocatedArtifact( artifact, localRepository, remoteRepositories );
     }
+    
+    // Mirror 
+    
+    public void addMirror( String id, String mirrorOf, String url )
+    {
+        mirrorBuilder.addMirror( id, mirrorOf, url );
+    }
 }
```


File: maven-repository/src/main/java/org/apache/maven/repository/MavenRepositorySystem.java
Status: modified
```diff
@@ -127,4 +127,8 @@ public Artifact retrieveRelocatedArtifact( Artifact artifact, ArtifactRepository
     void addAuthenticationInfo( String repositoryId, String username, String password, String privateKey, String passphrase );
 
     void addPermissionInfo( String repositoryId, String filePermissions, String directoryPermissions );
+    
+    // Mirrors
+    
+    void addMirror( String id, String mirrorOf, String url );
 }
```",o Fix compilation error with mirrors,4,4,4,4,add support for add mirrorBuilder mirror mirror in the list,2,2,4,2,"feat: Add mirror to Maven Repository System This commit introduces a new feature to the Maven Repository System. Two new methods have been added to the classes ""LegacyMavenRepositorySystem"" and ""MavenRepositorySystem"". These methods allow adding a mirror to the mirror builder with the given id, mirrorOf, and url. This feature enhances the flexibility and configurability of the Maven Repository System.",4,4,4,4,"feat: Add mirror support to Maven repository systems
This commit enhances the Maven repository system by introducing mirror support, allowing for more flexible and resilient repository management. The added functionality enables the system to register and utilize mirror sites, improving overall performance and reliability."
eb43b9be114e9fc2ccaa21d25fac8110fdf75331,apache/maven,,"File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java
Status: modified
```diff
@@ -822,7 +822,8 @@ public static void main( String... args )
                     + ( ( compare == 0 ) ? ""=="" : ( ( compare < 0 ) ? ""<"" : "">"" ) ) + ' ' + version );
             }
 
-            System.out.println( ( i++ ) + "". "" + version + "" -> "" + c.getCanonical() + ""; tokens: "" + c.items.toListString() );
+            System.out.println( ( i++ ) + "". "" + version + "" -> "" + c.getCanonical()
+                                    + ""; tokens: "" + c.items.toListString() );
 
             prev = c;
         }
```",Fix Checkstyle violation.,4,4,4,4,remove debug output,0,0,4,4,Style: Improve readability in ComparableVersion.java Split a line of code in the `main` method into two for better readability. The functionality of the method remains the same.,4,4,4,4,"style: Format System.out.println statement for better readability
Improved readability of the main method in ComparableVersion.java by reformating the System.out.println statement, splitting a long line into two lines for better code organization."
7e631d612896cd1b8d4de46ff500677de9c63900,apache/mesos,,"File: src/examples/java/TestFramework.java
Status: modified
```diff
@@ -268,6 +268,16 @@ public static void main(String[] args) throws Exception {
     // Ensure that the driver process terminates.
     driver.stop();
 
+    // For this test to pass reliably on some platforms, this sleep is
+    // required to ensure that the SchedulerDriver teardown is complete
+    // before the JVM starts running native object destructors after
+    // System.exit() is called. 500ms proved successful in test runs,
+    // but on a heavily-loaded machine it might not.
+    // TODO(greg): Ideally, we would inspect the status of the driver
+    // and its associated tasks via the Java API and wait until their
+    // teardown is complete to exit.
+    Thread.sleep(500);
+
     System.exit(status);
   }
 }
```",Fixed flaky ExamplesTest.JavaFramework.,4,4,4,4,add System exit to TestFramework,0,1,4,4,Fix: Added sleep function to ensure SchedulerDriver teardown This commit adds a sleep function to the main method in the TestFramework.java file. The sleep function is added to ensure that the SchedulerDriver teardown is complete before the JVM starts running native object destructors after System.exit() is called. This change is a corrective action to handle a potential issue where the JVM might start running native object destructors before the SchedulerDriver teardown is complete.,4,4,3,4,"fix: Ensure SchedulerDriver teardown completes before exiting
This change adds a temporary workaround to ensure SchedulerDriver teardown completes before exiting by introducing a 500ms sleep. This is necessary to prevent the JVM from running native object destructors after System.exit() is called, which could cause issues on certain platforms. A more robust solution, inspecting the driver's status via the Java API, is desired but not yet implemented."
483eb1aa075f0c56fab07e5d04a0cc565c64909a,helterskelterr/ofbizApp,,"File: framework/widget/src/org/ofbiz/widget/screen/ScreenWidgetViewHandler.java
Status: modified
```diff
@@ -30,6 +30,7 @@
 
 import org.ofbiz.base.util.GeneralException;
 import org.ofbiz.base.util.UtilJ2eeCompat;
+import org.ofbiz.base.util.template.FreeMarkerWorker;
 import org.ofbiz.webapp.view.ViewHandler;
 import org.ofbiz.webapp.view.ViewHandlerException;
 import org.ofbiz.widget.html.HtmlScreenRenderer;
@@ -88,6 +89,7 @@ public void render(String name, String page, String info, String contentType, St
             ScreenRenderer screens = new ScreenRenderer(writer, null, htmlScreenRenderer);
             screens.populateContextForRequest(request, response, servletContext);
             // this is the object used to render forms from their definitions
+            FreeMarkerWorker.getSiteParameters(request, screens.getContext());
             screens.getContext().put(""formStringRenderer"", new HtmlFormRenderer(request, response));
             screens.render(page);
         } catch (IOException e) {
```","Added FreeMarkerWorker.getSiteParameters to render method. This data, particularly ""rootDir"", is used loading FTL content templates. I figured it could not hurt normal screen rendering.",4,4,4,4,add HtmlFormRenderer for screen widget,0,0,4,4,Feat: Enhance render method in ScreenWidgetViewHandler class This commit enhances the render method in the ScreenWidgetViewHandler class. The method is now set up to decide whether to use an OutputStream or a Writer based on the servlet context. This change improves the flexibility of the method in rendering a page.,4,4,4,4,"feat: Integrate FreeMarkerWorker into ScreenWidgetViewHandler for HTML screen rendering
This commit integrates FreeMarkerWorker into ScreenWidgetViewHandler, enabling HTML screen rendering with a FreeMarker template engine. The render method now uses FreeMarkerWorker to fetch site parameters, enhancing dynamic screen rendering capabilities."
aa92b107eca7e828d7e47dc9b7a37a5b888f39c4,helterskelterr/ofbizApp,,"File: framework/base/src/base/org/ofbiz/base/component/ComponentConfig.java
Status: modified
```diff
@@ -33,6 +33,8 @@
 
 import javolution.util.FastList;
 import javolution.util.FastMap;
+
+import org.ofbiz.base.location.FlexibleLocation;
 import org.ofbiz.base.util.*;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -488,7 +490,7 @@ public URL getURL(String resourceLoaderName, String location) throws ComponentEx
             String fullLocation = getFullLocation(resourceLoaderName, location);
             URL url = null;
             try {
-                url = new URL(fullLocation);
+                url = FlexibleLocation.resolveLocation(location);
             } catch (java.net.MalformedURLException e) {
                 throw new ComponentException(""Error with malformed URL while trying to load URL resource at location ["" + fullLocation + ""]"", e);
             }
```",Changed to use FlexibleLocation so that for url resource loaders in component config files you can use the component:// style url for resources in components,4,4,4,4,fix ComponentConfig to use FlexibleLocation instead of URL,1,4,4,4,"Refactor: Improve URL resolution in ComponentConfig This commit refactors the `getURL(String resourceLoaderName, String location)` method in the `ComponentConfig.java` file. The method now resolves the location in the context of the component, which improves the internal structure of the code without altering its external behavior.",3,3,4,4,"refactor: Replace URL construction with FlexibleLocation in getURL method
This commit replaces URL construction in getURL with FlexibleLocation, improving the method's internal structure and maintainability. The change leverages FlexibleLocation.resolveLocation for more robust and scalable URL resolution."
c5c2b2c9b3f2e5b8cb6e2960b2a6daf9eb9a335c,helterskelterr/ofbizApp,,"File: framework/base/src/base/org/ofbiz/base/util/AliasKeyManager.java
Status: modified
```diff
@@ -48,7 +48,7 @@ public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket so
             String[] aliases = keyManager.getClientAliases(keyType[i], null); // ignoring the issuers 
             if (aliases != null && aliases.length > 0) {
                 for (int x = 0; x < aliases.length; x++) {
-                    if (this.alias.equals(aliases[i])) {
+                    if (this.alias.equals(aliases[x])) {
                         if (Debug.verboseOn()) Debug.logVerbose(""chooseClientAlias for keyType ["" + keyType[i] + ""] got alias "" + this.alias, module);
                         //Debug.logInfo(new Exception(), ""Location where chooseClientAlias is called"", module);
                         return this.alias;
```",Just implementing Adam's request.,0,0,4,3,add logVerbose logging to AliasKeyManager,0,0,4,4,"Fix: Correct index used in 'chooseClientAlias' method In the 'chooseClientAlias' method of the 'AliasKeyManager.java' file, the wrong index was being used in the if condition inside a for loop. This commit fixes this bug by replacing 'aliases[i]' with 'aliases[x]'.",4,4,4,4,"fix: Use correct loop variable in chooseClientAlias method
This commit fixes a bug in the `chooseClientAlias` method where the loop variable `i` was incorrectly used, causing alias matching issues. The fix replaces `i` with `x` to ensure correct iteration and accurate alias selection based on provided key types and issuers."
c882ee248d8dc0d770079f2ece6db68b8cab0a49,helterskelterr/ofbizApp,,"File: framework/base/src/base/org/ofbiz/base/util/cache/CacheLineTable.java
Status: modified
```diff
@@ -88,16 +88,17 @@ public synchronized Object put(Object key, Object value) {
             if (Debug.verboseOn()) Debug.logVerbose(""In CacheLineTable tried to put with null key, using NullObject"" + this.cacheName, module);
             key = ObjectType.NULL;
         }
-        memoryTable.put(key, value);
+        Object oldValue = memoryTable.put(key, value);
         if (fileTable != null) {
             try {
+                if (oldValue == null) oldValue = fileTable.get(key);
                 fileTable.put(key, value);                
                 CacheLineTable.jdbmMgr.commit();
             } catch (IOException e) {
                 Debug.logError(e, module);
             }
         }
-        return value;
+        return oldValue;
     }
 
     public Object get(Object key) {
```","Remove was returning the *new* object, instead of the *old*. Closes https://issues.apache.org/jira/browse/OFBIZ-1322.",2,0,4,0,fix npe in CacheLineTable,0,2,4,4,Refactor: Improve design of put method in CacheLineTable.java The put method in the CacheLineTable.java file has been refactored to return the previous value associated with the key instead of the new value. This change improves the design of the method without altering its functionality. The associated issue report [OFBIZ-1322] indicates that there may have been a similar issue with the remove method in the same class.,0,1,3,4,"refactor: Update put method to return previous value in CacheLineTable
This change updates the `put` method in `CacheLineTable` to return the previous value associated with the key, if any, instead of the new value. It also ensures thread safety and persists changes to disk when a file table is present."
cd5870de6af529b968547a6130aaafa33d0f4ffc,helterskelterr/ofbizApp,,"File: framework/entity/src/org/ofbiz/entity/model/ModelGroupReader.java
Status: modified
```diff
@@ -197,7 +197,7 @@ public Collection<String> getEntityNamesByGroup(String groupName) {
         Collection<String> enames = new LinkedList<String>();
 
         if (groupName == null || groupName.length() <= 0) return enames;
-        if (gc == null || gc.size() < 0) return enames;
+        if (gc == null || gc.size() == 0) return enames;
         for (Map.Entry<String, String> entry: gc.entrySet()) {
             if (groupName.equals(entry.getValue())) enames.add(entry.getKey());
         }
```",Collection size can not be negative.,4,4,4,4,fix npe in ModelGroupReader,0,1,4,4,"Fix: Ensure getEntityNamesByGroup returns empty collection for null or empty group cache In the method getEntityNamesByGroup in the ModelGroupReader.java file, the condition checking the size of the group cache has been modified. Previously, the method would return an empty collection if the group cache was null or if its size was less than 0. This has been corrected to return an empty collection if the group cache is null or if its size is 0. This ensures that the method correctly returns an empty collection when the group cache is null or empty.",4,4,4,4,"fix: Fix incorrect size check in getEntityNamesByGroup
Fixed incorrect size check in getEntityNamesByGroup, which previously returned an empty collection when the group context was null or empty. This correction ensures that the method behaves correctly in these scenarios, providing accurate results to the UI."
5fd95a9590a6fa7dc530bd85c37aa0bbed1f76db,helterskelterr/ofbizApp,,"File: framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java
Status: modified
```diff
@@ -485,8 +485,12 @@ public void doRequest(HttpServletRequest request, HttpServletResponse response,
         // if the request has the save-last-view attribute set, save it now before the view can be rendered or other chain done so that the _LAST* session attributes will represent the previous request
         if (nextRequestResponse.saveLastView) {
         	// Debug.log(""======save last view: "" + session.getAttribute(""_LAST_VIEW_NAME_""));
-            session.setAttribute(""_SAVED_VIEW_NAME_"", session.getAttribute(""_LAST_VIEW_NAME_""));
-            session.setAttribute(""_SAVED_VIEW_PARAMS_"", session.getAttribute(""_LAST_VIEW_PARAMS_""));
+            String lastViewName = (String) session.getAttribute(""_LAST_VIEW_NAME_"");
+            // Do not save the view if the last view is the same as the current view and saveCurrentView is false
+            if (!(!nextRequestResponse.saveCurrentView && ""view"".equals(nextRequestResponse.type) && nextRequestResponse.value.equals(lastViewName))) {
+                session.setAttribute(""_SAVED_VIEW_NAME_"", session.getAttribute(""_LAST_VIEW_NAME_""));
+                session.setAttribute(""_SAVED_VIEW_PARAMS_"", session.getAttribute(""_LAST_VIEW_PARAMS_""));
+            }
         }
         String saveName = null;
         if (nextRequestResponse.saveCurrentView) { saveName = ""SAVED""; }
```",Do not save the view if the last view is the same as the current view and saveCurrentView is false,1,4,4,4,add support for üòÖ,0,0,4,0,"Style: Remove commented out print statements in CategoryContentWrapper This commit removes some commented out print statements in the CategoryContentWrapper class. These comments were not contributing to the functionality of the code and were removed to improve the readability of the code. The functionality of the CategoryContentWrapper class, which retrieves and displays content for a specific product category, remains unchanged.",4,4,3,4,"fix: Prevent overwriting saved view with current view when saveCurrentView is false
This fix addresses a potential data loss issue by ensuring that the saved view is not overwritten with the current view when `saveCurrentView` is false, thereby preserving the original saved view state."
86b15e131cc28624d258b1415652c8b088e22d85,helterskelterr/ofbizApp,,"File: applications/product/src/org/ofbiz/product/product/ProductSearch.java
Status: modified
```diff
@@ -717,7 +717,7 @@ public ArrayList<String> makeProductIdList(EntityListIterator eli) {
                 productIds.add(searchResult.getString(""mainProductId""));
                 productIdSet.add(searchResult.getString(""mainProductId""));
 
-                while (((searchResult = (GenericValue) eli.next()) != null) && (maxResults == null || numRetreived < maxResults.intValue())) {
+                while ((maxResults == null || numRetreived < maxResults.intValue()) && ((searchResult = (GenericValue) eli.next()) != null)) {
                     String productId = searchResult.getString(""mainProductId"");
                     if (!productIdSet.contains(productId)) {
                         productIds.add(productId);
```",Fixed problem preventing the correct number of records being determined when setting maxRows for the product search query,4,4,4,4,fix ProductSearch üòÖ,0,1,4,0,"Refactor: Change condition order in while loop of makeProductIdList method The condition order in the while loop of the makeProductIdList method in the ProductSearch class has been changed. This is a refactor and does not affect the overall functionality of the method or the class. The method is used to create a list of unique product IDs from the given EntityListIterator, handling pagination and avoiding duplicates. The class provides utilities for product search based on various constraints like categories, features, and keywords.",4,4,2,4,"fix: Fix pagination logic in ProductSearch
Ensures correct pagination by fixing the logic to handle maxResults limit, preventing unnecessary iterations and improving search result retrieval efficiency."
015bfa6df25abf19fe8eb36a205d7ca8dfbc27ab,helterskelterr/ofbizApp,,"File: applications/product/src/org/ofbiz/product/store/ProductStoreWorker.java
Status: modified
```diff
@@ -76,8 +76,8 @@ public static GenericValue getProductStore(ServletRequest request) {
 
     public static String getProductStoreId(ServletRequest request) {
         HttpServletRequest httpRequest = (HttpServletRequest) request;
-        HttpSession session = httpRequest.getSession();
-        if (session.getAttribute(""productStoreId"") != null) {
+        HttpSession session = httpRequest.getSession(false);
+        if (session != null && session.getAttribute(""productStoreId"") != null) {
             return (String) session.getAttribute(""productStoreId"");
         } else {
             GenericValue webSite = CatalogWorker.getWebSite(request);
```",Don't force the session to be created in getProductStoreId.,0,4,4,4,fix npe in ProductStoreWorker,0,0,4,4,"Fix: Handle potential null session in getProductStoreId method The getProductStoreId method in the ProductStoreWorker.java file has been updated to handle a potential null session. Previously, the method would create a new session if one did not already exist. This has been changed so that a new session is not created. Additionally, a null check has been added for the session before attempting to get the productStoreId attribute. This change ensures that a NullPointerException is not thrown if the session is null.",4,4,4,4,"fix: Prevent unnecessary session creation in getProductStoreId
Prevent unnecessary session creation by using getSession(false) instead of getSession() in getProductStoreId method of ProductStoreWorker class, reducing unnecessary resource allocation and improving performance."
0d0a229fdb24765078940b5f062bebcc82ef808d,helterskelterr/ofbizApp,,"File: framework/base/src/org/ofbiz/base/config/JNDIConfigUtil.java
Status: modified
```diff
@@ -63,13 +63,13 @@ private static Document getXmlDocument() throws GenericConfigException {
     public static void initialize(Element rootElement) throws GenericConfigException {
         // jndi-server - jndiServerInfos
         for (Element curElement: UtilXml.childElementList(rootElement, ""jndi-server"")) {
-            JNDIConfigUtil.JndiServerInfo jndiServerInfo = new JNDIConfigUtil.JndiServerInfo(curElement);
+            JndiServerInfo jndiServerInfo = new JndiServerInfo(curElement);
 
-            JNDIConfigUtil.jndiServerInfos.put(jndiServerInfo.name, jndiServerInfo);
+            jndiServerInfos.put(jndiServerInfo.name, jndiServerInfo);
         }
     }
 
-    public static JNDIConfigUtil.JndiServerInfo getJndiServerInfo(String name) {
+    public static JndiServerInfo getJndiServerInfo(String name) {
         return jndiServerInfos.get(name);
     }
 
```","For internal classes, you don't need to prefix with the containing class.",4,4,4,4,remove unused method,0,0,4,4,"Refactor: Remove class name prefix in method calls and variable declarations This commit refactors the 'initialize' method in the JNDIConfigUtil class. The class name prefix in the method calls and variable declarations has been removed to improve code readability. Additionally, a new method 'getJndiServerInfo' has been added which retrieves the JNDI server information for the given name.",4,3,4,4,"refactor: Remove class qualification from JNDIConfigUtil
Removed unnecessary class qualifications from JNDIConfigUtil, improving code readability and maintainability without altering its observable behavior. The refactored initialize and getJndiServerInfo methods preserve their original functionality."
42acc7a8a3f7f2b41927a2d6aa16e6ce36368477,helterskelterr/ofbizApp,,"File: framework/widget/src/org/ofbiz/widget/form/ModelFormField.java
Status: modified
```diff
@@ -1367,7 +1367,7 @@ public void setRequiredField(boolean required) {
     }
 
     public boolean isSortField() {
-        return this.sortField != null ? this.sortField.booleanValue() : false;
+        return this.sortField != null && this.sortField.booleanValue();
     }
 
     /**
```",Minor code simplification: no functional changes.,4,4,4,4,fix quality flaw,0,0,4,4,"Refactor: Corrected logic in isSortField method The logic in the isSortField method of the ModelFormField class has been corrected. Previously, the method returned true if the sort field was not null, regardless of its boolean value. Now, it returns true only if the sort field is not null and its boolean value is true. This change ensures the correct behavior of the method.",4,0,3,4,"fix: Fix null pointer dereference in isSortField
Ensure isSortField method returns false when sortField is null, instead of throwing a NullPointerException, to maintain correct behavior and prevent crashes."
1659ab436259e12fe07292f55f1831520c10164f,helterskelterr/ofbizApp,,"File: framework/base/src/org/ofbiz/base/util/ObjectWrapper.java
Status: modified
```diff
@@ -48,7 +48,7 @@ public NestedException(Throwable cause) {
         }
     }
 
-    public class ConfigurationException extends ObjectException {
+    public class ConfigurationException extends RuntimeException {
         public ConfigurationException(String msg) {
             super(msg);
         }
```",ConfigurationException is now a RuntimeException.,0,4,4,4,make ConfigurationException public,0,0,4,4,"Refactor: Change ConfigurationException to extend RuntimeException In the class ObjectWrapper, the ConfigurationException class has been refactored to extend RuntimeException instead of ObjectException. This change is part of an effort to improve the handling of exceptions in the ObjectWrapper class, which provides a method to retrieve an object and handle exceptions related to it.",4,4,4,4,"refactor: Make ConfigurationException extend RuntimeException
Changed the superclass of ConfigurationException from ObjectException to RuntimeException, aligning with Java's built-in exception hierarchy."
380246944bc1fc1ef1cc39cf95810e3dc10c2243,helterskelterr/ofbizApp,,"File: framework/base/src/org/ofbiz/base/util/cache/UtilCache.java
Status: modified
```diff
@@ -644,12 +644,8 @@ public static <K, V> UtilCache<K, V> getOrCreateUtilCache(String name, int sizeL
         if (existingCache != null) return existingCache;
         String cacheName = name + getNextDefaultIndex(name);
         UtilCache<K, V> newCache = new UtilCache<K, V>(cacheName, sizeLimit, maxInMemory, expireTime, useSoftReference, useFileSystemStore, name, names);
-        UtilCache<K, V> oldCache = (UtilCache<K, V>) utilCacheTable.putIfAbsent(name, newCache);
-        if (oldCache == null) {
-            return newCache;
-        } else {
-            return oldCache;
-        }
+        utilCacheTable.putIfAbsent(name, newCache);
+        return (UtilCache<K, V>) utilCacheTable.get(name);
     }
 
     public static <K, V> UtilCache<K, V> createUtilCache(String name, int sizeLimit, int maxInMemory, long expireTime, boolean useSoftReference, boolean useFileSystemStore, String... names) {
```","Slight tweak to getOrCreateUtilCache, to get better code coverage.",3,3,4,4,fix UtilCache üòÖ,0,1,4,4,"Refactor: Simplify getOrCreateUtilCache method in UtilCache.java The getOrCreateUtilCache method in UtilCache.java has been refactored for simplicity. The new implementation directly puts the newCache in the utilCacheTable and returns the cache from the utilCacheTable, instead of checking if an oldCache was null and returning newCache if true, and oldCache if false. This change improves the structure of the code without altering its functionality.",4,4,4,4,"refactor: Simplify getOrCreateUtilCache method implementation
Improved the thread-safety and performance of `getOrCreateUtilCache` method by reducing unnecessary conditional checks and ensuring uniqueness within the `utilCacheTable`."
3234ce48d57222043d1fb8aec33d81315a5f30d9,apache/poi,,"File: src/testcases/org/apache/poi/hssf/record/formula/TestFormulaParser.java
Status: modified
```diff
@@ -54,6 +54,16 @@ public void testFormulaWithSpaceNRef() {
         assertTrue(""two tokens expected, got ""+ptgs.length,ptgs.length == 2);
     }
     
+    public void testFormulaWithString() {
+        Ptg[] ptgs;
+        FormulaParser fp;
+        fp = new FormulaParser(""\""hello\"" & \""world\"" ;"");
+        fp.parse();
+        ptgs = fp.getRPNPtg();
+        assertTrue(""three token expected, got "" + ptgs.length, ptgs.length == 3);
+    }
+
+    
      public static void main(String [] args) {
         System.out.println(""Testing org.apache.poi.hssf.record.formula.FormulaParser"");
         junit.textui.TestRunner.run(TestFormulaParser.class);
```",test for parsing strings,4,4,4,4,add TestFormulaParser testFormulaWithString,4,4,4,4,Feat: Add new test method in TestFormulaParser A new test method `testFormulaWithString` has been added to the `TestFormulaParser` class. This method tests the formula parsing functionality with a string input.,4,4,4,4,"feat: Add test for string concatenation formula parsing
This commit adds a new test case to the TestFormulaParser class, verifying that the FormulaParser can correctly parse formulas involving string concatenation with the ampersand (&) operator, thereby enhancing the test coverage of the FormulaParser class."
3a59e361ff066a5d3d25fbbf05fab8d848f1f6e0,apache/poi,Y,"File: src/java/org/apache/poi/util/HexDump.java
Status: modified
```diff
@@ -73,6 +73,12 @@ public synchronized static void dump(final byte [] data, final long offset,
             throws IOException, ArrayIndexOutOfBoundsException,
                     IllegalArgumentException
     {
+        if (data.length == 0)
+        {
+            stream.write( ""No Data"".getBytes() );
+            stream.flush();
+            return;
+        }
         if ((index < 0) || (index >= data.length))
         {
             throw new ArrayIndexOutOfBoundsException(
@@ -83,6 +89,7 @@ public synchronized static void dump(final byte [] data, final long offset,
         {
             throw new IllegalArgumentException(""cannot write to nullstream"");
         }
+
         long         display_offset = offset + index;
         StringBuffer buffer         = new StringBuffer(74);
 
```


File: src/testcases/org/apache/poi/util/TestHexDump.java
Status: modified
```diff
@@ -277,6 +277,11 @@ public void testDump()
 
             // as expected
         }
+
+        // verify proper behaviour with empty byte array
+        ByteArrayOutputStream os = new ByteArrayOutputStream( );
+        HexDump.dump( new byte[0], 0, os, 0 );
+        assertEquals( ""No Data"", os.toString() );
     }
 
     public void testToHex()
```",Empty byte array case for HexDump,0,3,4,4,fix hex dump of HexDump,0,1,4,4,"Fix: Handle empty data array in HexDump.dump method In the HexDump.dump method, a condition was added to handle the case when the data array is empty. If the data array is empty, the method now writes ""No Data"" to the output stream and then returns. This change ensures that the method behaves correctly when given an empty data array. A test case was also added in TestHexDump.testDump to verify this new behavior. The test case checks that ""No Data"" is written to the output stream when an empty data array is passed to the HexDump.dump method.",4,4,4,4,"fix: Return 'No Data' for empty input in HexDump.dump
This change ensures HexDump.dump returns 'No Data' when given an empty input, preventing unexpected behavior. The modification includes a new conditional check in the dump method and an additional test case to verify this edge case is handled correctly."
98b8864c401f8d3d605ea06ae7294ce226a19471,apache/poi,,"File: src/scratchpad/src/org/apache/poi/hslf/HSLFSlideShow.java
Status: modified
```diff
@@ -35,6 +35,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.hpsf.SummaryInformation;
 import org.apache.poi.hpsf.DocumentSummaryInformation;
 
+import org.apache.poi.hslf.exceptions.CorruptPowerPointFileException;
 import org.apache.poi.hslf.exceptions.EncryptedPowerPointFileException;
 import org.apache.poi.hslf.record.*;
 import org.apache.poi.hslf.usermodel.PictureData;
@@ -272,6 +273,13 @@ private void readPictures() throws IOException {
             byte[] imgdata = new byte[imgsize];
             System.arraycopy(pictstream, pos, imgdata, 0, imgdata.length);
 
+			// The image size must be 0 or greater
+			// (0 is allowed, but odd, since we do wind on by the header each
+			//  time, so we won't get stuck)
+			if(imgsize < 0) {
+				throw new CorruptPowerPointFileException(""The file contains a picture, at position "" + p.size() + "", which has a negatively sized data length, so we can't trust any of the picture data"");
+			}
+
 			// If they type (including the bonus 0xF018) is 0, skip it
 			if(type == 0) {
 				System.err.println(""Problem reading picture: Invalid image type 0, on picture with length"" + imgsize + "".\nYou document will probably become corrupted if you save it!"");
```",Throw an exception if a picture claims to have a negative amount of data. Should avoid problem in bug #41357,4,4,4,4,add debug info,4,3,4,4,"Fix: Handle negative image size in readPictures method This commit modifies the `readPictures()` method in `HSLFSlideShow.java` to handle a potential error situation where the image size is less than 0. A new exception `CorruptPowerPointFileException` is thrown when this condition is met, ensuring the integrity of the picture data.",4,4,4,4,"fix: Reject negatively sized picture data
This commit fixes a potential data corruption issue by validating picture data lengths in PowerPoint files. It introduces a check to ensure that image sizes are non-negative, preventing potential errors and data loss."
a817230732d857295ab7a1067aa8857af9e3502a,apache/poi,,"File: src/java/org/apache/poi/hssf/usermodel/HSSFSheet.java
Status: modified
```diff
@@ -347,18 +347,25 @@ public int getPhysicalNumberOfRows()
     }
 
     /**
-     * gets the first row on the sheet
-     * @return the number of the first logical row on the sheet
+     * Gets the first row on the sheet
+     * @return the number of the first logical row on the sheet, zero based
      */
-
     public int getFirstRowNum()
     {
         return firstrow;
     }
 
     /**
-     * gets the last row on the sheet
-     * @return last row contained n this sheet.
+     * Gets the number last row on the sheet.
+     * Owing to idiosyncrasies in the excel file
+     *  format, if the result of calling this method
+     *  is zero, you can't tell if that means there 
+     *  are zero rows on the sheet, or one at
+     *  position zero. For that case, additionally
+     *  call {@link #getPhysicalNumberOfRows()} to
+     *  tell if there is a row at position zero
+     *  or not. 
+     * @return the number of the last row contained in this sheet, zero based.
      */
 
     public int getLastRowNum()
```",Improve javadocs relating to getLastRowNumber,4,4,4,4,fix javadoc warnings,3,3,4,4,"Refactor: Improve clarity in HSSFSheet class comments and method descriptions This commit refactors the HSSFSheet class in the Apache POI project. The changes are mainly in the comments and method descriptions, which are intended to improve the clarity of the code. The HSSFSheet class represents a worksheet in an Excel file, and the changes allow for better understanding and manipulation of rows, cells, and sheet properties. No associated issues or pull requests were found for this commit.",4,4,4,4,"style: Reformat Javadoc comments to follow conventional style
No functional changes were introduced; this commit solely focuses on reformating Javadoc comments to adhere to conventional style, improving code readability."
e07b60d81466c0d07ef2bfd694b222806ea18880,apache/poi,,"File: src/scratchpad/testcases/org/apache/poi/hwpf/converter/TestWordToFoConverter.java
Status: modified
```diff
@@ -71,6 +71,15 @@ public void testEquation() throws Exception
                 .contains( ""<!--Image link to '0.emf' can be here-->"" ) );
     }
 
+    public void testInnerTable() throws Exception
+    {
+        final String sampleFileName = ""innertable.doc"";
+        String result = getFoText( sampleFileName );
+
+        assertTrue( result
+                .contains( ""padding-end=\""0.0in\"" padding-start=\""0.0in\"" width=\""1.0770833in\"""" ) );
+    }
+
     public void testHyperlink() throws Exception
     {
         final String sampleFileName = ""hyperlink.doc"";
```",add test case for lost cell properties,4,4,4,4,add unit test for word inner class,4,0,4,3,Feat: Add test method for inner table properties in TestWordToFoConverter A new test method `testInnerTable()` has been added to the `TestWordToFoConverter.java` file. This method tests if the inner table in the document has the correct padding and width properties.,4,4,4,4,"feat: Add test for verifying inner table formatting in Word-to-FO conversion
This commit introduces a new unit test, `testInnerTable`, to verify the formatting of inner tables in Word-to-FO conversion. The test ensures that the generated FO text contains the expected padding and width attributes, thereby enhancing the test coverage of the Word-to-FO conversion feature."
0c2415165f0da8e68e44979f580dfcbf5e886053,apache/poi,,"File: src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFBugs.java
Status: modified
```diff
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.util.Calendar;
 import java.util.List;
 
 import org.apache.poi.EncryptedDocumentException;
@@ -40,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.poifs.filesystem.POIFSFileSystem;
 import org.apache.poi.ss.formula.WorkbookEvaluator;
 import org.apache.poi.ss.formula.eval.ErrorEval;
+import org.apache.poi.ss.formula.eval.NumberEval;
 import org.apache.poi.ss.formula.eval.ValueEval;
 import org.apache.poi.ss.formula.functions.Function;
 import org.apache.poi.ss.usermodel.*;
@@ -1753,12 +1755,11 @@ public void testBug56688_3() {
     public void testBug56688_4() {
         XSSFWorkbook excel = XSSFTestDataSamples.openSampleWorkbook(""56688_4.xlsx"");
         
-//        Calendar calendar = Calendar.getInstance();
-//        calendar.add(Calendar.MONTH, 2);
-//        double excelDate = DateUtil.getExcelDate(calendar.getTime());
-//        NumberEval eval = new NumberEval(Math.floor(excelDate));
-//        checkValue(excel, eval.getStringValue() + "".0"");
-        checkValue(excel, ""41904.0"");
+        Calendar calendar = Calendar.getInstance();
+        calendar.add(Calendar.MONTH, 2);
+        double excelDate = DateUtil.getExcelDate(calendar.getTime());
+        NumberEval eval = new NumberEval(Math.floor(excelDate));
+        checkValue(excel, eval.getStringValue() + "".0"");
     }
 
     private void checkValue(XSSFWorkbook excel, String expect) {
```",Fix test to make it work on different date as well,4,4,4,4,fix unit test,4,3,4,4,"Fix: Corrected date handling in testBug56688_4() In the method `testBug56688_4()`, the code for setting a date two months from now, converting that date to Excel format, and checking the value was uncommented. This change allows the method to test the bug 56688_4 more accurately by considering the date handling.",4,4,4,4,"fix: Fix date conversion in testBug56688_4
Fixed date conversion issue in testBug56688_4 to ensure accurate representation of dates in Excel files, addressing a specific bug related to date handling."
abae7473fccd54152563a9512d88c5b05de024f1,apache/poi,,"File: src/scratchpad/src/org/apache/poi/hslf/model/HeadersFooters.java
Status: modified
```diff
@@ -36,6 +36,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public final class HeadersFooters {
 
+    private static final String _ppt2007tag = ""___PPT12"";
+
     private final HeadersFootersContainer _container;
     private final HSLFSheet _sheet;
     private final boolean _ppt2007;
@@ -54,7 +56,7 @@ public HeadersFooters(HSLFSheet sheet, short headerFooterType) {
         
         // detect if this ppt was saved in Office2007
         String tag = ppt.getSlideMasters().get(0).getProgrammableTag();
-        _ppt2007 = ""___PPT12"".equals(tag);
+        _ppt2007 = _ppt2007tag.equals(tag);
 
         SheetContainer sc = _sheet.getSheetContainer();
         HeadersFootersContainer hdd = (HeadersFootersContainer)sc.findFirstOfType(RecordTypes.HeadersFooters.typeID);
```",extract string constant out of code,4,4,4,4,fix npe in HeadersFooters,0,0,4,4,"Refactor: Extract constant string in HeadersFooters class This commit introduces a refactoring change in the HeadersFooters class. A constant string ""_ppt2007tag"" has been extracted and used in the class. This change does not affect the functionality of the class, which manages the visibility, formatting, and content of headers and footers in a PowerPoint slide.",4,4,4,4,"refactor: Define _ppt2007tag constant in HeadersFooters
Defined a private constant _ppt2007tag to replace the hardcoded '___PPT12' string, enhancing code organization and reducing duplication in HeadersFooters."
7ca959ac56dcf04e03d21443aa71bcb46dde0a42,apache/poi,,"File: src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFBugs.java
Status: modified
```diff
@@ -75,7 +75,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.ss.util.CellRangeAddress;
 import org.apache.poi.ss.util.CellReference;
 import org.apache.poi.ss.util.CellUtil;
+import org.apache.poi.util.IOUtils;
 import org.apache.poi.util.LocaleUtil;
+import org.apache.poi.util.NullOutputStream;
 import org.apache.poi.util.TempFile;
 import org.apache.poi.xssf.XLSBUnsupportedException;
 import org.apache.poi.xssf.XSSFITestDataProvider;
@@ -3162,13 +3164,7 @@ public void test53611() throws IOException {
 
         // we currently only populate the dimension during writing out
         // to avoid having to iterate all rows/cells in each add/remove of a row or cell
-        //OutputStream str = new FileOutputStream(""/tmp/53611.xlsx"");
-        OutputStream str = new ByteArrayOutputStream();
-        try {
-            wb.write(str);
-        } finally {
-            str.close();
-        }
+        IOUtils.write(wb, new NullOutputStream());
 
         assertEquals(""B2:I5"", ((XSSFSheet) sheet).getCTWorksheet().getDimension().getRef());
 
```",simplify unit test code with IOUtils.write to a NullOutputStream,4,4,4,4,fix failing test,0,1,4,4,"Refactor: Simplify workbook writing in test53611 This commit simplifies the way the workbook is written out in the test method `test53611()`. The previous implementation used a `ByteArrayOutputStream` to write the workbook, which was then closed in a finally block. This has been replaced with a single line using `IOUtils.write()`, which automatically handles the closing of the stream. This change improves the readability and maintainability of the code without altering the functionality of the test.",4,4,4,4,"refactor: Replace FileOutputStream with IOUtils.write and NullOutputStream in test53611
Replaced FileOutputStream with IOUtils.write and NullOutputStream in test53611 to reduce dependencies and improve test isolation, making the test more reliable and efficient."
ad14771ed871c21038779ee4829e6520f24207bf,apache/poi,,"File: src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFComment.java
Status: modified
```diff
@@ -109,7 +109,7 @@ public int getRow() {
     @Override
     public boolean isVisible() {
         boolean visible = false;
-        if(_vmlShape != null){
+        if(_vmlShape != null) {
             String style = _vmlShape.getStyle();
             visible = style != null && style.contains(""visibility:visible"");
         }
@@ -217,6 +217,9 @@ public void setString(String string) {
 
     @Override
     public ClientAnchor getClientAnchor() {
+        if(_vmlShape == null) {
+            return null;
+        }
         String position = _vmlShape.getClientDataArray(0).getAnchorArray(0);
         int[] pos = new int[8];
         int i = 0;
```",add null guard in XSSFComment,4,4,4,4,fix XSSFComment isVisible,2,2,4,4,Fix: Add null check in getClientAnchor() and format isVisible() This commit includes a minor formatting change in the isVisible() method and adds a null check for _vmlShape in the getClientAnchor() method in the XSSFComment.java file. The null check prevents potential NullPointerExceptions when trying to get the client anchor of a shape that does not have a VML shape associated with it.,4,4,4,4,"fix: Fix null pointer exception when accessing VML shape in XSSFComment
This commit prevents NullPointerExceptions in XSSFComment by introducing null checks in isVisible() and getClientAnchor() methods, ensuring correct return values or null when _vmlShape is null."
19005a4e63b6855c6cb889ba546781cb43fc22f5,apache/poi,,"File: src/java/org/apache/poi/ss/usermodel/DateUtil.java
Status: modified
```diff
@@ -71,7 +71,7 @@ protected DateUtil() {
             .appendPattern(""[[yyyy ]dd-MMM[-yyyy]][[ ]h:m[:s] a][[ ]H:m[:s]]"")
             .appendPattern(""[M/dd[/yyyy]][[ ]h:m[:s] a][[ ]H:m[:s]]"")
             .appendPattern(""[[yyyy/]M/dd][[ ]h:m[:s] a][[ ]H:m[:s]]"")
-            .parseDefaulting(ChronoField.YEAR_OF_ERA, Calendar.getInstance().get(Calendar.YEAR))
+            .parseDefaulting(ChronoField.YEAR_OF_ERA, LocaleUtil.getLocaleCalendar().get(Calendar.YEAR))
             .toFormatter();
 
     /**
```",Fix forbidden apis error,3,2,4,3,use the correct locale for the üòÖ,3,1,4,0,"Fix: Use LocaleUtil for obtaining year in DateUtil In the DateUtil class, the method for obtaining the current year has been updated. Previously, the year was obtained directly from the Calendar instance. This commit changes this to use the LocaleUtil.getLocaleCalendar() method instead. This change does not alter the overall functionality of the DateUtil class, which is responsible for handling and converting dates in Excel format in Java.",4,4,4,4,"fix: Use LocaleUtil.getLocaleCalendar() for default year parsing
Switched from using Calendar.getInstance() to LocaleUtil.getLocaleCalendar() for default year parsing, addressing potential locale-specific issues."
d9776561954a112f257477c41911f802ba15b0bc,apache/poi,,"File: poi-ooxml/src/main/java/org/apache/poi/xddf/usermodel/chart/XDDFChart.java
Status: modified
```diff
@@ -1051,7 +1051,6 @@ public void setWorkbook(XSSFWorkbook workbook) {
      * @since POI 4.0.0
      */
     public void setExternalId(String id) {
-        getCTChartSpace().addNewExternalData().setId(id);
         CTChartSpace ctChartSpace = getCTChartSpace();
         CTExternalData externalData = ctChartSpace.isSetExternalData()
                 ? ctChartSpace.getExternalData()
```",Remove invalid code,3,3,4,4,remove unnecessary setId,4,4,4,4,"Fix: Remove redundant line in setExternalId method This commit removes a redundant line of code in the setExternalId method of the XDDFChart class. The removed line was attempting to add new external data and set its id, which is unnecessary and could potentially cause errors. This fix ensures that the setExternalId method functions as expected.",4,4,4,4,"refactor: Remove unnecessary CTChartSpace modification from setExternalId method
Removed unnecessary CTChartSpace modification in setExternalId method, which was previously creating an external data object and setting its ID. This change simplifies the method's implementation and reduces unnecessary object creation."
4682903e6ace561155a667e240b4736f89ab4805,apache/poi,,"File: poi-ooxml/src/test/java/org/apache/poi/xssf/usermodel/TestFormulaEvaluatorOnXSSF.java
Status: modified
```diff
@@ -213,10 +213,9 @@ void processFunctionRow(String targetFunctionName, int formulasRowIdx, int expec
                     fail(""Cannot expect formula as result of formula evaluation: "" + msg);
                 case NUMERIC:
                     assertEquals(CellType.NUMERIC, actValue.getCellType(), msg);
-                    BaseTestNumeric.assertDouble(msg, expValue.getNumericCellValue(), actValue.getNumberValue(), BaseTestNumeric.POS_ZERO, BaseTestNumeric.DIFF_TOLERANCE_FACTOR);
-//                double delta = Math.abs(expValue.getNumericCellValue()-actValue.getNumberValue());
-//                double pctExpValue = Math.abs(0.00001*expValue.getNumericCellValue());
-//                assertTrue(msg, delta <= pctExpValue);
+                    final double tolerance = targetFunctionName.equalsIgnoreCase(""RATE"")
+                            ? 0.000001 : BaseTestNumeric.DIFF_TOLERANCE_FACTOR;
+                    BaseTestNumeric.assertDouble(msg, expValue.getNumericCellValue(), actValue.getNumberValue(), BaseTestNumeric.POS_ZERO, tolerance);
                     break;
                 case STRING:
                     assertEquals(CellType.STRING, actValue.getCellType(), msg);
```",more test issues with rate change,1,2,4,3,fix broken test,2,2,4,4,"Refactor: Adjust tolerance calculation in processFunctionRow method In the `processFunctionRow` method of the `TestFormulaEvaluatorOnXSSF.java` file, the tolerance calculation for the ""RATE"" function has been adjusted. The new calculation provides a specific tolerance for the ""RATE"" function, improving the precision of the test results. This change does not affect the overall behavior of the method.",4,4,4,4,"fix: Update numeric comparison tolerance for RATE function
Relaxed the numeric comparison tolerance specifically for the RATE function to accommodate its unique requirements, improving the accuracy of formula evaluation in TestFormulaEvaluatorOnXSSF."
a8ad56f53b6d476d1de0c084031bc61da27a519c,apache/qpid,,"File: qpid/java/client/src/org/apache/qpid/client/protocol/AMQProtocolSession.java
Status: modified
```diff
@@ -385,8 +385,8 @@ protected String generateQueueName()
         {
             id = _queueId++;
         }
-        //get rid of / and ; from address for spec conformance
-        String localAddress = StringUtils.replaceChars(_minaProtocolSession.getLocalAddress().toString(),""/;"","""");
+        //get rid of / and : and ; from address for spec conformance
+        String localAddress = StringUtils.replaceChars(_minaProtocolSession.getLocalAddress().toString(),""/;:"","""");
         return ""tmp_"" + localAddress + ""_"" + id;
     }
 
```",generateQueueName now removes colons as well as semi-colons,0,4,4,4,remove unused code,0,0,4,4,"Fix: Update character replacement in generateQueueName method In the `generateQueueName()` method of the `AMQProtocolSession` class, the character replacement has been updated. Now, along with ""/"" and "";"", the "":"" character is also being replaced in the local address. This change ensures the generation of a unique name for a temporary queue by appending an incrementing id to the local address of the protocol session, which is now free of these special characters.",4,4,4,4,"fix: Remove special characters from address for spec conformance
This change updates the generateQueueName() method to conform to the spec by removing '/' , ';' and ':' characters from the address, ensuring that queue names are correctly formatted for compliance."
aa97383bc73a09213063dade4080f7b4c1cf84b8,apache/qpid,,"File: qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionOpenMethodHandler.java
Status: modified
```diff
@@ -66,7 +66,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<Connecti
         }
         else
         {
-            virtualHostName = String.valueOf(body.virtualHost);
+            virtualHostName = body.virtualHost == null ? null : String.valueOf(body.virtualHost);
         }
 
         VirtualHost virtualHost = stateManager.getVirtualHostRegistry().getVirtualHost(virtualHostName);
```",Fix for null virtual host (which got converted to the invalid string 'null').,4,4,4,4,fix npe in ConnectionOpenMethodHandler,0,1,4,4,"Fix: Add null check for virtual host name in ConnectionOpenMethodHandler This commit adds a null check for the 'virtualHost' field in the 'ConnectionOpenBody' object in the 'methodReceived' method of the 'ConnectionOpenMethodHandler' class. This change ensures that the method can handle null values for the virtual host name, preventing potential null pointer exceptions. The functionality of the method, which handles the receipt of a ConnectionOpen method from the client, sets the virtual host for the session, and sends a ConnectionOpenOk response back, remains unchanged.",4,4,4,4,"fix: Prevent NullPointerException in ConnectionOpenMethodHandler
Ensure virtual host name is properly extracted from the connection open method event, even when the virtual host is null, to prevent NullPointerExceptions and maintain correct protocol session setup."
20a61421b9f4821253fef6c25fbea2acae9da1ed,apache/qpid,,"File: qpid/java/common/src/main/java/org/apache/qpid/transport/network/io/IoTransport.java
Status: modified
```diff
@@ -38,8 +38,8 @@
 import org.apache.qpid.transport.Sender;
 import org.apache.qpid.transport.TransportException;
 import org.apache.qpid.transport.network.ConnectionBinding;
-import org.apache.qpid.transport.network.ssl.SSLReceiver;
-import org.apache.qpid.transport.network.ssl.SSLSender;
+import org.apache.qpid.transport.network.security.ssl.SSLReceiver;
+import org.apache.qpid.transport.network.security.ssl.SSLSender;
 import org.apache.qpid.transport.util.Logger;
 
 /**
```",Updated the references to the new SSL package.,4,4,4,4,fix import order,0,0,4,4,Refactor: Update import statements for SSLReceiver and SSLSender The import statements for SSLReceiver and SSLSender in IoTransport.java have been updated to reflect the new package names. This is a refactor commit with no associated issues or pull requests.,4,4,4,4,"refactor: Relocate SSL classes to new package
Moved SSLReceiver and SSLSender classes to a more suitable package, org.apache.qpid.transport.network.security.ssl, to better reflect their functionality and improve overall package structure."
8336885d725e5dac598e86f174baa61aa731d1ed,apache/storm,,"File: src/jvm/backtype/storm/utils/NimbusClient.java
Status: modified
```diff
@@ -26,6 +26,9 @@ public NimbusClient(String host) {
 
     public NimbusClient(String host, int port) {
         try {
+            if(host==null) {
+                throw new IllegalArgumentException(""Nimbus host is not set"");
+            }
             conn = new TFramedTransport(new TSocket(host, port));
             client = new Nimbus.Client(new TBinaryProtocol(conn));
             conn.open();
```",check that nimbus host is set,4,4,4,4,add check for null host,4,4,4,4,"Fix: Add null check for host in NimbusClient constructor This commit adds a null check for the host parameter in the constructor of the NimbusClient class. If the host is null, an IllegalArgumentException is thrown with the message ""Nimbus host is not set"". This fix prevents the creation of a NimbusClient with a null host, ensuring that a valid host is always provided when establishing a connection to a Nimbus server.",4,4,4,4,"fix: Throw exception if Nimbus host is null
Prevent NullPointerException by adding a null check for Nimbus host in the NimbusClient constructor, ensuring an IllegalArgumentException is thrown when the host is not set."
9d267e8da0b9ab81aecc39903517beeaaaf2ea53,apache/storm,,"File: src/jvm/storm/starter/spout/TwitterSampleSpout.java
Status: modified
```diff
@@ -8,13 +8,13 @@
 import backtype.storm.topology.IRichSpout;
 import backtype.storm.topology.OutputFieldsDeclarer;
 import backtype.storm.tuple.Fields;
+import backtype.storm.tuple.Values;
 import backtype.storm.utils.Utils;
 import java.util.Map;
 import java.util.concurrent.LinkedBlockingQueue;
 import twitter4j.Status;
 import twitter4j.StatusDeletionNotice;
 import twitter4j.StatusListener;
-import static backtype.storm.utils.Utils.*;
 
 public class TwitterSampleSpout implements IRichSpout {
     SpoutOutputCollector _collector;
@@ -74,7 +74,7 @@ public void nextTuple() {
         if(ret==null) {
             Utils.sleep(50);
         } else {
-            _collector.emit(tuple(ret));            
+            _collector.emit(new Values(ret));
         }
     }
 
```",tuple() -> new Values(),0,4,4,4,fix sample code,0,0,4,4,"Refactor: Refactored tuple emission in TwitterSampleSpout In the `nextTuple()` method of `TwitterSampleSpout.java`, the way tuples are emitted has been refactored for improved code structure. The method still retrieves and emits the next tuple from the queue, or sleeps for 50 milliseconds if the queue is empty. However, the tuple emission is now done using `new Values(ret)` instead of `tuple(ret)`. This change does not affect the functionality of the method.",4,4,4,4,"refactor: Use Values instead of tuple in emit method
This commit refactors the emit method in TwitterSampleSpout to use Values instead of tuple, aligning with Storm's tuple representation. This change improves code consistency and reduces potential errors by using the recommended tuple implementation."
0449d31afae47c00ece64dd11aff8f7a261df5a6,apache/storm,,"File: src/jvm/storm/trident/operation/builtin/Debug.java
Status: modified
```diff
@@ -4,11 +4,19 @@
 import storm.trident.tuple.TridentTuple;
 
 public class Debug extends BaseFilter {
+    private final String name;
+
+    public Debug() {
+        name = ""DEBUG: "";
+    }
+
+    public Debug(String name) {
+        this.name = ""DEBUG("" + name + ""): "";
+    }
 
     @Override
     public boolean isKeep(TridentTuple tuple) {
-        System.out.println(""DEBUG: "" + tuple.toString());
+        System.out.println(name + tuple.toString());
         return true;
     }
-    
 }
```",Allow Debug filters to print an identifier,4,4,4,4,add Debug isKeep,0,0,4,1,Feat: Add name to debug print statement This commit adds a new feature to the Debug.java file in the storm.trident.operation.builtin package. A new variable 'name' was added and two constructors were added to initialize this variable. The 'isKeep' method was also modified to include this 'name' variable in the print statement. This allows for more specific debugging with a name.,4,4,4,4,"refactor: Make Debug class constructor accept a custom name
This change enhances the Debug class by allowing a custom name to be passed to its constructor, making it more flexible and reusable. The updated `isKeep` method now incorporates this custom name when printing debug messages, providing more context and facilitating debug log identification."
76353a80ff8d0121cdd5ef53e518f07f0be95a0a,apache/storm,,"File: storm-core/src/jvm/backtype/storm/task/ShellBolt.java
Status: modified
```diff
@@ -21,6 +21,7 @@
 import backtype.storm.generated.ShellComponent;
 import backtype.storm.metric.api.IMetric;
 import backtype.storm.metric.api.rpc.IShellMetric;
+import backtype.storm.topology.ReportedFailedException;
 import backtype.storm.tuple.MessageId;
 import backtype.storm.tuple.Tuple;
 import backtype.storm.utils.ShellProcess;
@@ -257,6 +258,7 @@ private void handleLog(ShellMsg shellMsg) {
                 break;
             case ERROR:
                 LOG.error(msg);
+                _collector.reportError(new ReportedFailedException(msg));
                 break;
             default:
                 LOG.info(msg);
```",reportError when receiving an error-level message in ShellBolt.,4,4,4,4,add error handling in ShellBolt,2,1,4,4,"Fix: Add error reporting in ShellBolt's handleLog method In the ShellBolt class, the handleLog method has been modified to report an error when the log level is ERROR. This change involves the addition of a new method call to _collector.reportError. This fix ensures that errors are properly reported and handled.",4,4,4,4,"fix: Report errors to collector on error-level log messages
This change enhances error handling in ShellBolt by reporting error-level log messages to the collector, allowing for more accurate error tracking and visibility in the Storm UI."
2059f23d8a30df9089f6a928b4a2bf51d608099f,apache/storm,,"File: external/storm-redis/src/main/java/org/apache/storm/redis/trident/state/RedisClusterMapState.java
Status: modified
```diff
@@ -72,7 +72,7 @@ public String build(List<Object> key) {
     public static class Options<T> implements Serializable {
         public int localCacheSize = 1000;
         public String globalKey = ""$REDIS-MAP-STATE-GLOBAL"";
-        KeyFactory keyFactory = null;
+        public KeyFactory keyFactory = null;
         public Serializer<T> serializer = null;
         public String hkey = null;
     }
```","Made keyFactory public in RedisClusterMapState.Options To match the same change to RedisMapState.Options, for the same reasons. It can be set from the public API in other ways.  Having it public means we can set it along with other values like hkey.",4,4,4,4,make Options public,0,1,4,4,"Refactor: Change visibility of keyFactory in Options class The visibility of the `keyFactory` variable in the `Options` class of the `RedisClusterMapState.java` file has been changed from default to public. This is a refactor that does not alter the functionality of the `RedisClusterMapState` class, which manages state in a Redis cluster for different types of transactions.",4,4,3,4,"style: Make keyFactory field public in Options
Made keyFactory field public to align with the requirements of STORM-761, enabling users to customize Redis key expiration through Options."
6d4fcde16652de39b2f41498e076ed6c9634d66f,apache/synapse,,"File: java/modules/core/src/main/java/org/apache/synapse/core/axis2/AsyncCallback.java
Status: modified
```diff
@@ -99,6 +99,8 @@ public void onComplete(AsyncResult result) {
     public void onError(Exception e) {
         // this will never be called as our custom SynapseCallbackReceiver will push
         // faults as well through the onComplete()
+        log.warn(e);
+        e.printStackTrace();
     }
 
     public void setSynapseOutMshCtx(org.apache.synapse.MessageContext synapseOutMsgCtx) {
```",print errors/exceptions until we enhance error handling to capture and handle non-blocking IO errors,4,4,4,4,add missing newline,0,0,4,4,"Fix: Add logging and exception printing to onError method In the AsyncCallback.java file, the onError method has been updated to log and print the stack trace of an exception. Previously, this method was not expected to be called due to the custom SynapseCallbackReceiver handling faults. Now, in the event that it is called, it will provide more detailed information about the error.",4,4,4,4,"fix: Add exception logging to onError method
Added exception logging to onError method to provide diagnostic information, even though it's not expected to be called due to custom SynapseCallbackReceiver fault handling."
47671ae1b1101633347421477fe45d3e8e6e169e,apache/synapse,,"File: java/modules/core/src/main/java/org/apache/synapse/config/Util.java
Status: modified
```diff
@@ -158,8 +158,9 @@ public static OMElement getOMElementFromURL(String url) throws IOException {
                 OMElement doc = builder.getDocumentElement();
                 doc.build();
                 return doc;
-            } catch (XMLStreamException e) {
-                log.error(""Error parsing resource at URL : "" + url + "" as XML"", e);
+            } catch (Exception e) {
+                handleException(""Error parsing resource at URL : "" + url +
+                    "" as XML"", e);
             } finally {
                 try {
                     urlInStream.close();
```",catch any Exception that may arise while trying to read from a URL,4,4,4,4,fix the build,0,0,4,4,"Fix: Broaden exception handling in getOMElementFromURL method In the `getOMElementFromURL` method in the `Util.java` file, the exception handling has been broadened to catch all exceptions, not just `XMLStreamException`. The handling of these exceptions has also been changed to use the `handleException` method. This method retrieves an `OMElement` object from a given URL by parsing the XML content from the URL.",4,4,3,4,"fix: Catch and handle Exception in getOMElementFromURL
Previously, the method only caught XMLStreamException, which limited its robustness. By catching the general Exception, we can now handle unexpected errors more effectively, ensuring that the method is more resilient and reliable. This change improves the overall error handling mechanism in getOMElementFromURL."
20546674ef9dfe96c8cc689d28e8a78b182edd45,apache/synapse,,"File: java/modules/transports/src/main/java/org/apache/synapse/transport/jms/JMSSender.java
Status: modified
```diff
@@ -192,6 +192,10 @@ public void sendMessage(MessageContext msgCtx, String targetAddress,
                 }
             }
 
+            if(session == null) {
+               handleException(""Could not create JMS session"");
+            }
+            
             // now we are going to use the JMS session, but if this was a session from a
             // defined JMS connection factory, we need to synchronize as sessions are not
             // thread safe
```",jms sender - added a simple null check,4,4,4,4,fix npe in JMSSender,0,1,4,4,"Fix: Add null check for session in sendMessage method In the `sendMessage` method of the `JMSSender.java` file, a null check for the session has been added. If the session is null, an exception is thrown. This is a fix to prevent potential issues when the session is null.",4,4,4,4,"fix: Throw exception when JMS session creation fails
This change prevents unexpected behavior by throwing an exception when JMS session creation fails, ensuring that the system is aware of and can handle this failure scenario."
f02e9889647bfac24d9020d6f9ea8dd982da3fc9,apache/synapse,,"File: java/modules/transports/src/test/java/org/apache/synapse/transport/mail/MailRequestResponseClient.java
Status: modified
```diff
@@ -30,6 +30,8 @@
 import javax.mail.Store;
 import javax.mail.internet.ContentType;
 
+import junit.framework.Assert;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.synapse.transport.testkit.client.ClientOptions;
@@ -63,6 +65,7 @@ private void tearDown() throws MessagingException {
     public IncomingMessage<byte[]> sendMessage(ClientOptions options, ContentType contentType, byte[] message) throws Exception {
         String msgId = sendMessage(contentType, message);
         Message reply = waitForReply(msgId);
+        Assert.assertNotNull(""No response received"", reply);
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         reply.getDataHandler().writeTo(baos);
         return new IncomingMessage<byte[]>(new ContentType(reply.getContentType()), baos.toByteArray());
```",Mail transport tests: avoid NPE in MailRequestResponseClient if no response is received,4,4,4,4,add null check to MailRequestResponseClient sendMessage,4,4,4,4,"Fix: Add assertion to ensure response in sendMessage method In the sendMessage method of the MailRequestResponseClient.java file, an assertion was added to ensure that a response is received after sending a message. This fix ensures that the method will not proceed without receiving a response, improving the reliability of the message sending process.",4,4,4,4,"fix: Add null check for reply in sendMessage method
This commit adds a null check to ensure that a reply is received before proceeding with the sendMessage method, thereby preventing potential NullPointerExceptions and improving the method's robustness."
098a576d2171de1001ddc9725811c438fc7ac7b8,apache/synapse,Y,"File: java/modules/core/src/main/java/org/apache/synapse/config/SynapseConfigUtils.java
Status: modified
```diff
@@ -34,7 +34,6 @@
 import org.apache.synapse.commons.security.definition.factory.KeyStoreInformationFactory;
 import org.apache.synapse.util.SynapseBinaryDataSource;
 import org.xml.sax.InputSource;
-import sun.net.www.protocol.https.HttpsURLConnectionImpl;
 
 import javax.activation.DataHandler;
 import javax.net.ssl.*;
@@ -376,7 +375,7 @@ private static HttpsURLConnection getHttpsURLConnection(URL url) {
         }
 
         try {
-            HttpsURLConnectionImpl connection = (HttpsURLConnectionImpl) url.openConnection();
+            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
             //Create a SSLContext
             SSLContext sslContext = SSLContext.getInstance(""TLS"");
             sslContext.init(keyManagers,
```


File: java/modules/extensions/src/main/java/org/apache/synapse/mediators/xquery/XQueryMediatorFactory.java
Status: modified
```diff
@@ -75,8 +75,7 @@ public Mediator createMediator(OMElement elem) {
         if (attrTarget != null) {
             String targetValue = attrTarget.getAttributeValue();
             if (targetValue != null && !"""".equals(targetValue)) {
-                try {
-                    xQueryMediator.setQuerySource(targetValue);
+                try {                             
                     xQueryMediator.setTarget(SynapseXPathFactory.getSynapseXPath(elem, ATT_TARGET));
                 } catch (JaxenException e) {
                     handleException(""Invalid XPath specified for the target attribute : "" +
```",remove sun JDK sepecific class dependency,0,3,4,4,fix failing test,0,0,4,4,"Refactor: Modify methods in SynapseConfigUtils and XQueryMediatorFactory In this commit, we have made changes to two files: SynapseConfigUtils.java and XQueryMediatorFactory.java. In SynapseConfigUtils.java, we have modified the method getHttpsURLConnection. Now, it creates a HttpsURLConnection from a given URL, loads the Synapse properties, and creates the identity and trust key store information.In XQueryMediatorFactory.java, we have modified the method createMediator. Now, it creates an XQuery mediator with the given XML configuration.These changes are part of a refactor and there are no associated issues or pull requests.",4,4,2,4,"refactor: Simplify HTTPS connection and XQuery mediator creation by removing unnecessary dependencies
This commit simplifies the HTTPS connection establishment by using the standard `HttpsURLConnection` instead of the implementation-specific `HttpsURLConnectionImpl`. Additionally, it refactors the `XQueryMediatorFactory` to correctly set the target attribute, making the mediator creation more robust. These changes improve the overall maintainability and flexibility of the Synapse configuration utilities."
ddad1fad1b18d093ee7abed31d58d33e7aa3d1ed,apache/tomcat,,"File: java/org/apache/catalina/connector/CoyoteAdapter.java
Status: modified
```diff
@@ -224,7 +224,8 @@ public void service(org.apache.coyote.Request req,
             }
 
             if (request.getWrapper().getServlet() instanceof CometProcessor 
-                    && !response.isClosed()) {
+                    && !response.isClosed()
+                    && req.getAttribute(""org.apache.tomcat.comet.support"") == Boolean.TRUE) {
                 comet = true;
                 res.action(ActionCode.ACTION_COMET_BEGIN, null);
             }
```",Also check the support attribute.,0,4,4,4,fix a bug in üòÖ,0,0,4,0,"Fix: Add condition to start Comet process in CoyoteAdapter This commit adds a condition to the service method in the CoyoteAdapter class to start a Comet process. The new condition checks if the attribute ""org.apache.tomcat.comet.support"" of the request is true. This is a bug fix to ensure that the Comet process is started only when the attribute ""org.apache.tomcat.comet.support"" is true.",4,4,4,4,"fix: Require comet support attribute in CoyoteAdapter service method
This change ensures that comet support is only enabled when the 'org.apache.tomcat.comet.support' attribute is present, preventing potential issues with incorrect comet processing. This requirement is necessary to maintain the correct behavior of the CoyoteAdapter service method."
de685def46dffd66bf918fca39e08b5a690ae350,apache/tomcat,,"File: java/org/apache/catalina/ha/jmx/ClusterJmxHelper.java
Status: modified
```diff
@@ -111,13 +111,10 @@ public static boolean unregisterDefaultCluster(SimpleTcpCluster cluster) throws
     private static ObjectName getDefaultClusterName(SimpleTcpCluster cluster) throws Exception {_x000D_
         String domain = getMBeanServer().getDefaultDomain();_x000D_
         String type = "":type="";_x000D_
-        boolean hostParent = false;_x000D_
-        //Step 1. Register the Cluster MBean_x000D_
         String clusterType= type+""Cluster"";_x000D_
         if (cluster.getContainer() instanceof StandardHost) {_x000D_
             domain = ((StandardHost) cluster.getContainer()).getDomain();_x000D_
             clusterType += "",host="" + cluster.getContainer().getName();_x000D_
-            hostParent = true;_x000D_
         } else {_x000D_
             if (cluster.getContainer() instanceof StandardEngine) {_x000D_
                 domain = ((StandardEngine) cluster.getContainer()).getDomain();_x000D_
```",remove not used fields,4,4,4,4,remove unused code,4,4,4,4,"Refactor: Simplify ClusterJmxHelper class This commit simplifies the ClusterJmxHelper class by removing some code related to the registration of clusters. The changes do not affect the behavior of the class, but improve the structure of the code.",3,3,4,4,"refactor: Remove unnecessary variables from getDefaultClusterName
Simplified the `getDefaultClusterName` method by removing unused variables, improving code readability and maintainability. This refactoring reduces unnecessary complexity and makes the code easier to understand."
097e43b2f6019eaafc062badb81fd11c76c9f5b6,apache/tomcat,,"File: java/org/apache/tomcat/buildutil/Txt2Html.java
Status: modified
```diff
@@ -81,10 +81,10 @@ public void execute()
         int count = 0;
         
         // Step through each file and convert.
-        Iterator iter = filesets.iterator();
+        Iterator<FileSet> iter = filesets.iterator();
         while( iter.hasNext() ) {
-            FileSet fs = (FileSet)iter.next();
-            DirectoryScanner ds = fs.getDirectoryScanner( project );
+            FileSet fs = iter.next();
+            DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             File basedir = ds.getBasedir();
             String[] files = ds.getIncludedFiles();
             for( int i = 0; i < files.length; i++ ) {
```",Fix generics and use of deprecated field,4,4,4,4,fix bug in Txt2Html,4,1,4,4,"Refactor: Update iteration and directory scanner retrieval in Txt2Html.java In the execute() method of Txt2Html.java, the way of iterating over filesets and getting the directory scanner for each fileset has been updated. The raw type Iterator has been replaced with a parameterized type Iterator<FileSet> to improve type safety. The project is now retrieved by calling the getProject() method instead of directly accessing the project variable. This change does not affect the functionality of the method, which is to convert files in the specified filesets to HTML format.",4,4,4,4,"refactor: Specify iterator type explicitly in Txt2Html.java
This change explicitly specifies the iterator type in Txt2Html.java, replacing the raw type with a parameterized one, to improve code readability and maintainability. This refactoring ensures type safety and reduces the risk of errors without changing the observable behavior of the Txt2Html class."
4db6694a04c3da31ed33a146603f94b46665197b,apache/tomcat,,"File: java/org/apache/catalina/connector/CometEventImpl.java
Status: modified
```diff
@@ -124,5 +124,16 @@ public void setTimeout(int timeout) throws IOException, ServletException,
             throw new UnsupportedOperationException();
         }
     }
+    
+    public String toString() {
+        StringBuffer buf = new StringBuffer();
+        buf.append(super.toString());
+        buf.append(""[EventType:"");
+        buf.append(eventType);
+        buf.append("", EventSubType:"");
+        buf.append(eventSubType);
+        buf.append(""]"");
+        return buf.toString();
+    }
 
 }
```",implement a toString for the CometEventImpl,4,4,4,4,add toString to CometEventImpl,4,4,4,4,"Feat: Add toString method to CometEventImpl class This commit adds a new method `toString()` to the `CometEventImpl.java` file. The method returns a string representation of the event object, including its type and subtype. This feature enhances the readability and debuggability of the event object by providing a clear and comprehensive string representation.",4,4,4,4,"feat: Add toString method to CometEventImpl
This commit overrides the default toString method in CometEventImpl to provide a more informative string representation of the event object, including its type and subtype, which is essential for debugging and logging purposes. The implementation appends the event type and subtype to the superclass's toString output."
55813d250b8c3f82bfd6401dc698ab669e42fd2d,apache/tomcat,,"File: java/javax/servlet/http/Cookie.java
Status: modified
```diff
@@ -88,8 +88,7 @@ public class Cookie implements Cloneable {
     private String path;       // ;Path=VALUE ... URLs that see the cookie
     private boolean secure;    // ;Secure ... e.g. use SSL
     private int version = 0;   // ;Version=1 ... means RFC 2109++ style
-    // TODO SERVLET3
-    private boolean httpOnly;  // Not in the spec but supported by most browsers
+    private boolean httpOnly;  // Not in cookie specs, but supported by browsers
     
 
     /**
```",Already support httpOnly - update comments,4,4,4,4,remove empty line,0,0,4,4,Style: Update comments in Cookie.java The comments in the Cookie.java file have been updated for clarity. The changes do not affect the functionality of the class.,4,3,4,4,"style: Remove TODO comment about SERVLET3
Removed outdated TODO comment about SERVLET3, as httpOnly field is already implemented and not part of the cookie specs."
1a3d4f84ba0b8a7bd4c33c87698d7b4928ab0da9,apache/tomcat,,"File: java/org/apache/jasper/compiler/AttributeParser.java
Status: modified
```diff
@@ -24,7 +24,7 @@
  * ""\${1+1}"". After unquoting, both appear as ""${1+1}"" but the first should
  * evaluate to ""2"" and the second to ""${1+1}"". Literal \, $ and # need special
  * treatment to ensure there is no ambiguity. The JSP attribute unquoting
- * covers \\, \"", \', \$, \#, %\>, <\%, &apos; and &quot;
+ * covers \\, \"", \', \$, \#, %\&gt;, &lt;\%, &amp;apos; and &amp;quot;
  */
 public class AttributeParser {
 
```",Minor correction to the JavaDoc for AttributeParser class,4,4,4,4,fix javadoc for AttributeParser,4,4,4,4,Style: Update comment in AttributeParser.java The comment in AttributeParser.java has been updated to reflect the correct special treatment of certain characters in JSP attribute unquoting. The changes are purely stylistic and do not affect the functionality of the code.,4,4,4,4,"fix: Cover additional unquoting characters in attribute unquoting
This change extends the attribute unquoting to handle additional special characters (%\&gt;, &lt;\%, &amp;apos;, and &amp;quot;) to prevent ambiguity and ensure correct evaluation of JSP attributes."
40d4721b1f972e7b443bbce7b8b56176fed3260f,apache/tomcat,,"File: java/org/apache/coyote/http11/Http11Processor.java
Status: modified
```diff
@@ -357,12 +357,14 @@ public SocketState asyncDispatch(SocketStatus status) throws IOException {
 
         if (async) {
             if (error) {
+                socket.setAsync(false);
                 recycle();
                 return SocketState.CLOSED;
             } else {
                 return SocketState.LONG;
             }
         } else {
+            socket.setAsync(false);
             if ( error || (!keepAlive)) {
                 recycle();
                 return SocketState.CLOSED;
```",Prevent looping by correctly setting the socket wrapper async state,4,4,4,4,set the socket to false before calling üòÖ,0,0,4,2,"Fix: Ensure socket is set to non-asynchronous in error conditions In the `asyncDispatch(SocketStatus status)` method of the `Http11Processor.java` file, the socket is now set to non-asynchronous when an error occurs or when the connection is not kept alive. This change ensures that the socket state is correctly managed in these conditions.",4,4,4,4,"fix: Ensure socket async flag is properly reset
Reset socket async flag to false in asyncDispatch to prevent incorrect state transitions. This fix addresses a potential issue where the async flag was not properly reset, leading to unexpected behavior in Http11Processor. The correction ensures that the socket state is accurately reflected, maintaining the integrity of the request-response cycle."
77ccbf46068c863aedd20fe952185b8e67d30392,apache/tomcat,,"File: test/org/apache/catalina/startup/TestContextConfigAnnotation.java
Status: modified
```diff
@@ -151,7 +151,7 @@ public void testDuplicateMapping() throws Exception {
             config.processAnnotationsFile(pFile, webxml);
             fail();
         } catch (IllegalArgumentException ex) {
-            // ingore
+            // ignore
         }
         ServletDef servletDef = webxml.getServlets().get(""param"");
         assertNull(servletDef);
@@ -235,7 +235,7 @@ public void testDuplicateFilterMapping() throws Exception {
             config.processAnnotationsFile(pFile, webxml);
             fail();
         } catch (IllegalArgumentException ex) {
-            // ingore
+            // ignore
         }
         FilterDef filterDef = webxml.getFilters().get(""paramD"");
         assertNull(filterDef);
```",Typo in a comment,4,4,4,4,fix test on windows,0,0,4,4,"Style: Correct spelling in comments In the file `TestContextConfigAnnotation.java`, corrected a spelling mistake in the comments. The word 'ingore' was changed to 'ignore'. This change does not affect the functionality of the code.",4,4,4,4,"style: Correct 'ingore' to 'ignore' in comments
This commit fixes a typo in comments, replacing 'ingore' with 'ignore', to maintain accurate and consistent code documentation."
aaaacec287f971b34657b48e43295a4f9a928c1d,apache/tomcat,Y,"File: java/org/apache/coyote/ajp/AjpAprProtocol.java
Status: modified
```diff
@@ -31,9 +31,9 @@
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.net.AprEndpoint;
+import org.apache.tomcat.util.net.AprEndpoint.Handler;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
-import org.apache.tomcat.util.net.AprEndpoint.Handler;
 
 
 /**
```


File: java/org/apache/coyote/ajp/AjpProtocol.java
Status: modified
```diff
@@ -31,11 +31,11 @@
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.modeler.Registry;
+import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.JIoEndpoint;
+import org.apache.tomcat.util.net.JIoEndpoint.Handler;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
-import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
-import org.apache.tomcat.util.net.JIoEndpoint.Handler;
 
 
 /**
```",Fix import order,4,4,4,4,remove unused imports,0,0,4,4,Refactor: Reorder import statements in AjpAprProtocol.java and AjpProtocol.java The import statements in AjpAprProtocol.java and AjpProtocol.java have been reordered for better code structure. This refactor does not affect the functionality of the code.,4,4,4,4,"style: Organize imports
Rearranged import statements in AjpAprProtocol.java and AjpProtocol.java to follow a logical order, eliminating duplicate imports and improving code organization."
8519139d27c24df5ad920bb12803abed19dc9ae2,apache/tomcat,Y,"File: java/org/apache/coyote/ajp/AjpAprProtocol.java
Status: modified
```diff
@@ -60,7 +60,6 @@ public AjpAprProtocol() {
         cHandler = new AjpConnectionHandler(this);
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
-        //setServerSoTimeout(Constants.DEFAULT_SERVER_SOCKET_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
     }
 
```


File: java/org/apache/coyote/ajp/AjpProtocol.java
Status: modified
```diff
@@ -62,7 +62,6 @@ public AjpProtocol() {
         cHandler = new AjpConnectionHandler(this);
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
-        //setServerSoTimeout(Constants.DEFAULT_SERVER_SOCKET_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
     }
 
```


File: java/org/apache/coyote/ajp/Constants.java
Status: modified
```diff
@@ -41,7 +41,6 @@ public final class Constants {
     public static final int DEFAULT_CONNECTION_LINGER = -1;
     public static final int DEFAULT_CONNECTION_TIMEOUT = -1;
     public static final int DEFAULT_CONNECTION_UPLOAD_TIMEOUT = 300000;
-    public static final int DEFAULT_SERVER_SOCKET_TIMEOUT = 0;
     public static final boolean DEFAULT_TCP_NO_DELAY = true;
 
     // Prefix codes for message types from server to container
```",Remove unused code,4,4,4,4,remove unused code,4,4,4,4,"Refactor: Remove unused server socket timeout constant The server socket timeout constant, DEFAULT_SERVER_SOCKET_TIMEOUT, was removed from the Constants.java file. This constant was also removed from the AjpProtocol.java and AjpAprProtocol.java files where it was previously set but not used. This refactor does not affect the functionality of the classes and improves the clarity of the code.",4,4,4,4,"refactor: Remove unused DEFAULT_SERVER_SOCKET_TIMEOUT constant
Removed unused DEFAULT_SERVER_SOCKET_TIMEOUT constant, which was previously referenced in AjpAprProtocol.java and AjpProtocol.java, but not utilized. This change declutters the Constants.java file and eliminates unnecessary code in the affected protocol classes."
0d9d35ef8632cb18c13c8e89ed65f79245a6e31a,apache/tomcat,,"File: java/org/apache/catalina/manager/JMXProxyServlet.java
Status: modified
```diff
@@ -52,8 +52,8 @@ public class JMXProxyServlet extends HttpServlet  {
     /**
      * MBean server.
      */
-    protected MBeanServer mBeanServer = null;
-    protected Registry registry;
+    protected transient MBeanServer mBeanServer = null;
+    protected transient Registry registry;
 
     // --------------------------------------------------------- Public Methods
     /**
@@ -227,8 +227,8 @@ public void listBeans( PrintWriter writer, String qry )
                         ExceptionUtils.handleThrowable(t);
                     }
                 }
-            } catch (Exception e) {
-                // Ignore
+            } catch (Throwable t) {
+                ExceptionUtils.handleThrowable(t);
             }
             writer.println();
         }
@@ -269,7 +269,13 @@ private void appendHead( StringBuilder sb, String value, int start, int end) {
         sb.append( value.substring(pos,end));
     }
 
-    public boolean isSupported( String type ) {
+    /**
+     * Determines if a type is supported by the {@link JMXProxyServlet}.
+     * 
+     * @param type  The type to check
+     * @return      Always returns <code>true</code>
+     */
+    public boolean isSupported(String type) {
         return true;
     }
 }
```",Fix FindBugs and Eclipse warnings,1,0,4,3,fix a bug in the JMXProxyServlet,2,2,4,4,"Refactor: Improve JMXProxyServlet code quality This commit refactors the JMXProxyServlet.java file. The listBeans method has been modified to handle Throwable instead of Exception, providing a more comprehensive error handling. A new method, isSupported, has been added which always returns true, indicating that all types are supported. These changes improve the code quality without altering the functionality of the JMXProxyServlet class.",4,2,4,4,"feat: Improve isSupported method and mark MBeanServer and Registry fields as transient
This change refactors the `isSupported` method to simplify its implementation, always returning true. Additionally, it improves the serialization of `JMXProxyServlet` by marking `MBeanServer` and `Registry` fields as transient, making the class more efficient and easier to maintain."
275ea1c12b31dcc9e7a9c52a6ab55cf85ff48a27,apache/tomcat,,"File: java/org/apache/coyote/http11/InternalNioInputBuffer.java
Status: modified
```diff
@@ -39,6 +39,11 @@
  */
 public class InternalNioInputBuffer extends AbstractInputBuffer {
 
+    /**
+     * Logger.
+     */
+    private static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(InternalNioInputBuffer.class);
 
     // -------------------------------------------------------------- Constants
 
@@ -228,6 +233,11 @@ public boolean parseRequestLine(boolean useAvailableDataOnly)
                 if ( readSocket(true, false)==0 ) return false;
             }
             parsingRequestLinePhase = 2;
+            if (log.isDebugEnabled()) {
+                log.debug(""Received [""
+                        + new String(buf, pos, lastValid - pos, ""ISO-8859-1"")
+                        + ""]"");
+            }
         }
         if ( parsingRequestLinePhase == 2 ) {
             //
```",Implement debug logging in InternalNioInputBuffer. Log what we got with the first read.,4,4,4,4,add a Log to InternalNioInputBuffer,4,4,4,4,"Feat: Add logging capability to InternalNioInputBuffer class In the `parseRequestLine` method, a debug log statement has been added to log the received request. This will help in debugging and understanding the flow of requests in the system.",4,4,4,4,"refactor: Add debug logging for received HTTP request lines
This commit adds debug logging for received HTTP request lines in InternalNioInputBuffer, allowing developers to inspect the raw request data when debugging issues related to request line parsing."
ae008e80741e10bc005af7ab161bce792538a1f5,apache/tomcat,,"File: java/org/apache/coyote/http11/AbstractHttp11Processor.java
Status: modified
```diff
@@ -1028,7 +1028,7 @@ public SocketState process(SocketWrapper<S> socketWrapper)
 
         if (error || endpoint.isPaused()) {
             return SocketState.CLOSED;
-        } else if (comet || isAsync()) {
+        } else if (isAsync() || comet) {
             return SocketState.LONG;
         } else {
             if (sendfileInProgress) {
```",async more likely than comet,4,3,4,4,fix the build,0,0,4,4,Refactor: Change condition order in process method The order of the conditions in the if statement in the process method of the AbstractHttp11Processor class has been changed. This is a refactor and does not affect the functionality of the method. The method still processes a socket connection and handles the request/response lifecycle.,4,4,3,4,"refactor: Reorder conditions in process method to prioritize isAsync() check
Simplified the process method's conditional logic by prioritizing the isAsync() check, reducing the likelihood of unnecessary computations and improving the method's overall performance."
add52847f681e23f4cc6489946828f6af7304f8d,apache/tomcat,,"File: java/org/apache/catalina/tribes/membership/McastService.java
Status: modified
```diff
@@ -282,7 +282,7 @@ public void setLocalLoopbackDisabled(boolean localLoopbackDisabled) {
         properties.setProperty(""localLoopbackDisabled"",String.valueOf(localLoopbackDisabled));
     }
     
-    public boolean getLocalLoopbackDisabled(boolean localLoopbackDisabled) {
+    public boolean getLocalLoopbackDisabled() {
         String p = properties.getProperty(""localLoopbackDisabled"");
         if(p != null){
             return Boolean.valueOf(p).booleanValue();
```",Removed parameter from get(),0,3,4,4,remove unused parameter,4,4,4,4,"Refactor: Remove parameter from getLocalLoopbackDisabled method The getLocalLoopbackDisabled method in McastService.java no longer takes a parameter. The method now checks if the local loopback is disabled by retrieving the property value from the properties file. If the property is not set, it defaults to false. This change is a refactor, which means the code has been restructured without changing its external behavior.",4,4,4,4,"refactor: Make getLocalLoopbackDisabled method parameterless
Simplified the `getLocalLoopbackDisabled` method by removing the redundant `localLoopbackDisabled` parameter, aligning it with the existing property-based implementation. This refactoring eliminates unnecessary complexity and improves code maintainability."
f4878ef9e4360cc3e1f0b94cc2e6d110b8defb78,apache/tomcat,,"File: java/org/apache/catalina/core/ContainerBase.java
Status: modified
```diff
@@ -1190,7 +1190,10 @@ protected void destroyInternal() throws LifecycleException {
             parent.removeChild(this);
         }
 
-        startStopExecutor.shutdownNow();
+        // If init fails, this may be null
+        if (startStopExecutor != null) {
+            startStopExecutor.shutdownNow();
+        }
 
         super.destroyInternal();
     }
```",Fix potential NPE,4,4,4,4,fix npe in ContainerBase,4,4,4,4,"Fix: Add null check before shutting down startStopExecutor In the `destroyInternal` method of the `ContainerBase` class, a null check is added before shutting down the `startStopExecutor`. This is to prevent a potential null pointer exception if the `startStopExecutor` is not initialized.",4,4,4,4,"fix: Handle null startStopExecutor in destroyInternal method
Prevent NullPointerException in destroyInternal method by adding a null check for startStopExecutor, ensuring it's only shut down when initialized."
de55e922010568aa727ac2e1f4171f0ef574046b,apache/tomcat,,"File: java/org/apache/catalina/startup/Tomcat.java
Status: modified
```diff
@@ -605,7 +605,7 @@ protected void initBaseDir() {
         }
         server.setCatalinaBase(baseFile);
 
-        if (catalinaHome == null) {
+        if (catalinaHome != null) {
             File homeFile = new File(catalinaHome);
             homeFile.mkdirs();
             if (!homeFile.isAbsolute()) {
```",Correct typo that broke nearly all the tests,4,4,4,4,fix npe in Tomcat,4,3,4,4,"Fix: Use Catalina home directory if base directory is not set This commit modifies the `initBaseDir` method in the `Tomcat.java` file. The condition `if (catalinaHome == null)` has been changed to `if (catalinaHome != null)`. This change ensures that the Catalina home directory is used if the base directory is not set, likely fixing a bug where the base directory was not being set correctly.",4,4,4,4,"fix: Fix null check for catalinaHome in initBaseDir method
Prevents potential NullPointerExceptions by correctly handling catalinaHome initialization, ensuring the base directory is set up correctly during Tomcat server initialization."
136ad629273cb90b8d48ed6ab2115f95ace1f11b,apache/tomcat,,"File: java/org/apache/catalina/core/StandardHostValve.java
Status: modified
```diff
@@ -60,6 +60,12 @@ final class StandardHostValve extends ValveBase {
 
     private static final Log log = LogFactory.getLog(StandardHostValve.class);
 
+    // Saves a call to getClassLoader() on very request. Under high load these
+    // calls took just long enough to appear as a hot spot (although a very
+    // minor one) in a profiler.
+    private static final ClassLoader MY_CLASSLOADER =
+            StandardHostValve.class.getClassLoader();
+
     protected static final boolean STRICT_SERVLET_COMPLIANCE;
 
     protected static final boolean ACCESS_SESSION;
@@ -184,12 +190,10 @@ public final void invoke(Request request, Response response)
 
         // Restore the context classloader
         if (Globals.IS_SECURITY_ENABLED) {
-            PrivilegedAction<Void> pa = new PrivilegedSetTccl(
-                    StandardHostValve.class.getClassLoader());
+            PrivilegedAction<Void> pa = new PrivilegedSetTccl(MY_CLASSLOADER);
             AccessController.doPrivileged(pa);
         } else {
-            Thread.currentThread().setContextClassLoader
-                    (StandardHostValve.class.getClassLoader());
+            Thread.currentThread().setContextClassLoader(MY_CLASSLOADER);
         }
     }
 
```",Minor performance tweak,4,3,4,4,add STRICT_SERVLET_COMPLIANCE to StandardHostValve,0,2,4,4,"Refactor: Optimize getClassLoader() calls in StandardHostValve This commit optimizes the number of getClassLoader() calls in the invoke method of the StandardHostValve class. A new static final variable MY_CLASSLOADER is added to replace the previous getClassLoader() calls, which reduces the number of these calls under high load. This change does not alter the functionality of the invoke method.",4,4,4,4,"refactor: Store ClassLoader in a static variable to avoid repeated getClassLoader calls
Reduces repeated getClassLoader calls, which were identified as a minor performance bottleneck in profiling under high load, by storing the ClassLoader in a static variable."
1824845878e59054c95339c2f8fe92e57c796729,apache/tomcat,,"File: java/org/apache/tomcat/jni/SSL.java
Status: modified
```diff
@@ -347,7 +347,7 @@ public static native long newBIO(long pool, BIOCallback callback)
      * {@link #SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION} and tcnative
      * supports that flag.</i>
      *
-     * @param Bitwise-OR of all SSL_OP_* to test.
+     * @param op Bitwise-OR of all SSL_OP_* to test.
      *
      * @return true if all SSL_OP_* are supported by OpenSSL library.
      */
```",Fix broken Javadoc,4,3,4,3,fix typo in SSL javadoc,0,1,4,4,"Style: Add parameter name in method comment In the SSL class, which is responsible for managing SSL/TLS security protocols and certificate handling, a parameter name 'op' was added in the comment of a method. This change does not affect the functionality of the class.",4,4,3,4,"style: Rename Javadoc parameter in SSL.java
No functional changes, only a cosmetic rename to improve code readability."
0dd98c1a6b04a3bfcb63b373ba905605f6aee83e,apache/tomcat,,"File: java/org/apache/tomcat/util/buf/B2CConverter.java
Status: modified
```diff
@@ -138,23 +138,6 @@ public void recycle() {
         leftovers.position(0);
     }
 
-    public boolean isUndeflow() {
-        return (leftovers.position() > 0);
-    }
-
-    /**
-     * Convert the given bytes to characters.
-     *
-     * @param bc byte input
-     * @param cc char output
-     *
-     * @deprecated  Use {@link #convert(ByteChunk, CharChunk, boolean)}
-     */
-    @Deprecated
-    public void convert(ByteChunk bc, CharChunk cc) throws IOException {
-        convert(bc, cc, false);
-    }
-
     /**
      * Convert the given bytes to characters.
      *
```",Remove one deprecated and one unused method,4,4,4,4,remove deprecated code,4,4,4,4,"Refactor: Remove deprecated methods in B2CConverter class The deprecated methods 'isUndeflow' and 'convert(ByteChunk bc, CharChunk cc)' were removed from the B2CConverter class. This class is responsible for converting byte data to character data. The removal of these methods does not affect the overall functionality of the class.",4,4,3,4,"refactor: Remove unused and deprecated methods from B2CConverter
Removed unused `isUndeflow()` method and deprecated `convert(ByteChunk, CharChunk)` method from `B2CConverter` class to eliminate dead code and align with the recommended `convert(ByteChunk, CharChunk, boolean)` method, making the codebase more maintainable and efficient."
d5205523b8592dce9a54181546e100b804c65e26,apache/tomcat,,"File: java/org/apache/catalina/authenticator/BasicAuthenticator.java
Status: modified
```diff
@@ -113,7 +113,7 @@ either the original SSO logon was of DIGEST or SSL (which
 
                 // Use the StringCache as these will be the same between
                 // requests
-                String encoded = authorizationBC.toString();
+                String encoded = authorizationBC.toStringInternal();
                 byte[] decoded = DatatypeConverter.parseBase64Binary(encoded);
 
                 // Get username and password
```",Keep auth headers out of the StringCache,0,0,4,3,remove unused code,0,0,4,4,"Refactor: Change method call in BasicAuthenticator.java In the `authenticate(Request request, HttpServletResponse response)` method, the `toString()` method call has been replaced with `toStringInternal()`. This change does not affect the functionality of the method, which is to authenticate a user based on the request and response. The change is in the implementation details.",4,4,2,4,"fix: Encode authorizationBC using toStringInternal instead of toString
Replace toString() with toStringInternal() to avoid potential information disclosure in authorizationBC encoding, ensuring the security and integrity of HTTP Basic Authentication."
6f31a1e42aa6ee3574874d4a32327c6572397068,apache/tomcat,,"File: java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
Status: modified
```diff
@@ -67,7 +67,7 @@ public class FarmWarDeployer extends ClusterListener
         StringManager.getManager(Constants.Package);
 
     /*--Instance Variables--------------------------------------*/
-    protected boolean started = false; //default 5 seconds
+    protected boolean started = false;
 
     protected final HashMap<String, FileMessageFactory> fileFactories =
         new HashMap<>();
```",remove invalid comment.,4,4,4,4,remove unused field,0,0,4,4,style: Remove comment in FarmWarDeployer.java A comment was removed from the 'started' variable declaration in the FarmWarDeployer.java file. This change does not affect the functionality of the code.,4,3,4,4,"refactor: Remove default value comment from started field
Removed the outdated default value comment '5 seconds' from the `started` field in `FarmWarDeployer` class, as it was no longer relevant to the current implementation."
f136cb430084778482bb7e34577373e41d2030aa,apache/tomcat,,"File: test/javax/el/TesterClass.java
Status: modified
```diff
@@ -20,12 +20,15 @@ public class TesterClass {
 
     public static String publicStaticString = ""publicStaticString"";
     public String publicString = ""publicString"";
+    @SuppressWarnings(""unused"") // Used in TestStaticFieldELREsolver
     private static String privateStaticString = ""privateStaticString"";
+    @SuppressWarnings(""unused"") // Used in TestStaticFieldELREsolver
     private String privateString = ""privateString"";
 
     public TesterClass() {
     }
 
+    @SuppressWarnings(""unused"") // Used in TestStaticFieldELREsolver
     private TesterClass(String privateString) {
         this.privateString = privateString;
     }
```",Silence some Eclipse warnings,4,4,4,4,add TesterClass privateStaticString,0,0,4,2,"feat: Add SuppressWarnings annotations to TesterClass This commit adds SuppressWarnings annotations to some fields and a constructor in the TesterClass.java file. The annotations are added to the private static string and private string fields, as well as to a private constructor. These changes are made to suppress warnings about these fields and constructor being unused, as they are actually used in TestStaticFieldELResolver.",4,4,4,4,"feat: Enhance TesterClass with private string fields and constructor for testing purposes
Introduced private string fields and a constructor to TesterClass, enabling targeted testing of access modifiers and static/non-static variable usage in Java classes, specifically for TestStaticFieldELREsolver."
45f1fb3021b0ad2df4c800afa2e31ca171d63256,apache/tomcat,,"File: java/org/apache/catalina/startup/HostConfig.java
Status: modified
```diff
@@ -81,12 +81,6 @@ public class HostConfig
     // ----------------------------------------------------- Instance Variables
 
 
-    /**
-     * The Java class name of the Context configuration class we should use.
-     */
-    protected String configClass = ""org.apache.catalina.startup.ContextConfig"";
-
-
     /**
      * The Java class name of the Context implementation we should use.
      */
@@ -162,28 +156,6 @@ public class HostConfig
     // ------------------------------------------------------------- Properties
 
 
-    /**
-     * Return the Context configuration class name.
-     */
-    public String getConfigClass() {
-
-        return (this.configClass);
-
-    }
-
-
-    /**
-     * Set the Context configuration class name.
-     *
-     * @param configClass The new Context configuration class name.
-     */
-    public void setConfigClass(String configClass) {
-
-        this.configClass = configClass;
-
-    }
-
-
     /**
      * Return the Context implementation class name.
      */
```",Remove unused class. The name of Context configuration class is acquired from the Host.,4,4,4,4,remove unused code,4,4,4,4,"Refactor: Remove unused `configClass` variable in `HostConfig` The `configClass` variable and its getter and setter methods were removed from the `HostConfig` class. This class configures properties of a host and its associated contexts, and manages their lifecycle events. The removal of the `configClass` variable and its methods does not affect the functionality of the `HostConfig` class.",4,4,4,4,"refactor: Remove unnecessary configClass field and accessor methods
Removed `configClass` field and its accessor methods from `HostConfig` as they were hardcoded to a specific value and not utilized anywhere in the class, making them redundant."
e023baf3790eeac22ad53867e5d95e038342c9f4,apache/tomcat,,"File: java/org/apache/tomcat/util/net/SocketWrapper.java
Status: modified
```diff
@@ -31,10 +31,10 @@ public class SocketWrapper<E> {
     private long timeout = -1;
     private boolean error = false;
     private volatile int keepAliveLeft = 100;
-    private boolean comet = false;
-    private boolean async = false;
+    private volatile boolean comet = false;
+    private volatile boolean async = false;
     private boolean keptAlive = false;
-    private boolean upgraded = false;
+    private volatile boolean upgraded = false;
     private boolean secure = false;
     /*
      * Following cached for speed / reduced GC
```",Observed a hard to reproduce test failure with the non-blocking IO tests. Can't reproduce it yet. Working assumption is that Poller and application thread have a different view of the async field on the SocketWrapper so make all the flags the Poller uses volatile.,4,4,4,4,fix quality flaw,0,0,4,4,"Refactor: Enhance thread safety in SocketWrapper class In the SocketWrapper class, three boolean variables (`comet`, `async`, and `upgraded`) have been changed from non-volatile to volatile. This change is aimed at enhancing the thread safety of the class, which is responsible for managing socket access, state, and properties.",4,4,4,4,"refactor: Make comet, async, and upgraded fields volatile in SocketWrapper
Declared comet, async, and upgraded fields as volatile in SocketWrapper to ensure thread-safe access and modification. This change is crucial in a multi-threaded environment where concurrent access to these fields could lead to unexpected behavior."
e0c00a8a55555ea1902b725ff37bcbfd0608b964,apache/tomcat,,"File: test/org/apache/catalina/valves/TesterAccessLogValve.java
Status: modified
```diff
@@ -84,7 +84,7 @@ public void validateAccessLog(int count, int status, long minTime,
             assertEquals(status, entry.getStatus());
             assertTrue(entry.toString() + "" duration is not >= "" + (minTime - ERROR_MARGIN),
                     entry.getTime() >= minTime - ERROR_MARGIN);
-            assertTrue(entry.toString() + "" duration is not < "" + (maxTime - ERROR_MARGIN),
+            assertTrue(entry.toString() + "" duration is not < "" + (maxTime + ERROR_MARGIN),
                     entry.getTime() < maxTime + ERROR_MARGIN);
         }
     }
```",Correct typo in message printed by validateAccessLog() when a testcase runs too long.,4,4,4,4,fix log message,4,4,4,4,"Fix: Adjust duration check in validateAccessLog method In the validateAccessLog method of the TesterAccessLogValve class, the condition for the duration to be less than maxTime has been adjusted. Previously, the ERROR_MARGIN was subtracted from maxTime, but now it is added. This change does not affect the overall functionality of the method, which continues to validate the access log entries by checking the count, status, and duration of each entry.",4,4,4,4,"fix: Fix duration validation in validateAccessLog method
Updated the duration validation in validateAccessLog method to correctly handle the error margin, ensuring that the maxTime check is inclusive of the margin."
7605a452f697d0c1fed16e8f5c475015c74d5601,apache/tomcat,,"File: java/org/apache/coyote/Response.java
Status: modified
```diff
@@ -481,10 +481,6 @@ public String getContentType() {
         return ret;
     }
 
-    public void setContentLength(int contentLength) {
-        this.contentLength = contentLength;
-    }
-
     public void setContentLength(long contentLength) {
         this.contentLength = contentLength;
     }
```",Remove unnecessary method,4,4,4,4,remove unused method,4,4,4,4,"Refactor: Remove redundant setContentLength method in Response class The setContentLength(int contentLength) method was removed from the Response class. This change is a refactor and does not affect the overall functionality of the class, which handles HTTP responses, including status, headers, content, and error handling.",4,4,3,4,"refactor: Remove redundant setContentLength method
Simplified the Response class by removing the redundant setContentLength method with an int parameter, which is already covered by the long parameter variant, eliminating code duplication."
0b41baf7500b79cfbdfb719bd084fd89bb8b253d,apache/tomcat,Y,"File: webapps/examples/WEB-INF/classes/websocket/echo/EchoAnnotation.java
Status: modified
```diff
@@ -24,6 +24,11 @@
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpoint;
 
+/**
+ * The three annotated echo endpoints can be used to test with Autobahn and
+ * the following command ""wstest -m fuzzingclient -s servers.json"". See the
+ * Autobahn documentation for setup and general information.
+ */
 @ServerEndpoint(""/websocket/echoAnnotation"")
 public class EchoAnnotation {
 
```


File: webapps/examples/WEB-INF/classes/websocket/echo/EchoAsyncAnnotation.java
Status: modified
```diff
@@ -25,7 +25,15 @@
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpoint;
 
-@ServerEndpoint(""/websocket/echoAsyncAnnotation"")
+/**
+ * The three annotated echo endpoints can be used to test with Autobahn and
+ * the following command ""wstest -m fuzzingclient -s servers.json"". See the
+ * Autobahn documentation for setup and general information.
+ *
+ * Note: This one is disabled by default since it allocates memory, and needs
+ * to be enabled back.
+ */
+//@ServerEndpoint(""/websocket/echoAsyncAnnotation"")
 public class EchoAsyncAnnotation {
 
     StringBuilder sb = null;
```


File: webapps/examples/WEB-INF/classes/websocket/echo/EchoStreamAnnotation.java
Status: modified
```diff
@@ -25,6 +25,11 @@
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpoint;
 
+/**
+ * The three annotated echo endpoints can be used to test with Autobahn and
+ * the following command ""wstest -m fuzzingclient -s servers.json"". See the
+ * Autobahn documentation for setup and general information.
+ */
 @ServerEndpoint(""/websocket/echoStreamAnnotation"")
 public class EchoStreamAnnotation {
 
```",Add some info and disable the async test (one CVE saved hehe).,1,3,4,3,add some comments,2,2,4,4,"Style: Add comments to EchoAnnotation, EchoAsyncAnnotation, and EchoStreamAnnotation classes This commit adds comments to the EchoAnnotation, EchoAsyncAnnotation, and EchoStreamAnnotation classes in the webapps/examples/WEB-INF/classes/websocket/echo directory. The comments provide information about the purpose of these classes and how to use them. In EchoAsyncAnnotation.java, the @ServerEndpoint annotation was also commented out.",4,4,4,4,"style: Add Javadoc comments to WebSocket echo endpoint classes
Added Javadoc comments to WebSocket echo endpoint classes (EchoAnnotation, EchoAsyncAnnotation, EchoStreamAnnotation) to document testing instructions with Autobahn, including the command 'wstest -m fuzzingclient -s servers.json' and a reference to Autobahn documentation."
e6859225d43d86d7d7dba609b8401157f4bc6f15,apache/tomcat,Y,"File: java/org/apache/coyote/ajp/AjpAprProtocol.java
Status: modified
```diff
@@ -62,7 +62,7 @@ public AjpAprProtocol() {
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
         // AJP does not use Send File
-        ((AprEndpoint) endpoint).setUseSendfile(false);
+        endpoint.setUseSendfile(false);
     }
 
 
```


File: java/org/apache/coyote/ajp/AjpNio2Protocol.java
Status: modified
```diff
@@ -59,7 +59,7 @@ public AjpNio2Protocol() {
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
         // AJP does not use Send File
-        ((Nio2Endpoint) endpoint).setUseSendfile(false);
+        endpoint.setUseSendfile(false);
     }
 
 
```


File: java/org/apache/coyote/ajp/AjpNioProtocol.java
Status: modified
```diff
@@ -61,7 +61,7 @@ public AjpNioProtocol() {
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
         // AJP does not use Send File
-        ((NioEndpoint) endpoint).setUseSendfile(false);
+        endpoint.setUseSendfile(false);
     }
 
 
```",Remove unnecessary cast,4,4,4,4,remove unnecessary code,4,4,4,4,"Refactor: Simplify setUseSendfile method call in AJP protocol handlers This commit simplifies the method call to setUseSendfile in the AJP protocol handlers AjpAprProtocol, AjpNio2Protocol, and AjpNioProtocol by removing the explicit type casting. This is a refactoring change that improves the structure of the code without altering its functionality.",3,4,4,4,"refactor: Simplify endpoint configuration by removing redundant type casts
Eliminated redundant type casts when setting useSendfile property on endpoint objects, aligning with the polymorphic behavior of the AbstractAjpProtocol class."
5408cdef7bf9e22d47e2305cde278151b32813f3,apache/tomcat,,"File: java/org/apache/jasper/compiler/Generator.java
Status: modified
```diff
@@ -586,7 +586,7 @@ private void genPreambleStaticInitializers() {
                 out.println(""\"");"");
             }
         }
-        if (packages.size() == 0) {
+        if (classes.size() == 0) {
             out.printin(""_jspx_imports_classes = null;"");
             out.println();
         } else {
```","When generating a list of package and class imports, the processing of classes was omitted.",4,4,4,4,fix Generator üòÖ,2,2,4,3,"Fix: Update condition in genPreambleStaticInitializers method The condition in the genPreambleStaticInitializers method of the Generator class has been updated. Previously, the condition checked if the size of the 'packages' set was zero. Now, it checks if the size of the 'classes' set is zero. This change ensures that the '_jspx_imports_classes' variable is correctly initialized. The Generator class is responsible for generating Java source code from Nodes for servlets and tag handlers. This change is crucial for the correct generation of the preamble of the static initializers for the JSP factory, dependencies, and imports.",4,4,4,4,"refactor: Replace packages with classes in genPreambleStaticInitializers
Renamed the 'packages' variable to 'classes' in genPreambleStaticInitializers, aligning with the actual data structure used, to improve code consistency and reduce potential confusion."
b8f901a11afe72d1e6b4f3fc8a33b97c92a41690,apache/tomcat,,"File: java/org/apache/tomcat/util/net/SocketWrapperBase.java
Status: modified
```diff
@@ -472,7 +472,10 @@ protected void writeNonBlocking(byte[] buf, int off, int len) throws IOException
                     socketBufferHandler.configureWriteBufferForWrite();
                     thisTime = transfer(buf, off, len, socketBufferHandler.getWriteBuffer());
                 } else {
-                    thisTime = 0;
+                    // Didn't write any data in the last non-blocking write.
+                    // Therefore the write buffer will still be full. Nothing
+                    // else to do here. Exit the loop.
+                    break;
                 }
                 len = len - thisTime;
             }
```",Fix an infinite loop.,4,4,4,4,fix a bug in SocketWrapperBase,4,2,4,4,"Fix: Prevent blocking in writeNonBlocking method In the `writeNonBlocking` method of the `SocketWrapperBase.java` file, changes were made to prevent the method from blocking when the write buffer is full. Previously, if the write buffer was not writable, the data was added to the buffer and the method would block. Now, if the write buffer is full, the remaining data is buffered internally, preventing a blocking condition.",4,4,4,4,"fix: Exit loop when no data is written in non-blocking mode
Exits the loop early when no data is written in non-blocking mode, avoiding unnecessary iterations and ensuring the write buffer remains full, as intended."
5e6b3a21134e0d21e77396723250ade9ed9e37e8,apache/tomcat,,"File: java/org/apache/tomcat/util/net/AbstractEndpoint.java
Status: modified
```diff
@@ -52,7 +52,7 @@ public abstract class AbstractEndpoint<S> {
 
     // -------------------------------------------------------------- Constants
 
-    protected static final String DEFAULT_CIPHERS = ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5"";
+    protected static final String DEFAULT_CIPHERS = ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA"";
 
     protected static final StringManager sm = StringManager.getManager(
             AbstractEndpoint.class.getPackage().getName());
```",Exclude cipher suites that use RSA key exchange. The remaining ciphers (with Java 8 at least) all then support forward secrecy.,4,4,4,4,remove unused code,0,0,4,4,"Fix: Update default ciphers in AbstractEndpoint The default ciphers used in the AbstractEndpoint class, which manages server socket connections, have been updated. The previous cipher string ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5"" has been replaced with ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA"". This change is part of a fix to improve the security of the server socket connections managed by the AbstractEndpoint class.",4,4,4,4,"fix: Exclude kRSA from default ciphers
This change excludes kRSA from the default ciphers to align with security best practices, as kRSA is considered insecure. The updated DEFAULT_CIPHERS constant in AbstractEndpoint.java ensures a more secure connection configuration."
f122c5fa68414fe32f6d17abac954130f5864d60,apache/tomcat,,"File: java/org/apache/catalina/realm/JNDIRealm.java
Status: modified
```diff
@@ -1150,7 +1150,7 @@ public String getHostnameVerifierClassName() {
      *            class name of the {@link HostnameVerifier} to be constructed
      */
     public void setHostnameVerifierClassName(String verifierClassName) {
-        if (hostNameVerifierClassName != null) {
+        if (verifierClassName != null) {
             this.hostNameVerifierClassName = verifierClassName.trim();
         } else {
             this.hostNameVerifierClassName = null;
```","Use the right variable for null check; the method variable, that is.",4,4,4,4,fix npe in JNDIRealm,0,0,4,4,"Fix: Correct condition in setHostnameVerifierClassName method The condition checked before setting the hostNameVerifierClassName in the JNDIRealm class was corrected. Previously, the condition checked if the class variable hostNameVerifierClassName was not null. Now, it checks if the parameter verifierClassName is not null. This change ensures that the hostNameVerifierClassName is set correctly",4,4,4,4,"fix: Fix inconsistent variable naming in setHostnameVerifierClassName method
This change fixes a naming inconsistency in the setHostnameVerifierClassName method, ensuring that the variable name aligns with the method's parameter name, improving code readability and maintainability."
50ba973a15874c2597b26f45fd7edc7d92dfd985,apache/tomcat,,"File: modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
Status: modified
```diff
@@ -150,7 +150,7 @@ public void poolStarted(ConnectionPool pool) {
     @Override
     protected String reportFailedQuery(String query, Object[] args, String name, long start, Throwable t) {
         query = super.reportFailedQuery(query, args, name, start, t);
-        notifyJmx(query,FAILED_QUERY_NOTIFICATION);
+        if (isLogFailed()) notifyJmx(query,FAILED_QUERY_NOTIFICATION);
         return query;
     }
 
@@ -184,7 +184,7 @@ protected void notifyJmx(String query, String type) {
     @Override
     protected String reportSlowQuery(String query, Object[] args, String name, long start, long delta) {
         query = super.reportSlowQuery(query, args, name, start, delta);
-        notifyJmx(query,SLOW_QUERY_NOTIFICATION);
+        if (isLogSlow()) notifyJmx(query,SLOW_QUERY_NOTIFICATION);
         return query;
     }
 
```","In SlowQueryReportJmx, the LogSlow and logFailed attributes that inherited from SlowQueryReport are used as a condition of whether JMX notifications are sent.",4,4,4,4,fix SlowQueryReportJmx reportFailedQuery,1,3,4,4,Fix: Add logging condition before JMX notification in SlowQueryReportJmx This commit adds a condition to check if logging of slow or failed queries is enabled before notifying JMX in the `reportSlowQuery` and `reportFailedQuery` methods of the `SlowQueryReportJmx.java` file. This prevents unnecessary JMX notifications when logging is not enabled.,4,4,4,4,"fix: Conditionally report slow and failed queries to JMX
This commit makes reporting of slow and failed queries to JMX conditional on the corresponding logging configurations. It updates the `reportSlowQuery` and `reportFailedQuery` methods in `SlowQueryReportJmx` to check the logging settings before sending JMX notifications, enhancing flexibility and control over query reporting."
02018b6a8c031145e1917e29ef1b62d0c06996f4,apache/tomcat,,"File: test/org/apache/coyote/http2/TestHttp2Section_6_9.java
Status: modified
```diff
@@ -203,6 +203,22 @@ public void testWindowSizeAndSettingsFrame() throws Exception {
                 ""3-Body-4096\n"", output.getTrace());
                 output.clearTrace();
 
+        // Now use a settings frame to further reduce the size of the flow
+        // control window. This should make the stream 3 window negative
+        sendSettings(0, false, new SettingValue(4, 2 * 1024));
+        // Ack
+        parser.readFrame(true);
+        Assert.assertEquals(""0-Settings-Ack\n"", output.getTrace());
+        output.clearTrace();
+
+        // Now use a settings frame to increase the size of the flow control
+        // window. The stream 3 window should still be negative
+        sendSettings(0, false, new SettingValue(4, 3 * 1024));
+        // Ack
+        parser.readFrame(true);
+        Assert.assertEquals(""0-Settings-Ack\n"", output.getTrace());
+        output.clearTrace();
+
         // Do a POST that won't be affected by the above limit
         sendSimplePostRequest(5, null);
         // Window size updates after reading POST body
```","Expand the test to ensure that once the flow control window goes negative, nothing is written until it becomes positive again.",4,4,4,4,add test for üòÖ,0,1,4,4,Feat: Enhance testWindowSizeAndSettingsFrame() in TestHttp2Section_6_9.java This commit enhances the `testWindowSizeAndSettingsFrame()` method in the `TestHttp2Section_6_9.java` file to test the behavior of the HTTP/2 flow control mechanism. It checks if the window size is correctly updated and if the flow control window can handle changes in size. This enhancement provides more comprehensive testing of the HTTP/2 flow control mechanism.,4,4,4,4,"refactor: Enhance testWindowSizeAndSettingsFrame to cover negative window scenarios
This commit extends testWindowSizeAndSettingsFrame to cover negative window scenarios by adding settings frames that reduce and increase the flow control window size, ensuring correct handling of window size and settings frames in HTTP/2 connections."
6bd6795f7596d2d711d1bf40fdb932d0b7ee26e4,apache/tomcat,,"File: java/org/apache/coyote/http2/Http2UpgradeHandler.java
Status: modified
```diff
@@ -524,7 +524,7 @@ void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws
                 if (!stream.isActive()) {
                     activeRemoteStreamCount.decrementAndGet();
                 }
-             }
+            }
             ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());
             socketWrapper.write(true, header, 0, header.length);
             socketWrapper.write(true, data.array(), data.arrayOffset() + data.position(),
@@ -545,6 +545,7 @@ void writeWindowUpdate(Stream stream, int increment) throws IOException {
             // Change stream Id and re-use
             ByteUtil.set31Bits(frame, 5, stream.getIdentifier().intValue());
             socketWrapper.write(true, frame, 0, frame.length);
+            socketWrapper.flush(true);
         }
     }
 
```",A flush seems to be missing when writing a window update [for consistency at least].,4,4,4,4,add missing newline,0,0,4,4,Style: Correct indentation and add flush operation Corrected the indentation in the writeBody method and added a flush operation in the writeWindowUpdate method in the Http2UpgradeHandler class. The functionality of the methods remains unchanged.,4,4,4,4,"fix: Fix missing flush in writeBody method
This commit fixes a potential data loss issue by ensuring that the socket wrapper is properly flushed after writing the header and payload to the remote peer, maintaining the integrity of the HTTP/2 connection."
878dda058cd45b3d4c48d165daa351fb4bed698a,apache/tomcat,,"File: java/org/apache/tomcat/util/net/NioEndpoint.java
Status: modified
```diff
@@ -1161,7 +1161,7 @@ public int read(boolean block, byte[] b, int off, int len)
 
             // Fill the read buffer as best we can.
             int nRead = fillReadBuffer(block);
-            lastRead = System.currentTimeMillis();
+            updateLastRead();
 
             // Full as much of the remaining byte array as possible with the
             // data that was just read
@@ -1246,7 +1246,7 @@ protected void doWrite(boolean block) throws IOException {
                         if (getSocket().flush(true, selector, writeTimeout)) break;
                     } while (true);
                 }
-                lastWrite = System.currentTimeMillis();
+                updateLastWrite();
             } finally {
                 if (selector != null) {
                     pool.put(selector);
```",Use methods updateLastRead/updateLastWrite instead of direct update of lastRead/lastWrite.,0,4,4,4,fix a bug in NioEndpoint,0,1,4,4,"Refactor: Replace direct calls to System.currentTimeMillis() in NioEndpoint.java In the methods doWrite and read in the NioEndpoint.java file, replaced direct calls to System.currentTimeMillis() with calls to the methods updateLastRead() and updateLastWrite(). This change does not affect the functionality of the methods, but rather how they handle time tracking.",4,4,4,4,"fix: Update last read and write timestamps to use separate methods
This commit refactors the `doWrite` and `read` methods in `NioEndpoint` to use separate methods for updating last read and write timestamps, enhancing code maintainability and reducing duplicated logic."
8ee194059d40bd3c51ff6893384ab7a00d15899a,apache/tomcat,,"File: test/org/apache/catalina/loader/TestWebappClassLoader.java
Status: modified
```diff
@@ -36,8 +36,8 @@ public void testGetURLs() throws Exception {
 
         String[] expected = new String[2];
         String warUrl = f.toURI().toURL().toExternalForm();
-        expected[0] = ""jar:"" + warUrl + ""!/WEB-INF/classes/"";
-        expected[1] = ""jar:"" + warUrl + ""!/WEB-INF/lib/test.jar"";
+        expected[0] = ""war:"" + warUrl + ""*/WEB-INF/classes/"";
+        expected[1] = ""war:"" + warUrl + ""*/WEB-INF/lib/test.jar"";
 
         Tomcat tomcat = getTomcatInstance();
 
```",Update test to check for new URL form,4,4,4,4,fix test on windows,0,1,4,4,"Fix: Update expected URLs in TestWebappClassLoader This commit updates the expected URLs in the `testGetURLs()` method of the `TestWebappClassLoader` class. The URLs, which were previously expected to start with ""jar:"", are now expected to start with ""war:"". This change ensures that the test accurately reflects the URLs returned by the URLClassLoader when a WAR file is loaded into a Tomcat server.",4,4,4,4,"refactor: Correct URL patterns for WAR files in TestWebappClassLoader
Refactored the URL patterns in TestWebappClassLoader to correctly handle WAR files by updating the expected URLs to use 'war:' prefixes instead of 'jar:', ensuring that the URLs returned by the URLClassLoader match the expected URLs for a Tomcat context loaded from a WAR file. This change aligns the test with the correct URL pattern for WAR files, improving the test's accuracy and reliability."
e2093b565580bcb6849b990db2838d21e0090b3a,apache/tomcat,,"File: java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
Status: modified
```diff
@@ -335,8 +335,21 @@ private void validatePropertyNames(final Reference ref, final Name name, final L
      * @return the data source instance
      * @throws Exception if an error occurs creating the data source
      */
-    public static BasicDataSource createDataSource(final Properties properties) throws Exception {
+    public BasicDataSource createDataSource(final Properties properties) throws Exception {
         final BasicDataSource dataSource = new BasicDataSource();
+        configureDataSource(dataSource, properties);
+        return dataSource;
+    }
+
+    /**
+     * Configures a {@link BasicDataSource} instance based on the
+     * given properties.
+     *
+     * @param properties the datasource configuration properties
+     * @param dataSource the data source instance
+     * @throws Exception if an error occurs creating the data source
+     */
+    public void configureDataSource(final BasicDataSource dataSource, final Properties properties) throws Exception {
         String value = null;
 
         value = properties.getProperty(PROP_DEFAULTAUTOCOMMIT);
@@ -595,9 +608,6 @@ else if (""SERIALIZABLE"".equalsIgnoreCase(value)) {
         if (dataSource.getInitialSize() > 0) {
             dataSource.getLogWriter();
         }
-
-        // Return the configured DataSource instance
-        return dataSource;
     }
 
     /**
```",Make it possible to extend the BasicDataSource object factory without having to copy everything.,3,3,4,4,add BasicDataSourceFactory createDataSource method,0,1,4,4,Refactor: Update createDataSource and add configureDataSource in BasicDataSourceFactory This commit updates the `createDataSource` method in the `BasicDataSourceFactory` class to create and configure a `BasicDataSource` object using the provided properties. A new method `configureDataSource` has been added to configure a `BasicDataSource` object with properties from a `Properties` object. These changes improve the modularity and readability of the code.,4,4,4,4,"refactor: Extract configureDataSource method from createDataSource
Extracted `configureDataSource` method to encapsulate data source configuration logic, enhancing code organization and reusability in `BasicDataSourceFactory`."
4f7a7e85eac3b6aef7d2148bf61e6c0dba173248,apache/tomcat,,"File: java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
Status: modified
```diff
@@ -50,25 +50,14 @@
  * restarted!
  *
  * <p>
- * Add this Valve to your host definition at conf/server.xml .
- *
- * Since 5.5.10 as direct cluster valve:<br>
+ * Add this Valve to your cluster definition at conf/server.xml .
  *
  * <pre>
  *  &lt;Cluster&gt;
  *  &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot; /&gt;
  *  &lt;/Cluster&gt;
  * </pre>
  *
- * <br>
- * Before 5.5.10 as Host element:<br>
- *
- * <pre>
- *  &lt;Host&gt;
- *  &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot; /&gt;
- *  &lt;/Host&gt;
- * </pre>
- *
  * <em>A Trick:</em><br>
  * You can enable this mod_jk turnover mode via JMX before you drop a node to
  * all backup nodes! Set enable true on all JvmRouteBinderValve backups, disable
```",Fix javadoc. remove old description.,4,4,4,4,fix javadoc typos,0,1,4,4,Refactor: Update documentation in JvmRouteBinderValve.java This commit updates the documentation in the JvmRouteBinderValve.java file. The instructions on how to add this Valve to the configuration have been updated. The changes do not affect the functionality of the code.,4,4,4,4,"style: Remove outdated cluster and host configuration examples from JvmRouteBinderValve JavaDoc
Removed outdated configuration examples to simplify JavaDoc and prevent confusion."
778890c392dda8cd845db6871ca3ab9ead8b38bc,apache/tomcat,,"File: java/org/apache/tomcat/util/compat/JrePlatform.java
Status: modified
```diff
@@ -23,8 +23,6 @@
 public class JrePlatform {
 
     private static final String OS_NAME_PROPERTY = ""os.name"";
-    private static final String OS_NAME_WINDOWS_PREFIX = ""Windows"";
-    private static final String OS_NAME_MAC_OS_LC_PREFIX = ""mac os x"";
 
     static {
         /*
@@ -53,9 +51,9 @@ public String run() {
                 });
         }
 
-        IS_MAC_OS = osName.toLowerCase(Locale.ENGLISH).startsWith(OS_NAME_MAC_OS_LC_PREFIX);
+        IS_MAC_OS = osName.toLowerCase(Locale.ENGLISH).startsWith(""mac os x"");
 
-        IS_WINDOWS = osName.startsWith(OS_NAME_WINDOWS_PREFIX);
+        IS_WINDOWS = osName.startsWith(""Windows"");
     }
 
 
```",Inlined strings that are used only once,4,4,4,4,remove unused constant,0,1,4,4,Refactor: Remove redundant constants in JrePlatform.java This commit removes the constants OS_NAME_WINDOWS_PREFIX and OS_NAME_MAC_OS_LC_PREFIX in JrePlatform.java and uses their values directly in the code. This simplifies the code and improves readability.,4,4,4,4,"refactor: Replace OS name constants with literals in JrePlatform
Removed unnecessary OS name constants, replacing them with literals, to reduce complexity and improve code readability in JrePlatform. This refactoring maintains the original functionality and does not introduce any behavioral changes."
32520eb992d0bdf2fccbc5702f957fd66a267f33,apache/tomcat,,"File: java/org/apache/tomcat/buildutil/translate/Utils.java
Status: modified
```diff
@@ -29,6 +29,7 @@ public class Utils {
 
     private static final Pattern ADD_CONTINUATION = Pattern.compile(""\\n"", Pattern.MULTILINE);
     private static final Pattern ESCAPE_LEADING_SPACE = Pattern.compile(""^(\\s)"", Pattern.MULTILINE);
+    private static final Pattern FIX_SINGLE_QUOTE = Pattern.compile(""([^'])'([^'])"", Pattern.MULTILINE);
 
     private Utils() {
         // Utility class. Hide default constructor.
@@ -63,6 +64,10 @@ static String formatValue(String in) {
         if (result.contains(""\n\\\t"")) {
             result = result.replace(""\n\\\t"", ""\n\\t"");
         }
+
+        if (result.contains(""[{0}]"")) {
+            result = FIX_SINGLE_QUOTE.matcher(result).replaceAll(""$1''$2"");
+        }
         return result;
     }
 }
```",Fix single quotes in strings with replacements on import/export rather than trying to do it manually in POEditor.,4,4,4,4,add support for fix,4,3,4,4,Feat: Handle single quotes within brackets in Utils.formatValue method This commit modifies the `formatValue` method in the `Utils` class to handle single quotes within brackets in addition to its previous functionality of adding continuation characters and escaping leading spaces. This change does not relate to any issue or pull request.,4,4,4,4,"refactor: Escape single quotes in formatted strings
Refactor the formatValue method to properly escape single quotes in formatted strings, ensuring correct output for SQL statements. This change enhances the method's functionality and improves the internal structure of the Utils class."
563f85ab1076fdf7329b2c6cbae22d64a859d572,apache/tomcat,,"File: java/org/apache/catalina/connector/Connector.java
Status: modified
```diff
@@ -321,36 +321,6 @@ public boolean setProperty(String name, String value) {
     }
 
 
-    /**
-     * Return a property from the protocol handler.
-     *
-     * @param name the property name
-     * @return the property value
-     *
-     * @deprecated Use {@link #getProperty(String)}. This will be removed in
-     *             Tomcat 10 onwards.
-     */
-    @Deprecated
-    public Object getAttribute(String name) {
-        return getProperty(name);
-    }
-
-
-    /**
-     * Set a property on the protocol handler.
-     *
-     * @param name the property name
-     * @param value the property value
-     *
-     * @deprecated Use {@link #setAttribute(String, Object)}. This will be
-     *             removed in Tomcat 10 onwards.
-     */
-    @Deprecated
-    public void setAttribute(String name, Object value) {
-        setProperty(name, String.valueOf(value));
-    }
-
-
     /**
      * @return the <code>Service</code> with which we are associated (if any).
      */
```",Remove deprecated code,4,4,4,4,remove deprecated code,4,4,4,4,"Refactor: Remove deprecated methods from Connector.java The deprecated methods `getAttribute(String name)` and `setAttribute(String name, Object value)` have been removed from the `Connector.java` file. These methods were previously marked for removal in Tomcat 10. The removal of these methods does not affect the functionality of the class.",4,4,4,4,"refactor: Remove deprecated getAttribute and setAttribute methods
Removed deprecated getAttribute and setAttribute methods in Connector.java, aligning with the planned deprecation schedule for Tomcat 10 onwards, to simplify the codebase and prevent potential issues."
a4490a2af64308cfdd9cc92663fd390380aee1a2,apache/tomcat,,"File: test/org/apache/catalina/users/DataSourceUserDatabaseTests.java
Status: modified
```diff
@@ -16,11 +16,13 @@
  */
 package org.apache.catalina.users;
 
+import java.io.File;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.Statement;
 import java.util.Iterator;
 
+import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -109,6 +111,11 @@ public Connection getConnection() {
 
     private DerbyUserDatabase db;
 
+    @AfterClass
+    public static void derbyCleanup() {
+        System.out.println(""Deleted derby.log: "" + (new File(""derby.log"")).delete());
+    }
+
     @Test
     public void testBasicUserRoleDatabase()
         throws Exception {
@@ -156,6 +163,7 @@ public void testBasicUserRoleDatabase()
         Assert.assertFalse(""Unexpected role for user"", tomcatUser.isInRole(managerRole));
 
         db.close();
+
     }
 
     @Test
@@ -224,5 +232,6 @@ public void testUserDatabase()
         Assert.assertTrue(""No group for user"", randomUser.isInGroup(userGroup));
 
         db.close();
+
     }
 }
```",Cleanup derby.log,4,4,4,4,add test case for DataSourceUserDatabaseTests,0,1,4,4,"Feat: Add cleanup method and modify test methods in DataSourceUserDatabaseTests This commit introduces a new method, derbyCleanup(), to the DataSourceUserDatabaseTests class. This method is responsible for cleaning up the Derby database after all tests have run.  In addition, minor modifications were made to the testUserDatabase() and testBasicUserRoleDatabase() methods. These changes involve the addition of a new line after the db.close() call in each method.  These changes improve the cleanliness and readability of the test code, and ensure proper cleanup of resources after tests are run.",4,4,4,4,"refactor: Introduce derbyCleanup method for test class teardown
This commit introduces a `derbyCleanup` method to ensure proper cleanup of derby logs after test class execution, preventing potential issues with leftover logs and improving overall test reliability."
f1e8677a6cf85b899ba4727728b10cccdc79b39f,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java
Status: modified
```diff
@@ -505,7 +505,7 @@ private void deploy(EjbModule ejbModule) throws OpenEJBException {
 
 
             // mdb message destination id
-            if (bean instanceof MessageDrivenBean) {
+            if (autoCreateResources && bean instanceof MessageDrivenBean) {
                 MessageDrivenBean mdb = (MessageDrivenBean) bean;
 
                 ResourceLink resourceLink = ejbDeployment.getResourceLink(""openejb/destination"");
```",Don't try to config mdb destination if we aren't auto creating resources.,0,4,4,4,fix bug in AutoConfig,2,2,4,4,Feat: Add condition to check autoCreateResources in AutoConfig This commit adds a condition to check if autoCreateResources is true before proceeding with the deployment of the EJB module in the AutoConfig class. This change is likely to prevent unnecessary resource creation when it's not needed. The deploy method in the AutoConfig class has been modified to include this condition.,4,4,4,4,"fix: Add autoCreateResources check for MessageDrivenBean deployment
This commit adds a conditional check for autoCreateResources in the deploy method of AutoConfig, ensuring that resources are only created when explicitly enabled, to prevent unintended resource creation for MessageDrivenBean deployments."
5704ec0bd450554706b69906e5cf519c59ca9a71,apache/tomee,Y,"File: container/openejb-core/src/main/java/org/apache/openejb/util/SuperProperties.java
Status: modified
```diff
@@ -58,7 +58,7 @@
  * @see java.lang.System#getProperties
  */
 public class SuperProperties extends Properties {
-    private static final String LINE_SEPARATOR = System.getProperty(""line.separator"");
+    private static final String LINE_SEPARATOR = ""\n"";
 
     private static final String PROP_DTD_NAME = ""http://java.sun.com/dtd/properties.dtd"";
 
```


File: container/openejb-core/src/test/java/org/apache/openejb/util/SuperPropertiesTest.java
Status: modified
```diff
@@ -351,7 +351,7 @@ public void testIndentDetection() throws Exception {
         assertEquals(2, properties.getCommentIndent());
     }
 
-    protected String store(Properties properties) throws IOException {
+    protected String store(Properties properties) throws IOException {        
         ByteArrayOutputStream out = new ByteArrayOutputStream();
         properties.store(out, null);
         return new String(out.toByteArray());
```",Fix property handling on Windows,3,3,4,4,fix SuperProperties store,2,2,4,4,"Fix: Standardize line separator in SuperProperties This commit standardizes the line separator in the SuperProperties class to ""\n"". Previously, the line separator was obtained from the system properties, which could vary across different systems. This change ensures consistency across all systems. Additionally, a new method, store(Properties properties), was added to the SuperPropertiesTest class. This method converts the given properties into a string format, which could be related to the change in the line separator.",1,2,3,4,"refactor: Use fixed newline character for LINE_SEPARATOR in SuperProperties
Replaced system-dependent newline character with fixed '
' in LINE_SEPARATOR, ensuring consistent behavior across platforms. Also, added a utility method store(Properties properties) to SuperPropertiesTest for serializing Properties objects."
5e73258c58c5a142d68ec19bf846a9ede8583c8c,apache/tomee,,"File: container/openejb-loader/src/main/java/org/apache/openejb/loader/JarLocation.java
Status: modified
```diff
@@ -38,7 +38,7 @@ public static File jarLocation(Class clazz) {
 
             URI uri = classURL.toURI();
             if (uri.getPath() == null){
-                uri = new URI(uri.getSchemeSpecificPart());
+                uri = new URI(uri.getRawSchemeSpecificPart());
             }
 
             String path = uri.getPath();
```",Fix uri creation bug,3,3,4,4,use the correct raw uri in JarLocation,3,3,4,4,"Fix: Use getRawSchemeSpecificPart in jarLocation method This commit changes the method `getSchemeSpecificPart()` to `getRawSchemeSpecificPart()` in the `jarLocation(Class clazz)` method in the JarLocation.java file. The functionality of the method remains the same, indicating that this change is likely a bug fix in the implementation details.",4,4,4,4,"fix: Fix URI creation in JarLocation
Fixed URI creation in JarLocation by using getRawSchemeSpecificPart instead of getSchemeSpecificPart, which previously caused issues when the URI path was null."
7f910176aa35fd411c6c7c82cca4c15f7bdf0553,apache/tomee,,"File: server/openejb-client/src/main/java/org/apache/openejb/client/ConnectionManager.java
Status: modified
```diff
@@ -29,6 +29,7 @@ public class ConnectionManager {
 
         factories.register(""default"", ejbdFactory);
         factories.register(""ejbd"", ejbdFactory);
+        factories.register(""ejbds"", ejbdFactory);
 
         HttpConnectionFactory httpFactory = new HttpConnectionFactory();
         factories.register(""http"", httpFactory);
```",ejbds should be enabled,0,4,4,4,add üòÖ to ConnectionManager,0,1,4,3,"Feat: Register new factory ""ejbds"" in ConnectionManager This commit registers a new factory ""ejbds"" with the ejbdFactory in the ConnectionManager class. The ConnectionManager class manages connections, strategies, and factories for different connection types and schemes. This change is part of a feature enhancement.",4,3,4,4,"feat: Register ejbds connection factory in ConnectionManager.
Registered ejbds connection factory in ConnectionManager to enable connections to ejbds servers, expanding the range of supported connection strategies and factories."
cf61a0e74d91b8bd28979cc747f529704b263993,apache/tomee,,"File: api/ejb31-api-experimental/src/main/java/javax/annotation/ManagedBean.java
Status: modified
```diff
@@ -22,8 +22,10 @@
 package javax.annotation;
 
 /**
- * @version $Revision$ $Date$
+ * @version $Rev$ $Date$
  */
+@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE})
+@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
 public @interface ManagedBean {
     java.lang.String value() default """"; 
 }
```",ManagedBean annotation should be available at runtime and be type-only assignable,0,4,4,4,add üòÖ annotation,0,1,4,3,Feat: Update annotations in ManagedBean.java This commit updates the ManagedBean.java file by adding two new annotations: @Target and @Retention. These annotations specify the applicable targets and the retention policy for the ManagedBean annotation. The version comment has also been updated.,4,4,4,4,"style: Update ManagedBean annotation
Added @Target and @Retention annotations to ManagedBean to specify its usage and retention policy, and updated the version format to use $Rev$ $Date$ for consistency."
c23bac9d2e69bb9b660a8b9e1eca3e39598264d5,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/util/URLs.java
Status: modified
```diff
@@ -16,9 +16,11 @@
  */
 package org.apache.openejb.util;
 
+
+import static org.apache.openejb.loader.JarLocation.decode;
+
 import java.io.File;
 import java.net.MalformedURLException;
-import java.net.URISyntaxException;
 import java.net.URL;
 
 /**
@@ -42,11 +44,7 @@ public static File toFile(URL url) {
                 throw new IllegalStateException(e);
             }
         } else if (""file"".equals(url.getProtocol())) {
-            try {
-                return new File(url.toURI().getPath());
-            } catch (URISyntaxException e) {
-                throw new IllegalArgumentException(""bad url "" + url.toExternalForm(), e);
-            }
+            return new File(decode(url.getFile()));
         } else {
             throw new IllegalArgumentException(""Unsupported URL scheme: "" + url.toExternalForm());
         }
```",Reverting unintentional change,3,0,4,4,replace URISyntaxException with URISyntaxException,0,0,4,0,"Refactor: Simplify URL to File conversion in URLs.java This commit simplifies the method toFile(URL url) in the URLs.java file. The method still converts a URL to a File object, but the implementation has been changed to use the decode method from the JarLocation class. This change simplifies the code and removes the need for a try-catch block.",4,4,4,4,"refactor: Simplify URL to File conversion using decode
Simplified URL to File conversion by removing unnecessary URI handling, making the code more maintainable and easier to understand."
919ffa4c42c0d2d37a3da8322a592d91796f2108,apache/tomee,,"File: examples/testing-transactions/src/test/java/org/superbiz/injection/tx/MoviesTest.java
Status: modified
```diff
@@ -28,8 +28,11 @@
 
 import static javax.ejb.TransactionAttributeType.REQUIRES_NEW;
 
+/**
+ * See the transaction-rollback example as it does the same thing
+ * via UserTransaction and shows more techniques for rollback 
+ */
 //START SNIPPET: code
-
 public class MoviesTest extends TestCase {
 
     @EJB
```",Added some comments about the transaction-rollback example,4,4,4,4,remove TestCase from MoviesTest,0,1,4,4,Style: Add comment to MoviesTest.java A comment was added to the MoviesTest.java file to provide additional information about the transaction-rollback example. The comment suggests that the transaction-rollback example does the same thing via UserTransaction and shows more techniques for rollback.,4,2,3,4,"style: Add Javadoc comment to MoviesTest class
This Javadoc comment was added to provide context for users who may not be familiar with the transaction-rollback example, which is closely related to the functionality tested in MoviesTest."
5e52f14fc533ab7f29949f19830bc88a7c12c08f,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiBuilder.java
Status: modified
```diff
@@ -24,6 +24,7 @@
 import org.apache.openejb.assembler.classic.EjbJarInfo;
 import org.apache.openejb.core.ThreadContext;
 import org.apache.openejb.loader.SystemInstance;
+import org.apache.webbeans.config.WebBeansContext;
 import org.apache.webbeans.config.WebBeansFinder;
 import org.apache.webbeans.logger.WebBeansLogger;
 
@@ -33,11 +34,16 @@
 public class CdiBuilder {
     private static final WebBeansLogger logger = WebBeansLogger.getLogger(CdiBuilder.class);
 
+    private static final WebBeansContext noContext = new WebBeansContext();
+
     public CdiBuilder() {
     }
 
     public void build(AppInfo appInfo, AppContext appContext, List<BeanContext> allDeployments) {
-        if (!hasBeans(appInfo)) return;
+        if (!hasBeans(appInfo)) {
+            appContext.setWebBeansContext(noContext);
+            return;
+        }
 
         ThreadSingletonService singletonService = SystemInstance.get().getComponent(ThreadSingletonService.class);
         logger.info(""existing thread singleton service in SystemInstance() "" + singletonService);
```","Use an ""empty"" context if there is no beans.xml",2,4,4,4,fix failing test,0,0,4,4,"feat: Set WebBeansContext to noContext for apps without beans In the CdiBuilder class, the build method now sets the WebBeansContext to a new instance of WebBeansContext (noContext) if the application does not have any beans. This change could potentially affect the initialization and building of the CDI context.",4,4,4,4,"refactor: Initialize WebBeansContext in CdiBuilder
Refactor the build method in CdiBuilder to initialize WebBeansContext, ensuring a consistent context setup for applications with or without beans. This change simplifies the method's logic and improves the overall structure of the class."
7f64b4e307a62586421545c8448d89e7e6fac10a,apache/tomee,,"File: container/openejb-activemq4/src/test/java/org/apache/openejb/core/mdb/JmsProxyTest.java
Status: modified
```diff
@@ -24,8 +24,6 @@
 
 public class JmsProxyTest extends JmsTest {
 
-    // set up in the parent class
-
     public void testProxy() throws Exception {
         // create reciever object
         JmsProxyTest.TestObject testObject = new JmsProxyTest.TestObject(""foo"");
```",Remove not relevant comment,4,4,4,4,remove unused method,0,0,4,4,"Refactor: Remove unnecessary comment in JmsProxyTest.java The comment line ""set up in the parent class"" was removed from the JmsProxyTest.java file. This change does not affect the functionality of the class, which tests the functionality of a JMS proxy using a test object and interface.",4,4,3,4,"style: Remove redundant whitespace and comments from JmsProxyTest.java
No functional changes were made to JmsProxyTest.java; this commit solely focuses on removing unnecessary whitespace and comments to improve code readability."
00b9c65f73a6b263b56f304a518e921434e357e8,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java
Status: modified
```diff
@@ -103,7 +103,7 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {
             for (URL persistenceUrl : persistenceUrls) {
                 String moduleName = """";
                 String path;
-                if (""file"".equals(persistenceUrl.getProtocol())) {
+                if (!persistenceUrl.toString().contains(""!"")) {
                     File file = URLs.toFile(persistenceUrl);
                     path = file.getAbsolutePath();
 
```",fixing modulename in readdescriptor for persistence,4,4,4,4,fix descriptors in descriptors,0,0,4,0,"Fix: Update condition in deploy method This commit updates the condition in the `deploy` method of the `ReadDescriptors` class. The change modifies the way the method processes the modules of an `AppModule` during deployment. The previous condition checked if the protocol of the `persistenceUrl` is ""file"". The updated condition checks if the `persistenceUrl` does not contain ""!"". This change is classified as a fix, suggesting it was made to correct a problem in the method's functionality.",4,4,3,4,"fix: Use URL toString instead of getProtocol to determine persistence URL type
This change updates the persistence URL type detection in ReadDescriptors.java to use toString instead of getProtocol, ensuring correct identification of URLs and preventing potential issues during application module deployment."
3d812b426f7487bf07fadc9199f3903fa3958358,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/DataSourceFactory.java
Status: modified
```diff
@@ -24,14 +24,13 @@
 import org.apache.commons.dbcp.managed.XAConnectionFactory;
 import org.apache.openejb.loader.SystemInstance;
 import org.apache.openejb.resource.XAResourceWrapper;
-import org.apache.xbean.recipe.ObjectRecipe;
-import org.apache.xbean.recipe.Option;
 
 import javax.sql.DataSource;
 import javax.sql.XADataSource;
 import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.sql.SQLException;
-import java.util.Map;
 
 /**
  * @version $Rev$ $Date$
@@ -88,8 +87,13 @@ protected ConnectionFactory createConnectionFactory() throws SQLException {
         @Override
         public void setJdbcUrl(String string) {
             // TODO This is a big whole and we will need to rework this
-            if (dataSource instanceof org.hsqldb.jdbc.jdbcDataSource) {
-                ((org.hsqldb.jdbc.jdbcDataSource)dataSource).setDatabase(string);
+            try {
+                final Class<?> hsql = this.getClass().getClassLoader().loadClass(""org.hsqldb.jdbc.jdbcDataSource"");
+                final Method setDatabase = hsql.getMethod(""setDatabase"", String.class);
+                setDatabase.setAccessible(true);
+                setDatabase.invoke(dataSource, string);
+            } catch (Exception e) {
+                // only works if hsql is available and datasource is an HSQL jdbcDataSource
             }
         }
     }
```",use reflection to avoid direct dependency on hsqldb,4,4,4,4,fix compile error in DataSourceFactory,2,3,4,4,"Refactor: Use reflection to set JDBC URL in DataSourceFactory In the DataSourceFactory.java file, the setJdbcUrl method has been refactored to use reflection to set the JDBC URL for the HSQL database. This change allows for a more generic handling of setting the JDBC URL, potentially accommodating other types of databases in the future. No associated issues or pull requests provide additional context for this change.",4,4,4,4,"refactor: Set JDBC URL for HSQL data source using reflection
This commit refactors the `setJdbcUrl` method in `DataSourceFactory` to dynamically set the JDBC URL for HSQL data sources using reflection, replacing the previous HSQLDB-specific implementation. This change improves code flexibility and maintainability, but still requires future rework."
37080c6d8db4dd001d637fad907538b2de95bc0e,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/OpenEjbContainer.java
Status: modified
```diff
@@ -527,10 +527,11 @@ private static boolean isOtherProvider(Map<?, ?> properties) {
         }
 
         private boolean match(String s, File file) {
-            String s2 = file.getName();
+            final String s2 = file.getName();
+            final String s3 = file.getAbsolutePath();
             boolean matches;
             if (file.isDirectory()) {
-                matches = s2.equals(s) || s2.equals(s + "".jar"");
+                matches = s2.equals(s) || s2.equals(s + "".jar"") || s3.equals(s);
             } else {
                 matches = s2.equals(s + "".jar"");
             }
```",why couldn't we use an absolute path in ejbcontainer?,3,4,4,4,fix ejb match,2,3,4,4,Fix: Update match method in OpenEjbContainer The 'match' method in the OpenEjbContainer.java file has been updated. The method now checks if the given string matches the name or absolute path of the file. This change enhances the matching accuracy and covers more cases.,4,4,4,4,"refactor: Enhance file matching logic in OpenEjbContainer
Refactored the match method to consider absolute file paths in addition to names, enabling more precise matching for directories and files with the same name."
542008fa962c21ae22828f66325062992b8bfb1b,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/monitoring/StatsInterceptor.java
Status: modified
```diff
@@ -347,6 +347,6 @@ public void record(long time) {
     }
 
     public static boolean isStatsActivated() {
-        return SystemInstance.get().getOptions().get(DISABLE_STAT_INTERCEPTOR_PROPERTY, false);
+        return SystemInstance.get().getOptions().get(DISABLE_STAT_INTERCEPTOR_PROPERTY, true);
     }
 }
```",fixing the default for the activation of the stat interceptor,1,4,4,4,fix StatsInterceptor isStatsActivated,1,2,4,4,"Fix: Modify default behavior of isStatsActivated method in StatsInterceptor class The `isStatsActivated()` method in the `StatsInterceptor` class, which checks if the statistics interceptor is activated, has been modified. The default value for the `DISABLE_STAT_INTERCEPTOR_PROPERTY` has been changed from `false` to `true`. This change modifies the default behavior of the `isStatsActivated()` method. The `StatsInterceptor` class is responsible for monitoring and recording statistics about method invocations in a Java application.",4,4,3,4,"fix: Invert logic of isStatsActivated() to return true when DISABLE_STAT_INTERCEPTOR_PROPERTY is set
This commit fixes the incorrect logic in `isStatsActivated()` by returning `true` when `DISABLE_STAT_INTERCEPTOR_PROPERTY` is set, ensuring that statistics collection is properly enabled or disabled based on the property's value."
c812a342c8df1c3d9782897404211c4107f197f4,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/resource/activemq/ActiveMQResourceAdapter.java
Status: modified
```diff
@@ -90,7 +90,7 @@ public void start(final BootstrapContext bootstrapContext) throws ResourceAdapte
         }
 
         // prefix server uri with 'broker:' so our broker factory is used
-        if (brokerXmlConfig != null && !brokerXmlConfig.isEmpty()) {
+        if (brokerXmlConfig != null && !brokerXmlConfig.trim().isEmpty()) {
 
             try {
 
```",Trim config line to be sure it is empty.,4,4,4,4,remove unnecessary check,0,0,4,4,Fix: Ensure correct setup of broker configuration in ActiveMQResourceAdapter This commit adds a trim() method to the brokerXmlConfig string before checking if it's empty in the start method of the ActiveMQResourceAdapter.java file. This change ensures that the broker configuration is set up correctly even when the brokerXmlConfig string contains only whitespace characters.,4,4,4,4,"fix: Trim brokerXmlConfig before checking its emptiness
Prevents incorrect emptiness checks caused by whitespace-only brokerXmlConfig, ensuring reliable configuration parsing in ActiveMQResourceAdapter's start method."
4573e844fde9e92120b5770cdcd2bf7ab3d12271,apache/tomee,,"File: container/openejb-jee/src/main/java/org/apache/openejb/jee/PersistenceContextRef.java
Status: modified
```diff
@@ -64,6 +64,7 @@
     ""persistenceContextRefName"",
     ""persistenceUnitName"",
     ""persistenceContextType"",
+    ""persistenceContextSynchronization"",
     ""persistenceProperty"",
     ""mappedName"",
     ""injectionTarget"",
```",persistenceContextSynchronization in PersistenceContextRef propOrder,0,2,4,3,add üòÖ to üòÖ,0,0,0,0,"Feat: Add persistenceContextSynchronization field to PersistenceContextRef class This commit adds a new field, ""persistenceContextSynchronization"", to the PersistenceContextRef class. This class manages persistence context references and their properties in a Java application. The addition of this new field is likely to enhance the functionality of managing persistence context references.",4,4,4,4,"feat: Add persistenceContextSynchronization field
Added to support persistence context synchronization configuration."
5c981f9c8275d6aaa465bee7ec33d467acf8ef83,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/managed/local/ManagedConnection.java
Status: modified
```diff
@@ -133,7 +133,7 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg
                         setAutoCommit(false);
                     } catch (final SQLException xae) { // we are alreay in a transaction so this can't be called from a user perspective - some XA DataSource prevents it in their code
                         final String message = ""Can't set auto commit to false cause the XA datasource doesn't support it, this is likely an issue"";
-                        final Logger logger = Logger.getInstance(LogCategory.OPENEJB_RESOURCE_JDBC, ManagedConnection.class)
+                        final Logger logger = Logger.getInstance(LogCategory.OPENEJB_RESOURCE_JDBC, ManagedConnection.class);
                         if (logger.isDebugEnabled()) { // we don't want to print the exception by default
                             logger.warning(message, xae);
                         } else {
```","too slow flush from idea, sorry for the noise",1,0,4,3,don t log an exception if we don t exist,0,0,4,1,Style: Add missing semicolon in ManagedConnection.java A semicolon was added at the end of a line in the ManagedConnection.java file to correct a syntax error. This change does not affect the functionality of the code.,4,4,3,4,"fix: Handle XA datasource auto-commit exception
Updated ManagedConnection to catch and log SQLException when setting auto-commit to false, which is not supported by some XA DataSources, to prevent unexpected behavior and provide a clear warning message."
269881d3725626f1a305b258d35f9a9285eccb02,apache/usergrid,,"File: stack/core/src/test/java/org/usergrid/persistence/cassandra/util/TraceTagUnitTest.java
Status: modified
```diff
@@ -31,6 +31,6 @@ public void createAttachDetach() throws Exception {
         taggedOpTimer.stop(timedOpTag,""op-tag-name"",true);
         assertTrue(timedOpTag.getElapsed() >= 500);
         assertEquals(timedOpTag, traceTag.iterator().next());
-
+        traceTagManager.detach();
     }
 }
```",quick poke to detach the tracetag threadlocal so we don't log all over the tests,4,4,4,4,fix flaky test,0,0,4,4,"Fix: Add TraceTag detachment in createAttachDetach test In the `createAttachDetach()` method of the `TraceTagUnitTest.java` file, a line of code was added to detach the TraceTag from the TraceTagManager. This change ensures that the TraceTag is properly detached after being used, which is crucial for the correct functioning of the TraceTagManager.",4,4,4,4,"fix: Add detach call to TraceTagUnitTest's createAttachDetach method
This commit ensures proper detachment of trace tags in TraceTagUnitTest by adding a detach call to the createAttachDetach method, preventing potential issues with trace tag management."
8536f808d7d477652a14162213298381fd5d0d62,apache/usergrid,,"File: stack/rest/src/test/java/org/usergrid/rest/management/users/MUUserResourceIT.java
Status: modified
```diff
@@ -68,7 +68,7 @@ public class MUUserResourceIT extends AbstractRestIT
      *
      * From USERGRID-2075
      */
-    @Test
+    @Test @Ignore(""aok - check this please"")
     public void testCaseSensitivityAdminUser() throws Exception
     {
         LOG.info( ""Starting testCaseSensitivityAdminUser()"" );
```","not sure why this fails during batch testing, but it succeeds singly",3,0,4,3,ignore failing test for now,4,4,4,4,Fix: Temporarily disable testCaseSensitivityAdminUser test The testCaseSensitivityAdminUser test in MUUserResourceIT.java has been temporarily disabled by adding an @Ignore annotation. This is a temporary fix and needs to be revisited.,4,4,4,4,"test: Ignore test case for admin user with mixed case username and email address
Temporarily ignoring this test case to investigate case sensitivity issues in admin user authentication, which currently prevents the test from passing. The test is designed to verify that the system is case-insensitive when authenticating admin users."
983ba69963de7c0f28d09b5a97c93d7d1c7e37ab,apache/usergrid,,"File: stack/services/src/main/java/org/apache/usergrid/services/notifications/ApplicationQueueMessage.java
Status: modified
```diff
@@ -61,13 +61,23 @@ public static UUID bytesToUuid( byte[] sixteenBytes ) {
     public static ApplicationQueueMessage generate(Message message) {
 
         // this crazyness may indicate that Core Persistence is not storing UUIDs correctly
+
         byte[] mpaBytes = (byte[])message.getObjectProperty(MESSAGE_PROPERTY_APPLICATION_UUID);
         UUID mpaUuid = bytesToUuid(mpaBytes);
+
         byte[] mpnBytes = (byte[])message.getObjectProperty(MESSAGE_PROPERTY_NOTIFICATION_ID);
         UUID mpnUuid = bytesToUuid(mpnBytes);
-        // end of crazyness
 
-        UUID mpdUuid = (UUID)message.getObjectProperty(MESSAGE_PROPERTY_DEVICE_UUID);
+        final UUID mpdUuid;
+        Object o = message.getObjectProperty(MESSAGE_PROPERTY_DEVICE_UUID);
+        if ( o instanceof UUID ) {
+            mpdUuid = (UUID)message.getObjectProperty(MESSAGE_PROPERTY_DEVICE_UUID);
+        } else {
+            byte[] mpdBytes = (byte[])o;
+            mpdUuid =  bytesToUuid(mpdBytes);
+        }
+
+        // end of crazyness
 
         return new ApplicationQueueMessage(
                 mpaUuid, mpnUuid, mpdUuid,
```",Seeing some very odd behavior on different Java VMs with serialization of UUIDs.,4,3,4,4,fix ApplicationQueueMessage generate,2,2,4,4,Refactor: Handle non-UUID case in ApplicationQueueMessage generation This commit refactors the `generate` method in the `ApplicationQueueMessage.java` file to handle a case where the `MESSAGE_PROPERTY_DEVICE_UUID` object property is not an instance of `UUID`. This change ensures that the `ApplicationQueueMessage` is correctly generated from a given `Message` object.,4,4,4,4,"fix: Handle UUID properties stored as bytes or UUID objects
This commit updates the `generate` method in `ApplicationQueueMessage` to handle UUID properties stored as bytes or UUID objects, addressing potential issues with Core Persistence's UUID storage."
17cc01dc92c39878c7f917d4f361f129dee162ad,apache/usergrid,Y,"File: stack/corepersistence/collection/src/main/java/org/apache/usergrid/persistence/collection/EntityCollectionManager.java
Status: modified
```diff
@@ -51,6 +51,11 @@ public interface EntityCollectionManager {
      */
     public Observable<Entity> load( Id entityId );
 
+    //TODO TN Change load to use multiget and return multiple entities.  Only supports loading 1k per load operation.
+
+
+    //TODO Dave add a load versions using a multiget that will return a latest version structure for a collection of entity Ids
+
 
     /**
      * Takes the change and reloads an entity with all changes applied in this entity applied.
```


File: stack/corepersistence/queryindex/src/main/java/org/apache/usergrid/persistence/index/EntityIndexBatch.java
Status: modified
```diff
@@ -59,6 +59,9 @@ public interface EntityIndexBatch {
      */
     public EntityIndexBatch deindex(final IndexScope scope, final Id id, final UUID version);
 
+
+    //TODO: Create a delete method that delete's  by Id.  This will delete all documents from ES with the same entity Id
+
     /**
      * Execute the batch
      */
```",Added TODO's,4,4,4,4,add some comments,2,2,4,4,"chore: Add TODO comments for future work This commit adds TODO comments to two classes: EntityCollectionManager and EntityIndexBatch. These comments indicate future work to be done on these classes. In EntityCollectionManager, the comments suggest changing the load method to use multiget and return multiple entities, and adding a load versions method using a multiget that will return a latest version structure for a collection of entity Ids. In EntityIndexBatch, the comment suggests creating a delete method that deletes by Id, which will delete all documents from ES with the same entity Id.",4,4,2,4,"refactor: Add TODO comments for future improvements in EntityCollectionManager and EntityIndexBatch
Added TODO comments to EntityCollectionManager and EntityIndexBatch to highlight areas for future improvement. These comments suggest optimizing the load method to utilize multiget, introducing a load versions feature, and creating a delete method for removing documents by Id. This refactor aims to facilitate future development and enhance the overall maintainability of the codebase."
326c8effb05a1d71eca19eac03977f9aaea7dd8b,apache/usergrid,Y,"File: stack/core/src/test/java/org/apache/usergrid/corepersistence/migration/EntityTypeMappingMigrationIT.java
Status: modified
```diff
@@ -77,6 +77,7 @@ public void setup() {
     @Test
     public void testIdMapping() throws Throwable {
 
+        assertEquals(""version 1 expected"", 1, entityTypeMappingMigration.getVersion());
 
         final EntityManager newAppEm = app.getEntityManager();
 
@@ -112,6 +113,7 @@ public void testIdMapping() throws Throwable {
 
 
 
+
         AllEntitiesInSystemObservable.getAllEntitiesInSystem( managerCache )
                                      .doOnNext( new Action1<AllEntitiesInSystemObservable.EntityData>() {
                                          @Override
```


File: stack/core/src/test/java/org/apache/usergrid/corepersistence/migration/GraphShardVersionMigrationIT.java
Status: modified
```diff
@@ -82,6 +82,7 @@ public void setup() {
     @Test
     public void testIdMapping() throws Throwable {
 
+        assertEquals(""version 2 expected"", 2, graphShardVersionMigration.getVersion());
 
         /**
          * Drop our migration keyspaces to ensure we don't have a ""new version in there""
```",Added version check to ensure correct versions,4,4,4,4,add test for migration,0,1,4,4,Feat: Add version check to testIdMapping method This commit introduces a new feature to the testIdMapping() method in both EntityTypeMappingMigrationIT.java and GraphShardVersionMigrationIT.java files. The method now checks the version of the migration and verifies if it matches the expected version. This enhancement ensures the correct migration of data from an old version to a new version.,4,4,4,4,"feat: Add version assertions to entity type mapping and graph shard version migration tests
This change introduces version assertions in entity type mapping and graph shard version migration tests to ensure correct versioning. The assertions verify that entity type mapping and graph shard version migration are set to version 1 and 2, respectively, thereby enhancing the testing of the migration process."
3c504f1cd9482fb8669ce8a447ae0d95f729ba37,apache/usergrid,,"File: stack/core/src/main/java/org/apache/usergrid/corepersistence/ApplicationIdCacheFig.java
Status: modified
```diff
@@ -19,16 +19,13 @@
  */
 package org.apache.usergrid.corepersistence;
 
-/**
- * Application id cache fig
- */
 
 import org.safehaus.guicyfig.Default;
 import org.safehaus.guicyfig.GuicyFig;
 import org.safehaus.guicyfig.Key;
 
 /**
- * The config for the entity cache
+ * Application id cache fig
  */
 public interface ApplicationIdCacheFig extends GuicyFig {
 
```",add cache fig,0,0,4,1,remove author tag,0,0,4,4,"Style: Update comments in ApplicationIdCacheFig.java This commit updates the comments in the ApplicationIdCacheFig.java file. The changes are not related to any method or class functionality, but rather to the style of the code. No associated issues or pull requests were found for this commit.",4,4,2,4,"style: Remove unnecessary Javadoc comments
Removed redundant Javadoc comments in ApplicationIdCacheFig.java to improve code readability and maintainability by reducing unnecessary clutter."
fbb5807e46a6270eadfc3822a60112d4a9e3faf1,apache/usergrid,,"File: stack/core/src/test/java/org/apache/usergrid/corepersistence/StaleIndexCleanupTest.java
Status: modified
```diff
@@ -70,7 +70,6 @@
  * Test on read style clean-up of stale ElasticSearch indexes.
  */
 @NotThreadSafe
-@Ignore(""These can be re-enabled when they properly know when Usergrid is set to de-index old versions of entities or not"")
 public class StaleIndexCleanupTest extends AbstractCoreIT {
     private static final Logger logger = LoggerFactory.getLogger( StaleIndexCleanupTest.class );
     public static final String EVENTS_DISABLED = ""corepersistence.events.disabled"";
@@ -134,7 +133,7 @@ public void testUpdateVersioning() throws Exception {
 
     }
 
-
+    
     /**
      * Test that the EntityDeleteImpl cleans up stale indexes on delete. Ensures that when an
      * entity is deleted its old indexes are cleared from ElasticSearch.
```","Revert ""Ignore non critical tests for now.""",0,2,4,4,remove ignore from StaleIndexCleanupTest,0,4,4,4,"Fix: Enable StaleIndexCleanupTest The `@Ignore` annotation was removed from the `StaleIndexCleanupTest` class, enabling the execution of tests for the cleanup of stale ElasticSearch indexes during entity updates and deletions.",4,4,4,4,"refactor: Remove Ignore annotation and clarify test description in StaleIndexCleanupTest
Removed the Ignore annotation, which was previously disabling the test, and updated the test description to accurately reflect the test's purpose. This change enables the test to run and ensures it properly exercises the stale index cleanup and versioning functionality in the entity management system."
8814a144b66054048be96a1c892fd750ee327327,apache/usergrid,,"File: stack/core/src/main/java/org/apache/usergrid/corepersistence/asyncevents/AsyncEventServiceImpl.java
Status: modified
```diff
@@ -355,9 +355,12 @@ else if (event instanceof ElasticsearchIndexEvent) {
                     throw new Exception(""Unknown EventType for message: ""+ message.getStringBody().trim());
                 }
 
-                if( single.isEmpty() ){
-                    logger.warn(""No index operation messages came back from event processing for msg {} "",
-                        message.getStringBody().trim());
+
+                if( !(event instanceof ElasticsearchIndexEvent)
+                    && !(event instanceof InitializeApplicationIndexEvent)
+                      && single.isEmpty() ){
+                        logger.warn(""No index operation messages came back from event processing for msg: {} "",
+                            message.getStringBody().trim());
                 }
 
 
```",Fix logging statement.,4,3,4,4,throw an exception if there are no message,0,0,4,4,"Refactor: Improve handling of AsyncEvents in AsyncEventServiceImpl This commit refactors the AsyncEventServiceImpl class to improve the handling of different types of AsyncEvents in the queue system. The changes are mainly in the condition of an if statement in the callEventHandlers method, which processes a list of messages from a queue. Each message is expected to contain an AsyncEvent. The changes ensure that the method handles different types of AsyncEvents more effectively. There are no associated issues or pull requests.",4,4,4,4,"fix: Fix unnecessary warnings for non-index events
This commit refines the logging mechanism to only warn about empty index operation messages when the event is an instance of ElasticsearchIndexEvent or InitializeApplicationIndexEvent, thereby reducing unnecessary warnings and improving system reliability."
2af22a87105629f423463c4132ff9141bb95930c,apache/usergrid,,"File: stack/corepersistence/common/src/main/java/org/apache/usergrid/persistence/core/datastax/impl/DataStaxClusterImpl.java
Status: modified
```diff
@@ -51,9 +51,6 @@ public class DataStaxClusterImpl implements DataStaxCluster {
     public DataStaxClusterImpl(final CassandraConfig cassandraFig ) throws Exception {
         this.cassandraConfig = cassandraFig;
         this.cluster = getCluster();
-        this.clusterSession = getClusterSession();
-        this.applicationSession = getApplicationSession();
-        this.queueMessageSession = getApplicationLocalSession();
 
         logger.info(""Initialized datastax cluster client. Hosts={}, Idle Timeout={}s,  Pool Timeout={}s"",
             getCluster().getMetadata().getAllHosts().toString(),
@@ -62,6 +59,7 @@ public DataStaxClusterImpl(final CassandraConfig cassandraFig ) throws Exception
 
         // always initialize the keyspaces
         this.createApplicationKeyspace(false);
+        this.createApplicationLocalKeyspace(false);
     }
 
     @Override
```",Make sure to create keyspaces on initialization before trying to obtain sessions to the keyspaces.,1,3,3,4,remove unnecessary call,0,1,4,4,"Refactor: Update initialization in DataStaxClusterImpl This commit refactors the initialization process in the DataStaxClusterImpl class. The initialization of clusterSession, applicationSession, and queueMessageSession has been removed, and the creation of an application local keyspace has been added. This change improves the structure of the code without altering the overall functionality of the class, which manages connections and sessions with a Cassandra database cluster.",3,4,3,4,"feat: Add support for local keyspaces in DataStaxClusterImpl
Introduced local keyspaces management in DataStaxClusterImpl by adding createApplicationLocalKeyspace method, which enables the cluster client to initialize sessions for local keyspaces alongside application and queue message keyspaces."
d62a00f22daf79dda382e79cc7c9a6bd3ce31a0b,apache/wicket,Y,"File: wicket/src/java/wicket/Application.java
Status: modified
```diff
@@ -129,9 +129,12 @@ public Localizer getLocalizer()
     }
 
     /**
+     * Get and initialize a markup parser.
+     *  
+     * @param page Autolinks are resolved relative to a Page.
      * @return A new MarkupParser
      */
-    public IMarkupParser getMarkupParser()
+    public IMarkupParser getMarkupParser(final Page page)
     {
         final ApplicationSettings settings = getSettings();
         try
@@ -143,6 +146,8 @@ public IMarkupParser getMarkupParser()
             parser.setStripComments(settings.getStripComments());
             parser.setCompressWhitespace(settings.getCompressWhitespace());
             parser.setStripWicketParamTag(settings.getStripWicketParamTag());
+            parser.setAutolinking(settings.getAutomaticLinking());
+            parser.setAutolinkBasePage(page);
             return parser;
         }
         catch (IllegalAccessException e)
```


File: wicket/src/java/wicket/Container.java
Status: modified
```diff
@@ -745,7 +745,7 @@ private Markup loadMarkup(final Application application, final String key,
             final Resource markupResource) throws ParseException, IOException,
             ResourceNotFoundException
     {
-        final Markup markup = application.getMarkupParser().read(markupResource);
+        final Markup markup = application.getMarkupParser(getPage()).read(markupResource);
         markupCache.put(key, markup);
         return markup;
     }
```",bug fix for autolink,4,3,4,4,fix a bug where the üòÖ was not being set,3,0,4,3,"Feat: Add new getMarkupParser method and update loadMarkup method This commit introduces a new method, getMarkupParser, in Application.java. This method creates a new instance of the markup parser, configures it with the current settings, and sets the base page for autolinking.  The loadMarkup method in Container.java has been updated to use the new getMarkupParser method. This change enhances the functionality of the loadMarkup method by allowing it to load the markup for a given application and key, read the markup from the provided resource, store it in the markup cache, and then return the markup.  These changes contribute to the overall functionality and efficiency of the application.",4,4,4,4,"refactor: Make getMarkupParser page-aware
Updated `getMarkupParser` to accept a `Page` parameter, enabling autolinking resolution relative to the page context. This refactoring affects `Application` and `Container` classes, improving markup parsing flexibility and accuracy."
7fa7ef16132c29e8a4fa9c0feabbdd21ac5043cb,apache/wicket,,"File: wicket/src/java/wicket/AttributeModifier.java
Status: modified
```diff
@@ -72,9 +72,9 @@ public class AttributeModifier extends AbstractBehaviour implements Serializable
 	private static final long serialVersionUID = 1L;
 
 	/** Marker value to have an attribute without a value added. */
-	public static final Object VALUELESS_ATTRIBUTE_ADD = new Object();
+	public static final Object VALUELESS_ATTRIBUTE_ADD = new String(""VA_ADD"");
 	/** Marker value to have an attribute without a value removed. */
-	public static final Object VALUELESS_ATTRIBUTE_REMOVE = new Object();
+	public static final Object VALUELESS_ATTRIBUTE_REMOVE = new String(""VA_REMOVE"");
 
 	/** Whether to add the attribute if it is not an attribute in the markup. */
 	private final boolean addAttributeIfNotPresent;
@@ -246,11 +246,11 @@ final void replaceAttibuteValue(final Component component, final ComponentTag ta
 			final ValueMap attributes = tag.getAttributes();
 			final Object replacementValue = getReplacementOrNull(component);
 
-			if (replacementValue == VALUELESS_ATTRIBUTE_ADD)
+			if (VALUELESS_ATTRIBUTE_ADD.equals(replacementValue))
 			{
 				attributes.put(attribute, null);
 			}
-			else if (replacementValue == VALUELESS_ATTRIBUTE_REMOVE)
+			else if (VALUELESS_ATTRIBUTE_REMOVE.equals(replacementValue))
 			{
 				attributes.remove(attribute);
 			}
```",fix for serializable and content equals,3,4,4,4,fix a bug in AttributeModifier,2,2,4,4,"Refactor: Update VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE in AttributeModifier This commit updates the values of VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE in the AttributeModifier class from new Object() to new String(""VA_ADD"") and new String(""VA_REMOVE"") respectively. The comparison in the 'replaceAttibuteValue' method is also updated from '==' to '.equals'. These changes improve the structure of the code without changing its behavior.",3,4,4,4,"fix: Replace Object constants with String constants for VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE
This change replaces Object constants with String constants for VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE, eliminating the need for object equality checks and improving code maintainability. The modified constants enable more efficient and explicit comparisons in the replaceAttibuteValue method."
3cc6fbd940b3f960866d8eaf383eb57605c7dadd,apache/wicket,Y,"File: wicket/src/java/wicket/protocol/http/MockWebApplication.java
Status: modified
```diff
@@ -115,12 +115,6 @@ public class MockWebApplication extends WebApplication
 	/** Session. */
 	private WebSession wicketSession;
 
-	/**
-	 * In case of an RuntimeException, Wicket usually renders a error page. In
-	 * some test cases however it is useful to get the exception instead.
-	 */
-	private boolean rethrowRuntimeException = false;
-
 	/**
 	 * Create the mock http application that can be used for testing.
 	 * 
@@ -373,17 +367,6 @@ public void setupRequestAndResponse()
 		wicketResponse = new WebResponse(servletResponse);
 	}
 
-	/**
-	 * If true, runtime exception will not be handled by Wicket. Instead the
-	 * exception will be rethrown.
-	 * 
-	 * @param enable
-	 */
-	public void setRethrowRuntimeException(boolean enable)
-	{
-		this.rethrowRuntimeException = enable;
-	}
-
 	/**
 	 * Gets the parameters to be set on the next request.
 	 * 
```


File: wicket/src/test/wicket/markup/parser/filter/HeaderSectionTest.java
Status: modified
```diff
@@ -44,7 +44,6 @@ public class HeaderSectionTest extends TestCase
 	protected void setUp() throws Exception
 	{
 		application = new MockWebApplication(null);
-		application.setRethrowRuntimeException(true);
 	}
 	
 	/**
```",removed unused variable,4,3,4,4,remove unused code,4,4,4,4,"Refactor: Remove rethrowRuntimeException feature from MockWebApplication The rethrowRuntimeException feature, which allowed runtime exceptions to be rethrown, has been removed from the MockWebApplication class. This change also affects the HeaderSectionTest class, where a line of code that called the removed method has been deleted. The functionality of the modified classes remains the same after the changes.",4,3,4,2,"refactor: Remove rethrowRuntimeException field and setter
Removed unnecessary `rethrowRuntimeException` field and setter, simplifying `MockWebApplication` and aligning with its updated purpose of simulating a web application environment for testing."
8515371d54c619eba3da2334d15ce7b2a6c17f6b,apache/wicket,,"File: wicket/src/test/wicket/markup/MarkupParserTest.java
Status: modified
```diff
@@ -22,11 +22,11 @@
 import java.util.Locale;
 
 import junit.framework.Assert;
-import junit.framework.TestCase;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import wicket.WicketTestCase;
 import wicket.markup.html.pages.PageExpiredErrorPage;
 import wicket.markup.parser.XmlPullParser;
 import wicket.markup.parser.XmlTag;
@@ -42,10 +42,19 @@
  * 
  * @author Jonathan Locke
  */
-public final class MarkupParserTest extends TestCase
+public final class MarkupParserTest extends WicketTestCase
 {
 	private static Log log = LogFactory.getLog(MarkupParserTest.class);
 
+	/**
+	 * Construct.
+	 * @param name
+	 */
+	public MarkupParserTest(String name)
+	{
+		super(name);
+	}
+	
 	/**
 	 * 
 	 * @throws StringValueConversionException
```",fixed a junit test set-up which succeded in Eclipse and failed on the comand line using maven,4,1,4,4,add MarkupParserTest WicketTestCase,0,3,4,4,"Refactor: Update MarkupParserTest to extend WicketTestCase This commit updates the `MarkupParserTest` class to extend `WicketTestCase` instead of `TestCase`. A constructor has also been added to the class. The functionality of the `MarkupParserTest` class remains the same, it is used to test the functionality of the `MarkupParser` in parsing HTML and XML documents.",4,4,4,4,"refactor: Change MarkupParserTest to extend WicketTestCase
Changed the superclass of MarkupParserTest from TestCase to WicketTestCase to leverage Wicket's testing framework."
41ad9dfd682f2659301e133aa75e6e3775d92999,apache/wicket,,"File: wicket/src/test/wicket/markup/html/navigation/paging/PagingNavigationIncrementLinkTest.java
Status: modified
```diff
@@ -17,7 +17,6 @@
  */
 package wicket.markup.html.navigation.paging;
 
-import wicket.WicketTestCase;
 
 /**
  * Testcase for the navigation increment link.
```",removed unused import,4,4,4,4,remove unused import,4,4,4,4,Style: Remove unused import in PagingNavigationIncrementLinkTest.java Removed an unused import statement in the file `PagingNavigationIncrementLinkTest.java` to improve the style of the code.,4,3,3,4,"style: Remove unnecessary WicketTestCase import
Removed unused import statement to declutter the code and prevent potential naming conflicts."
82aa4b1fc4b010100e051167f85662f439d92634,apache/wicket,,"File: wicket-examples/src/java/wicket/examples/ajax/builtin/AjaxApplication.java
Status: modified
```diff
@@ -40,6 +40,7 @@ protected void init()
 	{
 		getExceptionSettings().setThrowExceptionOnMissingResource(false);
 		getRequestCycleSettings().addResponseFilter(new ServerAndClientTimeFilter());
+		getAjaxSettings().setAjaxDebugModeEnabled(true);
 	}
 
 	/**
```",enable ajax debug in ajax examples,1,4,4,4,add missing debug mode,1,4,4,4,"Feat: Enable Ajax debug mode in application settings This commit involves a modification to the 'init()' method in the AjaxApplication.java file. The change enables the Ajax debugging mode in the application settings. This is part of the initialization of the Wicket application settings, which also includes exception handling and response filtering.",4,4,4,4,"feat: Configure Ajax settings for Wicket application
Updated init method in AjaxApplication to enable Ajax debug mode, allowing for easier debugging of Ajax behavior in the application. This change enhances the development experience by providing more insights into Ajax requests and responses."
cf357dc5be777bfebdc9d7a9a48ab6c7dca900ec,apache/wicket,,"File: wicket/src/java/wicket/markup/html/form/Form.java
Status: modified
```diff
@@ -292,10 +292,7 @@ public void formComponent(final FormComponent formComponent)
 	 * THIS METHOD IS NOT PART OF THE WICKET API. DO NOT ATTEMPT TO OVERRIDE OR
 	 * CALL IT.
 	 * 
-	 * Handles form submissions. By default, this method simply calls validate()
-	 * to validate the form and update the model if there is only one button. If
-	 * there is more than one button, it calls the onClick() method for the
-	 * button which submitted the form.
+	 * Handles form submissions.
 	 * 
 	 * @see Form#validate()
 	 */
```",removed stale javadoc,4,4,4,4,fix javadoc warning,2,3,4,4,Refactor: Simplify comments in formComponent method The comments in the formComponent method of the Form class have been simplified for better readability. The functionality of the method and the class remains the same.,3,3,3,4,"style: Remove unnecessary comment from Form.java
Removed unnecessary comment from Form.java, which was documenting an internal method not part of the Wicket API. This change maintains the class's functionality and adheres to the API's documentation guidelines."
413a7b5d98139b0b85fd76a237971b8f43eb1107,apache/wicket,,"File: wicket-spring/src/main/java/wicket/spring/test/ApplicationContextMock.java
Status: modified
```diff
@@ -167,6 +167,8 @@ public String[] getBeanDefinitionNames()
 	}
 
 	/**
+	 * @param type 
+	 * @return bean definition names
 	 * @see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionNames(java.lang.Class)
 	 */
 	public String[] getBeanDefinitionNames(Class type)
```",removed Session.setApplication + fixed some warnings,0,1,4,4,add missing javadoc,4,4,4,4,Style: Add comments to getBeanDefinitionNames method in ApplicationContextMock class Added comments to the getBeanDefinitionNames method in the ApplicationContextMock class to provide more information about the method parameters and return value. The ApplicationContextMock class is a mock implementation of the ApplicationContext interface for unit testing purposes.,4,4,3,4,"feat: Add getBeanDefinitionNames method to ApplicationContextMock class
This method allows clients to retrieve bean definition names filtered by type, making ApplicationContextMock more compatible with the ListableBeanFactory interface."
315614b2f80be8f621c92ed769c529215d6b53bf,apache/wicket,,"File: wicket/src/java/wicket/model/AbstractPropertyModel.java
Status: modified
```diff
@@ -60,10 +60,6 @@ public AbstractPropertyModel(final Object target)
 	@Override
 	public IModel getNestedModel()
 	{
-		if (target instanceof IModel)
-		{
-			return ((IModel)target);
-		}
 		return null;
 	}
 
```","make it consistent. nested models are results of wrapping, this is a result of composition",1,0,4,2,remove unnecessary code,4,4,4,4,Refactor: Simplify AbstractPropertyModel class Removed unnecessary conditional check in the getNestedModel method of the AbstractPropertyModel class. The change does not affect the overall functionality of the class.,4,4,3,4,"refactor: Remove unnecessary type check in getNestedModel method
Removed redundant type check in getNestedModel method, eliminating unnecessary casting and improving code clarity."
e5524f77003c96dcd492cb0f987085edff9daebe,apache/wicket,,"File: wicket/src/java/wicket/protocol/http/WicketFilter.java
Status: modified
```diff
@@ -325,6 +325,9 @@ public void init(FilterConfig filterConfig) throws ServletException
 		filterConfig.getServletContext().setAttribute(contextKey, this.webApplication);_x000D_
 _x000D_
 		filterPath = filterConfig.getInitParameter(FILTER_PATH_PARAM);_x000D_
+		_x000D_
+		if (filterPath == null)_x000D_
+			filterPath = """";_x000D_
 _x000D_
 		try_x000D_
 		{_x000D_
```","Added default value ("""") for filterPath in case it's not specified in web.xml",4,4,4,4,fix npe in WicketFilter,4,4,4,4,"Fix: Add null check for filterPath in WicketFilter init method This commit adds a null check for `filterPath` in the `init` method of the `WicketFilter.java` file. If `filterPath` is null, it is set to an empty string. This change is part of the initialization process of the filter configuration, which includes creating a web application instance, setting the filter for the web application, and storing the application object in the servlet context.",4,4,4,4,"fix: Handle null filterPath in init method
Ensure Wicket filter initialization is robust against null filterPath, providing a more reliable initialization process."
36945b352820de990e92d615e0452d1f4b2d005e,apache/wicket,,"File: wicket-quickstart/src/main/java/wicket/quickstart/QuickStartApplication.java
Status: modified
```diff
@@ -4,6 +4,7 @@
 import org.apache.commons.logging.LogFactory;
 
 import wicket.ISessionFactory;
+import wicket.Request;
 import wicket.Session;
 import wicket.protocol.http.WebApplication;
 
@@ -39,7 +40,7 @@ public ISessionFactory getSessionFactory()
     {
         return new ISessionFactory()
         {        	
-			public Session newSession()
+			public Session newSession(Request request)
             {
                 return new QuickStartSession(QuickStartApplication.this);
             }
```",Fixed compilation issue for delayed session creation,4,3,4,4,add request to QuickStartApplication,0,4,4,4,feat: Update getSessionFactory method in QuickStartApplication This commit updates the `getSessionFactory` method in the `QuickStartApplication.java` file. The method now creates `QuickStartSession` instances for each new request. This change enhances the functionality of the application by allowing it to handle multiple requests more efficiently.,4,3,4,4,"refactor: Pass Request to newSession creation
Decouples session creation from the application instance, allowing for more modular and reusable session factories. This change enables easier customization and extension of the session creation process."
0c90bdc70bcbc485d045ac6944f2146b93649730,apache/wicket,,"File: wicket/src/main/java/wicket/Component.java
Status: modified
```diff
@@ -1768,7 +1768,10 @@ private void notifyBehaviorsComponentRendered()
 			for (Iterator i = behaviors.iterator(); i.hasNext();)
 			{
 				IBehavior behavior = (IBehavior)i.next();
-				behavior.rendered(this);
+				if (isBehaviorAccepted(behavior))
+				{
+					behavior.rendered(this);
+				}
 			}
 		}
 	}
```",only notify behaviors when they are accepted,4,4,4,4,fix a bug in Component,2,2,4,4,"Feat: Add condition check in notifyBehaviorsComponentRendered() This commit introduces a condition check in the method notifyBehaviorsComponentRendered() in the Component.java file. The condition checks if a behavior is accepted before it is notified that the component has been rendered. This change ensures that only the accepted behaviors are notified, enhancing the efficiency of the method.",4,4,4,4,"refactor: Filter out unaccepted behaviors during rendering
Added a behavior acceptance check in notifyBehaviorsComponentRendered to prevent unaccepted behaviors from being triggered during component rendering, improving the overall rendering process."
a5888c2d7c2bc24b06bddacf857bac4ddae7fffa,apache/wicket,,"File: wicket/src/main/java/wicket/util/lang/Objects.java
Status: modified
```diff
@@ -139,9 +139,6 @@ protected Object replaceObject(Object obj) throws IOException
 		}
 	}
 
-	/** defaults for primitives. */
-	static HashMap primitiveDefaults = new HashMap();
-
 	/** Type tag meaning java.math.BigDecimal. */
 	private static final int BIGDEC = 9;
 
@@ -188,6 +185,9 @@ protected Object replaceObject(Object obj) throws IOException
 	/** Type tag meaning short. */
 	private static final int SHORT = 3;
 
+	/** defaults for primitives. */
+	static HashMap primitiveDefaults = new HashMap();
+
 	static
 	{
 		primitiveDefaults.put(Boolean.TYPE, Boolean.FALSE);
@@ -385,11 +385,13 @@ public static Object cloneModel(final Object object)
 
 	/**
 	 * Makes a deep clone of an object by serializing and deserializing it. The
-	 * object must be fully serializable to be cloned.
+	 * object must be fully serializable to be cloned. No extra debug info is
+	 * gathered.
 	 * 
 	 * @param object
 	 *            The object to clone
 	 * @return A deep copy of the object
+	 * @see #cloneObject(Object, boolean)
 	 */
 	public static Object cloneObject(final Object object)
 	{
@@ -1052,7 +1054,8 @@ public static byte[] objectToByteArray(final Object object)
 	 */
 	public static long sizeof(final Object object)
 	{
-		if (object == null) return 0;
+		if (object == null)
+			return 0;
 		try
 		{
 			final ByteCountingOutputStream out = new ByteCountingOutputStream();
```",formatted and reordered,4,4,4,4,fix a bug in Objects,0,0,4,4,"Refactor: Improve code readability in Objects.java In this commit, we have made several changes to improve the readability and maintainability of the code in the `Objects.java` file. We have moved the declaration of `primitiveDefaults` to a more appropriate location in the code. We have also added extra comments to the `cloneObject` method to provide more information about its functionality. Lastly, we have changed the formatting of the `sizeof` method to make it more readable.",4,4,4,4,"refactor: Move primitiveDefaults declaration and adjust cloneObject method
Relocated `primitiveDefaults` declaration to improve code organization and simplified `cloneObject` method by removing unnecessary debug info gathering, enhancing the overall maintainability of the `Objects` class."
06244350ea5e91ff55ec170578a7809e544f9987,apache/wicket,,"File: jdk-1.5/wicket-examples/src/test/java/org/apache/wicket/examples/hangman/WordGeneratorTest.java
Status: modified
```diff
@@ -20,22 +20,25 @@
 import java.util.Set;
 
 import junit.framework.Assert;
+import junit.framework.TestCase;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.wicket.WicketTestCase;
+import org.apache.wicket.util.tester.WicketTester;
 
 /**
  * Test case for the <code>WordGenerator</code> class.
  * 
  * @author Chris Turner
  * @version 1.0
  */
-public class WordGeneratorTest extends WicketTestCase
+public class WordGeneratorTest extends TestCase
 {
 
 	private static final Log log = LogFactory.getLog(WordGeneratorTest.class);
 
+	public WicketTester tester;
+	
 	/**
 	 * Create the test case.
 	 * 
@@ -46,6 +49,16 @@ public WordGeneratorTest(String message)
 	{
 		super(message);
 	}
+	
+	protected void setUp() throws Exception
+	{
+		tester = new WicketTester();
+	}
+
+	protected void tearDown() throws Exception
+	{
+		tester.destroy();
+	}
 
 	/**
 	 * Tests word generator
```",hmm normally you don't have the build path that you have in eclipse. (how can we avoid this?),0,1,4,3,add TestCase to WordGeneratorTest,0,1,4,4,"Refactor: Update WordGeneratorTest to extend TestCase In this commit, the WordGeneratorTest class has been refactored to extend TestCase instead of WicketTestCase. A new instance variable 'tester' of type WicketTester has been added. Two new methods 'setUp' and 'tearDown' have been added. The 'setUp' method sets up the testing environment by initializing the WicketTester object before each test case. The 'tearDown' method destroys the tester instance after the test is completed.",3,4,2,4,"feat: Use JUnit's TestCase and WicketTester for unit testing in WordGeneratorTest
This commit refactors WordGeneratorTest to extend JUnit's TestCase, replacing WicketTestCase, and introduces WicketTester for unit testing. The added setUp and tearDown methods ensure proper initialization and cleanup of the WicketTester instance, enhancing the test environment."
526bb16ab2f8b770a052fc93069b8b38a1d6c1f5,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/parser/filter/WicketTagIdentifier.java
Status: modified
```diff
@@ -122,8 +122,7 @@ public MarkupElement nextTag() throws ParseException
 						""The wicket:id attribute value must not be empty. May be unmatched quotes?!?"",
 						tag.getPos());
 			}
-			// Make it a org.apache.wicket component. Otherwise it would be
-			// RawMarkup
+			// Make it a wicket component. Otherwise it would be RawMarkup
 			tag.setId(value);
 		}
 
```","who thought it was a good idea to do ""wicket""->""org.apache.wicket"" ????",0,0,4,4,remove unnecessary code,0,0,4,4,Style: Update comment in nextTag() method The comment in the `nextTag()` method of `WicketTagIdentifier.java` has been updated for clarity. The method retrieves the next XML tag from the markup and converts it into a WicketTag if it belongs to the Wicket namespace. The updated comment better reflects this functionality.,4,4,2,4,"refactor: Use 'wicket' instead of 'org.apache.wicket' in WicketTagIdentifier
This commit updates the WicketTagIdentifier to use the shorter 'wicket' namespace, aligning with the convention used in the rest of the codebase, and reducing unnecessary verbosity."
6af365b9b8a426020c412dc7727a17a87bad8ba9,apache/wicket,,"File: jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SelectPage.java
Status: modified
```diff
@@ -162,7 +162,6 @@ protected void explain()
 				+ ""&nbsp;&nbsp;&nbsp;&nbsp;ListMultipleChoice manyChoice = new ListMultipleChoice(\""choices\"", MANY_CHOICES).setMaxRows(5);\n""
 				+ ""&nbsp;&nbsp;&nbsp;&nbsp;form.add(manyChoice);"";
 
-		// TODO Post 1.2: General: Unknown todo
 		html = ""SEE INSIDE FOR NOW"";
 		code = ""SEE INSIDE FOR NOW"";
 
```",removed noop TODO,4,4,4,4,remove unused code,0,0,4,4,"Fix: Remove TODO comment in SelectPage class The TODO comment was removed from the SelectPage class in the Apache Wicket framework. This class provides examples of using the Select form component. The removal of the comment is a cleanup of the code, improving its readability.",4,4,3,4,"refactor: Remove TODO comment and update html and code variables in SelectPage class
Removed outdated TODO comment and updated html and code variables in SelectPage class to align with the current implementation. This change eliminates unnecessary code clutter and brings the codebase closer to its intended state."
7799aa5470f4f89550782a426a068ef555c0f242,apache/wicket,,"File: jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/basic/SimplePageTest.java
Status: modified
```diff
@@ -326,11 +326,11 @@ public void testRenderHomePage_6() throws Exception
 
 	/**
 	 * @throws Exception
+	 */
 	public void testRenderHomePage_7() throws Exception
 	{
 		executeTest(SimplePage_7.class, ""SimplePageExpectedResult_7.html"");
 	}
-	 */
 
 	/**
 	 * @throws Exception
```",enabled the failing test again,2,4,4,4,fix typo in javadoc,0,0,4,4,Feat: Adjust comment in SimplePageTest.java This commit adjusts the placement of a comment in the SimplePageTest.java file. The change is minor and does not affect the functionality of the code.,2,4,4,4,"fix: Remove unnecessary Javadoc comment closing
Removed unnecessary Javadoc comment closing in SimplePageTest.java to simplify the code and reduce visual noise. This change aligns with best practices for code organization and formatting."
81585ff7b7def59aab719a9f6f386ff5d072e5f5,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/RequestUtils.java
Status: modified
```diff
@@ -21,15 +21,20 @@
 
 import org.apache.wicket.util.value.ValueMap;
 
-
 /**
- * TODO
+ * Wicket Http specific utilities class.
  */
-public class RequestUtils
+public final class RequestUtils
 {
 	/**
+	 * Decode the provided queryString as a series of key/ value pairs and set
+	 * them in the provided value map.
+	 * 
 	 * @param queryString
+	 *            string to decode, uses '&' to separate parameters and '=' to
+	 *            separate key from value
 	 * @param params
+	 *            parameters map to write the found key/ value pairs to
 	 */
 	public static void decodeParameters(String queryString, ValueMap params)
 	{
@@ -55,4 +60,11 @@ public static void decodeParameters(String queryString, ValueMap params)
 			}
 		}
 	}
+
+	/**
+	 * Hidden utility class constructor.
+	 */
+	private RequestUtils()
+	{
+	}
 }
```",doc & style tweaks,4,3,4,4,add final to RequestUtils,0,1,4,3,"Refactor: Enhance RequestUtils class functionality The RequestUtils class in the Wicket Http package has been refactored. The class has been made final, and the method decodeParameters has been updated to decode query strings into key/value pairs and add them to a provided value map. A new private constructor has also been added. This commit does not have any associated issues or pull requests.",3,3,4,4,"refactor: Make RequestUtils class final and prevent instantiation
Prevented instantiation of RequestUtils by making it final and adding a private constructor, ensuring it's used as a utility class. This refactoring improves code organization and maintainability."
976399fdfae80a7bf3c2de40bca002c2472d30cb,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java
Status: modified
```diff
@@ -742,8 +742,8 @@ public Component(final String id)
 	public Component(final String id, final IModel model)
 	{
 		setId(id);
-		this.model = wrap(model);
 		getApplication().notifyComponentInstantiationListeners(this);
+		this.model = wrap(model);
 
 		final IDebugSettings debugSettings = Application.get().getDebugSettings();
 		if (debugSettings.getComponentUseCheck())
```",rollback call wrapModel before calling the instantiation listener (so wrap is called after the listener again now).,4,4,4,4,fix Component constructor,2,2,4,4,"Refactor: Move model wrapping after component instantiation notification In the Component class, the line 'this.model = wrap(model);' has been moved after the line 'getApplication().notifyComponentInstantiationListeners(this);'. This change does not affect the functionality of the Component class.",0,4,3,4,"refactor: Swap setId and model assignment in Component constructor
Swapped setId and model assignment in the Component constructor to improve code readability and maintainability by reducing potential errors and making the code easier to follow."
0c7ad3bd3fc4bcab38b4ad47e196b5ac1dd91cad,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java
Status: modified
```diff
@@ -1024,7 +1024,7 @@ public final void validate()
 		{
 			convertInput();
 
-			if (isRequired() && getConvertedInput() == null)
+			if (isValid() && isRequired() && getConvertedInput() == null)
 			{
 				reportRequiredError();
 			}
```",tweak to check for conversion errors,4,4,4,4,fix npe in FormComponent üòÖ,0,1,4,4,"Fix: Add validity check in validate() method This commit modifies the validate() method in FormComponent.java to include an additional check for validity before proceeding with the conversion of the input. This change ensures that only valid and required inputs are converted, improving the robustness of the input validation process.",2,1,4,4,"fix: Validate required form component input correctly
This change fixes a bug where required form component input was not being validated correctly, leading to incorrect error reporting. The added isValid() check ensures that errors are only reported when necessary."
8d8d7b3f5f0285c0481da3c49638a69c988d8e73,apache/wicket,Y,"File: jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java
Status: modified
```diff
@@ -71,6 +71,16 @@ public Date getDate()
 		return (date != null) ? date.toDate() : null;
 	}
 
+	/**
+	 * @see org.apache.wicket.markup.html.form.FormComponent#getInput()
+	 */
+	public String getInput()
+	{
+		// since we override convertInput, we can let this method return a value
+		// that is just suitable for error reporting
+		return dateField.getInput();
+	}
+
 	/**
 	 * Sets date.
 	 * 
```


File: jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java
Status: modified
```diff
@@ -147,6 +147,16 @@ public Integer getHours()
 		return hours;
 	}
 
+	/**
+	 * @see org.apache.wicket.markup.html.form.FormComponent#getInput()
+	 */
+	public String getInput()
+	{
+		// since we override convertInput, we can let this method return a value
+		// that is just suitable for error reporting
+		return dateField.getInput() + "", "" + hoursField.getInput() + "":"" + minutesField.getInput();
+	}
+
 	/**
 	 * Gets minutes.
 	 * 
```",override getInput to return a value that can be used for error reporting,4,4,4,4,add getInput method to DateField,0,2,4,4,"feat: Add getInput method for error reporting This commit adds a new method, getInput(), to the DateTimeField.java file. This method returns a string representation of the input from the date, hours, and minutes fields, primarily for error reporting purposes. The returned string is in the format of ""date, hours:minutes"".",4,4,4,4,"refactor: Implement getInput method for FormComponentPanel subclasses
This commit implements the `getInput` method in `DateField` and `DateTimeField` subclasses, conforming to the `FormComponent` interface. The method returns a string representation of input values, suitable for error reporting, by delegating to the underlying date and time fields."
8ed9abfbd7a4b215bcfa4d2ba863e0f4150f63cc,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java
Status: modified
```diff
@@ -1215,6 +1215,16 @@ private final void init()
 		checkModel();
 	}
 
+	/**
+	 * INTERNAL
+	 * 
+	 * @param node
+	 */
+	public final void markNodeDirty(TreeNode node)
+	{
+		invalidateNode(node, false);
+	}
+
 	/**
 	 * Invalidates single node (without children). On the next render, this node will be updated.
 	 * Node will not be rebuilt, unless forceRebuild is true.
```",allow to manually update tree rows on ajax request,0,3,4,4,add AbstractTree markNodeDirty method,0,1,4,3,"Feat: Add markNodeDirty method in AbstractTree class This commit adds a new method `markNodeDirty(TreeNode node)` in the `AbstractTree.java` file. This method marks a node as dirty, indicating that it needs to be re-rendered or recalculated.",4,4,4,4,"feat: Add markNodeDirty method to AbstractTree
This addition enables explicit control over node dirty state, allowing for more efficient and targeted updates in tree-based structures. The markNodeDirty method provides a way to invalidate a specific node, ensuring that it will be updated or redrawn on the next render."
3fc1edadca900947119d2aa3ce1375d051a946c2,apache/wicket,,"File: jdk-1.4/wicket/src/test/java/org/apache/wicket/util/io/WicketOutputStreamTest.java
Status: modified
```diff
@@ -23,6 +23,7 @@
 
 import junit.framework.Assert;
 
+import org.apache.wicket.RequestCycle;
 import org.apache.wicket.WicketTestCase;
 import org.apache.wicket.protocol.http.HttpSessionStore;
 import org.apache.wicket.protocol.http.WebApplication;
@@ -38,7 +39,7 @@ public class WicketOutputStreamTest extends WicketTestCase
 
 	/**
 	 * Tests serialization of a big int.
-	 * 
+	 *
 	 * @throws Exception
 	 */
 	public void testBigInteger() throws Exception
@@ -131,6 +132,8 @@ public void testPageReference() throws Exception
 		Assert.assertEquals(a, a2);
 
 		Assert.assertSame(a2, a2.getB().getA());
+		
+		RequestCycle.get().detach();
 	}
 
 
```",detach the request cycle otherwise session thread locals are not cleaned and are breaking other tests,4,4,4,4,fix unit test,2,2,4,4,"Fix: Ensure correct serialization and deserialization of page references In the testPageReference() method of WicketOutputStreamTest.java, a line of code was added to ensure that the deserialized object is the same as the original one. This fix ensures the correct serialization and deserialization of page references.",0,0,3,3,"refactor: Refactor testBigInteger method to detach RequestCycle
Detached RequestCycle in testBigInteger method to prevent lingering references and ensure proper cleanup. This refactoring improves the internal structure of WicketOutputStreamTest, enhancing its maintainability and understandability."
cc5892f29261c6e58926aa4eea84b444e357c965,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java
Status: modified
```diff
@@ -385,7 +385,16 @@ public boolean doGet(final HttpServletRequest servletRequest,
 			{
 				// Close response
 				if (response != null)
-					response.close();
+				{
+					try
+					{
+						response.close();
+					}
+					catch (Exception e)
+					{
+						log.error(""closing the buffer error"", e);
+					}
+				}
 
 				// Clean up thread local session
 				Session.unset();
```",try catch around close If it throws an exception then the finally block is not completely executed,4,4,4,4,handle exceptions thrown from WicketFilter,4,4,4,4,"Fix: Handle exceptions when closing response In the 'doGet' method of the 'WicketFilter.java' file, a try-catch block has been added to handle exceptions when closing the response. This change ensures that any exceptions that occur during the closing of the response are properly caught and logged, preventing potential crashes or unexpected behavior.",4,4,4,4,"fix: Wrap response close with try-catch block in WicketFilter
Wrapped response close in a try-catch block to handle potential IOExceptions during response closure, ensuring that the filter can continue to process requests even if an exception occurs during response close."
31239099657a751fc4cd6e51cdf65a41164eca66,apache/wicket,Y,"File: wicket/src/main/java/org/apache/wicket/markup/html/form/CheckGroup.java
Status: modified
```diff
@@ -141,7 +141,7 @@ public Object component(Check<T> check)
 								""] contains an illegal relative path "" +
 								""element ["" +
 								value +
-								""] which does not point to a Check component. Due to this the CheckGroup component cannot resolve the selected Check component pointed to by the illegal value. A possible reason is that componment hierarchy changed between rendering and form submission."");
+								""] which does not point to a Check component. Due to this the CheckGroup component cannot resolve the selected Check component pointed to by the illegal value. A possible reason is that component hierarchy changed between rendering and form submission."");
 					}
 
 					// assign the value of the group's model
```


File: wicket/src/main/java/org/apache/wicket/markup/html/form/RadioGroup.java
Status: modified
```diff
@@ -124,7 +124,7 @@ public Object component(Radio<T> radio)
 						""] for RadioGroup component ["" +
 						getPath() +
 						""] is illegal because it does not contain relative path to a Radio componnet. "" +
-						""Due to this the RadioGroup component cannot resolve the selected Radio component pointed to by the illegal value. A possible reason is that componment hierarchy changed between rendering and form submission."");
+						""Due to this the RadioGroup component cannot resolve the selected Radio component pointed to by the illegal value. A possible reason is that component hierarchy changed between rendering and form submission."");
 			}
 
 
```",fix typo in error message,4,4,4,4,fix check style issues,0,0,4,4,"Fix: Correct typo in error messages This commit corrects a typo in the error messages in the methods convertValue in both CheckGroup.java and RadioGroup.java. The typo was in the word ""componment"", which has been corrected to ""component"". The error messages are shown when the CheckGroup or RadioGroup component cannot resolve the selected Check or Radio component due to an illegal value.",4,4,4,4,"fix: Correct 'componment' to 'component' in error messages
This commit fixes a typo in error messages of CheckGroup and RadioGroup components, replacing 'componment' with 'component', to provide more accurate and helpful debugging information."
cc195638e57df89bcdb8f72b344107c673143d96,apache/wicket,,"File: wicket-core/src/main/java/org/apache/wicket/request/cycle/RequestCycle.java
Status: modified
```diff
@@ -528,7 +528,7 @@ public void onDetach()
 		}
 		catch (RuntimeException e)
 		{
-			log.error(""Exception occurred during onAfterRequest"", e);
+			log.error(""Exception occurred during onEndRequest"", e);
 		}
 
 		try
```",Fix exception message. The name of the method is onEndRequest(),4,4,4,4,fix error message,4,4,4,4,"Fix: Correct log message in onDetach method of RequestCycle class The log message in the onDetach method of the RequestCycle class has been corrected. The old message was ""Exception occurred during onAfterRequest"", and the new message is ""Exception occurred during onEndRequest"". This change ensures that the log message accurately reflects the operation of the method.",4,4,4,4,"fix: Correct exception logging in onEndRequest
Fixed incorrect method name in exception logging, which was previously logging 'onAfterRequest' instead of 'onEndRequest', to ensure accurate error reporting."
638b55e428226b0bd39f9307320f46cb2b36e91a,apache/wicket,,"File: wicket-core/src/main/java/org/apache/wicket/protocol/http/RequestLogger.java
Status: modified
```diff
@@ -339,7 +339,10 @@ public void sessionCreated(String sessionId)
 
 	public void sessionDestroyed(String sessionId)
 	{
-		RequestCycle.get().setMetaData(SESSION_DATA, liveSessions.remove(sessionId));
+		RequestCycle requestCycle = RequestCycle.get();
+		SessionData sessionData = liveSessions.remove(sessionId);
+		if (requestCycle != null)
+			requestCycle.setMetaData(SESSION_DATA, sessionData);
 	}
 
 	protected RequestData getCurrentRequest()
```","Fixes NPE when sessions are invalidated *outside* a request, e.g. due to session timeout",4,4,4,4,fix npe in RequestLogger sessionDestroyed,4,4,4,4,"Refactor: Improve session destruction handling in RequestLogger This commit refactors the `sessionDestroyed` method in `RequestLogger.java` to handle the event of a session being destroyed more robustly. Previously, the method directly removed the session with the given session id from the live sessions and set the removed session data as metadata in the current request cycle. This commit adds a null check for `RequestCycle` before setting the metadata, preventing potential null pointer exceptions.",4,4,4,4,"fix: Prevent null pointer dereference in sessionDestroyed method
Prevent null pointer dereference in sessionDestroyed method by ensuring RequestCycle is valid before updating metadata, to maintain data consistency and prevent unexpected behavior."
4e53b486fa162580dfc24deb1f4c1f47f5c7d2e1,apache/wicket,,"File: wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java
Status: modified
```diff
@@ -1797,12 +1797,14 @@ private Url transform(final Url url)
 	 */
 	public <C extends Page> Result isRenderedPage(Class<C> expectedRenderedPageClass)
 	{
+		Args.notNull(expectedRenderedPageClass, ""expectedRenderedPageClass"");
+
 		Page page = getLastRenderedPage();
 		if (page == null)
 		{
 			return Result.fail(""page was null"");
 		}
-		if (!page.getClass().isAssignableFrom(expectedRenderedPageClass))
+		if (!expectedRenderedPageClass.isAssignableFrom(page.getClass()))
 		{
 			return Result.fail(String.format(""classes not the same, expected '%s', current '%s'"",
 				expectedRenderedPageClass, page.getClass()));
```",Reverse the check for rendered page's class. This way a sub-type can be checked against super-type.,4,4,4,4,fix npe in BaseWicketTester,0,1,4,4,"Refactor: Improve null check and class comparison in BaseWicketTester This commit refactors the `isRenderedPage` method in the `BaseWicketTester` class. A null check was added for `expectedRenderedPageClass` to prevent potential null pointer exceptions. Additionally, the condition for checking if the page class is assignable from `expectedRenderedPageClass` was modified to improve readability and maintainability. These changes do not alter the functionality of the method, which continues to check if the last rendered page is of the expected type.",4,4,4,4,"fix: Ensure expectedRenderedPageClass is not null in isRenderedPage method
Fixed a potential NullPointerException in the isRenderedPage method by ensuring that the expectedRenderedPageClass is not null before calling isAssignableFrom. This change prevents unexpected errors when testing page rendering."
9fb30084cbc737ec035ed0e76a425612db462b47,apache/wicket,,"File: wicket-core/src/main/java/org/apache/wicket/core/request/mapper/BookmarkableMapper.java
Status: modified
```diff
@@ -70,7 +70,7 @@ public BookmarkableMapper()
 	}
 
 	/**
-	 * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#buildUrl(org.apache.wicket.request.mapper.AbstractBookmarkableMapper.UrlInfo)
+	 * @see AbstractBookmarkableMapper#buildUrl(AbstractBookmarkableMapper.UrlInfo)
 	 */
 	@Override
 	protected Url buildUrl(UrlInfo info)
@@ -86,7 +86,7 @@ protected Url buildUrl(UrlInfo info)
 	}
 
 	/**
-	 * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#parseRequest(org.apache.wicket.request.Request)
+	 * @see AbstractBookmarkableMapper#parseRequest(org.apache.wicket.request.Request)
 	 */
 	@Override
 	protected UrlInfo parseRequest(Request request)
@@ -123,7 +123,7 @@ protected UrlInfo parseRequest(Request request)
 	}
 
 	/**
-	 * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#pageMustHaveBeenCreatedBookmarkable()
+	 * @see AbstractBookmarkableMapper#pageMustHaveBeenCreatedBookmarkable()
 	 */
 	@Override
 	protected boolean pageMustHaveBeenCreatedBookmarkable()
@@ -132,7 +132,7 @@ protected boolean pageMustHaveBeenCreatedBookmarkable()
 	}
 
 	/**
-	 * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#getCompatibilityScore(org.apache.wicket.request.Request)
+	 * @see AbstractBookmarkableMapper#getCompatibilityScore(org.apache.wicket.request.Request)
 	 */
 	@Override
 	public int getCompatibilityScore(Request request)
```",Fix broken javadoc links,4,3,4,4,fix javadoc warnings,4,3,4,4,Style: Update comments in BookmarkableMapper.java Updated the comments in the `BookmarkableMapper.java` file to use a shorter form of the class name. This change improves the readability of the code and makes it easier to understand.,4,4,4,4,"refactor: Simplify imports in BookmarkableMapper
Updated import statements to use shorter, more explicit references to superclass methods, aligning with Java best practices and reducing visual noise."
152e8b1af359284ec680e3799f019cc20411cc15,apache/wicket,Y,"File: wicket-core/src/main/java/org/apache/wicket/markup/head/PriorityFirstComparator.java
Status: modified
```diff
@@ -16,6 +16,7 @@
  */
 package org.apache.wicket.markup.head;
 
+import java.io.Serializable;
 import java.util.Comparator;
 
 import org.apache.wicket.Page;
@@ -30,13 +31,13 @@
  * 
  * @author papegaaij
  */
-public class PriorityFirstComparator implements Comparator<RecordedHeaderItem>
+public class PriorityFirstComparator implements Comparator<RecordedHeaderItem>, Serializable
 {
-	protected enum HeaderItemType {
+	protected static enum HeaderItemType {
 		PRIORITY, PAGE, COMPONENT;
 	}
 
-	private boolean renderPageFirst = false;
+	private final boolean renderPageFirst;
 
 	/**
 	 * Construct.
```


File: wicket-util/src/main/java/org/apache/wicket/util/collections/UrlExternalFormComparator.java
Status: modified
```diff
@@ -16,6 +16,7 @@
  */
 package org.apache.wicket.util.collections;
 
+import java.io.Serializable;
 import java.net.URL;
 import java.util.Comparator;
 
@@ -29,7 +30,7 @@
  *
  * @since 1.5.6
  */
-public class UrlExternalFormComparator implements Comparator<URL>
+public class UrlExternalFormComparator implements Comparator<URL>, Serializable
 {
 	public int compare(URL url1, URL url2)
 	{
```",Make two new implementations of Comparator serializable. Just in case they are used by someone in a collection which is supposed to be serialized.,4,4,4,4,make PriorityFirstComparator serializable,0,3,4,4,"Refactor: Make classes implement Serializable interface In this commit, the `PriorityFirstComparator` and `UrlExternalFormComparator` classes were made to implement the `Serializable` interface. In addition, the `HeaderItemType` enum in `PriorityFirstComparator` was made static and the `renderPageFirst` variable was made final. This change allows `PriorityFirstComparator` to prioritize `PriorityHeaderItems` and optionally render page headers first. The functionality of `UrlExternalFormComparator` remains the same.",4,4,4,4,"refactor: Add Serializable interface to comparators
Added Serializable interface to PriorityFirstComparator and UrlExternalFormComparator classes to ensure they can be serialized, as required by certain Java frameworks and libraries."
9de425ea4b6285cd0916a96161ebb09056389165,apache/wicket,,"File: wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java
Status: modified
```diff
@@ -140,7 +140,7 @@ else if (type.isInterface())
 				ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
 				if (Application.exists())
 				{
-					IClassResolver classResolver = (IClassResolver) Application.get()
+					IClassResolver classResolver = Application.get()
 							.getApplicationSettings()
 							.getClassResolver();
 
```",Remove unneeded cast.,4,4,4,4,fix compilation error,0,0,4,4,Refactor: Simplify initialization of IClassResolver in LazyInitProxyFactory This commit simplifies the way the IClassResolver classResolver is initialized in the createProxy method of the LazyInitProxyFactory.java file. The change does not alter the functionality of the method.,4,3,4,4,"fix: Remove unnecessary cast to IClassResolver in LazyInitProxyFactory.
Removed unnecessary cast to IClassResolver in LazyInitProxyFactory's createProxy method, improving code readability and maintainability without altering its behavior."
bcc601c23466d524a9dc80a6895c71ae4091d402,apache/wicket,,"File: wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AutoCompletePage.java
Status: modified
```diff
@@ -24,13 +24,10 @@
 
 import org.apache.wicket.ajax.AjaxRequestTarget;
 import org.apache.wicket.ajax.form.AjaxFormSubmitBehavior;
-import org.apache.wicket.core.request.handler.BookmarkablePageRequestHandler;
-import org.apache.wicket.core.request.handler.PageProvider;
 import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;
 import org.apache.wicket.markup.html.basic.Label;
 import org.apache.wicket.markup.html.form.Form;
 import org.apache.wicket.model.Model;
-import org.apache.wicket.request.cycle.RequestCycle;
 import org.apache.wicket.util.string.Strings;
 
 
@@ -93,10 +90,6 @@ protected Iterator<String> getChoices(String input)
 			@Override
 			protected void onSubmit(AjaxRequestTarget target)
 			{
-				BookmarkablePageRequestHandler bookmarkablePageRequestHandler = new BookmarkablePageRequestHandler(
-					new PageProvider(Index.class));
-				RequestCycle requestCycle = RequestCycle.get();
-				CharSequence urlFor = requestCycle.urlFor(bookmarkablePageRequestHandler);
 				target.add(label);
 			}
 
```",Remove unused code,4,4,4,4,remove unused code,4,4,4,4,Refactor: Remove unused imports and code in AutoCompletePage.java This commit removes unused import statements and code lines in AutoCompletePage.java. The removed code does not affect the functionality of the class.,4,4,4,4,"refactor: Remove unused BookmarkablePageRequestHandler and RequestCycle
Removed dead code by eliminating unused imports and instances of BookmarkablePageRequestHandler and RequestCycle in AutoCompletePage.java, thereby reducing technical debt and improving code maintainability."
7c4fb4de88885095557821342c7dafde870af231,apache/wicket,,"File: wicket-core/src/main/java/org/apache/wicket/markup/transformer/AbstractOutputTransformerContainer.java
Status: modified
```diff
@@ -29,7 +29,8 @@
  * This abstract container provides the means to post-process the markup generated by its child
  * components (excluding the containers tag)
  * <p>
- * Please see <code>IBehavior</code> for an alternative based on IBehavior
+ * Please see {@link org.apache.wicket.markup.transformer.AbstractTransformerBehavior} for an alternative
+ * based on {@link org.apache.wicket.behavior.Behavior}
  * 
  * @see org.apache.wicket.markup.transformer.AbstractTransformerBehavior
  * @see org.apache.wicket.markup.transformer.ITransformer
```",Fix javadoc of AbstractOutputTransformerContainer,4,4,4,4,fix typo in javadoc,2,2,4,4,Style: Update comments in AbstractOutputTransformerContainer.java The comments in AbstractOutputTransformerContainer.java have been updated. The reference to IBehavior has been replaced with a reference to AbstractTransformerBehavior and Behavior. This change does not affect the functionality of the code.,4,4,3,4,"style: Use @link instead of <code> in JavaDoc
Replaced `<code>` tags with `@link` in JavaDoc comments to conform to JavaDoc's recommended syntax for linking to other classes and methods."
ea6cbc11aa9cef21fdfd77bc36e1970927d06eee,apache/wicket,,"File: wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.java
Status: modified
```diff
@@ -267,13 +267,8 @@ private void init()
 
 		// install a default callback that will force
 		// WindowClosedBehavior to be executed
-		setWindowClosedCallback(new WindowClosedCallback()
-		{
-			@Override
-			public void onClose(AjaxRequestTarget target)
-			{
-				// noop
-			}
+		setWindowClosedCallback((WindowClosedCallback) target -> {
+			// noop
 		});
 
 	}
```",Use Lambda to make the code shorter,4,4,4,4,remove callback from ModalWindow,0,1,4,4,Refactor: Simplify callback in ModalWindow.init The `init` method in `ModalWindow.java` has been refactored. The callback for when the window is closed has been simplified by replacing the old version of the method with a lambda expression. This change improves the readability of the code without altering its functionality. The `init` method is used to initialize the modal window with default settings and behaviors.,4,4,3,4,"refactor: Simplify WindowClosedCallback initialization
Replaced anonymous class with lambda expression to simplify WindowClosedCallback initialization, improving code readability and conciseness without altering ModalWindow's observable behavior."
b924402a5d263b473075a06611edfd88ca2bdfce,apache/wicket,,"File: wicket-core/src/test/java/org/apache/wicket/page/PageAccessSynchronizerTest.java
Status: modified
```diff
@@ -19,6 +19,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;_x000D_
 import static org.junit.jupiter.api.Assertions.assertNull;_x000D_
 import static org.junit.jupiter.api.Assertions.assertTrue;_x000D_
+_x000D_
 import java.time.Duration;_x000D_
 import java.time.Instant;_x000D_
 import java.util.Random;_x000D_
@@ -27,6 +28,7 @@
 import java.util.concurrent.CountDownLatch;_x000D_
 import java.util.concurrent.TimeUnit;_x000D_
 import java.util.concurrent.atomic.AtomicInteger;_x000D_
+_x000D_
 import org.apache.wicket.MockPage;_x000D_
 import org.apache.wicket.core.util.lang.WicketObjects;_x000D_
 import org.apache.wicket.mock.MockPageManager;_x000D_
```",Class formatted according to the code style,3,4,4,4,fix checkstyle issues,4,4,4,4,"Style: Code style adjustments in PageAccessSynchronizerTest.java No changes were made to the functionality of the code. The adjustments are related to the code style, possibly import statements or comments.",4,2,4,4,"style: Organize imports
Sorted import statements in PageAccessSynchronizerTest.java to maintain consistency and simplify code navigation. This change is a part of the Wicket 6662 pull request, focusing on code organization improvements."
91feb64c98ffe1835075e1fa8d782e43e0c785ee,apache/cxf,,"File: rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/AccessTokenService.java
Status: modified
```diff
@@ -65,10 +65,10 @@ public void setGrantHandlers(List<AccessTokenGrantHandler> handlers) {
     protected void injectContextIntoOAuthProviders() {
         super.injectContextIntoOAuthProviders();
         for (AccessTokenGrantHandler grantHandler : grantHandlers) {
-            OAuthUtils.injectContextIntoOAuthProvider(getMessageContext(), grantHandler);    
+            OAuthUtils.injectContextIntoOAuthProvider(getMessageContext(), grantHandler);
         }
     }
-    
+
     /**
      * Sets a grant handler
      * @param handler the grant handler
@@ -125,6 +125,7 @@ public Response handleTokenRequest(MultivaluedMap<String, String> params) {
         } catch (WebApplicationException ex) {
             throw ex;
         } catch (RuntimeException ex) {
+            LOG.log(Level.FINE, ""Error creating the access token"", ex);
             // This is done to bypass a Check-Style
             // restriction on a number of return statements
             OAuthServiceException oauthEx = ex instanceof OAuthServiceException
```",Log the AccessTokenService error,0,2,3,3,fix checkstyle issue,0,0,4,4,Style: Clean up code and add logging in AccessTokenService This commit removes unnecessary spaces in the `injectContextIntoOAuthProviders` method and adds a log statement in the `handleTokenRequest` method for runtime exceptions. The logging will help in debugging by providing more information when an error occurs while creating the access token.,4,4,4,4,"fix: Fix AccessTokenService to log exceptions when creating access tokens
This commit adds exception logging to AccessTokenService when creating access tokens, catching and logging RuntimeExceptions to improve error handling and logging."
260efe56fc1bfc89950d1eda89114feb287490cd,apache/cxf,,"File: rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/Client.java
Status: modified
```diff
@@ -28,6 +28,7 @@
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
 import javax.persistence.Id;
+import javax.persistence.Lob;
 import javax.persistence.ManyToOne;
 import javax.persistence.MapKeyColumn;
 import javax.persistence.OneToOne;
@@ -66,7 +67,7 @@ public class Client implements Serializable {
     private String homeRealm;
     private boolean registeredDynamically;
     private String tokenEndpointAuthMethod;
-    
+
     public Client() {
 
     }
@@ -346,6 +347,7 @@ public void setRegisteredAudiences(List<String> registeredAudiences) {
 
     @ElementCollection(fetch = FetchType.EAGER)
     @OrderColumn
+    @Lob
     public List<String> getApplicationCertificates() {
         return applicationCertificates;
     }
```",Add @lob annotation for application certificates,4,3,4,4,fix exception message,0,0,4,4,Refactor: Enhance getApplicationCertificates method in Client class The getApplicationCertificates method in the Client class has been refactored to return a list of application certificates that are eagerly fetched and ordered as per their insertion in the database. The @Lob annotation has been added to indicate that the application certificates are stored as a large object in the database.,4,4,4,4,"refactor: Annotate getApplicationCertificates with @Lob in Client class
Annotated getApplicationCertificates with @Lob to enable efficient storage and retrieval of large certificate lists as LOBs in the database, improving the internal structure of the Client class."
fbbd85c9c4efb9a57a8d26b90ef475f651ab9b66,apache/cxf,,"File: rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/AccessTokenService.java
Status: modified
```diff
@@ -154,7 +154,9 @@ protected void processClientAccessToken(ClientAccessToken clientToken, ServerAcc
     protected void checkAudience(Client c, MultivaluedMap<String, String> params) {
         String audienceParam = params.getFirst(OAuthConstants.CLIENT_AUDIENCE);
         if (!OAuthUtils.validateAudience(audienceParam, c.getRegisteredAudiences())) {
-            LOG.fine(""Error validating the audience parameter"");
+            LOG.log(Level.FINE, ""Error validating the audience parameter. Supplied audience {0} ""
+                    + ""does not match with the registered audiences {1}"",
+                    new Object[] {audienceParam, c.getRegisteredAudiences() });
             throw new OAuthServiceException(new OAuthError(OAuthConstants.ACCESS_DENIED));
         }
 
```",Improve logging when the audience restriction fails,4,4,4,4,fix typo in log message,1,2,4,4,Fix: Enhance error logging in checkAudience method The `checkAudience` method in `AccessTokenService.java` has been updated to provide more detailed error logging. The log message now includes the supplied audience and the registered audiences for the client. This change will help in better understanding the cause of the error when the audience parameter does not match with the registered audiences.,4,4,4,4,"fix: Log detailed error message when validating audience parameter
Improved error logging by including the supplied audience and registered audiences in the log message, enhancing error diagnosis."
e1a8df8e095b7c6c1c2a237b2f8469ef522fd22e,apache/cxf,,"File: rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/OsgiSwaggerUiResolver.java
Status: modified
```diff
@@ -81,7 +81,7 @@ public String findSwaggerUiRootInternal(String swaggerUiMavenGroupAndArtifact,
 
     private String getSwaggerUiRoot(Bundle b, String swaggerUiVersion) {
         if (swaggerUiVersion == null) { 
-            swaggerUiVersion = """";
+            swaggerUiVersion = b.getVersion().toString();
         }
         URL entry = b.getEntry(SwaggerUiResolver.UI_RESOURCES_ROOT_START + swaggerUiVersion);
         if (entry != null) {
```","UI not resolved correctly if version not specificed When findSwaggerUiRootInternal(null, null) is called, the root is returned without the version number which is needed to locate the index.html and other resources within the bundle. /META-INF/resources/webjars/swagger-ui//index.html instead of  /META-INF/resources/webjars/swagger-ui/3.17.6/index.html",4,4,4,4,fix a bug in OsgiSwaggerUiResolver,2,2,4,4,"Fix: Update default swaggerUiVersion in getSwaggerUiRoot In the `getSwaggerUiRoot` method of the `OsgiSwaggerUiResolver` class, the default value of `swaggerUiVersion` has been updated. Previously, if `swaggerUiVersion` was not specified, it was set to an empty string. Now, it is set to the version of the provided bundle. This change ensures that the method returns the correct root directory of the Swagger UI resources for the given version.",4,4,4,4,"fix: Set Swagger UI version to bundle version when not specified
This change ensures Swagger UI root locations are correctly resolved even when the version is not specified. By setting the Swagger UI version to the bundle version when not provided, we prevent incorrect resource locations. This fix addresses the issue reported in pull request 'UI not resolved correctly if version not specificed'."
5ae9b0a5b928b49fc2a4b3fb8dd9b68dca640eb7,apache/cxf,,"File: rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/OsgiSwaggerUiResolver.java
Status: modified
```diff
@@ -47,6 +47,9 @@ public String findSwaggerUiRootInternal(String swaggerUiMavenGroupAndArtifact,
             if (bundle == null) {
                 return null;
             }
+            if (bundle.getState() != Bundle.ACTIVE) {
+				bundle.start();
+			}
             String[] locations = swaggerUiMavenGroupAndArtifact == null ? DEFAULT_LOCATIONS
                 : new String[]{""mvn:"" + swaggerUiMavenGroupAndArtifact + ""/"",
                                ""wrap:mvn:"" + swaggerUiMavenGroupAndArtifact + ""/""};
```",NPE when annotations bundle found but not active bundle.getBundleContext() will give an NPE (in Equinox) if the bundle can be found but is not active. Would also be good to at least log the exception in debug mode to point to a possible problem.,4,4,4,4,changed swaggerUiMavenGroupAndArtifact ACTIVE to a4,2,2,4,4,"Fix: Ensure bundle is active in findSwaggerUiRootInternal method This commit modifies the `findSwaggerUiRootInternal` method in the `OsgiSwaggerUiResolver.java` file to check if the bundle containing the Swagger UI resources is active. If it's not, the bundle is started. This method is used to find the root directory of the Swagger UI resources in the classpath.",4,4,4,4,"fix: Handle inactive bundles in OsgiSwaggerUiResolver
This commit ensures that OsgiSwaggerUiResolver can handle inactive bundles by starting them before accessing their context, thereby preventing NullPointerExceptions and improving overall reliability."
1a8fb5902ea2c8421494a809b551e1f4f4f2b66b,apache/cxf,,"File: rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/OsgiSwaggerUiResolver.java
Status: modified
```diff
@@ -48,8 +48,8 @@ public String findSwaggerUiRootInternal(String swaggerUiMavenGroupAndArtifact,
                 return null;
             }
             if (bundle.getState() != Bundle.ACTIVE) {
-				bundle.start();
-			}
+                bundle.start();
+            }
             String[] locations = swaggerUiMavenGroupAndArtifact == null ? DEFAULT_LOCATIONS
                 : new String[]{""mvn:"" + swaggerUiMavenGroupAndArtifact + ""/"",
                                ""wrap:mvn:"" + swaggerUiMavenGroupAndArtifact + ""/""};
```",Update OsgiSwaggerUiResolver.java Fixed indent,3,3,4,4,fix npe in OsgiSwaggerUiResolver,2,2,4,4,Style: Adjust indentation in OsgiSwaggerUiResolver.java The indentation in the method findSwaggerUiRootInternal of the OsgiSwaggerUiResolver.java file has been adjusted for better readability. No changes have been made to the functionality of the code.,4,4,4,4,"fix: Fix NullPointerException when resolving Swagger UI root locations
This commit prevents a NullPointerException when resolving Swagger UI root locations by ensuring the annotations bundle is started before accessing its context. It also logs the exception in debug mode to aid troubleshooting."
ab452c0eee1fd560bdc91324c4dfe838f1088877,apache/cxf,,"File: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java
Status: modified
```diff
@@ -1183,7 +1183,7 @@ public static ProviderInfo<? extends Object> createProviderFromConstructor(Const
             instance = c.newInstance(cArgs);
         } catch (Throwable ex) {
             throw new RuntimeException(""Resource or provider class "" + c.getDeclaringClass().getName()
-                                       + "" can not be instantiated"");
+                                       + "" can not be instantiated"", ex);
         }
         Map<Class<?>, ThreadLocalProxy<?>> proxies =
             new LinkedHashMap<Class<?>, ThreadLocalProxy<?>>();
```","ProviderFactory.createProviderFromConstructor should include exception cause If newInstance fails because the called constructor of a custom Application implementation throws an exception, the root cause is not included which would reduce the search time for the actual cause.",4,4,4,4,remove unused code,0,0,4,4,"Fix: Improve error handling in ProviderFactory.java In the method createProviderFromConstructor, the RuntimeException now includes the original exception if the provider cannot be instantiated. This change provides more information about the error, improving error handling and debugging.",4,4,4,4,"fix: Include exception cause in RuntimeException thrown by createProviderFromConstructor
This change propagates the exception cause to the RuntimeException thrown by createProviderFromConstructor, providing more informative error messages and facilitating issue diagnosis. It addresses the pull request 'createProviderFromConstructor should include exception cause'."
ec6d94d6cacc755044935615c371eba4f20fdea7,apache/cxf,,"File: rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java
Status: modified
```diff
@@ -252,7 +252,7 @@ private void validateSubjectConfirmation(
         // Check address
         if (subjectConfData.getAddress() != null && clientAddress != null
             && !subjectConfData.getAddress().equals(clientAddress)) {
-            LOG.fine(""Subject Conf Data address "" + subjectConfData.getAddress() + "" does match""
+            LOG.fine(""Subject Conf Data address "" + subjectConfData.getAddress() + "" does not match""
                      + "" client address "" + clientAddress);
             throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, ""invalidSAMLsecurity"");
         }
```",Fixing SAML SSO log error,4,2,4,4,remove unused code,0,0,4,4,"Fix: Correct log message in SAMLSSOResponseValidator The log message in the method validateSubjectConfirmation of the class SAMLSSOResponseValidator has been corrected. The word ""not"" has been added to the message to accurately reflect the condition being checked.",4,4,4,4,"fix: Fix: Correct address mismatch check in SAMLSSOResponseValidator
This commit fixes a bug in the `validateSubjectConfirmation` method where the log message incorrectly stated that the addresses matched when they didn't, leading to incorrect validation. The fix ensures that the log message accurately reflects the address mismatch, resulting in a `WSSecurityException` being thrown when necessary."
455938206f6fe0f5e9717c4a6363d4d11fd414b5,apache/cxf,,"File: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/XSLTJaxbProvider.java
Status: modified
```diff
@@ -337,6 +337,10 @@ protected void addAttachmentMarshaller(Marshaller ms) {
         // complete
     }
 
+    protected Result getStreamResult(OutputStream os, Annotation[] anns, MediaType mt) throws Exception {
+        return new StreamResult(os);
+    }
+    
     @Override
     protected void marshalToOutputStream(Marshaller ms, Object obj, OutputStream os,
                                          Annotation[] anns, MediaType mt)
@@ -356,7 +360,7 @@ protected void marshalToOutputStream(Marshaller ms, Object obj, OutputStream os,
             th = factory.newTransformerHandler(ti.getTemplates());
             this.trySettingProperties(th, ti);
         }
-        Result result = new StreamResult(os);
+        Result result = getStreamResult(os, anns, mt);
         if (systemId != null) {
             result.setSystemId(systemId);
         }
```","introduce getStreamResult to allow override, e.g. for pdf generation using apache fop",4,4,4,4,fix npe in XSLTJaxbProvider,0,2,4,4,Refactor: Extract StreamResult creation to a new method A new method `getStreamResult` has been added to the `XSLTJaxbProvider` class. This method creates a new `StreamResult` instance with the provided `OutputStream`. The `marshalToOutputStream` method has been refactored to use this new method instead of creating a new `StreamResult` instance directly. This change improves the structure of the code without changing its behavior.,4,4,4,4,"refactor: Introduce getStreamResult method to enable custom stream handling
This change extracts the stream result creation into a separate `getStreamResult` method, allowing for more flexibility in handling output streams. This refactoring enables customization of stream handling, as seen in the associated pull request, which targets PDF generation using Apache FOP."
e95413cbafbfa23fd2c82f6009166cd398e9caa6,apache/cxf,,"File: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java
Status: modified
```diff
@@ -367,7 +367,7 @@ public static void injectThroughMethod(Object requestObject,
         } catch (IllegalAccessException ex) {
             reportServerError(""METHOD_ACCESS_FAILURE"", method.getName());
         } catch (InvocationTargetException ex) {
-            LOG.severe(ex.getCause().getMessage(), ex.getCause());
+            LOG.log(Level.SEVERE, ex.getCause().getMessage(), ex);
             Response r = JAXRSUtils.convertFaultToResponse(ex.getCause(), inMessage);
             if (r != null) {
                 inMessage.getExchange().put(Response.class, r);
```",Fixing previous commit,0,0,4,4,fix npe in InjectionUtils,3,4,4,4,"Fix: Update exception logging in injectThroughMethod This commit updates the way exceptions are logged in the `injectThroughMethod` of the `InjectionUtils.java` file. Previously, the cause of the exception was logged using the `severe` method of the Logger. This has been changed to use the `log` method with the `Level.SEVERE` level, logging the entire exception instead of just its cause. This change provides more detailed information when an exception occurs during the injection of a parameter value into a request object through a specified method.",4,4,4,4,"fix: Log InvocationTargetException with its cause
Updated logging in InjectionUtils to include the cause of InvocationTargetException, ensuring that errors are properly reported and logged. This change addresses the issue of error swallowing, as described in CXF-7808, and improves the overall logging mechanism."
b5129ac6ebe3d24d6aac20b6f3ec273f39161c8a,apache/cxf,,"File: core/src/main/java/org/apache/cxf/staxutils/StaxSource.java
Status: modified
```diff
@@ -66,8 +66,7 @@ protected void parse() throws SAXException {
                 // Attributes are handled in START_ELEMENT
                 case XMLStreamConstants.ATTRIBUTE:
                     break;
-                case XMLStreamConstants.CDATA:
-                {
+                case XMLStreamConstants.CDATA: {
                     if (lexicalHandler != null) {
                         lexicalHandler.startCDATA();
                     }
@@ -80,16 +79,14 @@ protected void parse() throws SAXException {
                     }
                     break;
                 }
-                case XMLStreamConstants.CHARACTERS:
-                {
+                case XMLStreamConstants.CHARACTERS: {
                     int length = streamReader.getTextLength();
                     int start = streamReader.getTextStart();
                     char[] chars = streamReader.getTextCharacters();
                     contentHandler.characters(chars, start, length);
                     break;
                 }
-                case XMLStreamConstants.SPACE:
-                {
+                case XMLStreamConstants.SPACE: {
                     int length = streamReader.getTextLength();
                     int start = streamReader.getTextStart();
                     char[] chars = streamReader.getTextCharacters();
```",Fix checkstyle with latest eclipse plugin,4,4,4,4,set __ to true,0,0,0,4,"Style: Adjusted code formatting in StaxSource.java The changes in this commit are related to the formatting of the code in the StaxSource.java file. Specifically, the placement of the opening braces for several case statements has been adjusted to follow the project's coding style. These changes do not affect the functionality of the class.",4,4,4,4,"refactor: Consolidate case statements in parse method
Consolidated similar case statements for XMLStreamConstants.CDATA, CHARACTERS, and SPACE in the parse method, reducing code duplication and improving readability. This refactoring simplifies the method's internal structure, making it easier to understand and modify."
ae994168f50894010f1f148ec3b6f35b17e4b63b,apache/cxf,,"File: core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java
Status: modified
```diff
@@ -62,7 +62,6 @@ public final class SSLUtils {
 
     private static final String DEFAULT_KEYSTORE_TYPE = ""PKCS12"";
     private static final String DEFAULT_TRUST_STORE_TYPE = ""JKS"";
-    private static final String DEFAULT_SECURE_SOCKET_PROTOCOL = ""TLSv1"";
 
     private static final String HTTPS_CIPHER_SUITES = ""https.cipherSuites"";
 
@@ -157,7 +156,7 @@ public static TrustManager[] getDefaultTrustStoreManagers(Logger log) {
                     is = getResourceAsStream(location);
                 }
             }
-            
+
             if (is != null) {
                 TrustManagerFactory tmf =
                     TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
@@ -569,18 +568,4 @@ public static String getTruststoreProvider(String trustStoreProvider, Logger log
         return trustStoreProvider;
     }
 
-    public static String getSecureSocketProtocol(String secureSocketProtocol,
-                                                 Logger log) {
-        if (secureSocketProtocol != null) {
-            LogUtils.log(log,
-                         Level.FINE,
-                         ""SECURE_SOCKET_PROTOCOL_SET"",
-                         secureSocketProtocol);
-        } else {
-            LogUtils.log(log, Level.FINE, ""SECURE_SOCKET_PROTOCOL_NOT_SET"");
-            secureSocketProtocol = DEFAULT_SECURE_SOCKET_PROTOCOL;
-        }
-        return secureSocketProtocol;
-    }
-
 }
```",Removing unused getSecureSocketsProtocol method,4,4,4,4,add constructor for SSLUtils,0,0,4,4,"Refactor: Remove secure socket protocol from SSLUtils The `getSecureSocketProtocol` method and the `DEFAULT_SECURE_SOCKET_PROTOCOL` constant were removed from the `SSLUtils` class. The functionality of the class remains the same, but it no longer provides a method to get the secure socket protocol. This change simplifies the `SSLUtils` class and reduces its responsibilities.",4,4,4,4,"refactor: Remove secure socket protocol configuration
Removed obsolete `DEFAULT_SECURE_SOCKET_PROTOCOL` constant and `getSecureSocketProtocol` method, simplifying `SSLUtils` class internal structure and improving maintainability without altering observable behavior."
86d7c657499b73bdbbd6ba9f1579e76ca0715357,apache/cxf,,"File: core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java
Status: modified
```diff
@@ -31,6 +31,7 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -65,8 +66,6 @@ public final class SSLUtils {
 
     private static final String HTTPS_CIPHER_SUITES = ""https.cipherSuites"";
 
-    private static final List<String> DEFAULT_CIPHERSUITE_FILTERS_INCLUDE =
-        Arrays.asList(new String[] {"".*""});
     /**
      * By default, exclude NULL, anon, EXPORT, DES, 3DES, MD5, CBC and RC4 ciphersuites
      */
@@ -409,7 +408,7 @@ public static String[] getFilteredCiphersuites(FiltersType filters,
         List<Pattern> includes =
             filters != null
                 ? compileRegexPatterns(filters.getInclude(), true, log)
-                : compileRegexPatterns(DEFAULT_CIPHERSUITE_FILTERS_INCLUDE, true, log);
+                : Collections.emptyList();
         List<Pattern> excludes =
             filters != null
                 ? compileRegexPatterns(filters.getExclude(), false, log)
```",Remove default ciphersuite filter inclusion (which isn't used anyway),4,4,4,4,make method protected,0,0,4,4,"Refactor: Update getFilteredCiphersuites method in SSLUtils.java In this commit, the getFilteredCiphersuites method in SSLUtils.java has been refactored. The method now filters the supported cipher suites based on the provided include/exclude filters. The constant list DEFAULT_CIPHERSUITE_FILTERS_INCLUDE has been removed and replaced with a call to Collections.emptyList(). This change simplifies the code and makes it easier to understand.",4,4,4,4,"refactor: Remove default cipher suite filters
Previously, the SSLUtils class had hardcoded default cipher suite filters, which limited the flexibility of the filtering mechanism. By removing these hardcoded filters, we can now provide a more dynamic and configurable approach to cipher suite filtering, making the class more maintainable and adaptable to different use cases."
cfab2ec2eced0dc0b026bc4bfbeeb18fff28e1b6,apache/cxf,,"File: rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/SimpleParameterizedType.java
Status: modified
```diff
@@ -66,7 +66,7 @@ public boolean equals(Object obj) {
         if (this == obj) {
             return true;
         }
-        if (obj == null) {
+        if (!(obj instanceof ParameterizedType)) {
             return false;
         }
 
```",Add instanceof to the equals method,0,3,4,4,fix a bug in SimpleParameterizedType,1,2,4,4,Fix: Update equals method in SimpleParameterizedType class The equals method in the SimpleParameterizedType class has been updated. The condition checking if the object is null has been replaced with a condition checking if the object is an instance of ParameterizedType. This change ensures a more accurate comparison between this parameterized type and another object.,4,4,4,4,"fix: Improve equals() method null handling
This change improves the equals() method's null handling by introducing an instance check, preventing NullPointerExceptions when comparing against null objects."
82b24f6db4537623370ebfc7a229562253a16197,apache/cxf,,"File: rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/AbstractHTTPServlet.java
Status: modified
```diff
@@ -480,7 +480,7 @@ private static class HttpServletRequestXForwardedFilter extends HttpServletReque
                                            String originalPort) {
             super(request);
             this.newProtocol = originalProto;
-            if (newRemoteAddr != null) {
+            if (originalRemoteAddr != null) {
                 newRemoteAddr = (originalRemoteAddr.split("","")[0]).trim();
             }
             newRequestUri = calculateNewRequestUri(request, originalPrefix);
```",Fix newRemoteAddr is never assigned * Using the wrong variable for not null validation before HttpServletRequestXForwardedFilter.newRemoteAddr assignment.,4,4,4,4,improve error messages for AbstractHTTPServlet,0,0,4,4,Fix: Correct condition check in AbstractHTTPServlet The condition in the AbstractHTTPServlet.java file has been modified to check if 'originalRemoteAddr' is not null instead of 'newRemoteAddr'. This change ensures that the correct variable is checked before proceeding with the method execution.,4,4,4,4,"fix: Validate against originalRemoteAddr instead of newRemoteAddr
This change corrects the validation logic in `AbstractHTTPServlet` by using `originalRemoteAddr` instead of `newRemoteAddr`, which previously caused the `X-Forwarded-For` header to be ignored. This fix ensures that the header is now properly considered, addressing the issue of `newRemoteAddr` never being assigned."
