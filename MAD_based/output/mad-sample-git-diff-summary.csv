project,commit,OMG,AMG-DIFF-SUM,AMG,MAD,MAD_duration,Rounds,Total Tokens
apache/directory-server,9cbf06fcae73d281aa4804e574335d12fd0764ec,"Refactor: Use addNormalized in getFarthestReferralAncestor method In the `getFarthestReferralAncestor` method of the `ReferralLut` class, replaced the `add` method with the `addNormalized` method. This is an internal change that does not alter the functionality of the method.","refactor: Normalize RDNs in ReferralLut
This commit refactors the ReferralLut class to ensure that Relative Distinguished Names (RDNs) added to the farthest collection are normalized. This change is necessary for correct processing and comparison of referral data. The add method has been replaced with addNormalized to achieve this normalization.","Refactor: improve referral ancestor lookup
refactor the getfarthestreferralancestor method to use addnormalized instead of add, ensuring correct referral handling in ldap referral scenarios.","refactor: Normalize RDNs in farthest collection on addition
This commit refactors the `getFarthestReferralAncestor` method in `ReferralLut` to ensure that Relative Distinguished Names (RDNs) added to the `farthest` collection are normalized. This change is necessary to guarantee correct processing and comparison of referral data. The modification replaces the `add` method with `addNormalized`, which enforces RDN normalization and prevents potential issues arising from non-normalized RDNs.",118.08007669448853,1.0,6900.0
apache/ant,89aa7775a83989345756349f99bd3556780eafee,Feat: Improve documentation in Os.java Added detailed comments to the setFamily and eval methods in the Os.java file. The comments provide information about the functionality of the methods and the expected input for the setFamily method.,"style: Improve Os class documentation with Javadoc comments
Added Javadoc comments to the setFamily and eval methods in the Os class to provide clear documentation on their purpose, parameters, and behavior. This change enhances the readability and understanding of the class, making it easier for developers to use and maintain.","Feat: add os family type setter and evaluator
this commit introduces a new setter method to specify the desired os family type and an evaluator method to determine if the current os matches the specified type. the setter method converts the input to lowercase, and the evaluator method uses system properties to determine the os name and path separator.","style: Document Os class methods with Javadoc comments
Improved documentation of Os class by adding Javadoc comments to setFamily and eval methods, providing clear explanations of their purposes, parameters, and relationships, without altering their implementations or introducing other changes to the class.",97.52490997314452,1.0,5890.0
apache/wicket,526bb16ab2f8b770a052fc93069b8b38a1d6c1f5,Style: Update comment in nextTag() method The comment in the `nextTag()` method of `WicketTagIdentifier.java` has been updated for clarity. The method retrieves the next XML tag from the markup and converts it into a WicketTag if it belongs to the Wicket namespace. The updated comment better reflects this functionality.,"style: Remove redundant package prefix from comment
Minor adjustment to the comment in WicketTagIdentifier.java to make it more concise by removing the package prefix 'org.apache.' from the comment. This change does not affect the functionality of the code.","Refactor: simplify wickettagidentifier
refactor the wickettagidentifier class to use 'wicket component' instead of 'org.apache.wicket component', making the code more concise and easier to understand. this change does not affect the functionality of the class.","style: Remove package prefix from comment in WicketTagIdentifier.java
This commit refactors the comment in WicketTagIdentifier.java to improve code readability by removing the redundant package prefix 'org.apache.'. The modification is purely cosmetic, and the functionality of the nextTag() method and the WicketTagIdentifier class remains unchanged.",104.78264141082764,1.0,6793.0
apache/usergrid,8814a144b66054048be96a1c892fd750ee327327,"Refactor: Improve handling of AsyncEvents in AsyncEventServiceImpl This commit refactors the AsyncEventServiceImpl class to improve the handling of different types of AsyncEvents in the queue system. The changes are mainly in the condition of an if statement in the callEventHandlers method, which processes a list of messages from a queue. Each message is expected to contain an AsyncEvent. The changes ensure that the method handles different types of AsyncEvents more effectively. There are no associated issues or pull requests.","refactor: Improve event handling logic in AsyncEventServiceImpl
Refactored the event handling logic in AsyncEventServiceImpl to add additional conditions to the if statement. The updated code now checks if the event is not an instance of ElasticsearchIndexEvent or InitializeApplicationIndexEvent before logging a warning message when single.isEmpty() is true. This change improves the handling of different event types and reduces unnecessary warning messages.","Refactor: improve event handling logic in asynceventserviceimpl
refactored the calleventhandlers method to add additional checks for specific event types before logging a warning when no index operation messages are returned. this change improves the robustness and accuracy of event handling in the asynceventserviceimpl class.","refactor: Refine logging condition in AsyncEventServiceImpl
This commit refactors the logging condition in AsyncEventServiceImpl to include additional event type checks, ensuring that warnings are only logged when single.isEmpty() is true and the event is not an instance of ElasticsearchIndexEvent or InitializeApplicationIndexEvent. This change enhances the logging logic by introducing more specific conditions, thereby reducing unnecessary warnings. The commit also updates the warning message format to include a colon after 'msg' for better readability.",116.00792455673218,1.0,7574.0
apache/archiva,6987e689ecc1c522d53cb661fa7842284807f471,"Refactor: Remove logging statement from processSnapshots method The logging statement ""Processing snapshots."" has been removed from the processSnapshots method in the DefaultRepositoryBrowsing class. This change is part of a refactoring effort to improve the code quality.","refactor: Remove unnecessary log statement
Removed a log statement that printed 'Processing snapshots.' to the log at the INFO level in the DefaultRepositoryBrowsing class. This change simplifies the code and reduces unnecessary logging.","Refactor: remove unnecessary log statement
removed an unnecessary log statement in defaultrepositorybrowsing class, which was logging 'processing snapshots.' without any functional impact. this change simplifies the code and makes it easier to maintain.","refactor: Remove unnecessary logging
Removed unnecessary logging statement 'Processing snapshots.' which was not providing any valuable information. This refactoring simplifies the code, reduces logging noise, and aligns with the updated class functionality of providing repository browsing for artifacts and projects.",91.17304253578186,1.0,5055.0
apache/directory-server,b5546be3333d7a261e6db37ab6e36f34193cffbb,Refactor: Update package name of AddIT.java and import in MigratedStockCoreISuite.java The package name of the AddIT.java file has been refactored from 'org.apache.directory.server.core.jndi' to 'org.apache.directory.server.core.operations.add'. The import statement in the MigratedStockCoreISuite.java file has been updated to reflect this change. This refactoring improves the structure of the code without changing its behavior.,"refactor: Rename AddIT.java to new package
This commit renames the AddIT.java file from the org.apache.directory.server.core.jndi package to org.apache.directory.server.core.operations.add. The corresponding package declaration and import statements have been updated accordingly. This change is a part of the internal structure refactoring to improve the organization and maintainability of the codebase.","Refactor: rename addit.java to new package
rename addit.java from org/apache/directory/server/core/jndi to org/apache/directory/server/core/operations/add and update its import statement in migratedstockcoreisuite.java to reflect the new package location.","refactor: Relocate AddIT.java and update dependencies
Refactored the directory structure by relocating AddIT.java to core/operations/add, and updated the corresponding package declaration and import statements in dependent files, such as MigratedStockCoreISuite.java, to ensure consistency and maintainability of the codebase.",103.51172423362732,1.0,6220.0
apache/lenya,f3c5e70e7f9cdc18ac0dcef205bc5fcacdee2bf7,"Refactor: Simplify the existence check in getLocator method The `getLocator` method in the `DocumentLocator` class has been refactored. The old code first checked if a key exists in the `locators` map and then retrieved the value associated with the key. The new code directly retrieves the value associated with the key and then checks if the retrieved value is null. This change simplifies the code and improves its readability. The functionality of the method remains the same: it returns a `DocumentLocator` for the given parameters. If a `DocumentLocator` for these parameters does not exist, a new one is created, stored, and then returned.","refactor: Simplify DocumentLocator getLocator method
Refactored the getLocator method in DocumentLocator to reduce unnecessary null checks and assignments, making the code more concise and efficient. The logic of the method remains the same, but the changes improve the overall readability and maintainability of the code.","Refactor: simplify getlocator method
the getlocator method has been refactored to reduce unnecessary null checks and improve code readability. the method's functionality remains the same, but the implementation is now more concise and efficient.","refactor: Simplify getLocator method logic
Simplified the getLocator method's logic by inverting the null check and removing the unnecessary else clause. This refactoring reduces code complexity, making it easier to understand and maintain, while preserving the original functionality of caching DocumentLocator instances based on provided parameters. The changes ensure that the locator variable is initialized with the cache result, eliminating the need for unnecessary null checks.",120.80300664901732,1.0,7860.0
apache/poi,3234ce48d57222043d1fb8aec33d81315a5f30d9,Feat: Add new test method in TestFormulaParser A new test method `testFormulaWithString` has been added to the `TestFormulaParser` class. This method tests the formula parsing functionality with a string input.,"feat: Add test for parsing formula with string concatenation
This commit introduces a new test method, testFormulaWithString, to the TestFormulaParser class. The method tests the FormulaParser class with a formula that concatenates two strings using the ampersand (&) operator. The test verifies that the resulting RPN tokens array has a length of 3. This addition enhances the test coverage of the FormulaParser class, ensuring its correct behavior with string concatenation operations.","Feat: add test for parsing formula with string concatenation
this commit introduces a new unit test, testformulawithstring, to cover the parsing of formulas that concatenate two strings using the ampersand (&) operator. this test ensures the formulaparser class correctly handles string concatenation operations.","feat: Introduce testFormulaWithString method in TestFormulaParser
This commit adds a new test case to the `TestFormulaParser` class, specifically covering the parsing of formulas with string concatenation using the ampersand (&) operator. The `testFormulaWithString()` method ensures the `FormulaParser` class correctly handles such scenarios.",116.52449560165404,1.0,6694.0
apache/cxf,260efe56fc1bfc89950d1eda89114feb287490cd,Refactor: Enhance getApplicationCertificates method in Client class The getApplicationCertificates method in the Client class has been refactored to return a list of application certificates that are eagerly fetched and ordered as per their insertion in the database. The @Lob annotation has been added to indicate that the application certificates are stored as a large object in the database.,"refactor: Add @Lob annotation to applicationCertificates field
This commit refactors the Client class to support storing large objects in the database. Specifically, the @Lob annotation is added to the applicationCertificates field, which is a collection of strings fetched eagerly and stored as a large object (LOB) in the database. This change enables the efficient storage and retrieval of large objects. Additionally, minor formatting changes are made to the code, including the removal of a blank line and the addition of an import statement for javax.persistence.Lob.","Refactor: update getapplicationcertificates to store certificates as lobs
this commit refactors the getapplicationcertificates method to store application certificates as large objects (lobs) in the database, with eager fetching and ordering. this change improves the storage and retrieval of certificates associated with an application, likely for authentication or authorization purposes.","feat: Update Client class to support LOB storage for application certificates
This commit updates the Client class to support Large Object (LOB) storage for application certificates, enhancing the OAuth2 system's ability to handle large certificate data. The changes include adding the @Lob annotation to the getApplicationCertificates() method, importing the necessary javax.persistence.Lob package, and removing an unnecessary blank line. These modifications enable efficient storage and retrieval of application certificates, improving the overall system's performance and scalability.",118.25672030448914,1.0,7166.0
apache/wicket,9fb30084cbc737ec035ed0e76a425612db462b47,Style: Update comments in BookmarkableMapper.java Updated the comments in the `BookmarkableMapper.java` file to use a shorter form of the class name. This change improves the readability of the code and makes it easier to understand.,"style: Update Javadoc comments to use shorter class references
This commit updates the Javadoc comments in the BookmarkableMapper class to use shorter references to the superclass, AbstractBookmarkableMapper. The changes are purely cosmetic and do not affect the functionality of the code. The updated comments improve the readability and conciseness of the Javadoc.","Refactor: simplify javadoc references
removed redundant package names from javadoc references in bookmarkablemapper, making the code more concise and easier to read.","style: Update Javadoc @see tags to use simple class names
This commit updates the Javadoc comments in BookmarkableMapper.java to use simple class names in @see tags, replacing fully qualified names. This change improves code readability and consistency in documentation without affecting the functionality of the BookmarkableMapper class.",100.70235562324524,1.0,6013.0
apache/cassandra,2a9fc0e887612725a51b3822a266c1b3d3fadcaf,"Refactor: Prevent multiple closings of files in BigTableScanner This commit introduces a new variable `isClosed` in the `BigTableScanner` class to track whether the data and index files have been closed. The `close()` method is modified to check this variable before closing the files. This change prevents the files from being closed multiple times, which could potentially lead to a NullPointerException as reported in issue CASSANDRA-9531.","fix: Prevent multiple closes of BigTableScanner
This commit fixes the issue of multiple closes of BigTableScanner, which was causing NullPointerExceptions in the MessagePayloadTest. The fix introduces an AtomicBoolean field to track whether the scanner has been closed, and modifies the close() method to use this field to prevent multiple closes. This ensures that the underlying files are only closed once, even in the presence of concurrent calls to close(). This change is related to CASSANDRA-9531.","Fix: fix nullpointerexception in bigtablescanner close method
this commit fixes a nullpointerexception that occurs when running messagepayloadtest due to the close method of bigtablescanner being called twice, causing the segment to be deallocated. the fix ensures that the close operation is idempotent by marking the object as closed and only performing the close operation once.","fix: fix: Prevent multiple closes of BigTableScanner by introducing isClosed flag
This commit prevents multiple closes of BigTableScanner by introducing an isClosed flag, ensuring underlying files are closed only once in the close() method. This fix addresses NullPointerExceptions logged when running MessagePayloadTest, as described in CASSANDRA-9531. The AtomicBoolean-based isClosed flag enables thread-safe checking and setting, making the close() method idempotent.",149.11229491233826,1.0,9862.0
helterskelterr/ofbizApp,c5c2b2c9b3f2e5b8cb6e2960b2a6daf9eb9a335c,"Fix: Correct index used in 'chooseClientAlias' method In the 'chooseClientAlias' method of the 'AliasKeyManager.java' file, the wrong index was being used in the if condition inside a for loop. This commit fixes this bug by replacing 'aliases[i]' with 'aliases[x]'.","fix: Fix alias comparison in chooseClientAlias method
This commit fixes a potential bug in the chooseClientAlias method of AliasKeyManager class. The method was incorrectly using the variable 'i' instead of the loop counter 'x' to compare with the aliases array. This change ensures that the correct element of the aliases array is compared with the alias, preventing potential incorrect alias selection.","Fix: fix alias matching in chooseclientalias method
the method chooseclientalias was incorrectly using the index 'i' instead of 'x' when comparing aliases, leading to incorrect alias matching. this commit fixes the issue by using the correct index 'x' in the comparison.","fix: Fix incorrect loop variable usage in chooseClientAlias method
This commit fixes a bug in the `chooseClientAlias` method of `AliasKeyManager` class, where the loop variable `i` was incorrectly used instead of the loop counter `x`. This change ensures that the correct element of the `aliases` array is compared with `this.alias`, preventing a potential bug that could have led to incorrect alias selection. The fix maintains the original functionality of the method, which chooses a client alias based on the provided key types and issuers.",113.19718313217165,1.0,7211.0
apache/logging-log4j2,d2aea7458f08e8b9d48f3768b719aafaf4246007,"Refactor: Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils in TestClassLoader This commit refactors the TestClassLoader class by replacing the sun.misc.IOUtils with org.apache.commons.io.IOUtils. The change is made in the findClass method, which finds and loads the class with the specified name. The way the class file is loaded into a byte array has been modified. The commit does not change the functionality of the method or the class.","refactor: Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils
This commit replaces the usage of sun.misc.IOUtils with org.apache.commons.io.IOUtils in the TestClassLoader class. The bytecode array is now initialized with a fixed size, and the IOUtils.readFully method call is updated to use the new class and pass the bytecode array as a parameter. This change improves the internal structure of the code, making it more maintainable and efficient.","Refactor: replace sun.misc.ioutils with org.apache.commons.io.ioutils
this commit replaces the usage of sun.misc.ioutils with org.apache.commons.io.ioutils in the testclassloader class. this change is a refactoring of the internal structure of the code to make it more maintainable and easier to understand.","refactor: Update TestClassLoader to use org.apache.commons.io.IOUtils and initialize bytecode array
This commit refactors the TestClassLoader to use the org.apache.commons.io.IOUtils class, replacing the sun.misc.IOUtils class, which is not part of the public API. Additionally, the bytecode array is now initialized with a fixed size, ensuring efficient memory allocation. These changes improve the reliability and maintainability of the class loading mechanism.",119.03318905830383,1.0,7386.0
apache/cxf,455938206f6fe0f5e9717c4a6363d4d11fd414b5,Refactor: Extract StreamResult creation to a new method A new method `getStreamResult` has been added to the `XSLTJaxbProvider` class. This method creates a new `StreamResult` instance with the provided `OutputStream`. The `marshalToOutputStream` method has been refactored to use this new method instead of creating a new `StreamResult` instance directly. This change improves the structure of the code without changing its behavior.,"refactor: Introduce getStreamResult method for customizing Result object creation
This commit refactors the XSLTJaxbProvider class to introduce a new protected method getStreamResult, which allows subclasses to customize the creation of Result objects. The marshalToOutputStream method has been updated to use this new method, providing more flexibility and customization options. This change enables easier override of Result object creation, for example, for PDF generation using Apache FOP.","Refactor: introduce getstreamresult method for overriding
this commit refactors the xsltjaxbprovider class to introduce a new protected method getstreamresult, which allows for overriding the stream result creation, e.g., for pdf generation using apache fop. this change enables more flexibility in the serialization process.","refactor: Make Result creation customizable via getStreamResult method
This commit refactors the `XSLTJaxbProvider` class to make `Result` creation customizable via the new `getStreamResult` method, which is now used by `marshalToOutputStream`. This change enables subclasses to tailor the marshalling process, for example, to generate PDFs using Apache FOP.",126.84346532821657,1.0,8248.0
apache/logging-log4j2,7831dde2eb0d0aa371639f8984b7a8b9f1b3aa53,"Fix: Correct assertion in SslConfigurationTest In the method emptyConfigurationHasDefaultTrustStore() of the SslConfigurationTest.java file, the assertion has been corrected. Previously, the assertion was always passing (Assert.assertTrue(true)), which did not correctly test the functionality. The assertion has been replaced with Assert.assertNotNull(clientSocket) to ensure that the clientSocket is not null when the default trust store is used with an empty SSL configuration.","fix: Improve SSL configuration test
Replace no-op assertion with a meaningful one in SslConfigurationTest. The original code was asserting that true is indeed true, which doesn't provide any meaningful test. The new code asserts that the clientSocket object is not null, verifying that the SSLSocketFactory created a valid SSLSocket instance. This change improves the test's effectiveness in ensuring the correct behavior of SSL configuration and socket factory creation.","Fix: improve assertion in sslconfigurationtest
the assertion in the emptyconfigurationhasdefaulttruststore method was strengthened to verify that an ssl configuration with no custom trust store settings defaults to the jvm's truststore. this change ensures that the test is more robust and accurate.","fix: Replace no-op assertion with meaningful null check in SslConfigurationTest
This commit replaces a no-op assertion with a meaningful null check in `SslConfigurationTest`, ensuring the `SSLSocketFactory` correctly creates an `SSLSocket` instance. The original assertion was redundant, whereas the new check verifies the `SslConfiguration` class's behavior, enhancing the test's effectiveness.",109.81879091262816,1.0,6938.0
