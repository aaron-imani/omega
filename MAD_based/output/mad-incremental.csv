commit,project,Multi-files?,patch,HM,Rationality (0-4),Comprehensiveness (0-4),Conciseness (0-4),Expressiveness (0-4),FIRA,Rationality (0-4).1,Comprehensiveness (0-4).1,Conciseness (0-4).1,Expressiveness (0-4).1,OMG,Rationality (0-4).2,Comprehensiveness (0-4).2,Conciseness (0-4).2,Expressiveness (0-4).2,MAD,mad-vanilla,MAD_OMG_BLEU,MAD_OMG_ROUGEL,MAD_OMG_METEOR,MAD_OMG_BLEURT,AMG,AMG_OMG_BLEU,AMG_OMG_ROUGEL,AMG_OMG_METEOR,AMG_OMG_BLEURT
e3e91155adb831bb487133b16c7ab78a230a713f,apache/ambari,,"File: ambari-server/src/test/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineMetricCacheTest.java
Status: modified
```diff
@@ -419,7 +419,7 @@ public void testTimelineMetricCachePrecisionUpdates() throws Exception {
     long year = 365 * day;
 
     //Original Values
-    Map<String, TimelineMetric> valueMap = new HashMap();
+    Map<String, TimelineMetric> valueMap = new HashMap<String, TimelineMetric>();
     TimelineMetric timelineMetric = new TimelineMetric();
     timelineMetric.setMetricName(""cpu_user"");
     timelineMetric.setAppId(""app1"");
```","Revert ""Fix unnecessary type casting in Test"" This reverts commit f3ab77c.",0,0,4,3,remove unused parameter,0,0,4,4,"Refactor: Specify type of HashMap in `testTimelineMetricCachePrecisionUpdates()`In the `testTimelineMetricCachePrecisionUpdates()` method in the `TimelineMetricCacheTest.java` file, the type of the HashMap `valueMap` was specified in its initialization. This change improves the code's internal structure without altering its external behavior._x001B_",4,4,4,4,"style: Add type parameter to HashMap instantiation
Added type parameter to HashMap instantiation for better code quality.","style: Specify type parameter for HashMap in TimelineMetricCacheTest
Removed redundant type declaration in TimelineMetricCacheTest.java",1.94,14.55,8.36,0.0,"style: Improve code formatting in TimelineMetricCacheTest
This commit updates the code formatting in the TimelineMetricCacheTest class by adding type parameters to the HashMap instantiation, making the code more readable and maintainable.",6.61,26.09,21.41,0.0
89aa7775a83989345756349f99bd3556780eafee,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/condition/Os.java
Status: modified
```diff
@@ -65,8 +65,24 @@
 public class Os implements Condition {
     private String family;
 
+    /**
+     * Sets the desired OS family type
+     * 
+     * @param f      The OS family type desired<br />
+     *               Possible values:<br />
+     *               <ul><li>dos</li>
+     *               <li>mac</li>
+     *               <li>netware</li>
+     *               <li>unix</li>
+     *               <li>windows</li></ul>
+     */
     public void setFamily(String f) {family = f.toLowerCase();}
 
+    /**
+     * Determines if the OS on which Ant is executing matches the type of 
+     * that set in setFamily.
+     * @see Os#setFamily(String)
+     */
     public boolean eval() throws BuildException {
         String osName = System.getProperty(""os.name"").toLowerCase();
         String pathSep = System.getProperty(""path.separator"");
```",Added some javadocs for OS condition.,4,4,4,4,add javadoc for Os setFamily,4,4,4,4,Feat: Improve documentation in Os.java Added detailed comments to the setFamily and eval methods in the Os.java file. The comments provide information about the functionality of the methods and the expected input for the setFamily method.,3,4,4,4,"feat: Implement OS family type matching in Os class
Added setFamily method to configure the desired OS family type, and updated the eval method to match the specified type by comparing it with the system's os.name property. This enhancement allows for more precise OS family detection.","feat: Add OS family type setting and matching to Os class
Introduce setFamily method to configure desired OS family type and eval method to determine OS match. This enhancement enables more flexible OS-based conditionals in Ant tasks.",6.01,23.81,19.28,0.0,"feat: Add OS family type setter and evaluator
This commit introduces a new setter method to specify the desired OS family type and an evaluator method to determine if the current OS matches the specified type. The setter method converts the input to lowercase, and the evaluator method uses system properties to determine the OS name and path separator.",4.9,27.08,22.39,0.0
5b377d290d4ff3d4557987da9b3c2dd802203cde,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/ExecTask.java
Status: modified
```diff
@@ -323,7 +323,7 @@ protected void runExec(Execute exe) throws BuildException {
             runExecute(exe);
         } catch (IOException e) {
             if (failIfExecFails) {
-                throw new BuildException(""Execute failed: "",e, location);
+                throw new BuildException(""Execute failed: ""+e.toString(),e, location);
             } else {
                 log(""Execute failed: ""+e.toString(), Project.MSG_ERR);
             }
```",Last weeks changes took away helpful information about why exec failed to run; this puts it back in.,4,3,4,4,improve error message,3,2,4,4,"Fix: Provide more detailed exception message in `runExec` method In the `runExec` method of `ExecTask.java`, the exception message when the command line process execution fails has been updated to include more information about the exception. This change improves the error handling by providing more context about the exception, which can be helpful for debugging._x001B_[0m",4,4,4,4,"fix: Include exception details in BuildException message
Updated the BuildException message to include the exception's toString() output, providing more detailed information when an execution failure occurs.","fix: Include executable error message in BuildException
Update the error message in ExecTask to provide more informative error details when throwing a BuildException.",2.78,24.39,20.42,0.0,"fix: Improve error message in ExecTask
When an IOException occurs in ExecTask, the error message was not providing enough information. This commit updates the error message to include the exception's toString() output, making it easier to diagnose and fix issues.",4.56,25.0,21.79,0.0
1a3090627d25c1ede9407003e24d7e76ca48f293,apache/ant,,"File: proposal/myrmidon/src/java/org/apache/antlib/xml/XMLValidateTask.java
Status: modified
```diff
@@ -243,7 +243,8 @@ private EntityResolver buildEntityResolver()
         final LocalResolver resolver = new LocalResolver();
         setupLogger( resolver );
 
-        for( int i = 0; i < m_dtdLocations.size(); i++ )
+        final int size = m_dtdLocations.size();
+        for( int i = 0; i < size; i++ )
         {
             final DTDLocation location = (DTDLocation)m_dtdLocations.get( i );
             resolver.registerDTD( location );
```",Made complex loop counter a simple constant Removing a Audit violation,4,3,3,4,fix a bug in XMLValidateTask,2,0,4,4,"Refactor: Optimize loop in XMLValidateTask This commit introduces a minor optimization in the XMLValidateTask class. A new variable 'size' is introduced to hold the size of 'm_dtdLocations', which is then used in the for loop condition. This change improves the structure of the code without altering its functionality._x001B_[0m",4,4,4,4,"refactor: Cache m_dtdLocations size in a local variable
Reduced redundant computation by storing `m_dtdLocations.size()` in a local variable, making the loop iteration more efficient.","refactor: Cache m_dtdLocations size for efficient iteration
Avoid repeated calls to size() method by storing the size in a local variable.",4.38,20.78,12.66,0.0,"refactor: Improve iteration over m_dtdLocations
This commit refactors the iteration over m_dtdLocations by introducing a local variable to store the size of the collection, making the code more efficient and easier to read.",7.04,28.24,20.52,0.0
cfa604fd9941bf59641e989306c4356dab156015,apache/ant,,"File: src/testcases/org/apache/tools/ant/util/DateUtilsTest.java
Status: modified
```diff
@@ -92,7 +92,7 @@ public void testDateTimeISO(){
     public void testDateISO(){
         TimeZone timeZone = TimeZone.getTimeZone(""GMT"");
         Calendar cal = Calendar.getInstance(timeZone);
-        emailtaskcal.set(2002,1,23);
+        cal.set(2002,1,23);
         String text = DateUtils.format(cal.getTime(),
                 DateUtils.ISO8601_DATE_PATTERN);
         assertEquals(""2002-02-23"", text);
```",testcase wouldn't compile - slipping fingers?,3,0,1,2,fix broken test,4,2,4,4,"Fix: Correct object used to set date in testDateISO() method In the 'testDateISO()' method of the 'DateUtilsTest.java' file, the object used to set the calendar date has been corrected from 'emailtaskcal' to 'cal'. This change ensures that the method tests the conversion of a date to an ISO 8601 string correctly._x001B_[0m",4,4,4,4,"fix: Fix emailtaskcal usage in testDateISO
Replaced emailtaskcal with Calendar instance in testDateISO to align with the intended usage, ensuring correct date formatting in ISO 8601 format.","fix: Use correct calendar instance in testDateISO method
Updated the testDateISO method to set the date on the correct calendar instance, ensuring accurate date formatting in ISO 8601 format.",2.94,22.5,17.98,0.0,"refactor: Update testDateISO method to use Calendar instance
Refactored the testDateISO method in DateUtilsTest to correctly set the date using the Calendar instance. This change ensures that the date is formatted correctly in ISO 8601 format.",15.06,40.45,36.83,0.0
5e099552e5af434568a4294cf7bcebb732cd3bfa,apache/ant,Y,"File: proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java
Status: modified
```diff
@@ -86,10 +86,7 @@ public class Translate
      * Create new destination file? Defaults to false.
      */
     private boolean forceOverwrite;
-    /**
-     * Generated locale based on user attributes
-     */
-    private Locale locale;
+
     /**
      * Source file encoding scheme
      */
@@ -564,7 +561,6 @@ private void translate()
                         String line;
                         while( ( line = in.readLine() ) != null )
                         {
-                            StringBuffer newline = new StringBuffer( line );
                             int startIndex = -1;
                             int endIndex = -1;
                             outer :
```


File: proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java
Status: modified
```diff
@@ -86,10 +86,7 @@ public class Translate
      * Create new destination file? Defaults to false.
      */
     private boolean forceOverwrite;
-    /**
-     * Generated locale based on user attributes
-     */
-    private Locale locale;
+
     /**
      * Source file encoding scheme
      */
@@ -564,7 +561,6 @@ private void translate()
                         String line;
                         while( ( line = in.readLine() ) != null )
                         {
-                            StringBuffer newline = new StringBuffer( line );
                             int startIndex = -1;
                             int endIndex = -1;
                             outer :
```",Delete some unused variables,4,3,4,4,remove unused field,4,3,4,4,"Refactor: Remove unused variables in Translate.java In both the 'proposal/myrmidon/src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java' and 'proposal/myrmidon/src/todo/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java' files, the private Locale variable 'locale' and the StringBuffer 'newline' in the 'translate' method have been removed. These variables were not used, and their removal simplifies the code without affecting its functionality._x001B_[0m",4,4,4,4,"refactor: Remove unused fields and variables
Removed unused fields 'locale' and 'newline' to declutter the Translate class and eliminate unnecessary variables.","refactor: Remove unused variables
Removed private Locale locale and StringBuffer newline variables that were not being used in the Translate class.",3.12,28.99,20.02,0.0,"refactor: Remove unused fields and variables
This commit removes the unused 'locale' field and 'newline' variable from the Translate class, simplifying its internal structure and making it easier to maintain.",4.72,28.21,22.79,0.0
4ffa9e1380956291543b6662e6ebfe89e859ebeb,apache/ant,,"File: src/main/org/apache/tools/ant/ComponentHelper.java
Status: modified
```diff
@@ -434,7 +434,15 @@ public Hashtable getAntTypeTable() {
      */
     public Task createTask(String taskType) throws BuildException {
         Task task=createNewTask(taskType);
-        if(task!=null) {
+        if (task == null && taskType.equals(""property"")) {
+            // quick fix for Ant.java use of property before
+            // initializeing the project
+            addTaskDefinition(""property"",
+                              org.apache.tools.ant.taskdefs.Property.class);
+            task = createNewTask(taskType);
+        }
+            
+        if (task != null) {
             addCreatedTask(taskType, task);
         }
         return task;
```",quick fix for Ant.java use of property in Ant#reinit,1,4,4,2,fix a bug in ComponentHelper,2,2,4,4,"Fix: Handle null task in createTask method In the createTask method of the ComponentHelper class, added a condition to handle a case where the task is null and the taskType equals ""property"". In this case, a new task definition is added and a new task is created. This is a fix for a situation where the ""property"" task is used before the project is initialized._x001B_[0m",4,4,4,4,"fix: handle null task for ""property"" taskType
Prevents NullPointerException when creating a 'property' task by defining the task type before initialization, ensuring Ant.java initializes the project correctly.","fix: Handle null task when creating 'property' task type
Fixes BuildException by adding a task definition for 'property' tasks before creating them",4.12,25.53,15.74,0.0,"fix: Handle null task for 'property' task type
This commit fixes an issue where a null task was returned when creating a task of type 'property'. A quick fix is implemented to add a task definition for 'property' and recreate the task if it's null. This ensures that the task is properly initialized.",9.81,30.25,28.6,0.0
ea0ea86ba268d63b39f8e608a746e4aad1eb1b3c,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java
Status: modified
```diff
@@ -372,7 +372,7 @@ private void loadResourceMaps() throws BuildException {
         processBundle(bundleFile, 5, false);
 
         bundleFile = bundle + language;
-        processBundle(bundleFile, 6, false);
+        processBundle(bundleFile, 6, true);
     }
 
     /**
```",cancel previous change,0,0,1,4,fix a bug in the Translate,2,2,4,4,"Fix: Update resource map loading in Translate.java This commit updates the method loadResourceMaps() in Translate.java to load resource maps for a specific locale and the default locale, processing each bundle file in a specific order. The change enhances the specificity of the resource map loading process._x001B_[0m",2,4,4,4,"fix: Pass true as third argument to processBundle
Fix incorrect resource map loading order by passing true as the third argument to processBundle, ensuring that more specific locale-based files are loaded first.","fix: Process bundle files in correct order in Translate task
Ensure the correct resource is used by loading resource maps for the specified locale and default locale in a specific order of priority.",4.18,17.28,19.92,0.0,"refactor: Improve processBundle method
Refactor the processBundle method to correctly handle the bundle file by setting the third parameter to true. This change ensures that the correct resource is used when processing bundle files.",3.72,24.1,15.28,0.0
42e30982adb99585237d6b9c9478ca1d647cc074,apache/ant,,"File: src/main/org/apache/tools/bzip2/CBZip2OutputStream.java
Status: modified
```diff
@@ -411,8 +411,9 @@ private void writeRun() throws IOException {
 
     boolean closed = false;
 
-    public void finalize() throws Throwable {
+    protected void finalize() throws Throwable {
         close();
+        super.finalize();
     }
 
     public void close() throws IOException {
```",Fix incorrect finalize override,3,4,4,4,make finalize public,0,0,4,4,"Refactor: Change visibility of finalize method in CBZip2OutputStream The visibility of the `finalize` method in `CBZip2OutputStream.java` has been changed from `public` to `protected`, and a call to `super.finalize()` has been added. This ensures that the object is properly closed when it's garbage collected._x001B_[0m",4,4,4,4,"refactor: Protect finalize method
Restricted finalize method access to prevent external calls and ensure it's only invoked by the garbage collector, thus maintaining resource closure.","refactor: Make finalize method protected
Ensure resource closure on garbage collection by calling close method in finalize method.",2.89,22.54,18.74,0.0,"refactor: Improve finalize method in CBZip2OutputStream
Changed the finalize method to be protected and added a call to super.finalize() to ensure proper resource release. This change improves the internal structure of the CBZip2OutputStream class, making it more efficient and easier to maintain.",18.56,38.2,36.36,0.0
50f9f4ee6f3a436fe05a0360e6e1d09851aba00c,apache/ant,,"File: src/testcases/org/apache/tools/tar/TarRoundTripTest.java
Status: modified
```diff
@@ -54,6 +54,7 @@
 package org.apache.tools.tar;
 
 import java.io.IOException;
+import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import junit.framework.TestCase;
 
```",Add missing import,4,4,4,4,add missing import,4,4,4,4,Feat: Add import statement in TarRoundTripTest.java Added import statement for ByteArrayInputStream in TarRoundTripTest.java.,3,4,4,4,"feat: Update TarRoundTripTest dependencies
Added java.io.ByteArrayInputStream import to support testing of tar round trip functionality in TarRoundTripTest.","style: Add java.io.ByteArrayInputStream import statement
TarRoundTripTest.java now includes the necessary import for ByteArrayInputStream, ensuring compile-time correctness.",14.96,36.36,13.99,0.0,"feat: Add import statement for ByteArrayInputStream
This commit adds the necessary import statement for ByteArrayInputStream in TarRoundTripTest.java, ensuring that the class can properly utilize the ByteArrayInputStream functionality.",34.85,52.38,68.52,0.0
4177bdb64e339c8ee010ab514d0670cdcee1d963,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java
Status: modified
```diff
@@ -291,7 +291,7 @@ protected void scandir(String dir, String vpath, boolean fast) {
                         } else {
                             String name = vpath + file.getName();
                             if (!isFollowSymlinks() && file.isSymbolicLink()) {
-                                dirsExcluded.addElement(name);
+                                filesExcluded.addElement(name);
                             } else if (isFunctioningAsFile(ftp, dir, file)) {
                                 if (isIncluded(name)) {
                                     if (!isExcluded(name)) {
```",mistake found ... oops ... Corrected,1,0,4,3,fix the build,1,2,4,4,"Fix: Correct classification of symbolic links in FTP.java In the method 'scandir' of the class 'FTP.java', symbolic links were previously classified as directories and added to 'dirsExcluded'. This commit corrects this misclassification by adding symbolic links to 'filesExcluded' instead. This change ensures that symbolic links are correctly identified and handled.",4,4,4,4,"fix: Exclude symbolic links from dirsExcluded
Exclude symbolic links from dirsExcluded to prevent incorrect categorization, ensuring accurate file and directory classification.","fix: Exclude symbolic links correctly in FTP scandir
Changed dirsExcluded to filesExcluded in scandir method to handle symbolic links as files.",2.11,22.22,17.12,0.0,"fix: Correctly categorize symbolic links in FTP directory scan
Fixed an issue where symbolic links were incorrectly excluded as directories during FTP directory scanning. Now, they are correctly added to the filesExcluded list. This change ensures that symbolic links are properly handled during the scanning process.",23.44,43.3,43.75,0.0
f26efe57b3dd44192d50ef1af3befe01a03c7bf6,apache/ant,,"File: src/testcases/org/apache/tools/ant/taskdefs/StyleTest.java
Status: modified
```diff
@@ -65,7 +65,7 @@
 
 
 /**
- * TestCases fuer <style> / <xslt> task.
+ * TestCases for <style> / <xslt> task.
  * @author Jan Materne
  * @version 2003-08-05
  */
```",typo - sort of,4,4,4,3,fix typo in javadoc,4,4,4,4,Style: Corrected language in comment Changed the language of a comment in the StyleTest.java file from German to English for better understanding.,0,2,4,4,"style: Update comment punctuation
Updated comment punctuation to be grammatically correct.","style: Fix typo in comment
Update 'TestCases fuer <style> / <xslt> task.' comment to use correct English spelling.",4.2,24.24,13.76,0.0,"style: Update comment to use English
This commit updates a comment in StyleTest.java to use English instead of German. The change is minor and does not affect the functionality of the code.",11.41,32.73,39.97,0.0
443bf819ed21ca24bcdf71d48e0c2fbc8cd1be3d,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/SQLExec.java
Status: modified
```diff
@@ -554,7 +554,7 @@ protected void execSQL(String sql, PrintStream out) throws SQLException {
                 ret = statement.getMoreResults();
                 updateCount = statement.getUpdateCount();
                 resultSet = statement.getResultSet();
-            } while ((resultSet != null) || (updateCount != -1));
+            } while (ret);
 
             log(updateCountTotal + "" rows affected"",
                 Project.MSG_VERBOSE);
```",Make SQL task work under Oracle,4,2,4,4,remove unnecessary code,0,0,4,4,Refactor: Modify loop condition in execSQL method This commit modifies the condition in the do-while loop in the execSQL method of the SQLExec.java file. The change is a refactor aimed at improving the structure or readability of the code. The execSQL method is responsible for executing a SQL statement and handling any SQL warnings or errors. The modification might affect how the method handles the SQL execution._x001B_[0m,4,4,4,4,"refactor: Use more efficient loop condition in execSQL
Replaced the loop condition (resultSet != null) || (updateCount != -1) with ret to reduce unnecessary iterations and improve performance. This change simplifies the loop logic and makes it more efficient.","fix: Handle multiple result sets correctly in SQLExec
Update the execSQL method to use the getMoreResults() return value to iterate over result sets, fixing an issue with incorrect update counts.",2.81,17.14,10.49,0.0,"refactor: Improve SQLExec's execSQL method
Refactor the execSQL method to simplify the loop condition, making it more efficient and easier to understand. The method's functionality remains unchanged, still executing a SQL statement and printing the results.",6.53,24.76,19.98,0.0
efef302a3da9a9e063da729c92f6f2b997884a9a,apache/ant,,"File: src/main/org/apache/tools/ant/util/ScriptRunner.java
Status: modified
```diff
@@ -139,7 +139,15 @@ public void executeScript(String execName) throws BuildException {
             for (Iterator i = beans.keySet().iterator(); i.hasNext();) {
                 String key = (String) i.next();
                 Object value = beans.get(key);
-                manager.declareBean(key, value, value.getClass());
+                if (value != null) {
+                    manager.declareBean(key, value, value.getClass());
+                } else {
+                    // BSF uses a hashtable to store values
+                    // so cannot declareBean with a null value
+                    // So need to remove any bean of this name as
+                    // that bean should not be visible
+                    manager.undeclareBean(key);
+                }
             }
 
             // execute the script
```",Allow references and properties to be null without causing NPE in BSF,4,1,4,3,fix npe in ScriptRunner,4,2,4,4,"Fix: Add null check before declaring a bean in ScriptRunner In the `executeScript(String execName)` method of `ScriptRunner.java`, a null check is added before declaring a bean. If the value is null, the bean is undeclared. This change is made to ensure that the script is executed using the beanshell scripting framework.",4,3,4,4,"fix: Handle null values in declareBean
Handle null values in declareBean by checking for null and undeclaring the bean if necessary, to ensure compatibility with BSF's hashtable-based storage.","fix: Prevent declaring beans with null values
BSF does not allow declaring beans with null values, so undeclare them instead to avoid errors.",3.35,22.78,17.32,0.0,"fix: Handle null values in ScriptRunner
This commit fixes an issue where null values were not handled properly in the ScriptRunner class. Specifically, it adds a check for null values before declaring a bean, and undeclares the bean if the value is null. This ensures that beans with null values are not visible, which is consistent with the behavior of the Bean Scripting Framework (BSF).",14.85,39.66,45.29,0.0
1a5baa2ad88ff04ee5ffa0d12774bb824ae78082,apache/ant,,"File: src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java
Status: modified
```diff
@@ -130,7 +130,7 @@ public void targetStarted(BuildEvent event) {
             // Since task log category includes target, we don't really
             // need this message
             realLog(log, ""Start: "" + event.getTarget().getName(),
-                    Project.MSG_DEBUG, null);
+                    Project.MSG_VERBOSE, null);
         }
     }
 
```",raise log level of targets to match that of task events,4,4,4,4,fix checkstyle error,0,0,4,4,"Refactor: Change logging level in targetStarted method The logging level in the `targetStarted` method of the `CommonsLoggingListener` class has been changed from `Project.MSG_DEBUG` to `Project.MSG_VERBOSE`. This is a refactor commit, meaning the code has been changed to improve its internal structure without altering its external behavior. The functionality of the `targetStarted` method, which logs the start of a target during a build process, remains the same.",4,4,4,4,"refactor: Log target start at verbose level
Updated log level from debug to verbose for target start events to align with the intended logging purpose.","refactor: Update log level to verbose in targetStarted method
Changed the log level from Project.MSG_DEBUG to Project.MSG_VERBOSE in the targetStarted method of CommonsLoggingListener to provide more user-friendly feedback during the build process.",1.15,17.02,10.06,0.0,"refactor: Update log level in targetStarted method
Changed the log level from DEBUG to VERBOSE in the targetStarted method of CommonsLoggingListener to provide more user-friendly feedback during the build process.",5.29,34.34,22.91,0.0
2bc2f8e4fa99ff51eaec0156d0a7a97bad5eab53,apache/ant,,"File: src/main/org/apache/tools/ant/taskdefs/EchoXML.java
Status: modified
```diff
@@ -32,10 +32,8 @@
 
 /**
  * Echo XML.
- * Notice how this is a ProjectComponent and not a task, which means that certain
- * well-known task operations (such as {@link org.apache.tools.ant.Task#getLocation()}) do not work.
  *
- * Other limitations
+ * Known limitations:
  * <ol>
  * <li>Currently no XMLNS support</li>
  * <li>Processing Instructions get ignored</li>
@@ -46,7 +44,6 @@
  */
 public class EchoXML extends XMLFragment {
 
-
     private File file;
     private boolean append;
     public static final String ERROR_NO_XML = ""No nested XML specified"";
```",Remove Steve's complaint ;) after Stefan and Peter's recent Location changes,1,0,4,4,fix a typo in javadoc,0,0,4,4,"Style: Refactor comments in EchoXML.java This commit refactors the comments in the EchoXML.java file for better readability and understanding. A line of code has also been removed. The functionality of the EchoXML class, which writes XML content to a specified file or log, remains unchanged.",4,4,2,4,"style: Clean up EchoXML.java
Removed unnecessary comments and reformatted the JavaDoc in EchoXML.java to conform to the project's coding standards.","style: Remove redundant comments from EchoXML.java
Clean up unnecessary comments and rephrase known limitations section for better readability.",6.01,20.59,11.06,0.0,"refactor: Simplify EchoXML class documentation
Removed unnecessary comments and rephrased known limitations in the EchoXML class. This change improves the readability and maintainability of the class documentation.",6.36,30.14,23.05,0.0
a2cedaed6c1a36e3550cc939393a9d77b3bb28ac,apache/ant,,"File: src/main/org/apache/tools/ant/util/depend/bcel/FullAnalyzer.java
Status: modified
```diff
@@ -24,6 +24,7 @@
 import org.apache.bcel.classfile.ClassParser;
 import org.apache.bcel.classfile.DescendingVisitor;
 import org.apache.bcel.classfile.JavaClass;
+import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.util.depend.AbstractAnalyzer;
 
 /**
@@ -41,8 +42,13 @@ public FullAnalyzer() {
         // force BCEL classes to load now
         try {
             new ClassParser(""force"");
-        } catch (IOException e) {
-            // ignore
+        } catch (Exception e) {
+            // all released versions of BCEL may throw an IOException
+            // here, but BCEL's trunk does no longer declare to do so
+            if (!(e instanceof IOException)) {
+                throw new BuildException(e);
+            }
+            // ignore IOException like we've always done
         }
     }
 
```",Same fix as for AncestorAnalyzer - make code compile with BCEL's trunk,2,3,4,4,don t throw exceptions in FullAnalyzer,0,0,4,3,"Fix: Improve exception handling in FullAnalyzer constructor In the FullAnalyzer class, the exception handling in the constructor has been improved. Previously, only IOExceptions were caught and ignored. Now, all exceptions are caught, and if the exception is not an IOException, a BuildException is thrown. This change ensures that unexpected exceptions do not go unnoticed, improving the robustness of the FullAnalyzer class, which is responsible for analyzing and determining all class-class dependencies in a Java application.",4,4,4,4,"fix: Rethrow non-IOException exceptions in FullAnalyzer
Update exception handling to throw BuildException for non-IOExceptions, ensuring that unexpected errors are properly reported and handled. This change is necessary to maintain compatibility with BCEL's trunk, which no longer declares to throw IOExceptions.","fix: Catch non-IOException exceptions in FullAnalyzer
Rethrow non-IOException exceptions as BuildException to ensure proper error handling.",3.63,15.79,19.79,0.0,"fix: Handle non-IOException exceptions in FullAnalyzer
Previously, the FullAnalyzer would ignore all exceptions when forcing BCEL classes to load. This change updates the exception handling to rethrow non-IOException exceptions as BuildExceptions, ensuring that unexpected errors are properly propagated. This fix improves the robustness of the FullAnalyzer.",9.37,25.0,33.54,0.0
0b3dbe0ca84c2239ed930097c355bc7896d2e1c0,apache/ant,,"File: src/tests/junit/org/apache/tools/ant/types/RedirectorElementTest.java
Status: modified
```diff
@@ -32,7 +32,7 @@ public void setUp() {
 
     public void test1() {
         executeTarget(""test1"");
-        assertTrue((getProject().getReference(""test1"")
+        assertTrue((getProject().<Object> getReference(""test1"")
             instanceof RedirectorElement));
     }
 
```","this kind of problem should be rare and should only affect recompiles, thus doesn't impact drop-in BC",0,0,3,4,fix failing test,4,2,4,4,"Refactor: Add type casting to getReference() method call in test1() In the `test1()` method of the `RedirectorElementTest.java` file, a type casting was added to the `getReference()` method call. This change improves the readability of the code without altering its functionality. The method tests if the project reference ""test1"" is an instance of RedirectorElement.",4,4,4,4,"refactor: Specify type parameter for getReference
Specify type parameter to avoid implicit casting and ensure type safety in RedirectorElementTest.","refactor: Cast getReference result to Object in RedirectorElementTest
Explicitly cast the result of getReference to Object in test1 method to ensure correct type handling.",1.43,13.89,6.69,0.0,"refactor: Improve type safety in RedirectorElementTest
This commit refactors the test1 method in RedirectorElementTest to use a generic getReference method, ensuring type safety when retrieving the 'test1' project reference. This change improves the internal structure of the test class, making it easier to understand and maintain.",13.58,32.32,32.73,0.0
6cd989e534dd52130f932ce04d3ca8aafe387cc9,apache/ant,,"File: src/main/org/apache/tools/ant/util/JavaEnvUtils.java
Status: modified
```diff
@@ -187,8 +187,12 @@ private JavaEnvUtils() {
             javaVersionNumber = VERSION_9;
             // at least Java9 and this should properly support the purely numeric version property
             String v = System.getProperty(""java.specification.version"");
-            javaVersionNumber = Integer.parseInt(v) * 10;
-            javaVersion = v;
+            DeweyDecimal pv = new DeweyDecimal(v);
+            javaVersionNumber = pv.get(0) * 10;
+            if (pv.getSize() > 1) {
+                javaVersionNumber += pv.get(1);
+            }
+            javaVersion = pv.toString();
         } catch (Throwable t) {
             // swallow as we've hit the max class version that
             // we have
```",deal with theoretical case of version scheme changing again,0,1,3,4,catch Throwable instead of DeweyDecimal,0,0,4,4,Refactor: Improved parsing and storing of java version number The parsing and storing of the java version number in JavaEnvUtils.java has been refactored. The java version number is now parsed using the DeweyDecimal class and stored as a string. This change improves the accuracy and readability of the java version number.,4,4,4,4,"refactor: Improve Java version number parsing
Updated Java version number parsing to correctly handle multi-part version strings, ensuring accurate version detection.","refactor: Parse java.specification.version property using DeweyDecimal
Improve Java version number calculation accuracy by utilizing DeweyDecimal for parsing.",3.38,25.0,12.82,0.0,"refactor: Improve Java version parsing in JavaEnvUtils
Refactored the Java version parsing logic in JavaEnvUtils to use DeweyDecimal for more accurate and flexible version number handling. This change improves the internal structure of the utility class without changing its observable behavior.",13.7,36.96,37.38,0.0
9509706d70325bfd6a8f62b036d833f2fa0670db,apache/ant,,"File: src/tests/junit/org/apache/tools/ant/taskdefs/optional/PropertyFileTest.java
Status: modified
```diff
@@ -158,7 +158,7 @@ public void testDirect() throws Exception {
 
         Properties props = getTestProperties();
         LocalDate currentDate = LocalDate.now().plusDays(delta);
-        assertEquals(String.format(""%d/%02d/%d"", currentDate.getYear(), currentDate.getMonthValue(),
+        assertEquals(String.format(""%d/%02d/%02d"", currentDate.getYear(), currentDate.getMonthValue(),
                 currentDate.getDayOfMonth()), props.getProperty(""date""));
     }
 
```",Correct date formatting,4,4,4,4,fix the test,1,1,4,4,"Fix: Corrected date format in PropertyFileTest The testDirect() method in the PropertyFileTest class had an incorrect date format in the assertEquals method. The format was changed from ""%d/%02d/%d"" to ""%d/%02d/%02d"" to correctly represent the date. This change ensures that the test accurately checks the functionality of the PropertyFile class.",4,4,4,4,"fix: fix: Pad month value with leading zero in date format
Fixed incorrect month formatting in date strings by adding leading zeros.","fix: Use correct date format in PropertyFileTest
Updated assertEquals statement in testDirect method",2.0,14.29,8.16,0.0,"fix: Fix date format in PropertyFileTest
The date format in the testDirect method of PropertyFileTest was incorrect, leading to potential errors. This commit fixes the format to %d/%02d/%02d, ensuring correct date calculation and updating.",12.79,34.15,34.97,0.0
ce29219ee6409b111ce8f8191b1792c2b65a04a8,apache/archiva,Y,"File: maven-repository-proxy/src/test/java/org/apache/maven/repository/proxy/DefaultProxyManagerTest.java
Status: modified
```diff
@@ -43,7 +43,7 @@ protected void setUp()
 
         proxy = (ProxyManager) container.lookup( ProxyManager.ROLE );
 
-        configuration = getTestConfiguration();
+        configuration = getProxyConfiguration();
         proxy.setConfiguration( configuration );
     }
 
@@ -134,7 +134,7 @@ protected void tearDown()
         super.tearDown();
     }
 
-    private ProxyConfiguration getTestConfiguration()
+    private ProxyConfiguration getProxyConfiguration()
         throws ComponentLookupException
     {
         ProxyConfiguration config = new ProxyConfiguration();
```


File: maven-repository-proxy/src/test/java/org/apache/maven/repository/proxy/LegacyProxyManagerTest.java
Status: modified
```diff
@@ -43,7 +43,7 @@ protected void setUp()
 
         proxy = (ProxyManager) container.lookup( ProxyManager.ROLE );
 
-        configuration = getTestConfiguration();
+        configuration = getProxyConfiguration();
         proxy.setConfiguration( configuration );
     }
 
@@ -134,7 +134,7 @@ protected void tearDown()
         super.tearDown();
     }
 
-    private ProxyConfiguration getTestConfiguration()
+    private ProxyConfiguration getProxyConfiguration()
         throws ComponentLookupException
     {
         ProxyConfiguration config = new ProxyConfiguration();
```",change required after plexus update,1,0,3,3,renamed getTestConfiguration to getProxyConfiguration,4,4,4,4,"Refactor: Rename method to better reflect its functionality In the files `DefaultProxyManagerTest.java` and `LegacyProxyManagerTest.java`, the method `getTestConfiguration()` has been renamed to `getProxyConfiguration()`. This change does not alter the functionality of the `setUp()` method where it is used, but provides a more accurate description of the method's purpose, which is to create and return a proxy configuration for testing purposes.",4,4,4,4,"refactor: Consolidate test configuration setup into getProxyConfiguration
To eliminate code duplication and improve test environment setup, consolidated test configuration into a single `getProxyConfiguration` method, used by `DefaultProxyManagerTest` and `LegacyProxyManagerTest` classes.","refactor: Rename getTestConfiguration to getProxyConfiguration
The rename improves the method's name to match its implementation, which creates and configures a proxy repository for testing purposes.",2.39,13.33,9.5,0.0,"refactor: Rename getTestConfiguration to getProxyConfiguration
Renamed the method getTestConfiguration to getProxyConfiguration in DefaultProxyManagerTest and LegacyProxyManagerTest to better reflect its purpose of setting up a proxy configuration for testing purposes. This change improves the clarity and consistency of the test environment setup.",19.3,31.68,46.42,0.0
6987e689ecc1c522d53cb661fa7842284807f471,apache/archiva,,"File: archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/browsing/DefaultRepositoryBrowsing.java
Status: modified
```diff
@@ -212,8 +212,6 @@ private void processSnapshots( List<String> versions )
     {
         Map<String, String> snapshots = new HashMap<String, String>();
 
-        log.info( ""Processing snapshots."" );
-
         for ( String version : versions )
         {
             if ( VersionUtil.isSnapshot( version ) )
```",Remove useless logging,4,4,4,4,remove debug logging,4,4,4,4,"Refactor: Remove logging statement from processSnapshots method The logging statement ""Processing snapshots."" has been removed from the processSnapshots method in the DefaultRepositoryBrowsing class. This change is part of a refactoring effort to improve the code quality.",3,4,4,4,"refactor: Remove unnecessary log statement
Removed unnecessary log statement to declutter the code and improve log readability. This change has no impact on the observable behavior of the DefaultRepositoryBrowsing class.","refactor: Remove unnecessary log statement
DefaultRepositoryBrowsing no longer logs 'Processing snapshots.' as it was not essential for its functionality.",14.77,27.69,37.5,0.0,"refactor: Remove unnecessary log statement
Removed an unnecessary log statement in DefaultRepositoryBrowsing class, which was logging 'Processing snapshots.' without any functional impact. This change simplifies the code and makes it easier to maintain.",11.79,29.41,43.02,0.0
397e88dac8af348973197806c92cbc329aefd4c2,apache/archiva,,"File: archiva-modules/archiva-web/archiva-rest/archiva-rest-api/src/main/java/org/apache/archiva/rest/api/services/RepositoriesService.java
Status: modified
```diff
@@ -100,6 +100,7 @@ Boolean scheduleDownloadRemoteIndex( @QueryParam( ""repositoryId"" ) String reposi
     @RedbackAuthorization( noPermission = true )
     /**
      * permission are checked in impl
+     * @since 1.4-M2
      */
     Boolean deleteArtifact( @QueryParam( """" ) Artifact artifact, @QueryParam( ""repositoryId"" ) String repositoryId )
         throws ArchivaRestServiceException;
```",add @SInCE for new method,4,4,4,4,add missing javadoc,3,4,4,4,Style: Add comment to `deleteArtifact` method in `RepositoriesService.java` A comment line has been added to the `deleteArtifact` method in the `RepositoriesService.java` file. The comment indicates that permissions are checked in the implementation of the method. This change does not affect the functionality of the code.,4,3,3,4,"refactor: Add @since tag to deleteArtifact method
Add @since tag to deleteArtifact method to track its version history and ensure accurate documentation.","doc: Document deleteArtifact method with @since 1.4-M2
Updated the deleteArtifact method's documentation to include the @since 1.4-M2 tag, indicating when it was introduced.",3.14,17.65,7.71,0.0,"feat: Add @since tag to deleteArtifact method
Added a @since tag to the deleteArtifact method in RepositoriesService to indicate its availability since version 1.4-M2. This change enhances the documentation of the REST API endpoint.",14.47,37.04,26.24,0.0
f52bade117210719e138910be18fd2001ffd25a2,apache/archiva,,"File: archiva-modules/archiva-scheduler/archiva-scheduler-repository/src/test/java/org/apache/archiva/scheduler/repository/ArchivaRepositoryScanningTaskExecutorAbstractTest.java
Status: modified
```diff
@@ -40,6 +40,7 @@
 import org.apache.archiva.test.utils.ArchivaSpringJUnit4ClassRunner;
 
 import static org.mockito.Mockito.mock;
+import org.springframework.test.annotation.DirtiesContext;
 
 /**
  * ArchivaRepositoryScanningTaskExecutorPhase1Test
@@ -48,6 +49,7 @@
  */
 @RunWith( ArchivaSpringJUnit4ClassRunner.class )
 @ContextConfiguration( locations = { ""classpath*:/META-INF/spring-context.xml"", ""classpath:/spring-context.xml"" } )
+@DirtiesContext( classMode= DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD )
 public abstract class ArchivaRepositoryScanningTaskExecutorAbstractTest
     extends TestCase
 {
```",repository scanning test fix for idependance,3,4,3,3,add missing dirtiescontext,3,3,4,4,Feat: Add @DirtiesContext annotation to ArchivaRepositoryScanningTaskExecutorAbstractTest This commit adds the @DirtiesContext annotation to the ArchivaRepositoryScanningTaskExecutorAbstractTest class. This annotation is used to indicate that the Spring ApplicationContext should be dirtied and thus automatically closed after each test method. This is typically used when a test method dirties the context.,4,4,4,4,"refactor: Enable test context cleaning
Added @DirtiesContext annotation to ArchivaRepositoryScanningTaskExecutorAbstractTest to ensure test context cleaning after each test method.","refactor: Add @DirtiesContext annotation to ArchivaRepositoryScanningTaskExecutorAbstractTest
This change ensures a clean state for subsequent tests by resetting the context after each test method.",7.1,27.27,17.84,0.0,"refactor: Add DirtiesContext annotation to ArchivaRepositoryScanningTaskExecutorAbstractTest
This change adds the @DirtiesContext annotation to the ArchivaRepositoryScanningTaskExecutorAbstractTest class, ensuring that the test context is properly cleaned up after each test method. This refactoring improves the test environment for Archiva repository scanning tasks.",29.97,45.98,44.6,0.0
a9ebba65acafda26696d1ade1a19e909d93e8385,apache/archiva,,"File: archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/test/java/org/apache/archiva/admin/repository/AbstractRepositoryAdminTest.java
Status: modified
```diff
@@ -27,17 +27,21 @@
 import org.apache.archiva.admin.model.proxyconnector.ProxyConnectorAdmin;
 import org.apache.archiva.admin.model.proxyconnectorrule.ProxyConnectorRuleAdmin;
 import org.apache.archiva.admin.model.remote.RemoteRepositoryAdmin;
+import org.apache.archiva.configuration.ArchivaConfiguration;
 import org.apache.archiva.redback.role.RoleManager;
 import org.apache.archiva.redback.users.User;
 import org.apache.archiva.redback.users.memory.SimpleUser;
 import org.apache.archiva.test.utils.ArchivaSpringJUnit4ClassRunner;
 import org.apache.commons.lang.StringUtils;
+import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.runner.RunWith;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.test.context.ContextConfiguration;
 
 import javax.inject.Inject;
+import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -77,6 +81,23 @@ public abstract class AbstractRepositoryAdminTest
     @Inject
     protected ProxyConnectorRuleAdmin proxyConnectorRuleAdmin;
 
+    @Inject
+    private ArchivaConfiguration archivaConfiguration;
+
+    @Before
+    public void initialize() {
+        Path confFile = Paths.get(APPSERVER_BASE_PATH, ""conf/archiva.xml"");
+        try
+        {
+            Files.deleteIfExists( confFile );
+            archivaConfiguration.reload();
+        }
+        catch ( IOException e )
+        {
+            // ignore
+        }
+    }
+
     protected AuditInformation getFakeAuditInformation()
     {
         AuditInformation auditInformation = new AuditInformation( getFakeUser(), ""archiva-localhost"" );
```",Adding config file removal before tests,0,4,4,4,add support for delete,1,1,4,3,Feat: Add initialize method in AbstractRepositoryAdminTest This commit adds a new method 'initialize' in the AbstractRepositoryAdminTest.java file. The method is used to set up the test environment before each test. It deletes the existing configuration file if it exists and reloads the configuration. This ensures that the test environment is properly set up for each test case.,4,4,4,4,"refactor: Reset archiva configuration before tests
Reset Archiva configuration before tests to isolate each test run and prevent configuration persistence issues.","feat: Add setup method to AbstractRepositoryAdminTest to reset archiva configuration
This method deletes the archiva.xml file and reloads the configuration before each test, ensuring a clean environment.",1.36,12.82,11.15,0.0,"feat: Add setup method to initialize Archiva configuration
This commit introduces a new setup method, `initialize`, to reset the Archiva configuration by deleting the archiva.xml file and reloading the configuration before each test. This ensures a clean environment for testing repository administration functionality.",10.45,37.62,35.95,0.0
a024df32a4005fa32ef5314418aabe124a45516c,apache/archiva,,"File: archiva-modules/archiva-maven/archiva-maven-repository/src/main/java/org/apache/archiva/repository/maven2/MavenRepositoryProvider.java
Status: modified
```diff
@@ -248,8 +248,10 @@ public void updateRemoteInstance(EditableRemoteRepository repo, RemoteRepository
     @Override
     public RepositoryGroup createRepositoryGroup(RepositoryGroupConfiguration configuration) throws RepositoryException {
         Path repositoryGroupBase = getArchivaConfiguration().getRepositoryGroupBaseDir();
-        return new MavenRepositoryGroup(configuration.getId(), configuration.getId(),
+        MavenRepositoryGroup newGrp = new MavenRepositoryGroup(configuration.getId(), configuration.getName(),
                 repositoryGroupBase, fileLockManager);
+        updateRepositoryGroupInstance(newGrp, configuration);
+        return newGrp;
     }
 
     @Override
@@ -444,4 +446,8 @@ public void setArchivaConfiguration(ArchivaConfiguration archivaConfiguration) {
     public <T> void raise(RepositoryEvent<T> event) {
         //
     }
+
+    public void setRepositoryRegistry(RepositoryRegistry reg) {
+        this.repositoryRegistry = reg;
+    }
 }
```",Fixing repository group implementation,4,4,4,4,fix the build,1,2,4,4,Feat: Update 'createRepositoryGroup' method and add 'setRepositoryRegistry' method This commit updates the 'createRepositoryGroup' method in the 'MavenRepositoryProvider' class to create a new repository group with the given configuration. It also adds a new method 'setRepositoryRegistry' to set the repository registry. These changes enhance the functionality of the 'MavenRepositoryProvider' class._x001B_[0m,4,4,4,4,"refactor: Update MavenRepositoryProvider to correctly create and configure repository groups
Updated `MavenRepositoryProvider` to correctly create and configure repository groups, ensuring consistency with the Archiva configuration. Additionally, introduced a setter for the repository registry to enable dependency injection.","feat: Add configuration name support to MavenRepositoryProvider
Updated createRepositoryGroup method to use configuration name instead of id, and added setRepositoryRegistry method to inject repository registry.",6.09,29.89,25.74,0.0,"refactor: Improve MavenRepositoryProvider's createRepositoryGroup method
This commit refactors the createRepositoryGroup method to correctly set the repository group name and adds a new method setRepositoryRegistry to allow for repository registry injection. These changes improve the internal structure of the MavenRepositoryProvider class, making it easier to understand and modify.",22.53,47.42,51.66,0.0
b0f88c3970d09a01c17016a7b8b9dee001d4dac7,apache/aries,,"File: blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ReferenceRecipe.java
Status: modified
```diff
@@ -220,11 +220,16 @@ private Object getService() throws InterruptedException {
                   } 
                   
                   if (failed) {
-                    LOGGER.info(""Timeout expired when waiting for OSGi service {}"", getOsgiFilter());
-                    throw new ServiceUnavailableException(""Timeout expired when waiting for OSGi service"", getOsgiFilter());
+                    if (metadata.getAvailability() == ServiceReferenceMetadata.AVAILABILITY_MANDATORY) {
+                        LOGGER.info(""Timeout expired when waiting for mandatory OSGi service reference {}"", getOsgiFilter());
+                        throw new ServiceUnavailableException(""Timeout expired when waiting for mandatory OSGi service reference: "" + getOsgiFilter(), getOsgiFilter());
+                    } else {
+                        LOGGER.info(""No matching service for optional OSGi service reference {}"", getOsgiFilter());
+                        throw new ServiceUnavailableException(""No matching service for optional OSGi service reference: "" + getOsgiFilter(), getOsgiFilter());
+                    }
                   }
                 } else {
-                    throw new ServiceUnavailableException(""The Blueprint container is being or has been destroyed"", getOsgiFilter());
+                    throw new ServiceUnavailableException(""The Blueprint container is being or has been destroyed: "" + getOsgiFilter(), getOsgiFilter());
                 }
             } else {
             
```",Improve timeout exception when an osgi service can't be found,4,4,4,4,improve error message for ReferenceRecipe,4,4,4,4,"Fix: Handle different types of service availability in `getService()` In the `getService()` method of the `ReferenceRecipe.java` file, conditions have been added to handle different types of service availability. If the service is mandatory and not available, an exception is thrown after waiting for a specified timeout period. If the service is optional and not available, an exception is thrown immediately. This fix ensures that the method behaves correctly for different types of service availability.",3,2,2,4,"fix: Distinguish between mandatory and optional OSGi service references on timeout
Previously, timeouts when waiting for OSGi services would result in generic exceptions. This change introduces distinct error handling for mandatory and optional service references, providing more informative error messages and enabling more targeted troubleshooting.","fix: Distinguish between mandatory and optional OSGi service references on timeout
Improved error handling in ReferenceRecipe by considering service reference metadata availability constraints.",2.92,13.45,17.1,0.0,"fix: Handle timeouts and availability constraints for OSGi service references
This commit improves the handling of timeouts and availability constraints when waiting for OSGi services in the Blueprint container. It introduces separate error messages for mandatory and optional service references, providing more informative error handling. The changes ensure that the container behaves correctly in case of service unavailability, and provides more detailed information to the user.",4.93,22.86,32.53,0.0
796af68ef69e7c40c41866afe6176d29feffae8a,apache/beam,,"File: sdk/src/test/java/com/google/cloud/dataflow/sdk/io/AvroSourceTest.java
Status: modified
```diff
@@ -47,7 +47,6 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.PushbackInputStream;
-import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
@@ -231,7 +230,7 @@ public void testMultipleFiles() throws Exception {
     }
 
     AvroSource<Bird> source =
-        AvroSource.from(Paths.get(tmpFolder.getRoot().toString(), baseName + ""*"").toString())
+        AvroSource.from(new File(tmpFolder.getRoot().toString(), baseName + ""*"").toString())
             .withSchema(Bird.class);
     List<Bird> actual = SourceTestUtils.readFromSource(source, null);
     assertThat(actual, containsInAnyOrder(expected.toArray()));
```","Fix an invalid path on Windows platforms Paths.get calls the platform's Filesystem.getPath, which validates that the path contains legal characters for file names. Since * is an illegal character for Windows, Paths.get can't be used for globs.",4,4,4,4,fix broken test,2,2,4,4,"Fix: Update path creation in testMultipleFiles method In the testMultipleFiles method of the AvroSourceTest.java file, the path to the AvroSource has been updated. Previously, the path was created using Paths.get(), but this has been changed to use new File(). This change ensures that the AvroSource can correctly read from multiple Avro files.",4,4,4,4,"refactor: Use File instead of Paths in AvroSource.from
Update AvroSourceTest to use File instead of Paths, aligning with the Java File API, as part of the initial Dataflow code drop.","refactor: Replace Paths.get with File constructor in AvroSourceTest
This change simplifies the testMultipleFiles method by using a File object instead of Paths.get, making the code easier to understand and maintain.",3.8,14.29,15.02,0.0,"refactor: Replace Paths.get with File constructor in AvroSourceTest
Refactor the AvroSourceTest class to use the File constructor instead of Paths.get for creating file paths. This change improves the internal structure of the code without changing its observable behavior.",7.59,23.66,24.96,0.0
4fa7bd3ab96975ff1618a01f0b2920d15fb46efb,apache/beam,,"File: sdk/src/main/java/com/google/cloud/dataflow/sdk/io/BigQueryIO.java
Status: modified
```diff
@@ -31,6 +31,8 @@
 import com.google.cloud.dataflow.sdk.coders.TableRowJsonCoder;
 import com.google.cloud.dataflow.sdk.coders.VarIntCoder;
 import com.google.cloud.dataflow.sdk.coders.VoidCoder;
+import com.google.cloud.dataflow.sdk.io.BigQueryIO.Write.CreateDisposition;
+import com.google.cloud.dataflow.sdk.io.BigQueryIO.Write.WriteDisposition;
 import com.google.cloud.dataflow.sdk.options.BigQueryOptions;
 import com.google.cloud.dataflow.sdk.options.GcpOptions;
 import com.google.cloud.dataflow.sdk.runners.DirectPipelineRunner;
@@ -1086,7 +1088,8 @@ public TableReference getOrCreateTable(BigQueryOptions options, String tableSpec
             TableSchema tableSchema = JSON_FACTORY.fromString(jsonTableSchema, TableSchema.class);
             Bigquery client = Transport.newBigQueryClient(options).build();
             BigQueryTableInserter inserter = new BigQueryTableInserter(client);
-            inserter.tryCreateTable(tableReference, tableSchema);
+            inserter.getOrCreateTable(tableReference, WriteDisposition.WRITE_APPEND,
+                CreateDisposition.CREATE_IF_NEEDED, tableSchema);
             createdTables.add(tableSpec);
           }
         }
```","StreamingWriteFn: check if table exists before creating In StreamingWriteFn, every worker tries to create the table without checking beforehand whether the table exists. This behavior can lead to temporarily violating the BigQuery API quota limits on table.insert:",4,4,3,4,fix bug in BigQueryIO,2,2,4,4,"Feat: Modify getOrCreateTable method in BigQueryIO.java This commit modifies the `getOrCreateTable` method in the `BigQueryIO.java` file. The method now checks if a BigQuery table exists based on the provided table specification. If the table does not exist, it creates a new one. This method is thread-safe.",4,4,4,4,"refactor: Create BigQuery tables with WriteDisposition and CreateDisposition
This change refactors `getOrCreateTable` to use `WriteDisposition` and `CreateDisposition` for thread-safe and idempotent BigQuery table creation, improving the internal structure of `BigQueryIO` for easier maintenance and modification.","refactor: Use WRITE_APPEND and CREATE_IF_NEEDED for thread-safe BigQuery table creation
Changed the getOrCreateTable method to ensure thread-safe creation of BigQuery tables and avoid duplicate attempts.",3.37,9.76,8.25,0.0,"refactor: Improve BigQuery table creation logic
Refactor the getOrCreateTable method to use WriteDisposition and CreateDisposition for more flexible and controlled table creation. This change ensures thread-safety and avoids duplicate creation attempts.",5.05,12.82,13.18,0.0
9ed1465699d017e1ea35771ca46ef8fd2fb498c3,apache/beam,Y,"File: sdks/java/core/src/main/java/com/google/cloud/dataflow/sdk/options/DataflowPipelineWorkerPoolOptions.java
Status: modified
```diff
@@ -149,7 +149,10 @@ public String create(PipelineOptions options) {
    * GCE <a href=""https://cloud.google.com/compute/docs/networking"">subnetwork</a> for launching
    * workers.
    *
-   * <p>Default is up to the Dataflow service. Expected format is zones/ZONE/subnetworks/SUBNETWORK.
+   * <p>Default is up to the Dataflow service. Expected format is
+   * regions/REGION/subnetworks/SUBNETWORK.
+   *
+   * <p>You may also need to specify network option.
    */
   @Description(""GCE subnetwork for launching workers. For more information, see the reference ""
       + ""documentation https://cloud.google.com/compute/docs/networking. ""
```


File: sdks/java/core/src/test/java/com/google/cloud/dataflow/sdk/runners/DataflowPipelineTranslatorTest.java
Status: modified
```diff
@@ -238,7 +238,7 @@ public void testNetworkConfigMissing() throws IOException {
 
   @Test
   public void testSubnetworkConfig() throws IOException {
-    final String testSubnetwork = ""zones/ZONE/subnetworks/SUBNETWORK"";
+    final String testSubnetwork = ""regions/REGION/subnetworks/SUBNETWORK"";
 
     DataflowPipelineOptions options = buildPipelineOptions();
     options.setSubnetwork(testSubnetwork);
```",Correct URL for subnetwork,4,4,4,4,fix typo in javadoc,0,0,4,4,Refactor: Update GCE subnetwork description and test This commit updates the description of the GCE subnetwork for launching workers in `DataflowPipelineWorkerPoolOptions.java` and modifies the `testSubnetworkConfig()` method in `DataflowPipelineTranslatorTest.java` to test if the subnetwork configuration is correctly set in the pipeline options and properly reflected in the job environment. The changes are part of a refactor and do not alter the functionality of the code.,4,4,4,4,"feat: Update DataflowPipelineWorkerPoolOptions to use regions/REGION/subnetworks/SUBNETWORK format
This change updates the subnetwork format to conform to the Dataflow service's expected format, ensuring correct propagation of subnetwork configuration to the job environment.","refactor: Update subnetwork format to regions/REGION/subnetworks/SUBNETWORK
Change the expected format of subnetwork in DataflowPipelineWorkerPoolOptions and update testSubnetworkConfig accordingly.",4.67,22.92,17.03,0.0,"refactor: Update subnetwork format in DataflowPipelineWorkerPoolOptions
Refactor the subnetwork format in DataflowPipelineWorkerPoolOptions to use regions/REGION/subnetworks/SUBNETWORK instead of zones/ZONE/subnetworks/SUBNETWORK. This change is also reflected in the testSubnetworkConfig method in DataflowPipelineTranslatorTest to ensure correct translation of subnetwork configuration to a Dataflow job.",9.95,30.48,25.64,0.0
07544ef3a47bbdfacc00c75af875c3533a5fe477,apache/beam,,"File: runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java
Status: modified
```diff
@@ -2360,8 +2360,8 @@ public final PCollection<T> apply(PBegin input) {
   }
 
   /**
-   * A specialized {@link DoFn} for writing the contents of a {@link PCollection}
-   * to a streaming {@link PCollectionView} backend implementation.
+   * A marker {@link DoFn} for writing the contents of a {@link PCollection} to a streaming
+   * {@link PCollectionView} backend implementation.
    */
   @Deprecated
   public static class StreamingPCollectionViewWriterFn<T>
@@ -2389,13 +2389,9 @@ public Coder<T> getDataCoder() {
 
     @Override
     public void processElement(ProcessContext c) throws Exception {
-      List<WindowedValue<T>> output = new ArrayList<>();
-      for (T elem : c.element()) {
-        output.add(WindowedValue.of(elem, c.timestamp(), c.window(), c.pane()));
-      }
-
-      c.windowingInternals().writePCollectionViewData(
-          view.getTagInternal(), output, dataCoder);
+      throw new UnsupportedOperationException(
+          String.format(
+              ""%s is a marker class only and should never be executed."", getClass().getName()));
     }
   }
 
```",Remove unused body of StreamingPCollectionViewWriterFn,4,3,4,4,remove unnecessary code,4,2,4,4,"Refactor: Deprecate functionality of StreamingPCollectionViewWriterFn class The processElement(ProcessContext c) method in the StreamingPCollectionViewWriterFn class has been significantly refactored. The previous implementation, which processed each element in the input PCollection and ensured that there is only one element per window for a singleton, has been removed. Now, the method throws an UnsupportedOperationException, indicating that this class is intended to be a marker class and should not be executed. This change is consistent with the updated comments for the StreamingPCollectionViewWriterFn class.",4,4,4,4,"refactor: Mark StreamingPCollectionViewWriterFn as deprecated and non-executable
This change deprecates StreamingPCollectionViewWriterFn, marking it as non-executable, to prevent accidental usage. The processElement method now throws an UnsupportedOperationException to ensure this marker class is not executed. This refactoring is part of the merge from master into gearpump-runner branch, aligning the code with its intended design.","refactor: Convert StreamingPCollectionViewWriterFn to marker class
Updated processElement method to throw UnsupportedOperationException, as it should not be executed.",5.67,25.95,29.24,0.0,"refactor: Mark DataflowRunner's StreamingPCollectionViewWriterFn as deprecated
This commit marks the StreamingPCollectionViewWriterFn class as deprecated and updates its processElement method to throw an UnsupportedOperationException, indicating that it should not be used for processing elements. This change is a refactor to clarify the class's intended use and prevent incorrect usage.",9.07,28.57,35.96,0.0
916fe65e5d63981026c132454ffbc56c3d0f1ca8,apache/beam,,"File: sdks/java/io/hbase/src/test/java/org/apache/beam/sdk/io/hbase/HBaseIOTest.java
Status: modified
```diff
@@ -25,10 +25,8 @@
 import static org.junit.Assert.assertThat;
 
 import com.google.protobuf.ByteString;
-
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.beam.sdk.Pipeline;
 import org.apache.beam.sdk.io.BoundedSource;
 import org.apache.beam.sdk.io.hbase.HBaseIO.HBaseSource;
@@ -68,6 +66,7 @@
 import org.hamcrest.Matchers;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
@@ -78,6 +77,7 @@
 /**
  * Test HBaseIO.
  */
+@Ignore
 @RunWith(JUnit4.class)
 public class HBaseIOTest {
     @Rule public final transient TestPipeline p = TestPipeline.create();
```",Ignore HBaseIOTest temporarily,0,4,4,4,ignore failing HBaseIOTest,2,4,4,4,"Fix: Ignore HBaseIOTest and clean up imports In this commit, the HBaseIOTest class is annotated with @Ignore, indicating that the tests in this class are not to be executed. Additionally, some unused import statements are removed to clean up the code.",4,4,4,4,"fix: Temporarily skip HBaseIOTest due to unknown issue
Temporarily skip HBaseIOTest to prevent build failures while the underlying issue is being investigated and resolved.","fix: Temporarily ignore HBaseIOTest
Added @Ignore annotation to bypass the test class, allowing precommit and postcommit maven install to pass while the issue is being investigated.",3.43,15.62,12.17,0.0,"fix: Temporarily ignore HBaseIOTest
This commit adds the @Ignore annotation to the HBaseIOTest class to temporarily disable it. The test is currently failing and the root cause is unknown. This change is made to restore signal for precommit and postcommit Maven install, allowing for further investigation.",6.69,23.26,28.04,0.0
b92b96643732b05326150decace502194656662c,apache/beam,,"File: sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Regex.java
Status: modified
```diff
@@ -710,7 +710,8 @@ public void processElement(ProcessContext c) throws Exception {
 
   /**
    * {@code Regex.Find<String>} takes a {@code PCollection<String>} and returns a {@code
-   * PCollection<String>} representing the value extracted from the Regex groups of the input {@code
+   * PCollection<List<String>>} representing the value extracted from the
+   * Regex groups of the input {@code
    * PCollection} to the number of times that element occurs in the input.
    *
    * <p>This transform runs a Regex on the entire input line. If a portion of the line does not
@@ -721,8 +722,8 @@ public void processElement(ProcessContext c) throws Exception {
    *
    * <pre>{@code
    * PCollection<String> words = ...;
-   * PCollection<String> values =
-   *     words.apply(Regex.find(""myregex (mygroup)""));
+   * PCollection<List<String>> values =
+   *     words.apply(Regex.findAll(""myregex (mygroup)""));
    * }</pre>
    */
   public static class FindAll extends PTransform<PCollection<String>, PCollection<List<String>>> {
```",Fix Regex#FindAll javadoc,4,4,4,4,fix javadoc warnings,3,2,4,4,Feat: Update method documentation and example in Regex.java This commit updates the method documentation and example usage in the `Regex.java` file. The return type in the documentation has been corrected to `PCollection<List<String>>` and the example usage has been updated accordingly.,0,2,4,4,"refactor: Change Regex.Find return type to PCollection<List<String>>
Updated `Regex.Find` return type to `PCollection<List<String>>` to correctly represent the collection of extracted values from the input `PCollection`.","refactor: Return PCollection<List<String>> from Regex.Find
Update the return type to accurately reflect the extracted values from Regex groups, ensuring consistency with the transform's functionality.",5.44,20.59,11.9,0.0,"refactor: Update Regex.Find return type to PCollection<List<String>>
This commit updates the return type of Regex.Find from PCollection<String> to PCollection<List<String>>. The change is reflected in the JavaDoc and the example code snippet. This refactoring improves the accuracy of the Regex transform's return type.",12.38,28.24,30.31,0.0
059b351e58ab746ee699ee5d8ff746a27ec7586e,apache/beam,,"File: sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/PassThroughThenCleanup.java
Status: modified
```diff
@@ -53,9 +53,9 @@ public PCollection<T> expand(PCollection<T> input) {
     PCollectionTuple outputs = input.apply(ParDo.of(new IdentityFn<T>())
         .withOutputTags(mainOutput, TupleTagList.of(cleanupSignal)));
 
-    PCollectionView<Void> cleanupSignalView = outputs.get(cleanupSignal)
+    PCollectionView<Iterable<Void>> cleanupSignalView = outputs.get(cleanupSignal)
         .setCoder(VoidCoder.of())
-        .apply(View.<Void>asSingleton().withDefaultValue(null));
+        .apply(View.<Void>asIterable());
 
     input.getPipeline()
         .apply(""Create(CleanupOperation)"", Create.of(cleanupOperation))
```",BigQuery: swap from asSingleton to asIterable for Cleanup asIterable can be simpler for runners to implement as it does not require semantically that the PCollection being viewed contains exactly one element.,4,4,4,4,fix quality flaw,1,0,4,4,"Refactor: Change handling of cleanup signal in PassThroughThenCleanup In the `expand` method of the `PassThroughThenCleanup.java` file, the handling of the cleanup signal has been refactored. Previously, the cleanup signal was viewed as a singleton with a default value of null. Now, it is viewed as an iterable. This change does not alter the functionality of the method but changes its internal structure.",4,4,4,4,"refactor: Use Iterable type for cleanupSignalView in PassThroughThenCleanup
Changed `cleanupSignalView` to use `Iterable<Void>` type, aligning with the expected behavior of `View.asIterable()`.","refactor: Update cleanupSignalView to use asIterable
Replace asSingleton with asIterable to improve the internal structure of PassThroughThenCleanup without changing its observable behavior.",1.09,11.9,6.5,0.0,"refactor: Update cleanup signal view in PassThroughThenCleanup
Refactor the cleanup signal view in PassThroughThenCleanup to use an Iterable<Void> instead of a singleton Void. This change is part of the forward integration from master to DSL_SQL and fixes the unit test failure in org.apache.beam.examples.WordCountIT.testE2EWordCount.",7.41,23.42,31.87,0.0
bfb13b650d9e34270fc171427aede11a57de7d1b,apache/beam,,"File: sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java
Status: modified
```diff
@@ -173,7 +173,7 @@ public <T> void output(
     if (rowParameter != null) {
       checkArgument(schemaCoder != null,
           ""Cannot access object as a row if the input PCollection does not have a schema .""
-              + ""DoFn "" + doFn.getClass() + "" Coder "" + inputCoder.getClass());
+              + ""DoFn "" + context.doFn.getClass() + "" Coder "" + context.inputCoder.getClass());
       String id = rowParameter.fieldAccessId();
       if (id == null) {
         // This is the case where no FieldId is defined, just an @Element Row row. Default to all
@@ -326,7 +326,7 @@ public OutputReceiver<Row> outputRowReceiver(DoFn<InputT, OutputT> doFn) {
 
     @Override
     public MultiOutputReceiver taggedOutputReceiver(DoFn<InputT, OutputT> doFn) {
-      return DoFnOutputReceivers.windowedMultiReceiver(this, outputCoders);
+      return DoFnOutputReceivers.windowedMultiReceiver(this, context.outputCoders);
     }
 
     @Override
```",Fixup after merge.,0,0,4,2,remove unnecessary cast,0,0,4,4,Refactor: Improve tagged output receiver in FnApiDoFnRunner This commit refactors the `taggedOutputReceiver` method in the `FnApiDoFnRunner.java` file. The changes ensure that the `MultiOutputReceiver` returned by the method outputs to the correct tagged output. This is an internal improvement that does not alter the external behavior of the code.,1,1,4,4,"refactor: Update FnApiDoFnRunner to use context-based DoFn and coder references
This commit refactors FnApiDoFnRunner to use context-based DoFn and coder references, replacing hardcoded references with more dynamic and flexible ones. This change is part of the larger effort to implement basic end-to-end support of Schemas in Apache Beam, as seen in the schema branch import.","refactor: Refactor FnApiDoFnRunner to use context objects
Update method implementations to utilize context.doFn and context.inputCoder, improving code maintainability and readability.",5.39,21.36,19.65,0.0,"refactor: Update FnApiDoFnRunner to use context input/output coders
This commit refactors the FnApiDoFnRunner class to use the context's input and output coders instead of the old coders. This change is part of the schema branch import into master, which implements basic end-to-end support of Schemas and automatic inference of schemas. The updated class now executes a DoFn on a data stream in a Beam pipeline.",6.15,24.78,20.77,0.0
481e7c0a4075079f45a4c5ff2822092656d5be12,apache/beam,,"File: sdks/java/io/synthetic/src/main/java/org/apache/beam/sdk/io/synthetic/SyntheticStep.java
Status: modified
```diff
@@ -58,8 +58,9 @@ public class SyntheticStep extends DoFn<KV<byte[], byte[]>, KV<byte[], byte[]>>
   public SyntheticStep(Options options) {
     options.validate();
     this.options = options;
+    Random rand = new Random();
     // use a random id so that a pipeline could have multiple SyntheticSteps
-    this.idAndThroughput = KV.of(new Random().nextLong(), options.maxWorkerThroughput);
+    this.idAndThroughput = KV.of(rand.nextLong(), options.maxWorkerThroughput);
   }
 
   private KV<byte[], byte[]> outputElement(
```",Fixing findbugs issue,0,0,4,2,fix a bug in SyntheticStep,2,2,4,4,"Refactor: Improve random long generation in SyntheticStep constructor In the SyntheticStep class, the way a random long is generated for the idAndThroughput has been improved. A new Random object is now created and used to generate the random long. This is a refactoring change that does not affect the functionality of the SyntheticStep class, which is a parameterizable DoFn that consumes and emits KV pairs, introducing a configurable delay for each record.",4,4,4,4,"refactor: Initialize Random instance once in SyntheticStep constructor
Moved Random instance creation to the constructor to reduce unnecessary object creation and improve performance.","refactor: Consolidate Random instance creation in SyntheticStep constructor
This change simplifies the SyntheticStep constructor by reusing a single Random instance, eliminating unnecessary object creation.",1.05,17.02,8.6,0.0,"refactor: Improve SyntheticStep constructor
The SyntheticStep constructor has been refactored to use a single instance of Random for generating a random id, instead of creating a new instance every time. This change improves the internal structure of the SyntheticStep class.",6.71,28.83,30.4,0.0
96fbd8ca7525a85292dbeaf559041a5277d8f8b8,apache/beam,,"File: sdks/java/extensions/euphoria/euphoria-beam/src/main/java/cz/seznam/euphoria/beam/ReduceByKeyTranslator.java
Status: modified
```diff
@@ -37,6 +37,7 @@
 import org.apache.beam.sdk.transforms.MapElements;
 import org.apache.beam.sdk.transforms.ParDo;
 import org.apache.beam.sdk.transforms.SimpleFunction;
+import org.apache.beam.sdk.transforms.windowing.AfterWatermark;
 
 /**
  * Translator for {@code ReduceByKey} operator.
@@ -70,6 +71,8 @@ private static <IN, KEY, VALUE, OUT, W extends Window<W>> PCollection<Pair<KEY,
       input = context.getInput(operator)
           .apply(org.apache.beam.sdk.transforms.windowing.Window.into(
               BeamWindowFn.wrap(operator.getWindowing()))
+          // FIXME: trigger
+          .triggering(AfterWatermark.pastEndOfWindow())
           .discardingFiredPanes()
           .withAllowedLateness(context.getAllowedLateness(operator)));
     }
```",[euphoria-beam] add trigger to window in RBK (missing correct trigger wrapper),4,4,4,4,fix a bug where ReduceByKeyTranslator was not being used in,2,3,4,4,"Fix: Added triggering method in ReduceByKeyTranslator This commit modifies the doTranslate method in the ReduceByKeyTranslator.java file to include a new triggering method. The method translates a ReduceByKey operator into a Beam transformation, extracting keys and values from the input data using provided functions. The new triggering method is added to the input of the transformation.",4,3,4,4,"refactor: Add AfterWatermark trigger to ReduceByKeyTranslator
This change refactors the ReduceByKeyTranslator to incorporate the AfterWatermark trigger, enabling correct handling of windowing and triggering. The trigger's configuration ensures reduce-by-key operations are executed after the end of the window.","refactor: Trigger ReduceByKey operation after watermark
This commit refactors the ReduceByKeyTranslator to use the AfterWatermark trigger, enabling the operation to be triggered after the watermark.",4.16,19.57,21.88,0.0,"feat: Add AfterWatermark trigger to ReduceByKeyTranslator
This commit enhances the ReduceByKeyTranslator by adding an AfterWatermark trigger, which enables more efficient processing of windowed data. The trigger is set to fire after the end of the window, ensuring that all data is processed correctly.",4.37,20.41,20.63,0.0
41dfd846919f350d07e2e2ccd375d30c11545da8,apache/beam,,"File: runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferedElements.java
Status: modified
```diff
@@ -20,7 +20,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.util.Collections;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Objects;
 import org.apache.beam.runners.core.DoFnRunner;
@@ -158,7 +158,7 @@ public BufferedElement decode(InputStream inStream) throws IOException {
 
     @Override
     public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {
-      return Collections.emptyList();
+      return Arrays.asList(elementCoder, windowCoder);
     }
 
     @Override
```",Add Coder components for BufferedElement Coder,0,4,4,4,use Arrays asList instead of Collections,0,3,4,4,"Refactor: Update getCoderArguments() in BufferedElements.java The `getCoderArguments()` method in `BufferedElements.java` has been updated to return a list of coders for the elements and windows, instead of an empty list. This change improves the design of the existing code by providing the necessary coder arguments for the elements and windows.",4,4,4,4,"refactor: Update getCoderArguments to return element and window coders
This change updates the `getCoderArguments` method to return the element and window coders, which are required for encoding and decoding the pipeline's data. This refactoring simplifies the internal structure of the `BufferedElements` class, making it easier to understand and maintain.","refactor: Return coder arguments in getCoderArguments
Updated getCoderArguments to include element and window coders, replacing the previous empty list return.",8.86,32.32,36.65,0.0,"refactor: Update getCoderArguments method in BufferedElements
This commit refactors the getCoderArguments method in the BufferedElements class to return the coder arguments required for encoding and decoding the elements and windows in a Beam pipeline. The method now returns a list containing the element coder and window coder, instead of an empty list.",24.85,41.18,49.78,0.0
ae863d49a783d4e9fb0002f87ae195047614fce9,apache/beam,,"File: sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/ByteBuddyUtils.java
Status: modified
```diff
@@ -995,7 +995,13 @@ protected StackManipulation convertArray(TypeDescriptor<?> type) {
                   COLLECTION_TYPE
                       .getDeclaredMethods()
                       .filter(
-                          ElementMatchers.named(""toArray"").and(ElementMatchers.takesArguments(1)))
+                          ElementMatchers.named(""toArray"")
+                              .and(
+                                  ElementMatchers.takesArguments(
+                                      TypeDescription.Generic.Builder.rawType(Object.class)
+                                          .asArray()
+                                          .build()
+                                          .asErasure())))
                       .getOnly()),
               // Cast the result to T[].
               TypeCasting.to(arrayType));
```",Disambiguate method filter for toArray. Java 11 introduces additional overloads for the toArray method with one parameter.,4,4,4,4,add support for üòÖ,0,0,0,0,"Refactor: Enhance convertArray method in ByteBuddyUtils.java The convertArray method in ByteBuddyUtils.java has been refactored to improve its functionality. The method now converts a collection to an array, and if the array is of primitive types, it converts the array of boxed objects to an array of unboxed objects. This change enhances the method's ability to handle arrays of different types and improves the overall functionality of the ByteBuddyUtils class.",1,1,3,4,"refactor: Update toArray method filter to handle Java 11 overloads
This change updates the `toArray` method filter to handle Java 11 overloads, which introduced additional `toArray` method overloads with one parameter. This refactoring ensures the correct method is selected.","fix: Disambiguate toArray method filter in ByteBuddyUtils for Java 11
Handle additional overloads for toArray method with one parameter introduced in Java 11.",2.75,16.51,15.47,0.0,"fix: Disambiguate method filter for toArray in Java 11
This commit modifies the filter to disambiguate which method is being selected for toArray with one parameter, as Java 11 introduces additional overloads for this method.",1.67,15.24,7.32,0.0
f1c6846f1bcc15207927aa704a8091b768003c1a,apache/beam,,"File: sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/GcpApiSurfaceTest.java
Status: modified
```diff
@@ -85,6 +85,8 @@ public void testGcpApiSurface() throws Exception {
             Matchers.<Class<?>>equalTo(com.google.cloud.ByteArray.class),
             Matchers.<Class<?>>equalTo(com.google.cloud.Date.class),
             Matchers.<Class<?>>equalTo(com.google.cloud.Timestamp.class),
+            // TODO: remove the following classes once spanner updates APIs of AsyncResultSet:
+            // https://github.com/googleapis/java-spanner/issues/410
             Matchers.<Class<?>>equalTo(com.google.common.collect.ImmutableCollection.class),
             Matchers.<Class<?>>equalTo(com.google.common.collect.ImmutableCollection.Builder.class),
             Matchers.<Class<?>>equalTo(com.google.common.collect.ImmutableList.class),
```",Add TODO in GcpApiSurfaceTest: TODO: remove newly-exposed clasess once spanner updates its APIs.,4,4,4,4,fix test on windows,0,0,4,4,"Feat: Add comments for future task in GcpApiSurfaceTest.java This commit adds comments in the GcpApiSurfaceTest.java file, indicating a future task to be done. The comments mention the removal of certain classes once the APIs of AsyncResultSet in Spanner are updated. The related issue can be found at https://github.com/googleapis/java-spanner/issues/410.",3,4,4,4,"refactor: Update GcpApiSurfaceTest to include additional classes
This refactoring is part of the upgrade to spanner library 1.59.0 and google_cloud_bigtable_client_core 1.16.0. The updated test now includes additional classes, temporarily allowing ImmutableCollection and its builder to pass until the spanner API is updated (BEAM-8758).","refactor: Update GcpApiSurfaceTest to include additional classes for Spanner API updates
Add ImmutableCollection, ImmutableCollection.Builder, and ImmutableList classes to the test to prepare for upcoming Spanner API changes.",3.9,15.84,11.95,0.0,"refactor: Update GcpApiSurfaceTest to include additional classes
This commit updates the GcpApiSurfaceTest to include additional classes from the google-cloud-spanner library, which is being upgraded to version 1.59.0. The test now verifies the presence of these classes in the API surface.",4.65,23.91,15.03,0.0
22bc31a9e6d539ca61d42b58312d4927e9b47649,apache/beam,Y,"File: runners/direct-java/src/test/java/org/apache/beam/runners/direct/DirectRunnerApiSurfaceTest.java
Status: modified
```diff
@@ -65,6 +65,7 @@ public void testDirectRunnerApiSurface() throws Exception {
                 WatermarkManager.class /* TODO: BEAM-4237 Consider moving to local-java */)
             .pruningPattern(""org[.]apache[.]beam[.].*Test.*"")
             .pruningPattern(""org[.]apache[.]beam[.].*IT"")
+            .pruningPattern(""org[.]checkerframework[.].*[.]qual[.].*"")
             .pruningPattern(""java[.]io.*"")
             .pruningPattern(""java[.]lang.*"")
             .pruningPattern(""java[.]util.*"");
```


File: sdks/java/extensions/google-cloud-platform-core/src/test/java/org/apache/beam/sdk/extensions/gcp/GcpCoreApiSurfaceTest.java
Status: modified
```diff
@@ -44,6 +44,7 @@ public void testGcpCoreApiSurface() throws Exception {
         ApiSurface.ofPackage(thisPackage, thisClassLoader)
             .pruningPattern(""org[.]apache[.]beam[.].*Test.*"")
             .pruningPattern(""org[.]apache[.]beam[.].*IT"")
+            .pruningPattern(""org[.]checkerframework[.].*[.]qual[.].*"")
             .pruningPattern(""java[.]lang.*"")
             .pruningPattern(""java[.]util.*"");
 
```


File: sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/GcpApiSurfaceTest.java
Status: modified
```diff
@@ -51,6 +51,7 @@ public void testGcpApiSurface() throws Exception {
             .pruningPattern(BigqueryClient.class.getName())
             .pruningPattern(""org[.]apache[.]beam[.].*Test.*"")
             .pruningPattern(""org[.]apache[.]beam[.].*IT"")
+            .pruningPattern(""org[.]checkerframework[.].*[.]qual[.].*"")
             .pruningPattern(""java[.]lang.*"")
             .pruningPattern(""java[.]util.*"");
 
```","Allow checkerframework on API surfaces This commit is independently useful, since checkerframework annotations are helpful for users. We should preserve them at runtime.",4,4,4,4,add tests for üòÖ,0,0,0,0,"Fix: Add new pruning pattern to test files This commit adds a new pruning pattern ""org[.]checkerframework[.].*[.]qual[.].*"" to three test files: DirectRunnerApiSurfaceTest.java, GcpCoreApiSurfaceTest.java, and GcpApiSurfaceTest.java. This change is classified as a ""Fix"", indicating that it is meant to correct a problem in the code. No associated issues or pull requests were found for this commit.",0,4,2,4,"refactor: Prune checkerframework qual classes in API surface tests
Simplify API surface tests by excluding checkerframework qual classes, which are not part of the public API. This change is a prerequisite for enabling global checkerframework support, as described in BEAM-10402.","refactor: Enable global checkerframework type checking
Instead of opting out whole modules, now only existing classes are opted out of type checking, producing more manageable incremental work and limitless starter bugs.",4.99,14.29,11.19,0.0,"refactor: Enable checkerframework globally
This commit refactors the code to enable checkerframework globally, instead of opting out whole modules. This change has several benefits, including enabling type checking for new code, preventing code backsliding, and producing more manageable incremental work.",3.79,10.2,9.47,0.0
a954e6f5e03c7c9110c9d2b116e7774edbcda4fe,apache/beam,,"File: runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/options/DataflowPipelineOptions.java
Status: modified
```diff
@@ -95,8 +95,6 @@ public interface DataflowPipelineOptions
   void setUpdate(boolean value);
 
   /** If set, the snapshot from which the job should be created. */
-  @Hidden
-  @Experimental
   @Description(""If set, the snapshot from which the job should be created."")
   String getCreateFromSnapshot();
 
```",Remove @hidden and @experimental annotation of CreateFromSnapshot pipelien option.,0,4,4,4,remove experimental experimental annotation,0,2,4,4,Refactor: Remove annotations from 'createFromSnapshot' method The 'Hidden' and 'Experimental' annotations were removed from the 'createFromSnapshot' method in the DataflowPipelineOptions.java file. This change does not affect the functionality of the method.,3,4,4,4,"refactor: Remove @Hidden and @Experimental annotations from CreateFromSnapshot pipeline option
Removing unnecessary annotations improves code readability and maintainability. The @Hidden and @Experimental annotations on the CreateFromSnapshot pipeline option were not providing any additional value, and their removal simplifies the codebase.","refactor: Remove unnecessary @Hidden and @Experimental annotations
Remove annotations from CreateFromSnapshot pipeline option in DataflowPipelineOptions",17.34,39.44,34.55,0.0,"refactor: Remove @Hidden and @Experimental annotation of CreateFromSnapshot pipeline option
This commit removes the @Hidden and @Experimental annotations from the CreateFromSnapshot pipeline option in DataflowPipelineOptions, making it more accessible and usable.",19.66,41.94,32.44,0.0
8c04ffd52a43358a8eb56a68fa7aeae0bfa94577,apache/cassandra,Y,"File: src/java/org/apache/cassandra/db/ColumnFamilyStore.java
Status: modified
```diff
@@ -1531,6 +1531,11 @@ public double getReadLatency()
     {_x000D_
         return readStats_.mean();_x000D_
     }_x000D_
+    _x000D_
+    public int getPendingTasks()_x000D_
+    {_x000D_
+        return memtableLock_.getQueueLength();_x000D_
+    }_x000D_
 _x000D_
     /**_x000D_
      * @return the number of write operations on this column family in the last minute_x000D_
```


File: src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
Status: modified
```diff
@@ -84,4 +84,10 @@ public interface ColumnFamilyStoreMBean
      */
     public double getWriteLatency();
     
+    /**
+     * 
+     * @return the estimated number of tasks pending for this column family
+     */
+    public int getPendingTasks();
+    
 }
```",added CFS pending tasks JMX attribute CASSANDRA-173,4,3,4,4,add getPendingTasks to ColumnFamilyStore,0,4,4,4,Feat: Add getPendingTasks method to CFSMBean This commit adds a new method `getPendingTasks()` to both `ColumnFamilyStore.java` and `ColumnFamilyStoreMBean.java`. This method returns the number of tasks pending for this column family. This change was made in response to issue CASSANDRA-173.,4,4,4,4,"feat: Introduce getPendingTasks method to track pending tasks
Returns the number of tasks waiting to be executed, addressing CASSANDRA-173.","feat: Add getPendingTasks method to ColumnFamilyStore and ColumnFamilyStoreMBean
Implement CASSANDRA-173, allowing retrieval of pending tasks in a column family store.",6.79,33.9,25.75,0.0,"feat: Add getPendingTasks method to ColumnFamilyStore and ColumnFamilyStoreMBean
This commit introduces a new method getPendingTasks to ColumnFamilyStore and ColumnFamilyStoreMBean, which returns the number of tasks waiting to be executed. This feature is added to provide a way to monitor the number of pending tasks in a column family store. It is implemented by returning the queue length of the memtable lock. This change is related to CASSANDRA-173.",21.33,48.6,48.59,0.0
f6e15244da3418871f2ee4f076d08582cb967511,apache/cassandra,,"File: src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java
Status: modified
```diff
@@ -1,4 +1,25 @@
 package org.apache.cassandra.concurrent;
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+
 
 import java.util.concurrent.*;
 
```",add missing license header,4,4,4,4,add missing license header,4,4,4,4,Style: Add license header to RetryingScheduledThreadPoolExecutor.java A license header has been added to the file RetryingScheduledThreadPoolExecutor.java. This change is related to the style of the code and does not affect the functionality of the program.,4,4,3,4,"style: Add Apache License header to RetryingScheduledThreadPoolExecutor.java
Comply with ASF licensing requirements by adding the Apache License header.","style: Add license header to RetryingScheduledThreadPoolExecutor.java
The file lacked the standard Apache license header, which is now included.",10.13,29.09,21.2,0.0,"style: Add Apache License header to RetryingScheduledThreadPoolExecutor
Added the Apache License header to the RetryingScheduledThreadPoolExecutor.java file, which was missing the necessary licensing information.",9.68,40.0,26.94,0.0
f75e364cba4b31a8d78574dc6cb62ad1a402660b,apache/cassandra,,"File: src/java/org/apache/cassandra/db/RowIteratorFactory.java
Status: modified
```diff
@@ -161,17 +161,6 @@ else if (colCollated.hasNext())
         return new RowIterator(reduced, iterators);
     }
 
-    /** 
-     * Used when locks are required before getting the entry iterator.
-     * @param memtable Memtable to get iterator from
-     * @param startWith Start at this key position
-     * @return entry iterator for the current memtable
-     */
-    private static Iterator<Map.Entry<DecoratedKey, ColumnFamily>> memtableEntryIterator(Memtable memtable, DecoratedKey startWith)
-    {
-        return memtable.getEntryIterator(startWith);
-    }
-
     /**
      * Get a ColumnIterator for a specific key in the memtable.
      */
```",r/m unused code,4,4,4,4,remove unused method,4,4,4,4,Refactor: Remove unused method from RowIteratorFactory The method `memtableEntryIterator` was removed from the `RowIteratorFactory` class. This method was previously used to get an entry iterator from a memtable starting at a specific key position. The removal of this method does not affect the functionality of the class as it was not being used.,4,4,3,4,"refactor: Remove memtableEntryIterator method
Remove unused `memtableEntryIterator` method to declutter `RowIteratorFactory` class and improve maintainability.","refactor: Remove memtableEntryIterator method
This method was not being used anywhere in the codebase, so it's safe to remove it to simplify the RowIteratorFactory class.",1.05,20.9,11.25,0.0,"refactor: Remove unused method memtableEntryIterator
This commit removes the unused method memtableEntryIterator from RowIteratorFactory, which was not being used anywhere in the codebase. This cleanup simplifies the class's internal structure and makes it easier to maintain.",12.29,34.09,32.32,0.0
4dcd15f48dd21062fbe3a2ac4b3debb10fbbd14a,apache/cassandra,,"File: src/java/org/apache/cassandra/net/IncomingTcpConnection.java
Status: modified
```diff
@@ -98,7 +98,7 @@ public void run()
             {
                 // save the endpoint so gossip will reconnect to it
                 Gossiper.instance.addSavedEndpoint(from);
-                logger.info(""Received "" + (isStream ? ""streaming "" : """") + ""connection from newer protocol version. Ignorning"");
+                logger.info(""Received "" + (isStream ? ""streaming "" : """") + ""connection from newer protocol version. Ignoring"");
             }
             else if (msg != null)
             {
@@ -160,7 +160,7 @@ private Message receiveMessage(DataInputStream input, int version) throws IOExce
             MessagingService.instance().receive(message, id);
             return message;
         }
-        logger.debug(""Received connection from newer protocol version {}. Ignorning message"", version);
+        logger.debug(""Received connection from newer protocol version {}. Ignoring message"", version);
         return null;
     }
 
```",Fix typo in log message,4,4,4,4,remove some logging,0,1,4,4,"Fix: Corrected typos in log messages in IncomingTcpConnection.java In the IncomingTcpConnection.java file, typos in the log messages of the 'run' and 'receiveMessage' methods were corrected. The typo ""Ignorning"" was corrected to ""Ignoring"". This change improves the readability and understanding of the log messages.",4,4,3,4,"fix: Correct 'Ignorning' to 'Ignoring' in IncomingTcpConnection logs
This commit fixes a typo in the log messages of IncomingTcpConnection, which previously displayed 'Ignorning' instead of 'Ignoring' when receiving connections from newer protocol versions. This change ensures that log messages accurately reflect the intended behavior.","fix: Fix typo in logging messages to correctly spell 'ignoring'
Updated IncomingTcpConnection.java to reflect the correct spelling.",15.25,31.82,34.38,0.0,"fix: Fix typo in logging messages
Corrected 'Ignorning' to 'Ignoring' in two logging messages in IncomingTcpConnection.java to ensure accurate and consistent logging.",8.27,23.88,17.2,0.0
ce807c6a22068edbed78d76367e9b35bd883fa77,apache/cassandra,,"File: src/java/org/apache/cassandra/db/columniterator/SSTableNamesIterator.java
Status: modified
```diff
@@ -202,11 +202,18 @@ private void readSimpleColumns(FileDataInput file, SortedSet<ByteBuffer> columnN
         for (int i = 0; i < columns; i++)
         {
             OnDiskAtom column = atomSerializer.deserializeFromSSTable(file, sstable.descriptor.version);
-            if (columnNames.contains(column.name()))
+            if (column instanceof IColumn)
+            {
+                if (columnNames.contains(column.name()))
+                {
+                    result.add(column);
+                    if (n++ > filteredColumnNames.size())
+                        break;
+                }
+            }
+            else
             {
                 result.add(column);
-                if (n++ > filteredColumnNames.size())
-                    break;
             }
         }
     }
```",SSTableNamesIterator misses some tombstones CASSANDRA-4395,4,2,4,3,fix a bug in SSTableNamesIterator,2,2,4,4,Refactor: Fix bug in SSTableNamesIterator This commit modifies the readSimpleColumns method in the SSTableNamesIterator.java file. The method now checks if the column is an instance of IColumn before adding it to the result list. This change was made to fix a bug where the SSTableNamesIterator was missing some tombstones. This change improves the accuracy of the SSTableNamesIterator and ensures that no tombstones are missed.,3,4,4,4,"fix: Fix SSTableNamesIterator to include tombstones
Previously, SSTableNamesIterator missed some tombstones. This change ensures that tombstones are included by filtering out non-IColumn instances, fixing the issue reported in CASSANDRA-4395.","fix: Fix SSTableNamesIterator to handle non-IColumn instances
Previously, the iterator was missing some tombstones. This commit adds a check for IColumn instances, resolving CASSANDRA-4395.",5.65,25.81,24.86,0.0,"fix: Fix SSTableNamesIterator to include all columns
This commit fixes an issue where SSTableNamesIterator was missing some tombstones (CASSANDRA-4395). The fix involves filtering columns based on their type, ensuring that all columns are included in the result. This change improves the accuracy of SSTableNamesIterator.",16.79,31.48,36.6,0.0
3c93e8c6b5e96dcf4487e1b8f8cfe2a327237c6f,apache/cassandra,,"File: src/java/org/apache/cassandra/service/StorageService.java
Status: modified
```diff
@@ -3660,7 +3660,7 @@ private CountDownLatch streamRanges(final Map<String, Multimap<Range<Token>, Ine
         return latch;
     }
 
-    class CountingDownStreamCallback implements IStreamCallback
+    static class CountingDownStreamCallback implements IStreamCallback
     {
         private final CountDownLatch latch;
         private final InetAddress targetAddr;
```",make CountingDownStreamCallback static to reduce footprint,4,4,4,4,make CountingDownStreamCallback static,0,4,4,4,Refactor: Change CountingDownStreamCallback to static class in StorageService.java This commit changes the CountingDownStreamCallback class in the StorageService.java file from a non-static class to a static class. This is a structural change that does not affect the external behavior of the code.,1,4,4,4,"refactor: Make CountingDownStreamCallback a static inner class
Made CountingDownStreamCallback a static inner class to eliminate the implicit reference to the enclosing StorageService instance, reducing potential memory leaks and improving code organization.","refactor: Make CountingDownStreamCallback a static class
Improved code organization and readability by changing the inner class CountingDownStreamCallback to be static.",5.15,27.4,16.75,0.0,"refactor: Make CountingDownStreamCallback static
This change makes the inner class CountingDownStreamCallback static, which is a refactoring to improve the internal structure of the StorageService class.",5.15,29.85,25.83,0.0
a9b403e649aaa4de5e28d3bd4c562568d0ae3fbc,apache/cassandra,,"File: src/java/org/apache/cassandra/db/compaction/CompactionManager.java
Status: modified
```diff
@@ -582,8 +582,7 @@ private void doCleanupCompaction(ColumnFamilyStore cfs, Collection<SSTableReader
             SSTableReader newSstable = null;
 
             logger.info(""Cleaning up "" + sstable);
-            // Calculate the expected compacted filesize
-            long expectedRangeFileSize = cfs.getExpectedCompactedFileSize(Arrays.asList(sstable), OperationType.CLEANUP);
+
             File compactionFileLocation = cfs.directories.getDirectoryForNewSSTables();
             if (compactionFileLocation == null)
                 throw new IOException(""disk full"");
```",remove calculation of unused expected compacted filesize,4,4,4,4,remove unnecessary cast,0,1,4,4,Refactor: Remove unnecessary filesize calculation in cleanup compaction This commit removes the calculation of the expected compacted filesize in the `doCleanupCompaction` method of the `CompactionManager` class. The calculation was not necessary for the cleanup compaction process and its removal simplifies the code without altering functionality.,4,4,4,4,"refactor: Remove expected compacted filesize calculation
Removed unnecessary filesize calculation to simplify CompactionManager's internal structure and improve maintainability.","refactor: Remove unused expected compacted filesize calculation
The calculation was not used in the doCleanupCompaction method.",4.29,22.58,19.34,0.0,"refactor: Remove unnecessary filesize calculation in CompactionManager
The expected compacted filesize calculation was removed from the doCleanupCompaction method in CompactionManager, as it was not necessary. This change simplifies the method's implementation and reduces unnecessary computations.",21.36,45.57,45.59,0.0
579eb229519e5e3b276f918b89158a242c2dec34,apache/cassandra,,"File: src/java/org/apache/cassandra/db/compaction/CompactionTask.java
Status: modified
```diff
@@ -261,8 +261,11 @@ protected void runWith(File sstableDirectory) throws Exception
         Map<Integer, Long> mergedRows = new HashMap<Integer, Long>();
         for (int i = 0; i < counts.length; i++)
         {
-            int rows = i + 1;
             long count = counts[i];
+            if (count == 0)
+                continue;
+
+            int rows = i + 1;
             totalSourceRows += rows * count;
             mergeSummary.append(String.format(""%d:%d, "", rows, count));
             mergedRows.put(rows, count);
```",omit zero counts from compaction merge summary,0,4,4,4,fix a bug in CompactionTask,2,2,4,4,"Fix: Skip iteration if count is zero in compaction operation This commit introduces a fix in the `runWith(File sstableDirectory)` method in the `CompactionTask.java` file. The change involves the addition of a conditional statement to skip an iteration if the count is zero during the compaction operation. This modification ensures that the compaction operation is only performed when necessary, and a snapshot is taken if required.",4,3,3,4,"fix: Skip zero-count rows in CompactionTask
Prevent incorrect totalSourceRows calculation by skipping zero-count rows, ensuring accurate compaction statistics.","fix: Ignore zero count rows in CompactionTask
Prevent unnecessary processing of rows with zero count in the runWith method, improving the compaction process.",0.59,9.64,5.56,0.0,"refactor: Optimize CompactionTask runWith method
Improved the efficiency of the runWith method in CompactionTask by skipping zero-count rows, reducing unnecessary iterations and improving overall performance.",1.39,11.11,9.98,0.0
ef67b60273d1d2b3e9b5b488311625717c161d34,apache/cassandra,,"File: src/java/org/apache/cassandra/db/commitlog/CommitLogArchiver.java
Status: modified
```diff
@@ -51,7 +51,7 @@ public class CommitLogArchiver
     }
 
     public final Map<String, Future<?>> archivePending = new ConcurrentHashMap<String, Future<?>>();
-    public final ExecutorService executor = new JMXEnabledThreadPoolExecutor(""commitlog_archiver"");
+    public final ExecutorService executor = new JMXEnabledThreadPoolExecutor(""CommitLogArchiver"");
     private final String archiveCommand;
     private final String restoreCommand;
     private final String restoreDirectories;
```",Make commitlog archiver thread pool name consistent CASSANDRA-7043,4,4,4,4,fix typo in CommitLogArchiver,0,0,4,4,"Style: Standardize thread pool name in CommitLogArchiver This commit changes the thread pool name in the CommitLogArchiver class from ""commitlog_archiver"" to ""CommitLogArchiver"". This change was made to make the thread pool name consistent with others in the codebase, as per issue CASSANDRA-7043.",4,4,4,4,"fix: Rename CommitLogArchiver thread pool to match others
Renamed the thread pool to follow the established naming convention, addressing the inconsistency highlighted in CASSANDRA-7043. This change ensures consistency in thread pool naming across the system, making it easier to monitor and maintain.","refactor: Rename CommitLogArchiver thread pool to match convention
Update thread pool name from 'commitlog_archiver' to 'CommitLogArchiver' to conform to the naming convention used by other thread pools. This change may impact monitoring applications.",10.4,26.19,44.95,0.0,"fix: Rename CommitLogArchiver thread pool to match naming convention
Fixes CASSANDRA-7043. The thread pool name was inconsistent with others, showing up in tpstats output. This change updates the name to CommitLogArchiver, making it consistent with other thread pool names.",15.3,32.1,47.89,0.0
7c93b04b34844afdc3a502af9e7fb296f43dc068,apache/cassandra,,"File: src/java/org/apache/cassandra/db/ColumnFamilyStore.java
Status: modified
```diff
@@ -2173,16 +2173,18 @@ public Set<SSTableReader> snapshotWithoutFlush(String snapshotName, Predicate<SS
     private void writeSnapshotManifest(final JSONArray filesJSONArr, final String snapshotName)
     {
         final File manifestFile = directories.getSnapshotManifestFile(snapshotName);
-        final JSONObject manifestJSON = new JSONObject();
-        manifestJSON.put(""files"", filesJSONArr);
 
         try
         {
             if (!manifestFile.getParentFile().exists())
                 manifestFile.getParentFile().mkdirs();
-            PrintStream out = new PrintStream(manifestFile);
-            out.println(manifestJSON.toJSONString());
-            out.close();
+            
+            try (PrintStream out = new PrintStream(manifestFile))
+            {
+                final JSONObject manifestJSON = new JSONObject();
+                manifestJSON.put(""files"", filesJSONArr);
+                out.println(manifestJSON.toJSONString());
+            }
         }
         catch (IOException e)
         {
```",make sure streams get closed,1,2,4,4,fix bug in ColumnFamilyStore,2,2,4,4,Refactor: Improve resource handling in writeSnapshotManifest method This commit refactors the `writeSnapshotManifest` method in the `ColumnFamilyStore.java` file. The changes involve the use of a try-with-resources statement to ensure that the `PrintStream` object is properly closed after use. This improves the resource handling in the method and makes the code more robust and easier to maintain.,4,4,4,4,"refactor: Refactor writeSnapshotManifest to use try-with-resources
Replaced manual resource closure with try-with-resources to prevent potential resource leaks and improve code maintainability in `writeSnapshotManifest`.","refactor: Use try-with-resources in writeSnapshotManifest
Replace manual PrintStream closing with try-with-resources to ensure proper resource management.",2.08,20.51,14.68,0.0,"refactor: Improve writeSnapshotManifest method
Refactor the writeSnapshotManifest method to use a try-with-resources statement for the PrintStream, ensuring that the stream is properly closed. This change improves the internal structure of the method, making it more robust and easier to maintain.",20.14,54.74,56.37,0.0
2a9fc0e887612725a51b3822a266c1b3d3fadcaf,apache/cassandra,,"File: src/java/org/apache/cassandra/io/sstable/format/big/BigTableScanner.java
Status: modified
```diff
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.util.*;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.Ordering;
@@ -51,6 +52,7 @@
 
 public class BigTableScanner implements ISSTableScanner
 {
+    private AtomicBoolean isClosed = new AtomicBoolean(false);
     protected final RandomAccessReader dfile;
     protected final RandomAccessReader ifile;
     public final SSTableReader sstable;
@@ -193,7 +195,8 @@ private void seekToCurrentRangeStart()
 
     public void close() throws IOException
     {
-        FileUtils.close(dfile, ifile);
+        if (isClosed.compareAndSet(false, true))
+            FileUtils.close(dfile, ifile);
     }
 
     public long getLengthInBytes()
```",make scanner.close idempotent,0,3,4,4,make BigTableScanner close private,0,0,4,4,"Refactor: Prevent multiple closings of files in BigTableScanner This commit introduces a new variable `isClosed` in the `BigTableScanner` class to track whether the data and index files have been closed. The `close()` method is modified to check this variable before closing the files. This change prevents the files from being closed multiple times, which could potentially lead to a NullPointerException as reported in issue CASSANDRA-9531.",3,4,4,4,"fix: fix: Ensure idempotent close operation in BigTableScanner
Fixes CASSANDRA-9531 by ensuring the close operation in BigTableScanner is idempotent. Previously, duplicate close calls led to NullPointerExceptions due to the segment being deallocated. This change introduces an AtomicBoolean to mark the object as closed, preventing such exceptions.","fix: Mark BigTableScanner as closed on close() to prevent NullPointerException
Fixes CASSANDRA-9531. Ensures close operation is idempotent by marking the object as closed.",5.35,18.18,24.67,0.0,"fix: Fix NullPointerException in BigTableScanner close method
This commit fixes a NullPointerException that occurs when running MessagePayloadTest due to the close method of BigTableScanner being called twice, causing the segment to be deallocated. The fix ensures that the close operation is idempotent by marking the object as closed and only performing the close operation once.",5.99,21.85,23.12,0.0
7bd577375ca5b661eb1fdb92954363546e864655,apache/cassandra,,"File: src/java/org/apache/cassandra/io/sstable/format/SSTableReader.java
Status: modified
```diff
@@ -737,7 +737,7 @@ private void load(boolean recreateBloomFilter, boolean saveSummaryIfCreated) thr
 
             // Check for an index summary that was downsampled even though the serialization format doesn't support
             // that.  If it was downsampled, rebuild it.  See CASSANDRA-8993 for details.
-        if (!descriptor.version.hasSamplingLevel() && !builtSummary && !validateSummarySamplingLevel() && ifile != null)
+        if (ifile != null && !descriptor.version.hasSamplingLevel() && !builtSummary && !validateSummarySamplingLevel())
             {
                 indexSummary.close();
                 ifile.close();
```",move condition (ifile != null) to where it has some value as it is already checked for in validateSummarySamplingLevel(),4,4,4,4,add missing indexSummary call,0,0,4,4,"Refactor: Reorder conditions in load method of SSTableReader class In the load method of the SSTableReader class, the order of the conditions in an if statement has been changed. This method loads the SSTable, builds the summary, and checks for any erroneously downsampled index summary. If it finds any, it rebuilds it. This change is a refactor that improves the readability of the code.",2,1,2,4,"fix: Fix NPE in load method by reordering conditions
Reordering the conditions in the load method prevents a potential NullPointerException when closing the index summary, ensuring data integrity and consistency.","fix: Rebuild index summary when downsampled in SSTableReader
Fix CASSANDRA-8993 by rebuilding index summary when downsampled in SSTableReader.",5.89,21.51,16.57,0.0,"fix: Reorder conditions to avoid NPE in load method
This commit fixes a potential NullPointerException in the load method of SSTableReader by reordering the conditions to ensure that ifile is not null before calling validateSummarySamplingLevel. This change is related to CASSANDRA-8993.",12.43,28.85,21.9,0.0
82ef1cfc3d5a62c4d0f6163e09a9690b43959a92,apache/cassandra,,"File: src/java/org/apache/cassandra/config/DatabaseDescriptor.java
Status: modified
```diff
@@ -593,7 +593,7 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)
             }
         }
 
-        if (conf.cdc_enabled != null)
+        if (conf.cdc_enabled == true)
         {
             logger.info(""cdc_enabled is true. Starting casssandra node with Change-Data-Capture enabled."");
         }
```",ninja: fix logic to log msg w/cdc check on startup,4,4,4,3,fix DatabaseDescriptor crash,3,3,4,4,"Fix: Correct condition check for 'cdc_enabled' in 'applyConfig' method This commit corrects the condition check for 'cdc_enabled' in the 'applyConfig' method of the 'DatabaseDescriptor' class. Previously, the condition checked if 'cdc_enabled' was not null. However, this has been changed to check if 'cdc_enabled' is true. This ensures that the configuration settings are correctly applied to the Cassandra instance when 'cdc_enabled' is true.",4,4,2,3,"refactor: refactor: Simplify CDC enabled check in DatabaseDescriptor
Simplified CDC enabled check in DatabaseDescriptor by replacing null check with explicit boolean comparison, making the code more readable and maintainable.","fix: Check CDC enabled state correctly in DatabaseDescriptor
Replace null check with explicit boolean value check for cdc_enabled in applyConfig method to ensure accurate CDC state detection.",1.34,21.05,8.03,0.0,"fix: Correct cdc_enabled check in DatabaseDescriptor
Fixed the condition to check if cdc_enabled is true in the applyConfig method of DatabaseDescriptor. Previously, it was checking if cdc_enabled was not null, which could lead to incorrect behavior. This change ensures that the Change-Data-Capture feature is only enabled when explicitly configured.",27.72,49.15,47.13,0.0
eaced9a541d09d55973b6f88d720e16ac948a559,apache/cassandra,,"File: src/java/org/apache/cassandra/index/SecondaryIndexManager.java
Status: modified
```diff
@@ -426,7 +426,7 @@ private Index createInstance(IndexMetadata indexDef)
             {
                 Class<? extends Index> indexClass = FBUtilities.classForName(className, ""Index"");
                 Constructor<? extends Index> ctor = indexClass.getConstructor(ColumnFamilyStore.class, IndexMetadata.class);
-                newIndex = (Index)ctor.newInstance(baseCfs, indexDef);
+                newIndex = ctor.newInstance(baseCfs, indexDef);
             }
             catch (Exception e)
             {
@@ -615,7 +615,7 @@ public int calculateIndexingPageSize()
             return DEFAULT_PAGE_SIZE;
 
         int columnsPerRow = baseCfs.metadata.partitionColumns().regulars.size();
-        if (meanCellsPerPartition <= 0)
+        if (columnsPerRow <= 0)
             return DEFAULT_PAGE_SIZE;
 
         int meanRowsPerPartition = meanCellsPerPartition / columnsPerRow;
```",fix typo: wrong if guard variable,4,4,3,3,remove unnecessary cast,2,2,4,4,Refactor: Improve code readability in SecondaryIndexManager This commit refactors the SecondaryIndexManager class in two methods: `createInstance(IndexMetadata indexDef)` and `calculateIndexingPageSize()`. The changes are minor adjustments to the code that improve its readability and structure. No changes in functionality or behavior were made.,0,1,3,4,"fix: Fix unnecessary casting in SecondaryIndexManager
Removed unnecessary casting in createInstance and calculateIndexingPageSize methods, aligning with Java best practices and reducing potential ClassCastExceptions.","refactor: Simplify index creation and page size calculation logic
Removed unnecessary cast in createInstance method and improved calculation in calculateIndexingPageSize method.",3.57,15.87,12.7,0.0,"refactor: Simplify index creation and page size calculation
Refactored the createInstance method to remove unnecessary casting and the calculateIndexingPageSize method to use a more accurate calculation based on columnsPerRow. These changes improve the internal structure of the SecondaryIndexManager class without changing its observable behavior.",7.25,19.05,25.91,0.0
256a74faa31fcf25bdae753c563fa2c69f7f355c,apache/cassandra,,"File: test/unit/org/apache/cassandra/config/DatabaseDescriptorRefTest.java
Status: modified
```diff
@@ -70,6 +70,7 @@ public class DatabaseDescriptorRefTest
     ""org.apache.cassandra.config.Config$DiskOptimizationStrategy"",
     ""org.apache.cassandra.config.Config$InternodeCompression"",
     ""org.apache.cassandra.config.Config$MemtableAllocationType"",
+    ""org.apache.cassandra.config.Config$RepairCommandPoolFullStrategy"",
     ""org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy"",
     ""org.apache.cassandra.config.ParameterizedClass"",
     ""org.apache.cassandra.config.EncryptionOptions"",
```",Add Config$RepairCommandPoolFullStrategy awareness to DatabaseDescriptorRefTest,0,4,4,4,add missing test,0,0,4,4,"Feat: Add new strategy to config in DatabaseDescriptorRefTest This commit adds a new strategy, RepairCommandPoolFullStrategy, to the config in the DatabaseDescriptorRefTest.java file. This change is related to the issue [CASSANDRA-13594], which aims to use an ExecutorService for repair commands instead of starting a new thread.",4,4,4,4,"feat: Add Config$RepairCommandPoolFullStrategy test
Added test for Config$RepairCommandPoolFullStrategy to ensure it is properly loaded and accounted for in DatabaseDescriptorRefTest.","feat: Add Config$RepairCommandPoolFullStrategy to DatabaseDescriptorRefTest
This change introduces a new configuration class to ensure comprehensive testing of its loading and dependencies, enhancing the overall test coverage.",2.74,15.62,12.04,0.0,"feat: Add Config$RepairCommandPoolFullStrategy to DatabaseDescriptorRefTest
This commit enhances the DatabaseDescriptorRefTest class by including the Config$RepairCommandPoolFullStrategy class in its tests, ensuring that the loading of Cassandra configuration classes and their dependencies is properly covered.",4.74,20.51,16.18,0.0
8f4ae7d825d90a18327c5555386f3cdaf414d836,apache/cassandra,Y,"File: src/java/org/apache/cassandra/cql3/statements/AlterViewStatement.java
Status: modified
```diff
@@ -79,9 +79,10 @@ public Event.SchemaChange announceMigration(QueryState queryState, boolean isLoc
 
         if (params.defaultTimeToLive > 0)
         {
-            throw new InvalidRequestException(""Cannot set or alter default_time_to_live for a materialized view. "" +
+            throw new InvalidRequestException(""Forbidden default_time_to_live detected for a materialized view. "" +
                                               ""Data in a materialized view always expire at the same time than "" +
-                                              ""the corresponding data in the parent table."");
+                                              ""the corresponding data in the parent table. default_time_to_live "" +
+                                              ""must be set to zero, see CASSANDRA-12868 for more information"");
         }
 
         viewCopy.metadata.params(params);
```


File: test/unit/org/apache/cassandra/cql3/ViewTest.java
Status: modified
```diff
@@ -1380,16 +1380,23 @@ public void testAlterMvWithTTL() throws Throwable
                     ""c int, "" +
                     ""val int) WITH default_time_to_live = 60"");
 
+        execute(""USE "" + keyspace());
+        executeNet(protocolVersion, ""USE "" + keyspace());
+
         createView(""mv_ttl2"", ""CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE k IS NOT NULL AND c IS NOT NULL PRIMARY KEY (k,c)"");
 
         // Must NOT include ""default_time_to_live"" on alter Materialized View
         try
         {
-            executeNet(protocolVersion, ""ALTER MATERIALIZED VIEW %s WITH default_time_to_live = 30"");
+            executeNet(protocolVersion, ""ALTER MATERIALIZED VIEW "" + keyspace() + "".mv_ttl2 WITH default_time_to_live = 30"");
             fail(""Should fail if TTL is provided while altering materialized view"");
         }
         catch (Exception e)
         {
+            // Make sure the message is clear. See CASSANDRA-16960
+            assertEquals(""Forbidden default_time_to_live detected for a materialized view. Data in a materialized view always expire at the same time than the corresponding ""
+                         + ""data in the parent table. default_time_to_live must be set to zero, see CASSANDRA-12868 for more information"",
+                         e.getMessage());
         }
     }
 
```",Improve MV TTL error message CASSANDRA-16960,4,4,4,4,improved error messages for AlterViewStatement,4,4,4,4,Fix: Improve error message for setting TTL on materialized view This commit modifies the error message thrown when trying to set or alter the default_time_to_live for a materialized view in the method announceMigration in AlterViewStatement.java. The error message now provides more information about why this operation is not allowed.  The test case testAlterMvWithTTL in ViewTest.java has been updated to check for this new error message. This change addresses the issue CASSANDRA-16960.,4,4,4,4,"fix: Fix default_time_to_live error message for materialized views
This commit updates the error message thrown when attempting to set or alter default_time_to_live on materialized views, providing a clearer explanation of the expiration behavior and referencing CASSANDRA-12868. The unit test has been updated to verify the correct error message is thrown.","fix: Disallow default_time_to_live alteration for materialized views
Materialized views always expire at the same time as the corresponding data in the parent table. This change improves the error message to clarify this constraint, fixing CASSANDRA-16960 and referencing CASSANDRA-12868 for more information.",20.46,44.27,39.42,0.0,"fix: Improve error message for altering materialized view with TTL
Fixes CASSANDRA-16960 by improving the error message when attempting to alter a materialized view with a default_time_to_live. The new error message clarifies that data in a materialized view always expires at the same time as the corresponding data in the parent table, and provides a reference to CASSANDRA-12868 for more information.",18.92,37.41,36.59,0.0
de05e13417eb1e1ab77b3e28405a18a6e84a3526,apache/cocoon,,"File: src/java/org/apache/cocoon/components/modules/input/XMLFileModule.java
Status: modified
```diff
@@ -86,7 +86,7 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
  *
  * @author <a href=""mailto:jefft@apache.org"">Jeff Turner</a>
  * @author <a href=""mailto:haul@apache.org"">Christian Haul</a>
- * @version CVS $Id: XMLFileModule.java,v 1.8 2003/05/19 00:25:51 jefft Exp $
+ * @version CVS $Id: XMLFileModule.java,v 1.9 2003/05/20 09:17:57 jefft Exp $
  */
 public class XMLFileModule extends AbstractJXPathModule
     implements Composable, ThreadSafe {
@@ -276,11 +276,12 @@ protected Object getContextObject(Configuration modeConf,
                         ""missing 'file' child element at "" + 
                         modeConf.getLocation());
                 */
+            } else {
+              hasDynamicConf = true;
             }
-            hasDynamicConf = true;
         }
 
-        if (hasDynamicConf && fileConf != null) {
+        if (hasDynamicConf) {
             src = fileConf.getAttribute(""src"");
         }
 
```",Replace hack with a more sensible test.,0,0,4,4,do not dynamic dynamic dynamic file,0,0,4,0,"Refactor: Improve structure of getContextObject method in XMLFileModule This commit refactors the getContextObject method in the XMLFileModule class. The changes improve the structure of the code without altering its behavior. The method retrieves a context object based on the provided configuration and object model, checking for a dynamic configuration and updating the source and reload if present. The changes ensure a more efficient handling of dynamic configurations.",4,4,3,4,"refactor: Refactor getContextObject method
Simplified the getContextObject method by reducing conditional complexity and improving the flow of dynamic configuration handling.","refactor: Set hasDynamicConf correctly in getContextObject
Refactor the getContextObject method to handle dynamic configuration correctly. The method now sets hasDynamicConf to true when necessary, and uses fileConf.getAttribute('src') only when hasDynamicConf is true.",1.35,23.26,12.74,0.0,"refactor: Improve getContextObject method logic
Refactored the getContextObject method to handle dynamic configuration more efficiently. The method's logic has been reorganized to reduce redundancy and improve performance.",3.03,23.66,19.18,0.0
8bc546a37d8013be9f2bdbbee44c0b8502612bf7,apache/cocoon,,"File: src/blocks/webdav/java/org/apache/cocoon/components/source/impl/WebDAVSource.java
Status: modified
```diff
@@ -103,7 +103,7 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
  *  @author <a href=""mailto:g.casper@s-und-n.de"">Guido Casper</a>
  *  @author <a href=""mailto:gianugo@apache.org"">Gianugo Rabellino</a>
  *  @author <a href=""mailto:d.madama@pro-netics.com"">Daniele Madama</a>
- *  @version $Id: WebDAVSource.java,v 1.5 2003/08/22 12:23:41 gcasper Exp $
+ *  @version $Id: WebDAVSource.java,v 1.6 2003/08/22 21:33:56 joerg Exp $
 */
 public class WebDAVSource implements Composable, Source,
     RestrictableSource, ModifiableTraversableSource, InspectableSource {
@@ -765,7 +765,6 @@ public SourceProperty[] getSourceProperties() throws SourceException {
     public SourceProperty getSourceProperty (String namespace, String name)
     throws SourceException {
 
-          Vector sourceproperties = new Vector();
           DOMParser parser = null;
           String xml = """";
           Enumeration props= null;
```",unused variable removed,4,4,4,4,remove unused code,4,3,4,4,"Fix: Update version info and remove unused code in WebDAVSource.java This commit updates the version information in the comments of the WebDAVSource.java file. Additionally, an unused line of code in the getSourceProperty method has been removed.",4,4,4,4,"refactor: Remove redundant Vector variable
Removed redundant Vector variable declaration, which was not being used, to improve code readability and maintainability.","refactor: Simplify getSourceProperty method in WebDAVSource.java
Removed unused Vector declaration and improved code organization.",2.69,6.9,5.51,0.0,"style: Update version number in WebDAVSource.java
Updated the version number in the WebDAVSource.java file to reflect changes made to the file. The changes are minor and do not affect the functionality of the class.",18.64,35.62,28.22,0.0
dde29593723a52e51e9da6dd75b3ee21b4fd7adf,apache/cocoon,,"File: src/blocks/woody/java/org/apache/cocoon/woody/samples/Sex.java
Status: modified
```diff
@@ -52,14 +52,13 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.List;
 import java.util.Locale;
 
 import org.apache.cocoon.woody.datatype.Enum;
 
 /**
  * Description of Sex.
- * @version CVS $Id: Sex.java,v 1.3 2003/11/07 22:04:38 ugo Exp $
+ * @version CVS $Id: Sex.java,v 1.4 2003/11/08 14:27:03 joerg Exp $
  */
 public class Sex implements Enum {
 
```",import clean up,4,4,4,4,remove unused import,4,4,4,4,"Refactor: Remove unused import and update version comment The import statement for java.util.List has been removed from Sex.java as it was unused. Additionally, the version comment has been updated.",4,4,4,4,"refactor: Remove unnecessary import statement
No functional changes were introduced by this commit. The removed import statement was not being used anywhere in the class.","style: Remove unnecessary java.util.List import
Updated Sex.java to eliminate unused import statement",6.3,28.57,26.19,0.0,"style: Update CVS version and remove unnecessary import
This commit updates the CVS version and removes the unnecessary import of java.util.List. The changes are minor and do not affect the functionality of the code.",14.46,23.88,20.7,0.0
63191d5b4f994455df9d8f2f39ad8f5cd563a16a,apache/cocoon,,"File: src/blocks/portal/java/org/apache/cocoon/portal/pluto/test/TestPortlet.java
Status: modified
```diff
@@ -61,29 +61,30 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
  *
  * @author <a href=""mailto:cziegeler@apache.org"">Carsten Ziegeler</a>
  * 
- * @version CVS $Id: TestPortlet.java,v 1.1 2004/01/27 08:05:35 cziegeler Exp $
+ * @version CVS $Id: TestPortlet.java,v 1.2 2004/02/10 08:42:45 cziegeler Exp $
  */
 public class TestPortlet implements Portlet  {
     
     /* (non-Javadoc)
      * @see javax.portlet.Portlet#destroy()
      */
     public void destroy() {
-        System.out.println(""Destroying TestPortlet"");
+        // nothing to do
     }
 
     /* (non-Javadoc)
      * @see javax.portlet.Portlet#init(javax.portlet.PortletConfig)
      */
     public void init(PortletConfig config) throws PortletException {
-        System.out.println(""Initializing TestPortlet"");
+        // nothing to do
     }
 
     /* (non-Javadoc)
      * @see javax.portlet.Portlet#processAction(javax.portlet.ActionRequest, javax.portlet.ActionResponse)
      */
     public void processAction(ActionRequest req, ActionResponse res)
     throws PortletException, IOException {
+        // nothing to do
     }
 
     /* (non-Javadoc)
```",Remove debug msgs,4,4,4,4,remove debug output,4,4,4,4,"Refactor: Remove print statements in TestPortlet.java This commit removes the print statements in the destroy(), init(), and processAction() methods of the TestPortlet.java file. These methods now do not perform any actions. This is a refactoring change that improves the code without changing its external behavior.",4,4,4,4,"fix: fix: Remove unused lifecycle method implementations in TestPortlet
Removed unnecessary print statements and empty method implementations in TestPortlet's lifecycle methods, making the code more concise and easier to understand.","refactor: Remove unnecessary console output from TestPortlet lifecycle methods
Updated destroy, init, and processAction methods to no-op implementations, simplifying the code and removing unnecessary console output.",3.91,21.05,18.46,0.0,"refactor: Remove console output from TestPortlet lifecycle methods
This commit refactors the TestPortlet class by removing console output from its lifecycle methods, including destroy, init, and processAction. The methods are now no-op implementations, indicating that there are no resources to release or cleanup operations to perform. This change simplifies the class's functionality and removes unnecessary output.",9.9,31.37,31.51,0.0
50507178cbe40b27b9052b487cfb1da475223da1,apache/cocoon,,"File: src/java/org/apache/cocoon/sitemap/SitemapParameters.java
Status: modified
```diff
@@ -23,8 +23,7 @@
 /**
  * Extension to the Avalon Parameters
  *
- * @author <a href=""mailto:cziegeler@apache.org"">Carsten Ziegeler</a>
- * @version CVS $Id: SitemapParameters.java,v 1.2 2004/03/08 12:07:39 cziegeler Exp $
+ * @version CVS $Id: SitemapParameters.java,v 1.3 2004/03/09 11:24:43 cziegeler Exp $
  */
 public class SitemapParameters extends Parameters {
     
```","Remove author tag. Thanks Sylvain for pointing at this, this happens when you copy paste and don't think about what you're doing.",4,4,4,4,fix SitemapParameters javadoc,4,3,4,4,Style: Remove author information and update version in SitemapParameters.java The author information was removed from the SitemapParameters.java file and the version was updated. This change does not affect the functionality of the code.,4,3,4,4,"style: Update Javadoc to remove author information
Remove redundant author information from Javadoc comments to maintain consistency with project standards.","style: Remove unnecessary comments from SitemapParameters.java
Updated the comment section to conform to our coding standards.",4.53,22.22,18.84,0.0,"style: Update author and version information
Updated the author and version information in the SitemapParameters.java file to reflect the latest changes.",13.5,42.86,29.5,0.0
5c215e5480d1c462f8f83fdd67c2802655684b98,apache/cocoon,,"File: src/test/org/apache/cocoon/xml/dom/DOMBuilderTestCase.java
Status: modified
```diff
@@ -26,7 +26,7 @@
 /**
  * JUnit Testcase for {@link DOMBuilder}.
  * 
- * @version CVS $Id: DOMBuilderTestCase.java,v 1.2 2004/05/07 13:11:26 ugo Exp $
+ * @version CVS $Id: DOMBuilderTestCase.java,v 1.3 2004/05/18 12:36:52 ugo Exp $
  */
 public class DOMBuilderTestCase extends TestCase {
 
@@ -57,8 +57,11 @@ public void testMultipleCharactersEvents() throws SAXException {
         builder.endElement("""", ""test"", ""test"");
         builder.endDocument();
         Document dom = builder.getDocument();
-        assertEquals(""Content of root element not what expected"", ""ABCDEF"", 
-                dom.getDocumentElement().getFirstChild().getNodeValue()
-                + dom.getDocumentElement().getLastChild().getNodeValue());
+        StringBuffer value = new StringBuffer();
+        for (int i = 0 ; i < dom.getDocumentElement().getChildNodes().getLength() ; ++i) {
+            value.append(dom.getDocumentElement().getChildNodes().item(i).getNodeValue());
+        }
+        assertEquals(""Content of root element not what expected"",
+                ""ABCDEF"", value.toString()); 
     }
 }
```",Correct test case for DOMBuilder.,4,4,4,4,fix unit test,4,2,4,4,Refactor: Improve handling of multiple character events in test method This commit refactors the testMultipleCharactersEvents() method in the DOMBuilderTestCase.java file. The changes improve how multiple character events are handled and appended together in the test case. The refactor does not alter the functionality of the method but improves its design by ensuring that multiple character events are correctly concatenated into a single text node.,1,3,3,4,"fix: Fix concatenation of multiple character events
Fixed incorrect concatenation of multiple character events in DOMBuilderTestCase, which previously resulted in incorrect node values. The updated test case now correctly handles consecutive character events.","fix: Concatenate multiple character events correctly in DOMBuilder
Modified testMultipleCharactersEvents method to ensure correct concatenation in the resulting DOM document.",7.27,24.74,22.59,0.0,"refactor: Improve DOMBuilderTestCase testMultipleCharactersEvents method
Refactor the testMultipleCharactersEvents method in DOMBuilderTestCase to correctly concatenate multiple character events. The new implementation uses a StringBuffer to append node values, ensuring accurate testing of the DOMBuilder's handling of consecutive 'characters' events.",7.89,27.45,24.57,0.0
b45a26454699645e58b8e09e207c194caf8f294b,apache/cocoon,,"File: src/java/org/apache/cocoon/transformation/SourceWritingTransformer.java
Status: modified
```diff
@@ -49,7 +49,7 @@
  * @cocoon.sitemap.component.documentation
  * This transformer allows you to output to a ModifiableSource.
  *
- * @cocoon.sitemap.component.name   write-source
+ * @cocoon.sitemap.component.name   sourcewriting
  * @cocoon.sitemap.component.logger sitemap.transformer.write-source
  *
  * This transformer allows you to output to a ModifiableSource.
```",Fix inconsistent component name.,4,2,4,4,fix typo in javadoc,0,1,4,4,"Refactor: Rename component in SourceWritingTransformer The component name in the SourceWritingTransformer.java file has been changed from 'write-source' to 'sourcewriting'. This change is not associated with any method or class functionality, and there are no associated issues or pull requests.",2,4,3,4,"style: Update Java doc comment to reflect component name change
Updated Java doc comment to reflect the rename of the 'write-source' component to 'sourcewriting', ensuring accuracy and consistency in the documentation.","style: Rename @cocoon.sitemap.component.name to sourcewriting
Updated the annotation in SourceWritingTransformer.java to match the transformer's name.",6.09,20.0,21.32,0.0,"style: Update component name in documentation
Renamed the component name from 'write-source' to 'sourcewriting' in the documentation of SourceWritingTransformer.java to ensure consistency and accuracy.",13.72,34.37,29.13,0.0
d0d38b7cdb8ff27e9b339d42de657143a97b4145,apache/cocoon,,"File: src/blocks/scratchpad/java/org/apache/cocoon/transformation/IncludeTransformer.java
Status: modified
```diff
@@ -49,6 +49,7 @@
 import java.util.Map;
 
 /**
+ * @cocoon.sitemap.component.documentation
  * <p>A simple transformer including resolvable sources (accessed through
  * Cocoon's {@link SourceResolver} from its input.</p>
  *
```",Add missing javadoc attribute,4,4,4,4,add a todo,0,0,4,4,"Style: Add annotation to IncludeTransformer.java Added a @cocoon.sitemap.component.documentation annotation to the IncludeTransformer.java file. This change does not affect the functionality of the code, but improves the style and readability.",2,1,4,4,"style: Add @cocoon.sitemap.component.documentation Javadoc tag
Added Javadoc tag @cocoon.sitemap.component.documentation to IncludeTransformer.java to conform to project documentation standards.","style: Add @cocoon.sitemap.component.documentation Javadoc tag
Improved documentation in IncludeTransformer.java by adding a Javadoc tag.",23.46,31.58,11.82,0.0,"style: Add Javadoc tag
Added the @cocoon.sitemap.component.documentation Javadoc tag to the IncludeTransformer class to improve documentation.",16.99,34.62,15.25,0.0
a28bb0e60dddc2729bed79a9e8ae754a888b2ed3,apache/cocoon,,"File: src/java/org/apache/cocoon/components/modules/input/RealPathModule.java
Status: modified
```diff
@@ -33,7 +33,7 @@
  * running in a .war file), <code>null</code> will be returned.
  *
  * @author <a href=""mailto:jefft@apache.org"">Jeff Turner</a>
- * @version CVS $Id: RealPathModule.java,v 1.3 2004/03/05 13:02:48 bdelacretaz Exp $
+ * @version CVS $Id$
  */
 
 /*
@@ -59,7 +59,7 @@
  */
 public class RealPathModule extends AbstractInputModule implements ThreadSafe {
 
-    final static Vector returnNames;
+    private final static Vector returnNames;
     static {
         Vector tmp = new Vector();
         tmp.add(""realPath"");
@@ -79,7 +79,7 @@ public Object getAttribute( String name, Configuration modeConf, Map objectModel
 
     public Iterator getAttributeNames( Configuration modeConf, Map objectModel ) throws ConfigurationException {
 
-        return RequestURIModule.returnNames.iterator();
+        return RealPathModule.returnNames.iterator();
     }
 
 
```",fixing an obvious cut and paste glitch,4,3,4,4,make returnNames private,0,2,4,4,"Refactor: Update getAttributeNames method in RealPathModule This commit updates the getAttributeNames method in the RealPathModule class. Previously, the method was returning an iterator of the attribute names of the RequestURIModule. Now, it returns an iterator of the attribute names of the RealPathModule. This change improves the structure of the code without changing its behavior.",3,3,4,4,"refactor: Replace RequestURIModule with RealPathModule in getAttributeNames
Replaced RequestURIModule with RealPathModule in getAttributeNames to utilize the correct module for providing attribute names, ensuring consistency with the RealPathModule's purpose.","fix: Fix getAttributeNames to return RealPathModule's attribute names
Previously, the method was incorrectly returning attribute names from RequestURIModule. This change fixes the implementation to return the correct attribute names from RealPathModule.",2.81,19.75,14.34,0.0,"refactor: Improve RealPathModule's attribute names handling
Refactor the getAttributeNames method to return an iterator over the attribute names specific to the RealPathModule, instead of relying on the RequestURIModule. This change improves the internal structure of the RealPathModule, making it more modular and easier to maintain.",18.03,38.78,43.88,0.0
258d7f0a4f9bb6e6cf057ebcd7f9c30662d0aad2,apache/cocoon,,"File: blocks/cocoon-xsp/cocoon-xsp-impl/src/main/java/org/apache/cocoon/components/language/markup/xsp/XSPSessionFwHelper.java
Status: modified
```diff
@@ -28,6 +28,7 @@
  * The <code>Session-fw</code> object helper
  *
  * @version $Id$
+ * @deprecated This class is deprecated and will be removed in future versions.
  * @since 2.1.1
  */
 public class XSPSessionFwHelper {
```",Deprecate session-fw and auth-fw block,4,4,4,2,add missing javadoc,0,1,4,4,Style: Mark XSPSessionFwHelper class as deprecated The XSPSessionFwHelper class in the cocoon-xsp-impl module has been marked as deprecated. This class will be removed in future versions.,4,4,4,4,"refactor: Deprecate XSPSessionFwHelper
Update the class documentation to reflect its deprecated status.","refactor: Deprecate XSPSessionFwHelper
Mark the class as deprecated, indicating it will be removed in future versions.",3.44,16.22,9.47,0.0,"refactor: Deprecate XSPSessionFwHelper class
This commit marks the XSPSessionFwHelper class as deprecated, indicating that it will be removed in future versions. This change does not affect the functionality of the class, but serves as a warning to users that it will be phased out.",23.68,34.78,55.79,0.0
b27c808c89bc0b06dad6c8428aa358e021d38f36,apache/cocoon,,"File: core/cocoon-core/src/main/java/org/apache/cocoon/components/source/SourceUtil.java
Status: modified
```diff
@@ -87,7 +87,7 @@ static private ServiceManager getSitemapServiceManager() {
             uripattern = new RECompiler().compile(""^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$"");
         } catch (RESyntaxException e) {
             // Should not happen
-            e.printStackTrace();
+            throw new RuntimeException(""Error parsing regular expression."", e);
         }
     }
 
```",Throw exception *if* it happens,0,2,4,3,don t throw exceptions in SourceUtil,0,0,4,3,"Fix: Improve error handling in SourceUtil Changed the error handling in the method getSitemapServiceManager() of the class SourceUtil.java. Instead of printing the stack trace, now it throws a RuntimeException with a descriptive message.",4,4,4,4,"fix: Throw RuntimeException on RESyntaxException
Replace printStackTrace with a RuntimeException to ensure that RESyntaxException is properly propagated and handled by callers.","fix: Throw RuntimeException on RESyntaxException in SourceUtil
Prevents silent failures by propagating the exception instead of printing the stack trace.",4.7,14.81,14.27,0.0,"fix: Handle RESyntaxException in SourceUtil
Previously, when a RESyntaxException occurred in SourceUtil, it was caught and the stack trace was printed. This commit changes the behavior to throw a RuntimeException instead, providing more context about the error.",10.23,25.71,33.8,0.0
5ce848b860c02a77a8d45757b11ebd2ece71fbb9,apache/directory-server,Y,"File: core/src/main/java/org/apache/ldap/server/jndi/ContextFactoryConfiguration.java
Status: modified
```diff
@@ -27,6 +27,7 @@
 import org.apache.ldap.server.invocation.Invocation;
 import org.apache.ldap.server.schema.GlobalRegistries;
 
+/** FIXME Rename to ContextFactoryContext */
 public interface ContextFactoryConfiguration
 {
     /**
```


File: core/src/main/java/org/apache/ldap/server/jndi/DefaultContextFactoryConfiguration.java
Status: modified
```diff
@@ -66,6 +66,7 @@
 
 /**
  * Provides everything required to {@link AbstractContextFactory}.
+ * FIXME Rename to DefaultContextFactoryContext
  * 
  * @author <a href=""mailto:dev@directory.apache.org"">Apache Directory Project</a>
  * @version $Rev$
```",These two classes should be reverted back to their old names.,2,4,4,4,add missing javadoc,0,0,4,4,Style: Add comments to suggest renaming classes Added comments in ContextFactoryConfiguration.java and DefaultContextFactoryConfiguration.java to suggest renaming the classes to ContextFactoryContext and DefaultContextFactoryContext respectively.,3,4,4,4,"style: Add FIXME comments for interface renames
Added FIXME comments to track interface renames in preparation for future refactoring.","style: Add FIXME comments to suggest class renames
Added FIXME comments to ContextFactoryConfiguration and DefaultContextFactoryConfiguration to indicate potential renames to ContextFactoryContext and DefaultContextFactoryContext, respectively.",7.46,23.26,22.64,0.0,"refactor: Rename ContextFactoryConfiguration and DefaultContextFactoryConfiguration
This commit renames ContextFactoryConfiguration and DefaultContextFactoryConfiguration to ContextFactoryContext and DefaultContextFactoryContext, respectively, as suggested by the FIXME comments. This change improves the code organization and naming consistency.",17.57,29.09,34.39,0.0
3b0a395ff816fc239969a7a5defeaf96ce2f2457,apache/directory-server,,"File: bootstrap-partition/src/main/java/org/apache/directory/server/schema/bootstrap/partition/DbFileListing.java
Status: modified
```diff
@@ -112,14 +112,17 @@ public Set<String> getIndexedAttributes()
     {
         Set<String> attributes = new HashSet<String>();
         Iterator<String> ii = iterator();
+        
         while( ii.hasNext() )
         {
             String name = ii.next();
+            
             if ( name2type.get( name ) == DbFileType.USER_INDEX )
             {
                 attributes.add( getIndexAttributeName( name ) );
             }
         }
+        
         return attributes;
     }
 }
```",Ligth refactoring (nl added),4,4,4,4,add missing space,0,4,4,4,"Style: Improve code readability in DbFileListing.java In the `getIndexedAttributes` method, added some lines to improve the readability of the code. The functionality of the method remains unchanged.",4,4,3,4,"refactor: Extract indexed attributes from iterator
Moved indexed attribute extraction into a separate iteration to simplify the getIndexedAttributes method and reduce its complexity.","feat: Add database schema indexing to getIndexedAttributes
The method now returns a set of attribute names that are indexed in the database schema.",7.7,12.0,8.8,0.0,"refactor: Improve getIndexedAttributes method
Refactored the getIndexedAttributes method to correctly return a set of attribute names that are indexed in the database. The method now iterates over the iterator and adds the indexed attributes to the set. This change improves the internal structure of the DbFileListing class.",8.22,27.03,34.32,0.0
9cbf06fcae73d281aa4804e574335d12fd0764ec,apache/directory-server,,"File: core/src/main/java/org/apache/directory/server/core/referral/ReferralLut.java
Status: modified
```diff
@@ -99,7 +99,7 @@ public LdapDN getFarthestReferralAncestor( LdapDN dn )
         
         for ( int ii = 0; ii < dn.size(); ii++ )
         {
-            farthest.add( dn.getRdn( ii ) );
+            farthest.addNormalized( dn.getRdn( ii ) );
 
             // do not return dn if it is the farthest referral
             if ( isReferral( farthest ) && ( farthest.size() != dn.size() ) )
```","Call the addNormalized(RDN) method which is much faster than the add(RDN), as the RDN is not normalized again. ",4,4,4,4,fix failing tests,0,0,4,4,"Refactor: Use addNormalized in getFarthestReferralAncestor method In the `getFarthestReferralAncestor` method of the `ReferralLut` class, replaced the `add` method with the `addNormalized` method. This is an internal change that does not alter the functionality of the method.",4,3,4,4,"refactor: Use addNormalized in getFarthestReferralAncestor
Replaced direct addition with addNormalized in getFarthestReferralAncestor to leverage its normalization capabilities, ensuring accurate referral ancestor identification.","refactor: Use addNormalized in getFarthestReferralAncestor
Ensure correct referral handling by using addNormalized instead of add.",10.07,21.05,21.06,0.0,"refactor: Improve referral ancestor lookup
Refactor the getFarthestReferralAncestor method to use addNormalized instead of add, ensuring correct referral handling in LDAP referral scenarios.",7.1,20.69,13.7,0.0
ae5cfa26dd402d543dea6da01c881de67944572e,apache/directory-server,,"File: core-plugin/src/main/java/org/apache/directory/server/core/tools/schema/DirectorySchemaToolMojo.java
Status: modified
```diff
@@ -152,7 +152,7 @@ protected void generateRest( BootstrapSchema schema ) throws Exception
         ProducerTypeEnum type = null;
         for ( int ii = 0; ii < types.size(); ii++ )
         {
-            type = ( ProducerTypeEnum ) types.get( ii );
+            type = types.get( ii );
 
             if ( exists( schema.getFullDefaultBaseClassName( type ), type ) )
             {
```","Warnings clean-up, unnecessary casts.",4,4,4,4,remove unnecessary cast,4,4,4,4,"Refactor: Remove explicit casting in generateRest method In the DirectorySchemaToolMojo.java file, the explicit casting of a variable in the generateRest(BootstrapSchema schema) method has been removed. This change improves the structure of the code without altering its functionality. The method is responsible for generating RESTful API code for each producer type in the schema, excluding ATTRIBUTE_TYPE_PRODUCER and OBJECT_CLASS_PRODUCER.",3,4,1,4,"refactor: Simplify type retrieval in generateRest
Simplified type retrieval in generateRest method by removing unnecessary type casting, making the code more maintainable.","refactor: Simplify type retrieval in generateRest method
Removed unnecessary cast to ProducerTypeEnum, as it is not required.",1.65,16.87,9.79,0.0,"refactor: Remove unnecessary cast in generateRest method
This commit removes an unnecessary cast in the generateRest method of the DirectorySchemaToolMojo class. The cast was not required and has been removed to improve code quality and maintainability.",5.02,26.8,24.02,0.0
90f45e658b8a39033a6d6f071fcae0fe79c57693,apache/directory-server,,"File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/RecordStore.java
Status: modified
```diff
@@ -23,6 +23,7 @@
 import java.util.Set;
 
 import org.apache.directory.server.dns.messages.QuestionRecord;
+import org.apache.directory.server.dns.messages.ResourceRecord;
 
 
 /**
@@ -33,5 +34,12 @@
  */
 public interface RecordStore
 {
-    public Set getRecords( QuestionRecord question ) throws Exception;
+    /**
+     * Returns a set of {@link ResourceRecord}s, given a DNS {@link QuestionRecord}.
+     *
+     * @param question
+     * @return The set of {@link ResourceRecord}s.
+     * @throws Exception
+     */
+    public Set<ResourceRecord> getRecords( QuestionRecord question ) throws Exception;
 }
```","Warnings clean-up: Javadocs, generics.",4,4,4,4,add some javadoc,3,3,4,4,Refactor: Update return type and add comment to 'getRecords' method in 'RecordStore' interface The 'getRecords' method in the 'RecordStore' interface has been updated to return a set of 'ResourceRecord' objects instead of a generic set. A detailed comment has also been added to explain the functionality of the method. This change improves the readability and understandability of the code without altering its functionality.,4,4,4,4,"refactor: Specify return type for getRecords
Specified the return type to ensure type safety and clarify the expected output of the getRecords method, aligning with the interface's intended functionality.","feat: Add getRecords method to RecordStore interface
Introduce a new method to retrieve a set of ResourceRecords based on a given QuestionRecord, providing a more specific return type and improved documentation. This change enhances the interface to better support DNS resource record retrieval.",3.65,26.37,15.1,0.0,"feat: Add getRecords method to RecordStore
This commit introduces a new method getRecords to the RecordStore interface, which retrieves a set of ResourceRecords based on a given QuestionRecord. The method is designed to provide a way to retrieve DNS resource records for a given question record, and it throws an Exception if an error occurs. This change enhances the functionality of the RecordStore interface.",12.73,28.57,38.62,0.0
36ef3a8fdbcb278c67d576676f75ecb1458cb91e,apache/directory-server,,"File: protocol-kerberos/src/main/java/org/apache/directory/server/kerberos/kdc/authentication/MonitorContext.java
Status: modified
```diff
@@ -96,9 +96,9 @@ public void execute( NextCommand next, IoSession session, Object message ) throw
                 EncryptionType encryptionType = authContext.getEncryptionType();
                 int clientKeyVersion = clientEntry.getKeyMap().get( encryptionType ).getKeyVersion();
                 int serverKeyVersion = serverEntry.getKeyMap().get( encryptionType ).getKeyVersion();
-                sb.append( ""\n\t"" + ""Request key type        "" + encryptionType );
-                sb.append( ""\n\t"" + ""Client key version    "" + clientKeyVersion );
-                sb.append( ""\n\t"" + ""Server key version    "" + serverKeyVersion );
+                sb.append( ""\n\t"" + ""Request key type       "" + encryptionType );
+                sb.append( ""\n\t"" + ""Client key version     "" + clientKeyVersion );
+                sb.append( ""\n\t"" + ""Server key version     "" + serverKeyVersion );
 
                 log.debug( sb.toString() );
             }
```",Fixed minimal logging statement alignment issue.,4,4,4,4,fix a typo in MonitorContext,0,0,4,4,"Style: Adjust string formatting in MonitorContext.java In the MonitorContext.java file, the formatting of the strings appended to the StringBuilder object in the ""execute"" method has been adjusted. This change does not affect the functionality of the method, which continues to log detailed information about the current authentication context if debug logging is enabled.",4,3,3,4,"style: Format MonitorContext.java for consistency
Adjusted whitespace in debug logging statements to match the surrounding code formatting, enhancing overall code consistency.","style: Add missing spaces in MonitorContext.java for better readability
Fixed whitespace in debug logging statements.",2.91,15.79,12.32,0.0,"style: Improve formatting in MonitorContext
This commit updates the formatting of debug log messages in the MonitorContext class, adding a space to the output for better readability.",4.86,24.69,12.45,0.0
1abda27855f8287fd3783c5bcc1ceac0f6b94a26,apache/directory-server,Y,"File: core/src/test/java/org/apache/directory/server/core/changelog/MemoryChangeLogStoreTest.java
Status: modified
```diff
@@ -54,7 +54,7 @@ public void tearDown() throws Exception
     }_x000D_
 _x000D_
 _x000D_
-    public void testLogCheckRevision() throws NamingException_x000D_
+    public void testLogCheckRevision() throws Exception_x000D_
     {_x000D_
         assertEquals( ""first revision is always 0"", 0, store.getCurrentRevision() );_x000D_
 _x000D_
```


File: server-unit/src/test/java/org/apache/directory/server/ssl/ConfidentialityRequiredITest.java
Status: modified
```diff
@@ -131,7 +131,12 @@ public void tearDown() throws Exception
     protected void configureLdapServer()
     {
     	super.configureLdapServer();
+    	/*
+    	 * TODO un-comment and enable tests after adding this feature to 1.5.4
+    	 * see https://issues.apache.org/jira/browse/DIRSERVER-1194
+    	 *
     	ldapServer.setConfidentialityRequired( true );
+    	*/
     }
 
     
@@ -181,7 +186,9 @@ public void testConfidentiality() throws Exception
     	try
     	{
     		getWiredContext();
-    		fail( ""Should not get here due to violation of confidentiality requirements"" );
+    		// TODO un comment when confidentiality requirement feature is enabled
+    		// see https://issues.apache.org/jira/browse/DIRSERVER-1194
+//    		fail( ""Should not get here due to violation of confidentiality requirements"" );
     	}
     	catch( AuthenticationNotSupportedException e )
     	{
```",fixing compilation errors due to lack of confidentiality feature,4,4,4,4,fix test for üòÖ,0,1,4,4,Feat: Modify exception type and comment out lines in test methods This commit modifies the exception type thrown by the method testLogCheckRevision() in MemoryChangeLogStoreTest.java from NamingException to Exception. It also comments out some lines in the methods testConfidentiality() and configureLdapServer() in ConfidentialityRequiredITest.java with a TODO comment indicating that these lines should be uncommented when a certain feature is enabled.,3,4,4,4,"refactor: Disable confidentiality requirement in tests
Temporarily disable confidentiality requirement in tests to allow them to pass until the feature is implemented, as tracked in DIRSERVER-1194. This change is necessary to prevent test failures until the confidentiality requirement feature is fully implemented and enabled.","feat: Add test for logging revisions and update confidentiality requirement tests
Introduce a new test method in MemoryChangeLogStoreTest to verify logging revisions and update ConfidentialityRequiredITest to prepare for enabling confidentiality requirements in the future.",3.73,15.38,17.91,0.0,"refactor: Update test methods for confidentiality requirements
Refactor test methods in MemoryChangeLogStoreTest and ConfidentialityRequiredITest to update their functionality and implementation details. The changes include modifying the testLogCheckRevision method and configuring the LDAP server for testing with a TODO note to enable confidentiality requirement in the future.",5.84,18.87,20.02,0.0
cd91e1c00ccb9d5c09a63496625eab262c8cfc73,apache/directory-server,,"File: server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java
Status: modified
```diff
@@ -353,7 +353,7 @@ private void loadLdif( File ldifFile ) throws Exception
         _x000D_
         if ( fileEntry != null )_x000D_
         {_x000D_
-            String time = fileEntry.get( SchemaConstants.CREATE_TIMESTAMP_AT ).getString();_x000D_
+            String time = ((ClonedServerEntry)fileEntry).getOriginalEntry().get( SchemaConstants.CREATE_TIMESTAMP_AT ).getString();_x000D_
             LOG.info( ""Load of LDIF file '"" + getCanonical( ldifFile )_x000D_
                     + ""' skipped.  It has already been loaded on "" + time + ""."" );_x000D_
         }_x000D_
```","Fixed a NPE when trying to read an operational attribute, as we were using the clonedServerEntry, not the original entry.",4,4,4,4,fix npe in ApacheDS,4,4,4,4,"Refactor: Update 'time' variable assignment in 'loadLdif' method This commit updates the way the 'time' variable is assigned in the 'loadLdif' method of the ApacheDS.java file. The change does not affect the overall functionality of the method, which is to load an LDIF file into the directory service if it hasn't been loaded before. The refactor improves the internal structure of the code without changing its external behavior.",0,2,2,4,"fix: Get create timestamp from original entry in loadLdif
Fixes incorrect create timestamp retrieval by getting it from the original entry instead of the cloned one.","fix: Retrieve create timestamp from original entry in loadLdif
Previously, the create timestamp was not correctly retrieved from the original entry in the loadLdif method. This change fixes that issue.",1.25,10.64,6.41,0.0,"fix: Improve loading of LDIF files
Fix the loadLdif method to correctly handle file entries by using the original entry from the cloned server entry. This ensures that the load operation is skipped if the file has already been loaded.",4.07,20.37,18.28,0.0
7c7346bcb4c320ab7c57e4cc8f572269c6da7e65,apache/directory-server,,"File: core-integ/src/main/java/org/apache/directory/server/core/integ/IntegrationUtils.java
Status: modified
```diff
@@ -99,8 +99,6 @@ public static void injectEntries( DirectoryService service, String ldif ) throws
 _x000D_
         for ( LdifEntry entry : entries )_x000D_
         {_x000D_
-            service.getAdminSession().add( _x000D_
-                new DefaultServerEntry( service.getRegistries(), entry.getEntry() ) ); _x000D_
             if ( entry.isChangeAdd() )_x000D_
             {_x000D_
                 service.getAdminSession().add( _x000D_
```","Fixed the patch, removing the two lines I forgot to remove",3,4,4,4,remove unnecessary code,4,4,4,4,"Refactor: Remove redundant addition of DefaultServerEntry in IntegrationUtils The two lines of code that were removed from IntegrationUtils.java were responsible for adding a new DefaultServerEntry to the admin session of the service. This operation was redundant and unnecessary, hence it was removed to improve the code structure without altering its functionality.",0,3,4,4,"refactor: Remove admin session add operation
Removed redundant admin session add operation to improve code simplicity and maintainability. This change aligns with the refactoring goal of making the IntegrationUtils class easier to understand and modify.","refactor: Remove unnecessary admin session add call
The removed code was not necessary for the functionality of IntegrationUtils, which provides utility methods for integrating with a directory service.",5.19,20.93,24.94,0.0,"refactor: Remove unnecessary admin session add calls
This commit removes unnecessary admin session add calls in IntegrationUtils, simplifying the utility methods for integrating with a directory service. The removed code was not necessary for the functionality of the class.",5.9,24.44,30.9,0.0
e4409b9610c1c956d8c87ed89a32a689f36ba325,apache/directory-server,,"File: ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapConnectionTest.java
Status: modified
```diff
@@ -43,7 +43,6 @@
 import org.apache.directory.shared.ldap.entry.Entry;
 import org.apache.directory.shared.ldap.entry.StringValue;
 import org.apache.directory.shared.ldap.exception.LdapException;
-import org.apache.directory.shared.ldap.exception.LdapReferralException;
 import org.apache.directory.shared.ldap.filter.EqualityNode;
 import org.apache.directory.shared.ldap.filter.SearchScope;
 import org.apache.directory.shared.ldap.message.BindResponse;
```",Applied the fix from trunk to make the build working,3,4,4,4,remove unused import,4,4,4,4,"Refactor: Remove unused import in LdapConnectionTest.java The import statement for LdapReferralException was removed from LdapConnectionTest.java. This is a refactor commit, aimed at improving the structure of the code without altering its functionality. The removal of this import statement suggests that the LdapReferralException class was not used in the file.",4,4,4,4,"style: Remove unused LdapReferralException import
This import was not referenced anywhere in the LdapConnectionTest class, making it a redundant declaration. Removing it simplifies the code and reduces unnecessary dependencies.","style: Remove unused LdapReferralException import
Cleaned up LdapConnectionTest.java by removing unnecessary import statement",4.26,22.78,21.37,0.0,"style: Remove unnecessary import statement
Removed the unused import statement for LdapReferralException in LdapConnectionTest.java, cleaning up the code and reducing unnecessary dependencies.",7.66,30.14,16.1,0.0
36b3edc673d365f7ea9d1ddd4c3edf46c88f1c5f,apache/directory-server,Y,"File: core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java
Status: modified
```diff
@@ -60,7 +60,7 @@
 import org.apache.directory.shared.ldap.model.message.CompareResponse;
 import org.apache.directory.shared.ldap.model.message.CompareResponseImpl;
 import org.apache.directory.shared.ldap.model.message.DeleteRequest;
-import org.apache.directory.shared.ldap.message.DeleteRequestImpl;
+import org.apache.directory.shared.ldap.model.message.DeleteRequestImpl;
 import org.apache.directory.shared.ldap.model.message.DeleteResponse;
 import org.apache.directory.shared.ldap.message.DeleteResponseImpl;
 import org.apache.directory.shared.ldap.model.message.ExtendedRequest;
```


File: ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/ClientDeleteRequestTest.java
Status: modified
```diff
@@ -43,7 +43,7 @@
 import org.apache.directory.server.core.integ.FrameworkRunner;
 import org.apache.directory.shared.ldap.model.exception.LdapException;
 import org.apache.directory.shared.ldap.model.message.DeleteRequest;
-import org.apache.directory.shared.ldap.message.DeleteRequestImpl;
+import org.apache.directory.shared.ldap.model.message.DeleteRequestImpl;
 import org.apache.directory.shared.ldap.model.message.DeleteResponse;
 import org.apache.directory.shared.ldap.model.message.ResultCodeEnum;
 import org.apache.directory.shared.ldap.model.name.Dn;
```",no decorator needed for DeleteRequestImpl,1,1,4,3,fix import order,0,0,4,4,"Refactor: Update import statement for DeleteRequestImpl The import statement for DeleteRequestImpl has been updated in 'LdapCoreSessionConnection.java' and 'ClientDeleteRequestTest.java'. The class has been moved to a different package, which is reflected in the new import statement.",3,4,4,4,"style: Update import statements to use model package
Consistently use the 'model' package for import statements in LdapCoreSessionConnection.java and ClientDeleteRequestTest.java, aligning with the project's naming conventions.","refactor: Update DeleteRequestImpl imports
Changed import statements to use org.apache.directory.shared.ldap.model.message.DeleteRequestImpl instead of org.apache.directory.shared.ldap.message.DeleteRequestImpl in LdapCoreSessionConnection.java and ClientDeleteRequestTest.java",21.35,34.38,33.54,0.0,"style: Update import statements for DeleteRequestImpl
This commit updates the import statements for DeleteRequestImpl in LdapCoreSessionConnection.java and ClientDeleteRequestTest.java to use the correct package org.apache.directory.shared.ldap.model.message.",24.52,44.12,40.92,0.0
f23f46acbc62a62f06cccf9bf12a3055d39827ec,apache/directory-server,Y,"File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/DnsOperation.java
Status: modified
```diff
@@ -20,7 +20,6 @@
 package org.apache.directory.server.dns.store.jndi;
 
 
-import java.io.Serializable;
 import java.util.Set;
 
 import javax.naming.Name;
@@ -34,7 +33,7 @@
  *
  * @author <a href=""mailto:dev@directory.apache.org"">Apache Directory Project</a>
  */
-public interface DnsOperation extends Serializable
+public interface DnsOperation
 {
     /**
      * The command pattern execute method.
```


File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/operations/GetFlatRecord.java
Status: modified
```diff
@@ -49,8 +49,6 @@
  */
 public class GetFlatRecord implements DnsOperation
 {
-    private static final long serialVersionUID = 4931303293468915435L;
-
     /** The name of the question to get. */
     private final QuestionRecord question;
 
```


File: protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/operations/GetRecords.java
Status: modified
```diff
@@ -56,8 +56,6 @@
  */
 public class GetRecords implements DnsOperation
 {
-    private static final long serialVersionUID = 1077580995617778894L;
-
     /** The name of the question to get. */
     private final QuestionRecord question;
 
```",Made those classes not anymore serializable,4,4,4,4,remove unused code,0,0,4,4,"Refactor: Remove Serializable interface and serialVersionUID fields The Serializable interface was removed from the DnsOperation interface, and the serialVersionUID fields were removed from the GetFlatRecord and GetRecords classes. These changes suggest that serialization is no longer needed for these classes. This commit is a refactor, intended to improve the structure of the code without changing its behavior.",4,4,4,4,"refactor: Remove unnecessary serialization dependencies
Removed serialization dependencies from DnsOperation interface and its implementing classes, as they were not being used for serialization purposes. This refactoring eliminates unnecessary dependencies and reduces code complexity.","refactor: Drop Serializable interface and serialVersionUID fields
These fields were not being used in DnsOperation, GetFlatRecord, and GetRecords classes, making them redundant.",5.02,22.47,22.29,0.0,"refactor: Remove Serializable interface and serialVersionUID fields
This commit removes the Serializable interface and serialVersionUID fields from DnsOperation and its implementing classes, GetRecords and GetFlatRecord. This change simplifies the code and removes unnecessary dependencies.",14.51,40.0,33.36,0.0
b5546be3333d7a261e6db37ab6e36f34193cffbb,apache/directory-server,Y,"File: core-integ/src/test/java/org/apache/directory/server/core/operations/add/AddIT.java
Status: renamed
```diff
@@ -17,7 +17,7 @@
  *  under the License.
  *
  */
-package org.apache.directory.server.core.jndi;
+package org.apache.directory.server.core.operations.add;
 
 
 import static org.apache.directory.server.core.integ.IntegrationUtils.getAdminConnection;
```


File: core-integ/src/test/java/org/apache/directory/server/core/suites/MigratedStockCoreISuite.java
Status: modified
```diff
@@ -39,7 +39,7 @@
 import org.apache.directory.server.core.event.EventServiceIT;
 import org.apache.directory.server.core.exception.ExceptionServiceIT;
 import org.apache.directory.server.core.integ.FrameworkSuite;
-import org.apache.directory.server.core.jndi.AddIT;
+import org.apache.directory.server.core.operations.add.AddIT;
 import org.apache.directory.server.core.operations.add.PasswordHashingInterceptorTest;
 import org.apache.directory.server.core.operations.move.MoveIT;
 import org.junit.runner.RunWith;
```",Moved the AddIT test to the operations package,4,4,4,4,move üòÖ to the correct package,3,0,3,1,Refactor: Update package name of AddIT.java and import in MigratedStockCoreISuite.java The package name of the AddIT.java file has been refactored from 'org.apache.directory.server.core.jndi' to 'org.apache.directory.server.core.operations.add'. The import statement in the MigratedStockCoreISuite.java file has been updated to reflect this change. This refactoring improves the structure of the code without changing its behavior.,4,4,4,4,"refactor: Relocate AddIT to org.apache.directory.server.core.operations.add
Relocated AddIT test class to org.apache.directory.server.core.operations.add package to better reflect its functionality. This change improves the organization of our test classes, making it easier for developers to find and understand the purpose of AddIT.","refactor: Move AddIT.java to org.apache.directory.server.core.operations.add package
Renamed package from org.apache.directory.server.core.jndi to org.apache.directory.server.core.operations.add",31.18,40.0,22.59,0.0,"refactor: Rename AddIT.java to new package
Rename AddIT.java from org/apache/directory/server/core/jndi to org/apache/directory/server/core/operations/add and update its import statement in MigratedStockCoreISuite.java to reflect the new package location.",4.6,32.61,24.41,0.0
2ed79615de8834887948901fb4a3863166a62c24,apache/directory-server,Y,"File: core-integ/src/test/java/org/apache/directory/server/core/trigger/TriggerInterceptorIT.java
Status: modified
```diff
@@ -32,9 +32,9 @@
 import javax.naming.ldap.LdapContext;
 
 import org.apache.directory.api.ldap.model.entry.AttributeUtils;
+import org.apache.directory.api.ldap.sp.JavaStoredProcUtils;
 import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
 import org.apache.directory.server.core.integ.FrameworkRunner;
-import org.apache.directory.shared.ldap.sp.JavaStoredProcUtils;
 import org.apache.directory.shared.ldap.trigger.TriggerUtils;
 import org.junit.Ignore;
 import org.junit.Test;
```


File: protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/extended/StoredProcedureExtendedOperationHandler.java
Status: modified
```diff
@@ -31,6 +31,7 @@
 import org.apache.directory.api.ldap.codec.api.LdapApiServiceFactory;
 import org.apache.directory.api.ldap.model.entry.Entry;
 import org.apache.directory.api.ldap.model.name.Dn;
+import org.apache.directory.api.ldap.sp.LdapContextParameter;
 import org.apache.directory.server.core.api.sp.StoredProcEngine;
 import org.apache.directory.server.core.api.sp.StoredProcEngineConfig;
 import org.apache.directory.server.core.api.sp.StoredProcExecutionManager;
@@ -40,7 +41,6 @@
 import org.apache.directory.server.ldap.LdapSession;
 import org.apache.directory.shared.ldap.extras.extended.StoredProcedureRequest;
 import org.apache.directory.shared.ldap.extras.extended.StoredProcedureResponse;
-import org.apache.directory.shared.ldap.sp.LdapContextParameter;
 
 
 /**
```


File: server-integ/src/test/java/org/apache/directory/server/operations/extended/StoredProcedureIT.java
Status: modified
```diff
@@ -35,6 +35,7 @@
 import org.apache.directory.api.ldap.model.constants.SupportedSaslMechanisms;
 import org.apache.directory.api.ldap.model.schema.normalizers.DeepTrimToLowerNormalizer;
 import org.apache.directory.api.ldap.model.schema.normalizers.OidNormalizer;
+import org.apache.directory.api.ldap.sp.JavaStoredProcUtils;
 import org.apache.directory.junit.tools.MultiThreadedMultiInvoker;
 import org.apache.directory.server.annotations.CreateLdapServer;
 import org.apache.directory.server.annotations.CreateTransport;
@@ -47,7 +48,6 @@
 import org.apache.directory.server.ldap.handlers.bind.ntlm.NtlmMechanismHandler;
 import org.apache.directory.server.ldap.handlers.bind.plain.PlainMechanismHandler;
 import org.apache.directory.server.ldap.handlers.extended.StoredProcedureExtendedOperationHandler;
-import org.apache.directory.shared.ldap.sp.JavaStoredProcUtils;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
```",Renamed the shared-ldap-extras-sp package,3,1,4,4,remove unused imports,0,0,4,4,"Refactor: Update import statements in three files This commit updates the import statements in three files: TriggerInterceptorIT.java, StoredProcedureExtendedOperationHandler.java, and StoredProcedureIT.java. The changes are part of a refactor and do not alter the functionality of the code.",3,4,3,4,"style: Cleanup imports
Unified import statements for JavaStoredProcUtils and LdapContextParameter across files.","refactor: Move StoredProcUtils and LdapContextParameter imports to org.apache.directory.api.ldap.sp
Reorganized imports in multiple files to use the correct package.",1.13,12.0,10.51,0.0,"refactor: Reorganize imports for stored procedure utilities
This commit reorganizes the imports for stored procedure utilities across multiple files, removing redundant imports and ensuring consistency in the codebase. The changes are focused on the `JavaStoredProcUtils` and `LdapContextParameter` classes, and do not introduce any new functionality or bug fixes.",11.18,27.91,34.08,0.0
87fdc2ea1c73d1bfada93fe8f6f7f158398eb402,apache/directory-server,,"File: core-api/src/main/java/org/apache/directory/server/core/api/LdapCoreSessionConnection.java
Status: modified
```diff
@@ -154,7 +154,7 @@ public boolean close() throws IOException
     /**
      * {@inheritDoc}
      */
-    public boolean connect() throws LdapException, IOException
+    public boolean connect() throws LdapException
     {
         return true;
     }
@@ -1152,7 +1152,7 @@ public void abandon( int messageId )
     /**
      * {@inheritDoc}
      */
-    public void bind() throws LdapException, IOException
+    public void bind() throws LdapException
     {
         throw new UnsupportedOperationException(
             ""Bind operation using LdapConnectionConfig are not supported on CoreSession based connection"" );
@@ -1162,7 +1162,7 @@ public void bind() throws LdapException, IOException
     /**
      * {@inheritDoc}
      */
-    public void anonymousBind() throws LdapException, IOException
+    public void anonymousBind() throws LdapException
     {
         BindRequest bindRequest = new BindRequestImpl();
         bindRequest.setName( """" );
@@ -1177,7 +1177,7 @@ public void anonymousBind() throws LdapException, IOException
     /**
      * {@inheritDoc}
      */
-    public BindResponse bind( BindRequest bindRequest ) throws LdapException, IOException
+    public BindResponse bind( BindRequest bindRequest ) throws LdapException
     {
         if ( bindRequest == null )
         {
```",o The connect() and various bind() method don't throw an IoException anymore,0,4,4,3,remove unused parameter,0,0,4,4,"Refactor: Removed IOException from method signatures in LdapCoreSessionConnection This commit removes the IOException from the method signatures in the LdapCoreSessionConnection.java file. The methods affected include connect(), bind(), anonymousBind(), and bind(BindRequest bindRequest). These changes simplify the method signatures and reduce the need for exception handling in the methods that use these methods.",4,4,4,4,"refactor: Remove IOException from method signatures
Removed IOException from method signatures as they do not perform any I/O operations, making the API more accurate and easier to use.","feat: Implement LDAP connection and binding methods
Added connect, bind, anonymousBind, and bind(BindRequest) methods to LdapCoreSessionConnection class, enabling LDAP connections and bindings.",5.95,27.85,19.54,0.0,"refactor: Remove IOException from method signatures
This commit refactors the method signatures of LdapCoreSessionConnection to remove IOException. The connect, bind, and anonymousBind methods no longer throw IOException, and their implementations have been updated accordingly. This change simplifies the API and makes it more consistent.",8.29,33.68,36.0,0.0
0f9ab470354525d53ca5a2910b76fe9e95c751bf,apache/directory-server,,"File: interceptors/hash/src/main/java/org/apache/directory/server/core/hash/PasswordHashingInterceptor.java
Status: modified
```diff
@@ -30,6 +30,7 @@
 import org.apache.directory.api.ldap.model.entry.DefaultAttribute;
 import org.apache.directory.api.ldap.model.entry.Entry;
 import org.apache.directory.api.ldap.model.entry.Modification;
+import org.apache.directory.api.ldap.model.entry.ModificationOperation;
 import org.apache.directory.api.ldap.model.entry.Value;
 import org.apache.directory.api.ldap.model.exception.LdapException;
 import org.apache.directory.api.ldap.model.password.PasswordUtil;
@@ -113,14 +114,17 @@ public void modify( ModifyOperationContext modifyContext ) throws LdapException
             // check for modification on 'userPassword' AT
             if ( SchemaConstants.USER_PASSWORD_AT_OID.equals( oid ) )
             {
+                if ( mod.getOperation() == ModificationOperation.REMOVE_ATTRIBUTE )
+                {
+                   continue; 
+                }
+                
                 Attribute newPwd = includeHashedPassword( mod.getAttribute() );
 
                 if ( newPwd != null )
                 {
                     mod.setAttribute( newPwd );
                 }
-
-                break;
             }
         }
 
```",check for password attribute in all modifications,0,4,4,4,remove unnecessary break,0,1,4,4,"Feat: Skip password hashing for remove attribute operation This commit introduces a new feature in the modify method of the PasswordHashingInterceptor class. Previously, the method would apply the password hashing algorithm to the 'userPassword' attribute if it was present in the modification items. Now, the method checks if the modification operation is to remove the attribute and skips the operation if so. This change enhances the functionality of the method by preventing unnecessary operations.",4,4,4,4,"fix: Skip modification on 'userPassword' attribute removal
This change prevents unnecessary hashing attempts when the 'userPassword' attribute is removed, ensuring the interceptor correctly handles attribute removals.","refactor: Handle REMOVE_ATTRIBUTE operation in modify method
Updated the modify method to skip processing when the operation is REMOVE_ATTRIBUTE, ensuring correct behavior in PasswordHashingInterceptor.",1.61,18.18,14.62,0.0,"refactor: Improve password hashing in PasswordHashingInterceptor
This commit refactors the modify method in PasswordHashingInterceptor to handle removal of 'userPassword' attribute correctly. It adds a check for ModificationOperation.REMOVE_ATTRIBUTE and skips hashing in that case. This change improves the internal structure of the password hashing mechanism, making it more robust and efficient.",8.05,32.0,26.84,0.0
b83fe8c2561188265445f64abe612d99a90e227c,apache/flink,,"File: nephele/nephele-server/src/main/java/eu/stratosphere/nephele/taskmanager/bytebuffered/OutgoingConnection.java
Status: modified
```diff
@@ -20,9 +20,7 @@
 import java.nio.channels.SelectionKey;
 import java.nio.channels.SocketChannel;
 import java.nio.channels.WritableByteChannel;
-import java.util.ArrayDeque;
 import java.util.Iterator;
-import java.util.Queue;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -65,7 +63,7 @@ public class OutgoingConnection {
 	/**
 	 * The queue of transfer envelopes to be transmitted.
 	 */
-	private final Queue<TransferEnvelope> queuedEnvelopes = new ArrayDeque<TransferEnvelope>();
+	private final TransferEnvelopeQueue queuedEnvelopes = new TransferEnvelopeQueue();
 
 	/**
 	 * The {@link DefaultSerializer} object used to transform the envelopes into a byte stream.
@@ -548,7 +546,9 @@ public int getNumberOfQueuedWriteBuffers() {
 	 */
 	void registerSpillingQueue(final SpillingQueue spillingQueue) {
 
-		System.out.println(""Registering spilling queue"");
+		synchronized (this.queuedEnvelopes) {
+			this.queuedEnvelopes.registerSpillingQueue(spillingQueue);
+		}
 	}
 
 	/**
@@ -560,6 +560,8 @@ void registerSpillingQueue(final SpillingQueue spillingQueue) {
 	 */
 	void unregisterSpillingQueue(final SpillingQueue spillingQueue) {
 
-		System.out.println(""Unregistering spilling queue"");
+		synchronized (this.queuedEnvelopes) {
+			this.queuedEnvelopes.unregisterSpillingQueue(spillingQueue);
+		}
 	}
 }
```",Switched to TransferEnvelopeQueue for network queue management,1,4,4,4,fix compilation error,0,0,4,4,"Refactor: Improve handling of spilling queues in OutgoingConnection This commit refactors the OutgoingConnection class to improve the handling of spilling queues. The queuedEnvelopes object was changed from a Queue to a TransferEnvelopeQueue, and the registerSpillingQueue and unregisterSpillingQueue methods were modified to interact with this new object. These changes aim to enhance the management of overflow data.",4,4,4,4,"refactor: Synchronize spilling queue registration and unregisteration
Replaced logging with synchronization to ensure thread-safe registration and unregistration of spilling queues, improving the reliability of outgoing connections.","refactor: Synchronize SpillingQueue registration and unregistration
Ensure thread safety in OutgoingConnection by synchronizing on the queuedEnvelopes collection when registering and unregistering SpillingQueues.",3.34,19.75,17.22,0.0,"refactor: Improve thread safety in OutgoingConnection
Refactor the registration and unregistration of SpillingQueue in OutgoingConnection to ensure thread safety. This change replaces the use of ArrayDeque with a custom TransferEnvelopeQueue and synchronizes the registration and unregistration of SpillingQueue to prevent concurrent modifications.",4.91,28.87,20.78,0.0
9034a54e63c66a9e79f457b926931af88f99999e,apache/flink,,"File: pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/MatchNode.java
Status: modified
```diff
@@ -1031,11 +1031,11 @@ protected double computeStubCallsPerProcessedKey() {
 		double callsPerKey = 1;
 		
 		if(numKey1 != -1) {
-			callsPerKey *= numKey1 / (double)numRecords1;
+			callsPerKey *= (double)numRecords1 / numKey1;
 		}
 		
 		if(numKey2 != -1) {
-			callsPerKey *= numKey2 / (double)numRecords2;
+			callsPerKey *= (double)numRecords2 / numKey2;
 		}
 
 		return callsPerKey;
```",fixed stub call estimation of MatchNode,4,4,4,4,fix bug in MatchNode üòÖ,2,1,4,4,"Fix: Correct calculation in computeStubCallsPerProcessedKey method This commit corrects the calculation of the average number of stub calls per processed key in the `computeStubCallsPerProcessedKey()` method of the `MatchNode.java` file. The positions of `numRecords1` and `numKey1`, and `numRecords2` and `numKey2` in the division operation have been swapped to ensure accurate calculation.",4,4,4,4,"fix: Correct division in computeStubCallsPerProcessedKey
Reversed the division order in computeStubCallsPerProcessedKey to correctly calculate the average number of stub calls per processed key, ensuring that the numerator and denominator are correctly aligned.","fix: Fix callsPerKey calculation in MatchNode
Swap division order in computeStubCallsPerProcessedKey method to ensure correct result.",17.41,36.59,35.54,0.0,"refactor: Improve computeStubCallsPerProcessedKey method
Refactor the computeStubCallsPerProcessedKey method in MatchNode to correctly calculate the average number of stub calls per processed key. The changes fix the division order in the calculation, ensuring accurate results.",21.3,38.1,44.33,0.0
0af7b5233b17dac022035429a4d2906f2d540b42,apache/flink,,"File: flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/scheduler/SchedulerIsolatedTasksTest.java
Status: modified
```diff
@@ -22,7 +22,6 @@
 import static org.apache.flink.runtime.jobmanager.scheduler.SchedulerTestUtils.getDummyTask;
 import static org.apache.flink.runtime.jobmanager.scheduler.SchedulerTestUtils.getTestVertex;
 import static org.apache.flink.runtime.jobmanager.scheduler.SchedulerTestUtils.getRandomInstance;
-
 import static org.junit.Assert.*;
 
 import org.junit.Test;
@@ -34,10 +33,12 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.apache.flink.runtime.instance.AllocatedSlot;
 import org.apache.flink.runtime.instance.Instance;
+import org.apache.flink.runtime.util.ExecutorThreadFactory;
 
 /**
  * Tests for the {@link Scheduler} when scheduling individual tasks.
@@ -181,7 +182,9 @@ public void testScheduleQueueing() {
 		final int NUM_TASKS_TO_SCHEDULE = 2000;
 		
 		try {
-			Scheduler scheduler = new Scheduler();
+			// note: since this test asynchronously releases slots, the executor needs release workers.
+			// doing the release call synchronous can lead to a deadlock
+			Scheduler scheduler = new Scheduler(Executors.newFixedThreadPool(4, ExecutorThreadFactory.INSTANCE));
 			
 			for (int i = 0;i < NUM_INSTANCES; i++) {
 				scheduler.newInstanceAvailable(getRandomInstance((int) (Math.random() * NUM_SLOTS_PER_INSTANCE) + 1));
```",Fix incorrect scheduler test that sometimes produces a deadlock,4,4,4,4,fix SchedulerIsolatedTasksTest to work with üòÖ,2,1,4,4,"Refactor: Update Scheduler instantiation in testScheduleQueueing method This commit updates the way the Scheduler is instantiated in the testScheduleQueueing method of the SchedulerIsolatedTasksTest class. The Scheduler is now created with a fixed thread pool, which allows for asynchronous release of slots. This change is made to prevent potential deadlocks that could occur when releasing slots synchronously.",3,4,4,4,"refactor: Create Scheduler with fixed thread pool executor
Updated Scheduler constructor to use a fixed thread pool executor with 4 threads, ensuring that asynchronous slot releases do not lead to deadlocks in concurrent environments. This change is necessary to prevent test failures in SchedulerIsolatedTasksTest.","refactor: Change SchedulerIsolatedTasksTest to use ExecutorThreadFactory
Modified the test to use a fixed thread pool with ExecutorThreadFactory to handle concurrent slot release and ensure correct scheduling and queueing of tasks.",11.8,26.26,34.26,0.0,"refactor: Improve SchedulerIsolatedTasksTest for concurrent environment
Refactor the SchedulerIsolatedTasksTest to ensure correct allocation and release of slots in a concurrent environment. The test now uses a fixed thread pool to release slots asynchronously, preventing deadlocks.",8.9,26.67,29.85,0.0
51acd2cc9740cd3609983b7f9641d69324557774,apache/flink,,"File: flink-runtime/src/main/java/org/apache/flink/runtime/state/ManagedSnapshotContext.java
Status: modified
```diff
@@ -33,7 +33,7 @@ public interface ManagedSnapshotContext {
 	 * 
 	 * <p>The checkpoint ID is guaranteed to be strictly monotonously increasing across checkpoints.
 	 * For two completed checkpoints <i>A</i> and <i>B</i>, {@code ID_B > ID_A} means that checkpoint
-	 * <i>B</i> subsumes checkpoint <i>A</i>, i.e., checkpoint <i>B</i>it contains a later state
+	 * <i>B</i> subsumes checkpoint <i>A</i>, i.e., checkpoint <i>B</i> contains a later state
 	 * than checkpoint <i>A</i>.
 	 */
 	long getCheckpointId();
```",[hotfix] [javadoc] Fix typo in Javadoc of ManagedSnapshotContext#getCheckpointId() this closes #4913,4,4,4,4,fix javadoc typo,4,4,4,4,"Style: Fix typo in Javadoc of ManagedSnapshotContext#getCheckpointId() This commit corrects a typo in the Javadoc comment of the getCheckpointId() method in the ManagedSnapshotContext class. The word ""it"" was removed from the sentence ""checkpoint <i>B</i>it contains a later state"" to make it grammatically correct. This change does not affect the functionality of the code.",4,4,4,4,"fix: Fix typo in ManagedSnapshotContext Javadoc
Corrects a typo in the Javadoc of ManagedSnapshotContext#getCheckpointId(), resolving issue #4913.","fix: Fix typo in ManagedSnapshotContext#getCheckpointId() Javadoc
Resolves issue #4913",4.15,26.09,15.14,0.0,"fix: Fix typo in Javadoc of ManagedSnapshotContext#getCheckpointId()
This commit fixes a typo in the Javadoc of ManagedSnapshotContext#getCheckpointId() method, ensuring the accuracy of the documentation.",10.74,42.11,25.24,0.0
91dc1c9ad0bc4430b069ca09b59b750a5166fa86,apache/flink,,"File: flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/writer/RecordWriter.java
Status: modified
```diff
@@ -130,13 +130,12 @@ private void sendToTarget(T record, int targetChannel) throws IOException, Inter
 					if (result.isFullRecord()) {
 						break;
 					}
-				} else {
-					BufferBuilder bufferBuilder =
-						targetPartition.getBufferProvider().requestBufferBuilderBlocking();
-					checkState(!bufferConsumers[targetChannel].isPresent());
-					bufferConsumers[targetChannel] = Optional.of(bufferBuilder.createBufferConsumer());
-					result = serializer.setNextBufferBuilder(bufferBuilder);
 				}
+				BufferBuilder bufferBuilder =
+					targetPartition.getBufferProvider().requestBufferBuilderBlocking();
+				checkState(!bufferConsumers[targetChannel].isPresent());
+				bufferConsumers[targetChannel] = Optional.of(bufferBuilder.createBufferConsumer());
+				result = serializer.setNextBufferBuilder(bufferBuilder);
 			}
 			checkState(!serializer.hasSerializedData(), ""All data should be written at once"");
 		}
```",[hotfix][runtime] Simplify RecordWriter code,4,4,4,4,fix bug in RecordWriter,0,1,4,4,"Refactor: Improve buffer handling in RecordWriter's sendToTarget method This commit refactors the `sendToTarget` method in the `RecordWriter` class. The changes improve how the buffer is handled when it is full. Previously, the buffer handling code was inside an else block. This commit moves the buffer handling code outside the if block, making the code cleaner and easier to understand.",4,1,4,4,"refactor: Remove unnecessary else clause in sendToTarget method
Removed unnecessary else clause in sendToTarget method, which was not contributing to the method's logic, to improve code readability and reduce unnecessary complexity.","refactor: Simplify buffer management in RecordWriter by removing unnecessary else clause
Improve buffer handling in sendToTarget method.",2.74,20.22,14.89,0.0,"refactor: Simplify buffer management in RecordWriter
This commit refactors the `sendToTarget` method in `RecordWriter` to simplify buffer management. It removes unnecessary conditional logic and improves the handling of full buffers and requesting new ones as needed. This change makes the code more efficient and easier to understand.",17.15,40.0,39.36,0.0
f487d8ca54dc3de030b3332825e3faa028f6e590,apache/flink,Y,"File: flink-connectors/flink-connector-kafka-0.11/src/test/java/org/apache/flink/streaming/connectors/kafka/KafkaTestEnvironmentImpl.java
Status: modified
```diff
@@ -295,7 +295,7 @@ public void prepare(Config config) {
 	}
 
 	@Override
-	public void shutdown() {
+	public void shutdown() throws Exception {
 		for (KafkaServer broker : brokers) {
 			if (broker != null) {
 				broker.shutdown();
@@ -331,6 +331,7 @@ public void shutdown() {
 				// ignore
 			}
 		}
+		super.shutdown();
 	}
 
 	public ZkUtils getZkUtils() {
```


File: flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/KafkaTestEnvironmentImpl.java
Status: modified
```diff
@@ -359,6 +359,7 @@ public void shutdown() throws Exception {
 				// ignore
 			}
 		}
+		super.shutdown();
 	}
 
 	protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {
```","[hotfix][kafka,test] Add missing shutdown call propagation",4,3,4,4,add throws Exception,0,1,4,4,"Refactor: Improve shutdown process in KafkaTestEnvironmentImpl This commit refactors the `shutdown()` method in the `KafkaTestEnvironmentImpl.java` file in both `flink-connector-kafka-0.11` and `flink-connector-kafka` directories. The changes include adding a `throws Exception` declaration to the method signature and adding a call to `super.shutdown()`. This ensures that any shutdown procedures defined in a superclass are also executed, improving the robustness and maintainability of the shutdown process.",4,4,4,4,"refactor: Ensure KafkaTestEnvironmentImpl.shutdown() calls superclass method
Adds a call to the superclass method in shutdown() to maintain the expected behavior of KafkaTestEnvironmentImpl, ensuring that resources are properly released. This change is necessary for the correct functioning of the migration tests for FlinkKafkaProducer and FlinkKafkaProducer011.","refactor: Call superclass shutdown method in KafkaTestEnvironmentImpl
Ensure that the superclass shutdown method is called to prevent resource leaks and maintain proper shutdown sequence.",6.2,23.85,25.33,0.0,"refactor: Refactor KafkaTestEnvironmentImpl shutdown method
This commit refactors the shutdown method in KafkaTestEnvironmentImpl to properly shut down the Kafka cluster, including all brokers and ZooKeeper, and clean up temporary directories. It also adds a call to the superclass's shutdown method to ensure proper cleanup. This change is part of the migration tests for FlinkKafkaProducer and FlinkKafkaProducer011.",14.15,31.67,33.1,0.0
8abb2599fb878b1b72c0a9d52b8cf956d9c5256d,apache/flink,,"File: flink-core/src/main/java/org/apache/flink/util/InstantiationUtil.java
Status: modified
```diff
@@ -590,7 +590,8 @@ public static byte[] serializeObject(Object o) throws IOException {
 	}
 
 	public static void serializeObject(OutputStream out, Object o) throws IOException {
-		ObjectOutputStream oos = new ObjectOutputStream(out);
+		ObjectOutputStream oos =
+			out instanceof ObjectOutputStream ? (ObjectOutputStream) out : new ObjectOutputStream(out);
 		oos.writeObject(o);
 	}
 
```",[hotfix][core] InstantiationUtil#serializeObject creates ObjectOutput Stream only when necessary.,4,4,4,4,fix bug in InstantiationUtil,2,2,4,4,"Refactor: Optimize ObjectOutputStream instantiation in serializeObject method This commit optimizes the instantiation of ObjectOutputStream in the serializeObject method of the InstantiationUtil class. Previously, a new ObjectOutputStream was always created. With this change, a new ObjectOutputStream is created only if necessary. This could potentially improve performance.",4,4,4,4,"refactor: Use existing ObjectOutputStream if possible in serializeObject
This refactoring reduces object creation and improves performance by reusing existing ObjectOutputStream instances when possible, without altering the method's functionality.","fix: Avoid creating unnecessary ObjectOutputStream
In serializeObject method, reuse the output stream if it's already an ObjectOutputStream to prevent unnecessary object creation.",2.98,13.89,13.55,0.0,"refactor: Refactor serializeObject method to handle ObjectOutputStream
Refactor the serializeObject method in InstantiationUtil to handle the case where the OutputStream is already an ObjectOutputStream, avoiding unnecessary object creation. This change improves the internal structure of the code without changing its observable behavior.",8.16,23.26,28.44,0.0
b13d227047227551ffd5a6d81780d779d4d6b4b3,apache/flink,,"File: flink-tests/src/test/java/org/apache/flink/test/checkpointing/ProcessingTimeWindowCheckpointingITCase.java
Status: modified
```diff
@@ -332,9 +332,14 @@ public boolean checkResult(Map<Long, Integer> windowCounts) {
                 return false;
             }
 
-            for (int i : windowCounts.values()) {
-                if (countPerElementExpected != i) {
+            for (Map.Entry<Long, Integer> e : windowCounts.entrySet()) {
+                if (e.getValue() < countPerElementExpected) {
                     return false;
+                } else if (e.getValue() > countPerElementExpected) {
+                    fail(
+                            String.format(
+                                    ""counter too big for %d: %d (expected %d)"",
+                                    e.getKey(), e.getValue(), countPerElementExpected));
                 }
             }
 
```",[hotfix][tests] Improve ProcessingTimeWindowCheckpointingITCase 1. Prevent from hanging out if stream contains duplicates 2. Improve error reporting,4,4,4,4,add check for expected expected expected count,0,2,3,2,"Fix: Update checkResult method in ProcessingTimeWindowCheckpointingITCase This commit updates the `checkResult` method in the `ProcessingTimeWindowCheckpointingITCase.java` file. The method now checks if the count of elements in each window of the map matches the expected count per element and if the total count of elements is within the expected range. If the count of elements in a window is less than the expected count, it returns false. If the count is greater than the expected count, it fails with a specific error message indicating that the counter is too big.",3,4,3,4,"fix: Fix checking of window counts in ProcessingTimeWindowCheckpointingITCase
This change improves the reliability of `ProcessingTimeWindowCheckpointingITCase` by fixing the `checkResult` method to correctly validate window counts. It prevents test hangs on duplicate streams and provides more informative error messages.","fix: Fix error reporting in ProcessingTimeWindowCheckpointingITCase
Prevent test from hanging if stream contains duplicates and provide more detailed information about counter values in error messages.",1.96,14.17,13.04,0.0,"fix: Improve ProcessingTimeWindowCheckpointingITCase test
Fix the test to prevent hanging when the stream contains duplicates and improve error reporting. The change ensures that the aggregated count and individual element counts in the window match the expected values.",1.86,19.05,12.0,0.0
6ee501c93d05e5febc5dd61f145a60fcea53c192,apache/flink,,"File: flink-yarn-tests/src/test/java/org/apache/flink/yarn/YARNFileReplicationITCase.java
Status: modified
```diff
@@ -114,7 +114,16 @@ private void deployPerJob(Configuration configuration, JobGraph jobGraph) throws
                 final JobResult jobResult = jobResultCompletableFuture.get();
 
                 assertThat(jobResult, is(notNullValue()));
-                assertThat(jobResult.getSerializedThrowable().isPresent(), is(false));
+                jobResult
+                        .getSerializedThrowable()
+                        .ifPresent(
+                                serializedThrowable -> {
+                                    throw new AssertionError(
+                                            ""Job failed"",
+                                            serializedThrowable.deserializeError(
+                                                    YARNFileReplicationITCase.class
+                                                            .getClassLoader()));
+                                });
 
                 extraVerification(configuration, applicationId);
 
```",[hotfix][yarn][tests] Improve assertion in case job failed,4,4,4,4,fix failing test,0,1,4,4,"Fix: Update error handling in `deployPerJob` method This commit updates the `deployPerJob` method in the `YARNFileReplicationITCase.java` file. The method now throws an AssertionError if a serialized throwable is present, providing a more robust error handling mechanism.",4,4,4,4,"fix: Throw AssertionError on job failure
Previously, the test would silently ignore job failures. This change introduces an explicit AssertionError when a job fails, ensuring that failures are properly reported and handled. This improvement enhances the test's reliability and helps developers quickly identify issues.","fix: Throw AssertionError on job failure with serialized throwable in YARNFileReplicationITCase
Provide more informative error messages by deserializing the error when a job fails.",4.0,12.5,14.18,0.0,"fix: Handle job failure with serialized throwable
This commit improves the error handling in YARNFileReplicationITCase by throwing an AssertionError when a job fails, providing more informative error messages. It also ensures that the attempt count is properly handled during job execution.",8.46,28.57,31.76,0.0
c7d598a7c52224ab8ab2159d2885ffc8f64c67f3,apache/flink,,"File: flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/DefaultDeclarativeSlotPoolTest.java
Status: modified
```diff
@@ -195,7 +195,7 @@ public void testDuplicateSlotOfferings() throws InterruptedException {
     }
 
     @Test
-    public void testOfferingTooManySlots() {
+    public void testOfferingTooManySlotsWillRejectSuperfluousSlots() {
         final NewSlotsService notifyNewSlots = new NewSlotsService();
         final DefaultDeclarativeSlotPool slotPool =
                 createDefaultDeclarativeSlotPoolWithNewSlotsListener(notifyNewSlots);
```",[hotfix][tests] Rename DefaultDeclarativeSlotPoolTest.testOfferingTooManySlots into testOfferingTooManySlotsWillRejectSuperfluousSlots,4,4,4,4,fix typo in test name,0,0,4,4,"Refactor: Rename test method in DefaultDeclarativeSlotPoolTest The test method `testOfferingTooManySlots()` has been renamed to `testOfferingTooManySlotsWillRejectSuperfluousSlots()` to better reflect its functionality. This change does not affect the functionality of the code, but improves the readability and understanding of the test.",4,4,4,4,"refactor: Rename test method to better reflect its behavior
This rename improves the test method's name to accurately convey its intended behavior, enhancing code readability and maintainability.","refactor: Rename test method to reflect its functionality
Updated testOfferingTooManySlots to testOfferingTooManySlotsWillRejectSuperfluousSlots for improved clarity.",15.98,36.92,34.76,0.0,"refactor: Rename test method to better reflect its behavior
Renamed testOfferingTooManySlots to testOfferingTooManySlotsWillRejectSuperfluousSlots to better reflect the test's purpose. This change improves the readability and understandability of the test method.",31.43,55.88,61.8,0.0
f2e3d204d6e8e49be4abe00b9db244901ab90eaf,apache/flink,,"File: flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest.java
Status: modified
```diff
@@ -27,8 +27,8 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
 
 /**
  * Tests for {@link PhysicalSlotProviderImpl} using {@link
```",[hotfix][tests] Replace assertThat with MatcherAssert.assertThat in PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest,0,4,4,4,fix import order,0,0,4,4,Style: Update import statement in test file The import statement for the `assertThat` method in the `PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest.java` file has been updated. The old import statement has been replaced with a new one. This change does not affect the functionality of the code.,3,4,4,4,"style: Remove unnecessary import
This commit removes the unnecessary import statement of `org.junit.Assert` in `PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest.java`, which was replaced by `org.hamcrest.MatcherAssert`.","style: Update import statements to use org.hamcrest.MatcherAssert
Replace outdated org.junit.Assert with the more modern org.hamcrest.MatcherAssert in PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest to maintain consistency and best practices in our test imports.",6.26,23.88,13.74,0.0,"style: Update import statements
This commit updates the import statements in PhysicalSlotProviderImplWithDefaultSlotSelectionStrategyTest.java to use hamcrest's assertThat instead of JUnit's. This change improves code consistency and readability.",9.12,31.88,30.55,0.0
6b92e07b7c6180edd54e54fb2725f01ca5e0f022,apache/flink,,"File: flink-table/flink-table-planner/src/test/java/org/apache/flink/table/planner/functions/BuiltInFunctionTestBase.java
Status: modified
```diff
@@ -411,7 +411,7 @@ public String toString() {
             return ""[API] ""
                     + expression.stream()
                             .map(Expression::asSummaryString)
-                            .collect(Collectors.joining());
+                            .collect(Collectors.joining("", ""));
         }
     }
 
```","[hotfix][table-planner] Beautify the assertion error message in BuiltInFunctionTestBase When testing multiple cases as multiple columns of a table separate them in error msg output for TableApi with a `, `.",4,4,4,4,fix broken test,0,0,4,4,"Refactor: Improve readability of toString() method in BuiltInFunctionTestBase.java The toString() method in BuiltInFunctionTestBase.java has been refactored to improve its readability. Previously, the method returned a string representation of the object, including its definition name and description. The updated method now returns a string representation of the API, including a comma-separated list of summary strings for each expression in the expression stream. This change does not alter the external behavior of the code but improves the internal structure.",4,4,3,4,"refactor: Separate sub-expressions with commas in API expression string representation.
This change enhances the API expression string representation by separating sub-expressions with commas, making it easier to understand and debug complex expressions.","refactor: Use commas to separate components in BuiltInFunctionTestBase toString
Improved the implementation of toString method to provide a more readable string representation of the API expression.",2.52,12.61,11.7,0.0,"refactor: Improve toString method in BuiltInFunctionTestBase
Refactored the toString method to provide a more informative string representation of the API expression, summarizing each component and separating them with commas. This change enhances the usability of the method by providing a clearer output.",8.44,35.0,22.69,0.0
84e1a529626427a184acc88a356e04f4f9f17007,apache/flink,,"File: flink-examples/flink-examples-streaming/src/main/java/org/apache/flink/streaming/examples/gpu/MatrixVectorMul.java
Status: modified
```diff
@@ -23,10 +23,10 @@
 import org.apache.flink.api.common.serialization.SimpleStringEncoder;
 import org.apache.flink.api.java.utils.ParameterTool;
 import org.apache.flink.configuration.Configuration;
+import org.apache.flink.connector.file.sink.FileSink;
 import org.apache.flink.core.fs.Path;
 import org.apache.flink.streaming.api.datastream.DataStream;
 import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
-import org.apache.flink.streaming.api.functions.sink.filesystem.StreamingFileSink;
 import org.apache.flink.streaming.api.functions.source.RichSourceFunction;
 import org.apache.flink.util.Preconditions;
 
@@ -101,8 +101,8 @@ public static void main(String[] args) throws Exception {
 
         // Emit result
         if (params.has(""output"")) {
-            result.addSink(
-                    StreamingFileSink.forRowFormat(
+            result.sinkTo(
+                    FileSink.forRowFormat(
                                     new Path(params.get(""output"")),
                                     new SimpleStringEncoder<List<Float>>())
                             .build());
```",[hotfix][examples] Replace StreamingFileSink with FileSink,0,4,4,4,fix matrix matrix path,0,0,3,3,"Refactor: Update sink method in MatrixVectorMul.java This commit updates the method for adding a sink to the result in the main method of the MatrixVectorMul.java file. The import statement for StreamingFileSink is replaced with FileSink, and the method for adding a sink is changed from addSink to sinkTo. The functionality of the main method remains the same.",4,4,4,4,"refactor: Replace StreamingFileSink with FileSink in MatrixVectorMul
Replace StreamingFileSink with FileSink to align with the latest Flink API and reduce complexity.","refactor: Replace StreamingFileSink with FileSink in MatrixVectorMul
Updated the MatrixVectorMul example to use the new FileSink API instead of the deprecated StreamingFileSink.",1.33,17.72,8.91,0.0,"refactor: Update MatrixVectorMul to use FileSink
Refactored the MatrixVectorMul class to use the new FileSink API instead of the deprecated StreamingFileSink. This change improves the code's maintainability and adaptability to future changes.",3.51,24.44,19.48,0.0
b51021302ca755cd2e495d2dd8cfc54f70521f52,spepping/fop-cs,,"File: src/org/apache/fop/image/ImageArea.java
Status: modified
```diff
@@ -52,6 +52,7 @@ INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 
 package org.apache.fop.image;
 
+import org.apache.fop.fo.properties.TextAlign;
 import org.apache.fop.layout.*;
 import org.apache.fop.render.Renderer;
 
@@ -72,16 +73,18 @@ public ImageArea(FontState fontState, FopImage img,
 	this.image = img;
 
 	switch (align) {
-	case 1: // should be TextAlign.START
+	case TextAlign.START:
 	    xOffset = startIndent;
 	    break;
-	case 2: //should be TextAlign.END
+	case TextAlign.END:
 	    if (endIndent == 0)
 		endIndent = AllocationWidth;
 	    xOffset = (endIndent - width);
 	    break;
-	case 3: //should be TextAlign.CENTER
-	case 4: //should be TextAlign.JUSTIFY
+	case TextAlign.JUSTIFY:
+	    xOffset = startIndent;
+	    break;
+	case TextAlign.CENTER:
 	    if (endIndent == 0)
 		endIndent = AllocationWidth;
 	    xOffset = startIndent + ((endIndent - startIndent) - width)/2;
```",Correction for the text-align bug.,3,4,4,4,fix image area,2,1,4,4,Refactor: Replace numerical values with TextAlign constants in ImageArea.java This commit replaces the numerical values in the switch statement in ImageArea.java with corresponding constants from the TextAlign class. This change improves the readability and maintainability of the code. No external behavior is changed.,0,4,4,4,"refactor: Replace magic numbers with TextAlign constants
Improved code readability and maintainability by replacing magic numbers with TextAlign constants, making the internal structure of ImageArea.java more intuitive and easier to modify.","refactor: Replace magic numbers with TextAlign enum values
In ImageArea class, switched from using magic numbers to TextAlign enum values, enhancing code readability and maintainability.",9.01,23.68,23.91,0.0,"refactor: Use TextAlign constants instead of magic numbers
This commit replaces magic numbers with TextAlign constants in the ImageArea class, making the code more readable and maintainable. The constants are used to specify the alignment of images in the document layout.",11.11,30.59,33.86,0.0
cc65cfaf8df8cbaec3ba9ec60544a13396358909,spepping/fop-cs,,"File: src/org/apache/fop/layout/LineArea.java
Status: modified
```diff
@@ -487,14 +487,18 @@ public void addLeader(int leaderPattern, int leaderLengthMinimum,
                           int ruleStyle, int ruleThickness, int leaderPatternWidth,
                           int leaderAlignment) {
         WordArea leaderPatternArea;
-        int leaderLength;
+        int leaderLength = 0;
         int remainingWidth =
           this.getContentWidth() - this.getCurrentXPosition();
-        //checks whether leaderLenghtOptimum fits into rest of line;
-        //should never overflow, asit has been checked already in BlockArea
-        if (remainingWidth < leaderLengthOptimum) {
+        /** checks whether leaderLenghtOptimum fits into rest of line;
+         *  should never overflow, as it has been checked already in BlockArea
+         *  first check: use remaining width if it smaller than optimum oder maximum
+         * */
+        if ((remainingWidth <= leaderLengthOptimum) ||   (remainingWidth <= leaderLengthMaximum)) {
             leaderLength = remainingWidth;
-        } else {
+        } else if ((remainingWidth > leaderLengthOptimum) && ( remainingWidth > leaderLengthMaximum)) {
+            leaderLength = leaderLengthMaximum;
+        } else if ((leaderLengthOptimum > leaderLengthMaximum) && (leaderLengthOptimum < remainingWidth)) {
             leaderLength = leaderLengthOptimum;
         }
         switch (leaderPattern) {
```",fixed: leader didn't fill line in content table,4,3,4,4,fix bug in LineArea,2,2,4,4,Refactor: Improve conditions for setting leaderLength in addLeader method This commit refactors the `addLeader` method in the `LineArea` class. The conditions for setting the `leaderLength` variable have been improved to better handle the space in a line when adding a leader. A leader is a pattern that fills the space in a line. The changes made do not alter the functionality of the method but improve the structure of the code.,0,3,3,4,"fix: Fix leader length calculation in addLeader
Updated leader length calculation logic to handle various scenarios, including when remaining width is smaller than or equal to leaderLengthOptimum or leaderLengthMaximum, to ensure correct leader length assignment.","fix: Fix leader length calculation in addLeader method
Correctly handle scenarios where remaining width is less than or equal to leaderLengthOptimum or leaderLengthMaximum.",1.6,9.52,7.04,0.0,"refactor: Improve leader length calculation in LineArea
Refactor the logic for calculating the leader length in the addLeader method to handle different scenarios more accurately. The changes ensure that the leader length is correctly determined based on the available width and the specified minimum, optimum, and maximum lengths.",5.75,23.73,15.88,0.0
9714e1d97fa8bd499d042f24499be4f43832ea29,spepping/fop-cs,,"File: src/org/apache/fop/render/ps/PSRenderer.java
Status: modified
```diff
@@ -99,9 +99,6 @@ public class PSRenderer extends AbstractRenderer {
     private int currentFontSize;
     private int pageHeight;
     private int pageWidth;
-    private int currentXPosition = 0;
-    private int currentYPosition = 0;
-    private int currentAreaContainerXPosition = 0;
     private float currRed;
     private float currGreen;
     private float currBlue;
```","fixed a refactoring error, deleted repeated vars",4,4,4,4,remove unused field,4,4,4,4,"Refactor: Remove unused variables in PSRenderer class In the PSRenderer class of the org.apache.fop.render.ps package, three variables: currentXPosition, currentYPosition, and currentAreaContainerXPosition were removed. This is a code cleanup to remove unused variables.",4,4,4,4,"refactor: Remove unused fields from PSRenderer
Eliminate unnecessary fields to reduce code clutter and improve maintainability. The removed fields, currentXPosition, currentYPosition, and currentAreaContainerXPosition, were not being utilized in PSRenderer.","refactor: Remove unused fields
Removed currentXPosition, currentYPosition, and currentAreaContainerXPosition fields from PSRenderer as they are not used anywhere in the class.",15.28,28.13,39.88,0.0,"refactor: Remove unused fields from PSRenderer
This commit removes three unused fields (currentXPosition, currentYPosition, and currentAreaContainerXPosition) from the PSRenderer class, simplifying its internal structure and reducing unnecessary complexity.",12.77,25.4,28.72,0.0
68f3cc378329f84ee257e8f80cc3a78b2f577db9,spepping/fop-cs,Y,"File: src/org/apache/fop/render/AbstractRenderer.java
Status: modified
```diff
@@ -1,6 +1,6 @@
 /*
  * $Id$
- * Copyright (C) 2001-2002 The Apache Software Foundation. All rights reserved.
+ * Copyright (C) 2001-2003 The Apache Software Foundation. All rights reserved.
  * For details on use and redistribution please refer to the
  * LICENSE file included with these sources.
  */
@@ -9,7 +9,7 @@
 // Java
 import java.awt.geom.Rectangle2D;
 import java.io.IOException;
-import java.util.HashMap;
+import java.util.Map;
 import java.util.List;
 import java.util.Iterator;
 
@@ -66,7 +66,7 @@ public abstract class AbstractRenderer extends AbstractLogEnabled
     /**
      * renderer configuration
      */
-    protected HashMap options;
+    protected Map options;
 
     /**
      * block progression position
@@ -109,7 +109,7 @@ public void setUserAgent(FOUserAgent agent) {
     }
 
     /** @see org.apache.fop.render.Renderer */
-    public void setOptions(HashMap opt) {
+    public void setOptions(Map opt) {
         options = opt;
     }
 
```


File: src/org/apache/fop/render/Renderer.java
Status: modified
```diff
@@ -9,7 +9,7 @@
 // Java
 import java.io.OutputStream;
 import java.io.IOException;
-import java.util.HashMap;
+import java.util.Map;
 
 // FOP
 import org.apache.fop.apps.FOPException;
@@ -86,7 +86,7 @@ void stopRenderer()
      *
      * @param options  The Configuration for the renderer
      */
-    void setOptions(HashMap options);
+    void setOptions(Map options);
 
     /**
      * Set the producer of the rendering. If this method isn't called the
```",Use Map instead of HashMap interface,0,4,4,4,remove unused code,0,0,4,4,Refactor: Replace HashMap with Map in AbstractRenderer and Renderer This commit replaces the usage of HashMap with Map in the setOptions methods of both AbstractRenderer.java and Renderer.java files. This change makes the methods more flexible as they can now accept any class that implements the Map interface.,4,4,4,4,"refactor: Replace HashMap with Map in Renderer and AbstractRenderer classes
Replaced HashMap with Map in Renderer and AbstractRenderer classes to increase type safety and flexibility. This change allows for easier substitution of map implementations and reduces coupling between classes.","refactor: Use Map instead of HashMap in AbstractRenderer and Renderer
Updated type declarations for options to use the more general Map interface, making the code more flexible and easier to maintain.",18.35,36.78,43.5,0.0,"refactor: Replace HashMap with Map in Renderer and AbstractRenderer
This commit replaces the use of HashMap with Map in the setOptions method of Renderer and AbstractRenderer classes. This change improves the code's flexibility and maintainability by using a more general interface type. The functionality of the classes remains unchanged.",28.36,49.48,48.7,0.0
6979a0c5c2d1c8c4bdac29fa2c11cebdd55f8a5b,spepping/fop-cs,,"File: src/java/org/apache/fop/apps/Document.java
Status: modified
```diff
@@ -120,7 +120,7 @@ public Driver getDriver() {
     public void foPageSequenceComplete (FOTreeEvent event) throws FOPException {
         PageSequence pageSeq = event.getPageSequence();
         areaTree.addBookmarksToAreaTree();
-        format(pageSeq, areaTree);
+        formatPageSequence(pageSeq, areaTree);
     }
 
     /**
@@ -187,7 +187,8 @@ public FOInputHandler getFOInputHandler() {
      * @param areaTree the area tree to format this page sequence into
      * @throws FOPException if there is an error formatting the contents
      */
-    public void format(PageSequence pageSeq, AreaTree areaTree) throws FOPException {
+    private void formatPageSequence(PageSequence pageSeq, AreaTree areaTree) 
+            throws FOPException {
         Title title = null;
         if (pageSeq.getTitleFO() != null) {
             title = getTitleArea(pageSeq.getTitleFO());
```",public format() renamed to private formatPageSequence().,4,4,4,4,fix Document foPageSequenceComplete,0,0,4,4,Refactor: Rename and change visibility of format method in Document.java The method `format` in `Document.java` has been renamed to `formatPageSequence` and its visibility has been changed from public to private. The method `foPageSequenceComplete` has been modified to call this new method instead of the old `format` method. The new method `formatPageSequence` is responsible for formatting a page sequence and adding it to the area tree.,4,4,4,4,"refactor: Extract formatPageSequence method from foPageSequenceComplete
Extracted the page sequence formatting logic from `foPageSequenceComplete` into a separate `formatPageSequence` method, reducing code duplication and improving the method's single responsibility principle.","refactor: Extract formatPageSequence method from foPageSequenceComplete
Separated the page sequence formatting logic into a dedicated method, improving code organization and reusability.",1.9,16.84,15.47,0.0,"refactor: Rename format to formatPageSequence
Renamed the format method to formatPageSequence to better reflect its functionality. This change improves the internal structure of the Document class, making it easier to understand and maintain.",3.2,26.26,18.47,0.0
3ce8d2c782f832bb494634743c340ec0eaf3b248,spepping/fop-cs,,"File: src/java/org/apache/fop/fo/FObjMixed.java
Status: modified
```diff
@@ -59,6 +59,7 @@ protected void endOfNode() throws FOPException {
 
     /**
      * Adds accumulated text as one FOText instance.
+     * Makes sure that nested calls to itself do nothing.
      * @throws FOPException if there is a problem during processing
      */
     protected void flushText() throws FOPException {
```",Added a clarifying comment,4,4,4,4,add missing javadoc,0,0,4,4,Feat: Add nested call handling comment to flushText method This commit adds a comment to the `flushText()` method in the `FObjMixed.java` file. The comment clarifies that the method ensures that nested calls to itself do nothing. This additional documentation improves the understanding of the method's functionality.,3,4,4,4,"refactor: Ensure flushText idempotence
To ensure thread-safety and prevent unintended text accumulation, this refactoring makes flushText idempotent, simplifying the internal structure of FObjMixed.","refactor: Make FObjMixed.flushText() idempotent
Ensure the method does nothing when called recursively, improving its robustness.",2.63,14.49,8.62,0.0,"refactor: Improve flushText method documentation
Added a note to the flushText method to ensure it handles nested calls correctly. This change improves the method's documentation and clarifies its behavior.",9.53,34.67,29.42,0.0
8faebbf0210814263bb945984d8cfae94d8220eb,spepping/fop-cs,,"File: src/java/org/apache/fop/render/bitmap/TIFFRenderer.java
Status: modified
```diff
@@ -94,8 +94,7 @@ public TIFFRenderer() {
     public void configure(Configuration cfg) throws ConfigurationException {
 
         //TODO Support output of monochrome bitmaps (fax-style)
-        String c = cfg.getChild(""compression"").getAttribute(""value"");
-        int comp = Integer.parseInt(c);
+        int comp = cfg.getChild(""compression"").getAttributeAsInteger(""value"", 1);
         String name = null;
         switch (comp) {
         case TIFFEncodeParam.COMPRESSION_NONE:
```","Fallback to default value if ""compression"" value is not given.",3,4,4,4,remove unused code,0,0,4,4,"Refactor: Simplify assignment of 'comp' variable in 'configure' method This commit simplifies the assignment of the 'comp' variable in the 'configure' method of the 'TIFFRenderer' class. The change does not alter the functionality of the method, which is to configure the TIFF compression type based on the provided configuration. The refactor improves the structure of the code, making it easier to read and maintain.",4,4,4,4,"refactor: Parse compression value as integer directly
Simplified compression value parsing in `configure` method by replacing manual `String` to `int` conversion with `getAttributeAsInteger`.","refactor: Parse TIFF compression value more efficiently
Replace manual string conversion with getAttributeAsInteger to simplify configuration parsing.",1.73,11.63,5.59,0.0,"refactor: Simplify TIFF compression configuration
Refactor the configure method in TIFFRenderer to simplify the TIFF compression configuration by using getAttributeAsInteger instead of parsing the attribute value manually. This change improves the code readability and maintainability.",5.77,32.65,27.53,0.0
13058088c864f7998bcf7dd2f6e2e2b3afd2f34c,spepping/fop-cs,,"File: src/java/org/apache/fop/fo/FOPropertyMapping.java
Status: modified
```diff
@@ -2623,13 +2623,17 @@ private void createShorthandProperties() {
         // background-position
         m  = new ListProperty.Maker(PR_BACKGROUND_POSITION);
         m.setInherited(false);
+        m.addKeyword(""left"", ""0% 50%"");
+        m.addKeyword(""center"", ""50% 50%"");
+        m.addKeyword(""right"", ""100% 50%"");
         m.setDefault(""0% 0%"");
         m.setDatatypeParser(new BackgroundPositionShorthandParser());
         addPropertyMaker(""background-position"", m);
 
         // border
         m  = new ListProperty.Maker(PR_BORDER);
         m.setInherited(false);
+        m.setDefault("""");
         m.setDatatypeParser(new GenericShorthandParser());
         addPropertyMaker(""border"", m);
 
```","Added default empty String to the border shorthand. Avoids NPE mentioned in Bugzilla 38648. Still need to add a warning, since property now silently falls back to the default(s).",4,4,4,4,add some more property to the property,0,0,2,2,"Feat: Add keywords to background-position and set default for border In the `createShorthandProperties()` method in the `FOPropertyMapping.java` file, more keywords were added to the `background-position` property and the default value for the `border` property was set. This enhances the functionality of the CSS parser by providing more options for the `background-position` property and a default value for the `border` property.",4,2,4,4,"feat: Introduce shorthand properties for CSS styles
Added shorthand properties for background-position with keywords 'left', 'center', and 'right', and set a default value for the border property in the createShorthandProperties method. This change simplifies the creation of CSS styles and improves the overall flexibility of the FOPropertyMapping class.","feat: Add keywords for background-position and default value for border
Introduce new shorthand properties to support CSS styles in FOPropertyMapping, enabling the use of keywords for background-position and a default value for border. This enhancement expands the capabilities of the CSS parser.",18.09,31.48,36.77,0.0,"feat: Add shorthand properties for background-position and border
This commit introduces new shorthand properties for background-position and border in the FOPropertyMapping class. The added properties include 'left', 'center', and 'right' for background-position, and a default value for border. These changes enhance the functionality of the CSS parser.",20.1,41.12,41.07,0.0
5a0356fdfc4f2935a816d58d8de265b73e923794,spepping/fop-cs,,"File: src/java/org/apache/fop/fo/extensions/OldExtensionElementMapping.java
Status: modified
```diff
@@ -18,10 +18,15 @@
 
 package org.apache.fop.fo.extensions;
 
+import java.util.HashMap;
+
+import org.apache.fop.fo.ElementMapping;
+import org.apache.fop.fo.UnknownXMLObj;
+
 /**
- * Element mapping for the old FOP extension namespace. It is simply mapped to the new namespace.
+ * Element mapping for the old FOP extension namespace.
  */
-public class OldExtensionElementMapping extends ExtensionElementMapping {
+public class OldExtensionElementMapping extends ElementMapping {
     
     /** The old FOP extension namespace URI (FOP 0.20.5 and earlier) */
     public static final String URI = ""http://xml.apache.org/fop/extensions"";
@@ -33,4 +38,14 @@ public OldExtensionElementMapping() {
         namespaceURI = URI;
     }
 
+    /**
+     * Initialize the data structures.
+     */
+    protected void initialize() {
+        if (foObjs == null) {
+            foObjs = new HashMap();
+            foObjs.put(""outline"", new UnknownXMLObj.Maker(URI));
+            foObjs.put(""label"", new UnknownXMLObj.Maker(URI));
+        }
+    }
 }
```",Simply subclassing did not work as expected. Made a copy now.,4,3,4,3,add OldExtensionElementMapping ElementMapping,0,0,4,0,"Refactor: Improve handling of unknown XML objects in OldExtensionElementMapping In this commit, the class `OldExtensionElementMapping` has been refactored to improve the handling of unknown XML objects. The class now extends `ElementMapping` instead of `ExtensionElementMapping`. A new method `initialize()` has been added, which initializes a HashMap with ""outline"" and ""label"" objects if it is null. This setup allows for better handling of unknown XML objects in the mapping of the old FOP extension namespace.",3,4,4,4,"refactor: Initialize foObjs lazily in OldExtensionElementMapping
Moved the initialization of foObjs to a dedicated method, allowing for lazy initialization and reducing unnecessary object creation. This change improves the overall efficiency of the OldExtensionElementMapping class.","feat: Initialize FO object map lazily in OldExtensionElementMapping
Introduce a new method 'initialize' to handle unknown XML objects more efficiently.",2.4,20.75,20.49,0.0,"refactor: Refactor OldExtensionElementMapping to use ElementMapping
This commit refactors the OldExtensionElementMapping class to extend ElementMapping instead of ExtensionElementMapping. It also adds a new initialize method to lazily initialize the map of FO objects, improving the class's internal structure and making it easier to understand and modify.",7.33,28.81,26.64,0.0
de9a33a49d34b5cff206f2a2d9d71708b5473c53,spepping/fop-cs,,"File: src/java/org/apache/fop/fonts/type1/PFMInputStream.java
Status: modified
```diff
@@ -19,6 +19,7 @@
 
 package org.apache.fop.fonts.type1;
 
+import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.DataInputStream;
@@ -30,7 +31,7 @@
  */
 public class PFMInputStream extends java.io.FilterInputStream {
 
-    private DataInputStream datain;
+    private final DataInputStream datain;
 
     /**
      * Constructs a PFMInputStream based on an InputStream representing the
@@ -97,10 +98,14 @@ public long readInt() throws IOException {
     public String readString() throws IOException {
         InputStreamReader reader = new InputStreamReader(in, ""ISO-8859-1"");
         StringBuffer buf = new StringBuffer();
+
         int ch = reader.read();
         while (ch != 0) {
             buf.append((char)ch);
             ch = reader.read();
+            if (ch == -1) {
+                throw new EOFException(""Unexpected end of stream reached"");
+            }
         }
         return buf.toString();
     }
```",Make PFM string parsing a little more robust,4,4,4,4,throw an exception if the datain is not read,0,0,4,4,Fix: Handle unexpected end of stream in readString method This commit modifies the readString method in the PFMInputStream.java file to throw an EOFException when the end of the stream is reached unexpectedly. This change ensures that the method can handle unexpected end of stream scenarios and prevent potential errors.,4,4,4,4,"fix: Throw EOFException when reaching end of stream in readString
Previously, the `readString` method in `PFMInputStream` would silently reach the end of the stream without throwing an exception, leading to potential unexpected behavior. This change introduces a fix to throw an `EOFException` when the end of the stream is reached, ensuring a more robust and predictable behavior.","fix: Throw EOFException when reaching end of stream in readString
Added a check to prevent unexpected end of stream errors by throwing an EOFException when the end of the stream is reached in the readString method.",33.71,43.4,58.02,0.0,"refactor: Improve PFMInputStream's readString method
This commit refactors the readString method in PFMInputStream to handle unexpected end of stream by throwing an EOFException. Additionally, the DataInputStream field is now final. These changes improve the robustness and thread-safety of the class.",16.33,31.46,34.04,0.0
407189c905a232fff14c0ba7119ff0a1d2efb1f6,spepping/fop-cs,,"File: examples/embedding/java/embedding/intermediate/ExampleStamp.java
Status: modified
```diff
@@ -115,7 +115,7 @@ public static void main(String[] args) {
 
             //Setup output file
             File xsltfile = new File(baseDir, ""xml/xslt/projectteam2fo.xsl"");
-            File iffile = new File(outDir, ""team.at.xml"");
+            File iffile = new File(outDir, ""team.if.xml"");
             File stampxsltfile = new File(baseDir, ""xml/xslt/ifstamp.xsl"");
             File pdffile = new File(outDir, ""ResultIFStamped.pdf"");
             System.out.println(""Intermediate file : "" + iffile.getCanonicalPath());
```",Fixed copy/paste omission.,4,4,4,4,fix a typo,4,3,4,4,"fix: Correct intermediate file name in ExampleConcat program The main method in the ExampleConcat program has been updated to use a more appropriate intermediate file name. The file ""team.at.xml"" has been renamed to ""team.if.xml"" to better reflect its purpose in the process of generating a PDF document from an XML file using XSLT. This change helps to clarify the role of the intermediate file in the process.",4,4,4,4,"refactor: Rename ""team.at.xml"" to ""team.if.xml"" in ExampleStamp.
Renamed 'team.at.xml' to 'team.if.xml' to align with expected file naming conventions, ensuring consistency and maintainability.","refactor: Rename intermediate file in ExampleStamp
Updated the file name from 'team.at.xml' to 'team.if.xml' in the main method of ExampleStamp.java to better reflect its purpose.",10.76,21.78,7.67,0.0,"refactor: Rename intermediate file from team.at.xml to team.if.xml
This commit renames the intermediate file generated in the main method of ExampleStamp class from team.at.xml to team.if.xml. This change does not affect the functionality of the class, but rather improves the naming consistency and clarity.",18.61,31.15,31.87,0.0
e771cafe134754efcb34fc646031ed54546326ca,apache/geronimo,,"File: modules/core/src/java/org/apache/geronimo/xml/deployment/LoaderUtil.java
Status: modified
```diff
@@ -74,7 +74,7 @@
 /**
  * Holds utility methods for parsing a DOM tree.
  *
- * @version $Revision: 1.8 $ $Date: 2003/10/01 19:02:05 $
+ * @version $Revision: 1.9 $ $Date: 2003/11/18 02:12:33 $
  */
 public final class LoaderUtil {
     private static final Log log = LogFactory.getLog(LoaderUtil.class);
@@ -137,7 +137,7 @@ public static Element[] getChildren(Element root, String childName) {
         for(int i=0; i<max; i++) {
             Node n = nl.item(i);
             if(n.getNodeType() == Node.ELEMENT_NODE &&
-                    n.getNodeName().equals(childName)) {
+                    n.getLocalName().equals(childName)) {
                 list.add(n);
             }
         }
```",Handle namespaces properly,4,4,4,4,fix bug in LoaderUtil,2,2,4,4,"Fix: Correct method call in getChildren of LoaderUtil.java This commit corrects the method call in the `getChildren` method of the `LoaderUtil.java` file. Previously, `getNodeName()` was used to get the name of the node. This has been corrected to `getLocalName()`. The functionality of the method remains the same.",4,4,4,4,"fix: Fix getNodeName() to respect namespace
Fixes incorrect element filtering in getChildren method by respecting namespace, ensuring accurate results when retrieving child elements.","refactor: Replace getNodeName with getLocalName in LoaderUtil
getNodeName is deprecated in favor of getLocalName, which is namespace-aware.",2.45,11.27,8.3,0.0,"refactor: Update LoaderUtil to use getLocalName instead of getNodeName
This commit refactors the LoaderUtil class to use the getLocalName method instead of getNodeName when checking the node name in the getChildren method. This change improves the parsing of XML elements and makes the code more robust.",10.43,29.79,28.54,0.0
128b786ba0d2b0ac942fd97ce6b532055326a616,apache/geronimo,,"File: modules/transaction/src/java/org/apache/geronimo/transaction/context/TransactionContextManager.java
Status: modified
```diff
@@ -259,9 +259,11 @@ public void begin(Xid xid, long txTimeoutMillis) throws XAException, InvalidTran
             containerTransactionContext.resume();
         }
         importer.setTransactionTimeout(txTimeoutMillis);
+        TransactionContext.setContext(containerTransactionContext);
     }
 
     public void end(Xid xid) throws XAException, SystemException {
+        TransactionContext.setContext(null);
         synchronized (importedTransactions) {
             ContainerTransactionContext containerTransactionContext = (ContainerTransactionContext) importedTransactions.get(xid);
             if (containerTransactionContext == null) {
```","when beginning/ending an imported xid/transaction, associate TransactionContext with thread",0,3,4,4,set TransactionContext in TransactionContextManager,0,2,4,4,"Feat: Set TransactionContext in TransactionContextManager This commit introduces a new feature in the TransactionContextManager class. The 'begin' method now sets the TransactionContext to a certain value, and the 'end' method sets the TransactionContext to null. This change enhances the functionality of these methods, providing more control over the transaction context during the transaction lifecycle.",4,4,4,4,"refactor: Associate TransactionContext with thread
Associate TransactionContext with the current thread to ensure thread-local transaction context management, simplifying the implementation of begin and end methods.","feat: Add transaction context management to begin and end methods
Updated TransactionContextManager to set and reset TransactionContext in begin and end methods, respectively, to ensure correct transaction context management.",2.61,17.95,12.08,0.0,"refactor: Improve transaction context management
This commit refactors the TransactionContextManager class to properly set and reset the transaction context in the begin and end methods, respectively. This change ensures that the transaction context is correctly associated with the current thread and provides a more robust implementation of transaction management.",9.98,29.41,34.01,0.0
fc0eef46d6ab04cb5a8b1d0c171860430a890517,apache/geronimo,,"File: modules/core/src/java/org/apache/geronimo/remoting/IntraVMRoutingInterceptor.java
Status: modified
```diff
@@ -66,11 +66,12 @@
 import org.apache.geronimo.remoting.transport.NullTransportInterceptor;
 
 /**
- * @version $Revision: 1.4 $ $Date: 2003/09/08 04:33:54 $
+ * @version $Revision: 1.5 $ $Date: 2003/10/31 06:59:46 $
  */
 public class IntraVMRoutingInterceptor implements Interceptor, Externalizable {
 
     Long deMarshalingInterceptorID;
+    boolean allwaysMarshall=false;
     transient Interceptor next;
 
     /**
@@ -93,7 +94,7 @@ synchronized private void resolveNext() {
 
         // Did we deserialize with the same app classloader that
         // the target belongs to??  
-        if (InvocationSupport.isAncestor(parent, child)) {
+        if (InvocationSupport.isAncestor(parent, child) && !allwaysMarshall) {
             // Then we can avoid demarshalling/marshalling
             next = deMarshalingInterceptor.getNext();
         } else {
@@ -153,4 +154,11 @@ public void setDeMarshalingInterceptorID(Long deMarshalingInterceptorID) {
         this.deMarshalingInterceptorID = deMarshalingInterceptorID;
     }
 
+    public boolean getAllwaysMarshall() {
+        return allwaysMarshall;
+    }
+
+    public void setAllwaysMarshall(boolean value) {
+        allwaysMarshall=value;
+    }
 }
```",added the setAllwaysMarshall method.,0,4,4,4,fix failing test,0,0,4,4,"Feat: Add alwaysMarshall flag to IntraVMRoutingInterceptor This commit introduces a new boolean variable `alwaysMarshall` to the `IntraVMRoutingInterceptor` class. This flag is used in the `resolveNext()` method to determine whether to avoid demarshalling/marshalling. If the current thread's context classloader is a child of the target's classloader and `alwaysMarshall` is false, then we can avoid demarshalling/marshalling. Additionally, getter and setter methods for `alwaysMarshall` were added. The `setAlwaysMarshall(boolean value)` method sets the `alwaysMarshall` flag to the provided value, and the `getAlwaysMarshall()` method returns the current state of the `alwaysMarshall` flag.",4,4,3,4,"feat: Add always marshall option to IntraVMRoutingInterceptor
This commit introduces an 'always marshall' option to the IntraVMRoutingInterceptor class, allowing users to override the default marshalling behavior based on the classloader scope of the target application. The new option is configurable through the setAllwaysMarshall method and can be queried using the getAllwaysMarshall method.","refactor: Update resolveNext method to consider marshalling flag
This change refactors the resolveNext method to take into account the new alwaysMarshall flag, allowing for more flexible invocation routing.",5.48,28.99,20.47,0.0,"feat: Add marshalling control to IntraVMRoutingInterceptor
This commit introduces a new feature to the IntraVMRoutingInterceptor class, allowing for explicit control over marshalling. A new boolean flag 'allwaysMarshall' is added, along with getter and setter methods. This feature enables more flexibility in invocation routing and serialization within the application.",9.14,28.36,26.08,0.0
85d0621be87e8d4c6cafb5717bf02abf5f2b8d42,apache/geronimo,,"File: modules/axis/src/java/org/apache/geronimo/axis/client/SEIFactoryImpl.java
Status: modified
```diff
@@ -120,15 +120,10 @@ void initialize() {
                 new SimpleSerializerFactory(URI.class, Constants.XSD_ANYURI),
                 new SimpleDeserializerFactory(URI.class, Constants.XSD_ANYURI));
 
+        TypeInfo.register(typeInfo, typeMapping);
         for (Iterator iter = typeInfo.iterator(); iter.hasNext();) {
             TypeInfo info = (TypeInfo) iter.next();
             TypeDesc.registerTypeDescForClass(info.getClazz(), info.buildTypeDesc());
-
-            SerializerFactory sf =
-                    BaseSerializerFactory.createFactory(info.getSerFactoryClass(), info.getClazz(), info.getqName());
-            DeserializerFactory df =
-                    BaseDeserializerFactory.createFactory(info.getDeserFactoryClass(), info.getClazz(), info.getqName());
-            typeMapping.register(info.getClazz(), info.getqName(), sf, df);
         }
     }
 
```",register the typeInfos correctly,3,4,4,4,remove unused code,0,0,4,4,"Refactor: Simplify type description registration in SEIFactoryImpl This commit simplifies the process of registering type descriptions in the `initialize()` method of the `SEIFactoryImpl.java` file. Previously, the method was setting up serializers and deserializers for each type of information. Now, it directly registers type descriptions for each type info in the service, which simplifies the code and improves readability without changing the external behavior of the method.",3,4,4,4,"refactor: Simplify TypeInfo registration and serialization setup in SEIFactoryImpl
Simplified TypeInfo registration and serialization setup in SEIFactoryImpl's initialize method by consolidating type info registration and removing unnecessary deserialization factory creation, making the code more efficient and easier to maintain.","refactor: Simplify SEIFactoryImpl initialization by removing redundant factory creation
Replaced manual serializer and deserializer factory creation and registration with TypeInfo.register and TypeDesc.registerTypeDescForClass, streamlining the initialization process.",3.37,22.86,16.91,0.0,"refactor: Simplify SEIFactoryImpl initialization
Refactored the initialize method in SEIFactoryImpl to remove unnecessary registration of serializers and deserializers, and instead use TypeInfo.register to simplify the process. This change improves the internal structure of the code and makes it easier to understand and maintain.",7.5,27.27,21.72,0.0
9b935cb1bed5a7854fe9a80089048b2c26707bfb,apache/geronimo,,"File: modules/tomcat/src/java/org/apache/geronimo/tomcat/ValveGBean.java
Status: modified
```diff
@@ -54,9 +54,8 @@ public ValveGBean(String className, Map initParams, ValveGBean nextValve) throws
         
         if (nextValve != null){
             if (!(nextValve.getInternalObject() instanceof Valve)){
-                throw new IllegalArgumentException(""className cannot be null."");                
+                throw new IllegalArgumentException(""The class given as the NextValve attribute does not wrap an object of org.apache.catalina.Valve type."");                
             }
-            
             this.nextValve = nextValve;
         } else {
             this.nextValve = null;
```",Add a more informative error msg,4,4,4,4,fix typo in exception message,0,1,4,4,Fix: Update error message in ValveGBean class The error message in an IllegalArgumentException in the `ValveGBean` class has been updated to be more specific. The new message indicates that the class given as the NextValve attribute does not wrap an object of org.apache.catalina.Valve type.,3,4,4,4,"fix: Improve error message for invalid NextValve attribute
Updated the error message to specify that the NextValve attribute must wrap an object of org.apache.catalina.Valve type, providing more informative feedback to users.","fix: Throw more informative error for invalid NextValve attribute
Previously, an IllegalArgumentException was thrown with a generic message when the NextValve attribute did not wrap an object of org.apache.catalina.Valve type. This change improves the error message to provide more context.",28.7,50.0,37.32,0.0,"fix: Improve error message for invalid NextValve attribute
The error message thrown when the NextValve attribute does not wrap an object of org.apache.catalina.Valve type has been improved to provide more context and clarity. This change enhances the usability and maintainability of the ValveGBean class.",40.29,40.86,47.25,0.0
bd2f2315d786b27a9e3488b3b5b4003370eb2146,apache/geronimo,,"File: plugins/geronimo-packaging-plugin/src/java/org/apache/geronimo/plugin/packaging/MavenConfigStore.java
Status: modified
```diff
@@ -133,6 +133,9 @@ public void install(ConfigurationData configurationData, File source) throws IOE
         URI configId = configurationData.getId();_x000D_
         URL targetURL = repository.getURL(configId);_x000D_
         File targetFile = new File(targetURL.getPath());_x000D_
+        File parentFile = targetFile.getParentFile();_x000D_
+        parentFile.mkdirs();_x000D_
+        targetFile.createNewFile();_x000D_
         ExecutableConfigurationUtil.createExecutableConfiguration(configurationData, null, source, targetFile);_x000D_
     }_x000D_
 _x000D_
```",This might help create the client cars,1,0,4,4,create maven maven repository,0,0,4,3,Fix: Ensure parent directories exist when installing configuration This commit modifies the `install` method in the `MavenConfigStore` class to create the necessary parent directories if they do not exist when installing a configuration from a source directory to a target file. This change ensures that the installation process does not fail due to missing parent directories.,4,4,4,4,"refactor: Ensure target file's parent directory exists in MavenConfigStore
Ensures the target file's parent directory exists before creating the file, making the installation process more robust.","refactor: Ensure target file's parent directory exists in MavenConfigStore
Create parent directories as needed when installing a configuration from a source directory to a target file in the repository.",3.47,24.69,23.34,0.0,"refactor: Ensure target file's parent directory exists in MavenConfigStore
This commit refactors the install method in MavenConfigStore to create the necessary directories and files as needed, ensuring the target file's parent directory exists. This change improves the internal structure of the code, making it more robust and easier to maintain.",13.63,34.29,38.95,0.0
f815a7f594b74a0edfb00a9153447a6dcd33e112,apache/geronimo,,"File: modules/remoting/src/java/org/apache/geronimo/remoting/jmx/MBeanServerStub.java
Status: modified
```diff
@@ -71,7 +71,7 @@
 
 
 /**
- * @version $Revision: 1.9 $ $Date: 2004/01/31 20:20:44 $
+ * @version $Revision: 1.10 $ $Date: 2004/01/31 20:23:52 $
  */
 public class MBeanServerStub implements GBean, JMXTarget {
     private ProxyContainer serverContainer;
@@ -120,7 +120,6 @@ public void doFail() {
 
     static {
         GBeanInfoFactory infoFactory = new GBeanInfoFactory(MBeanServerStub.class.getName());
-        infoFactory.addOperation(new GOperationInfo(""getName""));
         infoFactory.addOperation(new GOperationInfo(""getRemotingEndpointInterceptor""));
         infoFactory.addReference(new GReferenceInfo(""Router"", JMXRouter.class.getName()));
         GBEAN_INFO = infoFactory.getBeanInfo();
```",One should always run unit tests before checking files in,3,1,4,4,fix npe in EARConfigBuilder,0,1,4,4,"Final Answer: Refactor: Update version and remove operation in MBeanServerStub This commit updates the version and date comment in MBeanServerStub.java and removes the ""getName"" operation from the static block. No associated issues or pull requests were found for this commit.",2,4,4,4,"refactor: Simplify MBeanServerStub's GBeanInfoFactory
Removed unnecessary 'getName' operation from GBeanInfoFactory, aligning with the class's primary responsibility of handling remote MBean access and invocation.","refactor: Remove unnecessary operation info from MBeanServerStub
Incremented version number from 1.9 to 1.10 as a side effect.",4.7,15.87,15.74,0.0,"refactor: Update version and remove unnecessary operation
Updated the version number in the MBeanServerStub class and removed the unnecessary 'getName' operation from the GBeanInfoFactory. This change simplifies the class and removes redundant code.",18.75,43.84,41.88,0.0
d6c975205eb426e5465a6d37ccc9623942031e44,apache/geronimo,,"File: modules/geronimo-system/src/main/java/org/apache/geronimo/system/properties/NamingProperties.java
Status: modified
```diff
@@ -19,6 +19,9 @@
 import org.apache.geronimo.gbean.GBeanInfo;
 import org.apache.geronimo.gbean.GBeanInfoBuilder;
 
+import javax.naming.InitialContext;
+import javax.naming.NamingException;
+
 /** java.naming.factory.initial=com.sun.jndi.rmi.registry.RegistryContextFactory
 java.naming.factory.url.pkgs=org.apache.geronimo.naming
 java.naming.provider.url=rmi://localhost:1099
@@ -34,6 +37,14 @@ public NamingProperties(String namingFactoryInitial, String namingFactoryUrlPkgs
         setNamingFactoryInitial(namingFactoryInitial);
         setNamingFactoryUrlPkgs(namingFactoryUrlPkgs);
         setNamingProviderUrl(namingProviderUrl);
+
+        try {
+            // Calling this causes the System properties we just set
+            // to be read in and cached by the vm ensuring we can't
+            // be booted out by another module in the system.
+            new InitialContext().lookup(""java:"");
+        } catch (Throwable ignore) {
+        }
     }
 
     public String getNamingFactoryInitial() {
```",Cement the naming provider in the vm,3,3,4,3,add getNamingFactoryInitial to NamingProperties,0,1,4,4,"Feat: Add InitialContext initialization and lookup in NamingProperties This commit introduces a new feature in the NamingProperties class. It adds import statements for InitialContext and NamingException. It also includes a try-catch block that initializes an InitialContext and performs a lookup operation. This change ensures that the system properties set are read in and cached by the VM, preventing them from being booted out by another module in the system.",4,4,4,4,"refactor: Force JNDI properties initialization
To ensure that system properties are read in and cached by the VM, preventing other modules from overriding them, we force JNDI properties initialization by calling `new InitialContext().lookup(""java:"")` during NamingProperties setup.","feat: Force JNDI properties to be read and cached by the VM
Added a call to InitialContext.lookup to prevent other modules from overriding system properties.",11.19,26.67,23.6,0.0,"feat: Add JNDI properties caching
This commit adds a mechanism to cache JNDI properties by creating an InitialContext and performing a lookup. This ensures that the system properties set in the NamingProperties class are read in and cached by the VM, preventing other modules from overriding them.",23.78,46.96,46.18,0.0
c1b48b342edc589109164e01e14b2bae4397b9e4,apache/geronimo,,"File: modules/geronimo-cxf/src/main/java/org/apache/geronimo/cxf/ejb/EJBMethodInvoker.java
Status: modified
```diff
@@ -67,6 +67,8 @@ protected Object invoke(Exchange exchange,
         try {
             result = container.invoke(this.deploymentInfo.getDeploymentID(), m, paramArray, null, null);
         } catch (OpenEJBException e) {
+            throw new Fault(e);           
+        } catch (RuntimeException e) {
             throw new Fault(e);
         }
         
```",return soap fault when runtime exception occurs,4,3,4,3,throw RuntimeException in EJBMethodInvoker,4,4,4,4,"Fix: Improve exception handling in EJBMethodInvoker In the invoke method of the EJBMethodInvoker class, additional exception handling has been added. Now, not only OpenEJBException is caught and handled, but also RuntimeException. This change improves the robustness of the method and ensures that any runtime exceptions are properly caught and handled.",4,4,4,4,"refactor: Throw Fault on OpenEJBException in invoke method
Previously, OpenEJBException was not explicitly handled in the invoke method. This refactoring ensures that a Fault is thrown when an OpenEJBException occurs, making the error handling more robust and explicit.","fix: Handle OpenEJBException and RuntimeException in EJBMethodInvoker
Throw Fault on exceptions in invoke method to ensure proper fault handling.",9.16,20.69,23.63,0.0,"fix: Handle OpenEJBException in EJBMethodInvoker
This commit fixes an issue where OpenEJBException was not properly handled in the EJBMethodInvoker class. Now, when an OpenEJBException occurs, it is wrapped in a Fault and re-thrown. This change ensures that the exception is properly propagated and handled.",10.62,36.56,38.88,0.0
55b40d07d1ca33f2257e3e05529d83146ec62108,apache/geronimo,,"File: plugins/clustering/geronimo-clustering-wadi/src/test/java/org/apache/geronimo/clustering/wadi/WADISessionAdaptorTest.java
Status: modified
```diff
@@ -26,8 +26,6 @@
 
 import com.agical.rmock.extension.junit.RMockTestCase;
 
-import junit.framework.TestCase;
-
 /**
  *
  * @version $Rev:$ $Date:$
```",Clean-up import,4,4,4,4,remove unused import,4,4,4,4,Style: Remove unused imports in WADISessionAdaptorTest.java The commit removes unused import statements in the file WADISessionAdaptorTest.java. This is a style-related change that helps to keep the code clean and easy to read. No associated issue or pull request was found for this commit.,4,4,4,4,"style: Remove unnecessary import statements
Removed unused import statements to simplify the file's dependencies.","style: Remove unnecessary import statements
Remove unused import statements from WADISessionAdaptorTest.java to declutter the code",1.65,24.14,19.36,0.0,"style: Remove unnecessary import statements
Removed unused import statements from WADISessionAdaptorTest.java to clean up the code and improve readability.",5.17,34.38,25.04,0.0
38712e1a6348088aebc4aa5d9a51c9852d9f8887,apache/geronimo,,"File: plugins/cxf/geronimo-cxf/src/main/java/org/apache/geronimo/cxf/client/CXFServiceReference.java
Status: modified
```diff
@@ -26,6 +26,8 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.apache.cxf.Bus;
+import org.apache.cxf.BusFactory;
 import org.apache.cxf.jaxws.context.WebServiceContextImpl;
 import org.apache.geronimo.cxf.CXFWebServiceContainer;
 import org.apache.geronimo.gbean.AbstractName;
@@ -52,7 +54,8 @@ public CXFServiceReference(String serviceClassName,
     }
        
     public Object getContent() throws NamingException {
-        CXFWebServiceContainer.getDefaultBus();
+        Bus bus = CXFWebServiceContainer.getDefaultBus();
+        BusFactory.setThreadDefaultBus(bus);
         Object reference = super.getContent();   
         SAAJInterceptor.registerInterceptors();        
         return reference;
```",set the bus on the thread to ensure the service class is initialized with the right bus,4,4,4,4,use the default bus in CXFServiceReference,0,3,4,4,"Refactor: Set default bus in getContent method In the CXFServiceReference.java file, the getContent() method has been refactored. The method now sets the default bus before returning the content of the object. This change ensures that the default bus is properly set up each time the getContent() method is called.",4,4,4,4,"refactor: Initialize CXF bus before getContent
Initialize CXF bus before getContent to ensure proper setup of CXFWebServiceContainer and SAAJ interceptors, which is crucial for reliable web service configuration and SOAP message processing.","feat: Add CXF bus setup to getContent method
Ensure proper web service configuration and SOAP message processing by setting up the CXF bus and registering SAAJ interceptors before retrieving the content.",3.29,14.81,9.0,0.0,"refactor: Improve CXFServiceReference getContent method
Refactor the getContent method in CXFServiceReference to properly set up the CXF bus and register SAAJ interceptors before retrieving the content. This change ensures proper web service configuration and SOAP message processing.",12.41,30.23,31.54,0.0
13c244d4a8139a4fdc27d10b34544ec037a30dbb,apache/geronimo,,"File: plugins/openejb/geronimo-openejb-builder/src/main/java/org/apache/geronimo/openejb/deployment/EjbModule.java
Status: modified
```diff
@@ -30,6 +30,7 @@
 import org.apache.geronimo.openejb.xbeans.ejbjar.OpenejbGeronimoEjbJarType;
 import org.apache.openejb.ClassLoaderUtil;
 import org.apache.openejb.config.ConfigurationFactory;
+import org.apache.openejb.core.TempClassLoader;
 import org.apache.openejb.jee.EjbJar;
 import org.apache.openejb.jee.EnterpriseBean;
 import org.apache.openejb.jee.oejb3.OpenejbJar;
@@ -125,8 +126,10 @@ public Map<JndiKey, Map<String, Object>> getEjbJndiContext() {
 
     @Override
     public void close() {
-        ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader().getParent());
-        ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader());
+        if (ejbModule.getClassLoader() instanceof TempClassLoader) {
+            ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader().getParent());
+            ClassLoaderUtil.destroyClassLoader(ejbModule.getClassLoader());
+        }
         super.close();
     }
 
```",Only destroy the classloader if it is TempClassLoader from OpenEBJ,0,4,4,4,don t close class loader if it doesn t exist,0,1,4,4,"Fix: Update close method in EjbModule.java This commit updates the close() method in the EjbModule.java file. Previously, the method was destroying the class loaders associated with the EJB module and then closing the module. Now, the method destroys the class loaders only if they are instances of TempClassLoader before closing the module. This change ensures that only the appropriate class loaders are destroyed, preventing potential issues.",4,4,4,4,"refactor: Check for TempClassLoader before destroying class loaders
This change prevents resource leaks by ensuring TempClassLoader instances are properly destroyed when closing an EjbModule, and avoids unnecessary destruction of other class loaders.","refactor: Destroy TempClassLoader in EjbModule close method
Added a conditional check to ensure temporary class loaders are properly destroyed, releasing associated resources.",2.25,12.12,14.98,0.0,"refactor: Improve EjbModule close method
Refactor the close method in EjbModule to properly handle temporary class loaders. This change ensures that temporary class loaders are destroyed when the EJB module is closed, freeing up resources.",11.76,31.37,27.79,0.0
6f2aae046d9ebeeae1cd82a687ed6fb165405988,apache/hadoop,,"File: hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/BootstrapStandby.java
Status: modified
```diff
@@ -36,6 +36,8 @@
 import org.apache.hadoop.ha.HAServiceProtocol;
 import org.apache.hadoop.ha.HAServiceStatus;
 import org.apache.hadoop.ha.HAServiceProtocol.HAServiceState;
+import org.apache.hadoop.ha.HAServiceProtocol.RequestSource;
+import org.apache.hadoop.ha.HAServiceProtocol.StateChangeRequestInfo;
 import org.apache.hadoop.ha.ServiceFailedException;
 import org.apache.hadoop.hdfs.DFSUtil;
 import org.apache.hadoop.hdfs.HAUtil;
@@ -251,7 +253,8 @@ private int doRun() throws IOException {
   private void transitionOtherNNActive()
       throws AccessControlException, ServiceFailedException, IOException {
     LOG.info(""Transitioning the running namenode to active..."");
-    createHAProtocolProxy().transitionToActive();    
+    createHAProtocolProxy().transitionToActive(
+        new StateChangeRequestInfo(RequestSource.REQUEST_BY_USER));
     LOG.info(""Successful"");
   }
 
```",Resolve trivial compilation error after previous merge,4,0,4,4,add StateChangeRequestInfo to createHAProtocolProxy,0,4,4,4,feat: Modify transitionOtherNNActive method in BootstrapStandby.java This commit modifies the `transitionOtherNNActive()` method in the `BootstrapStandby.java` file to transition the running namenode to active state. Two import statements were added and the method call was modified. This is a feature enhancement to the Hadoop HDFS project.,3,3,4,4,"refactor: Pass RequestSource to transitionToActive
Pass RequestSource to transitionToActive to provide explicit context about the state change request origin, enhancing the class's internal structure and maintainability.","refactor: Pass RequestSource to transitionToActive in BootstrapStandby
Update transitionToActive to include RequestSource.REQUEST_BY_USER, providing more context for the state change request.",2.5,11.11,10.92,0.0,"refactor: Improve transitionToActive method in BootstrapStandby
This commit refactors the transitionOtherNNActive method in BootstrapStandby to include a StateChangeRequestInfo object with a RequestSource.REQUEST_BY_USER parameter when calling transitionToActive. This change improves the method's implementation details to better handle high availability cluster setup transitions.",11.91,24.44,20.91,0.0
cfcb9a42f34dfd038be2451a7a5ed62e3753810e,apache/ignite,,"File: modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java
Status: modified
```diff
@@ -336,7 +336,13 @@ else if (filter instanceof SpiQuery) {
      * @return Local node cluster group.
      */
     private ClusterGroup projection(boolean local) {
-        return local || ctx.isLocal() || ctx.isReplicated() ? ctx.kernalContext().grid().cluster().forLocal() : null;
+        if (local || ctx.isLocal() || isReplicatedDataNode())
+            return ctx.kernalContext().grid().cluster().forLocal();
+
+        if (ctx.isReplicated())
+            return ctx.kernalContext().grid().cluster().forDataNodes(ctx.name()).forRandom();
+
+        return null;
     }
 
     /**
```",ignite-sql-tests - replicated projection,0,0,2,0,don t use deprecated method,0,0,4,4,"Refactor: Update logic in `projection(boolean local)` method in `IgniteCacheProxy.java` This commit refactors the `projection(boolean local)` method in the `IgniteCacheProxy.java` class. The method now determines the cluster group for the cache data based on the cache mode and local flag. This is a change in the internal logic of the method, but it does not affect the external behavior or functionality of the method.",3,4,4,4,"fix: Use correct cluster group for local and replicated nodes
Fixed incorrect cluster group determination for local and replicated nodes by introducing a more nuanced approach that considers node context and replication mode.","refactor: Refactor ClusterGroup projection logic to consider locality and replication mode
Improve the private ClusterGroup projection method in IgniteCacheProxy to handle data node projection based on node context and local flag.",2.79,12.37,10.95,0.0,"refactor: Improve cluster group projection logic
Refactor the private ClusterGroup projection method to handle local and replicated data nodes more accurately. The new implementation considers the node's locality and replication settings to determine the correct cluster group for projection.",3.96,17.48,16.78,0.0
d623d7e4913998b29a3ba91e78e8409cd1d89d46,apache/ignite,,"File: modules/core/src/test/java/org/apache/ignite/internal/IgniteClientReconnectFailoverTest.java
Status: modified
```diff
@@ -148,6 +148,12 @@ public void testReconnectTxCache() throws Exception {
 
                     assertEquals(map, res);
                 }
+                catch (IgniteClientDisconnectedException e) {
+                    throw e;
+                }
+                catch (IgniteException e) {
+                    log.info(""Ignore error: "" + e);
+                }
                 catch (CacheException e) {
                     if (e.getCause() instanceof IgniteClientDisconnectedException)
                         throw e;
```",# master fixed test,1,1,2,0,fix failing test,2,2,4,4,Fix: Handle exceptions in testReconnectTxCache method This commit adds exception handling for `IgniteClientDisconnectedException` and `IgniteException` in the `testReconnectTxCache` method of the `IgniteClientReconnectFailoverTest.java` file. The changes are made to ensure the correct behavior of the transactional cache during a client reconnect in a failover scenario.,4,4,4,4,"fix: Handle IgniteClientDisconnectedException and IgniteException
Catch and handle IgniteClientDisconnectedException and IgniteException in testReconnectTxCache to ensure the test method can recover from expected exceptions during reconnect and failover scenarios.","fix: Catch IgniteClientDisconnectedException in testReconnectTxCache
Handle IgniteClientDisconnectedException and log IgniteException to make the test more robust.",10.23,36.11,28.94,0.0,"fix: Handle IgniteClientDisconnectedException in testReconnectTxCache
This commit adds exception handling for IgniteClientDisconnectedException and IgniteException in the testReconnectTxCache method to ensure that the test correctly handles reconnect and failover scenarios. The changes improve the robustness of the test and prevent unexpected failures.",32.3,49.41,56.68,0.0
5faffb98032f54ed1160279de9d52938aef94bd2,apache/ignite,,"File: modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CachePartialUpdateCheckedException.java
Status: modified
```diff
@@ -34,7 +34,7 @@ public class CachePartialUpdateCheckedException extends IgniteCheckedException {
     private final Collection<Object> failedKeys = new ArrayList<>();
 
     /** */
-    private AffinityTopologyVersion topVer;
+    private transient AffinityTopologyVersion topVer;
 
     /**
      * @param msg Error message.
```",# Properly handle ClusterTopologyServerNotFoundException for retries,1,2,4,4,make topVer transient,0,4,4,4,Refactor: Make `topVer` transient in `CachePartialUpdateCheckedException` This commit makes the `topVer` variable transient in the `CachePartialUpdateCheckedException` class. This change does not affect any methods or class functionalities.,0,4,4,4,"refactor: Add transient keyword to topVer field
Mark `topVer` field as transient to exclude it from serialization, as it's not intended to be persisted. This change ensures that only relevant data is serialized, reducing unnecessary overhead.","refactor: Make topVer field transient
This change improves the serialization behavior of CachePartialUpdateCheckedException by making the AffinityTopologyVersion field transient.",7.81,19.35,24.97,0.0,"refactor: Make AffinityTopologyVersion field transient
This change makes the AffinityTopologyVersion field transient in the CachePartialUpdateCheckedException class, which is a minor internal structure change that does not affect the observable behavior of the system.",20.65,44.07,38.94,0.0
4aca49915215ba766c855b519af698e5a35ee1b5,apache/ignite,,"File: modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java
Status: modified
```diff
@@ -282,12 +282,17 @@ else if (first == cntr0 + 1)
         return (int)storageSize.get();
     }
 
-    /** {@inheritDoc} */
+
+    /**
+     *
+     */
     public void onInsert() {
         storageSize.incrementAndGet();
     }
 
-    /** {@inheritDoc} */
+    /**
+     * 
+     */
     public void onRemove() {
         storageSize.decrementAndGet();
     }
```",ignite-db-x Fixed javadoc,4,3,4,4,add javadoc to GridDhtLocalPartition onInsert,4,2,4,4,Style: Remove comments in GridDhtLocalPartition.java The comments in the methods onInsert() and onRemove() in the class GridDhtLocalPartition.java have been removed. This is a style change and does not affect the functionality of the code.,4,3,4,4,"style: Remove redundant Javadoc comments
No functional changes were made to the GridDhtLocalPartition class. This commit solely focuses on removing redundant Javadoc comments to improve code readability.","style: Remove redundant Javadoc comments
Updated comments in GridDhtLocalPartition to be more descriptive.",5.68,19.35,22.41,0.0,"refactor: Improve JavaDoc comments in GridDhtLocalPartition
Updated JavaDoc comments in GridDhtLocalPartition to provide better documentation. The changes do not affect the functionality of the class, but rather improve its understandability and maintainability.",19.9,32.84,37.54,0.0
f519fc599e420638ad53b8e53b92b8d22bfdd773,apache/ignite,,"File: modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/record/WALRecord.java
Status: modified
```diff
@@ -41,7 +41,10 @@ public enum RecordType {
         STORE_OPERATION_RECORD,
 
         /** */
-        CHECKPOINT_RECORD;
+        CHECKPOINT_RECORD,
+
+        /** */
+        HEADER_RECORD;
 
         /** */
         private static final RecordType[] VALS = RecordType.values();
@@ -53,7 +56,7 @@ public static RecordType fromOrdinal(int ord) {
     }
 
     /** */
-    private int size = -1;
+    private int size;
 
     /** */
     private int chainSize;
@@ -104,15 +107,15 @@ public long position() {
      * @param pos Position in file.
      */
     public void position(long pos) {
+        assert pos >= 0: pos;
+
         this.pos = pos;
     }
 
     /**
      * @return Size of this record in bytes.
      */
     public int size() {
-        assert size != -1;
-
         return size;
     }
 
```",ignite-db-x - wal header,0,0,0,0,add more info to assertion,0,1,4,4,"Feat: Add non-negative assertion to position method and new enum value In the WALRecord.java file, the position method now includes an assertion that ensures the position value is non-negative. This is a new feature added to improve the robustness of the method. Additionally, a new enum value, HEADER_RECORD, has been added to the RecordType enum. The initial value for the size variable has also been removed.",4,4,4,4,"refactor: Introduce HEADER_RECORD and assert non-negative position
Refactor WALRecord to include a new HEADER_RECORD type and add input validation to position(long pos) method to ensure position is non-negative. This change improves the robustness of WAL record handling and prevents potential errors.","feat: Add HEADER_RECORD to WALRecord and validate position
This change introduces a new record type, HEADER_RECORD, to the WALRecord enum. Additionally, it adds a validation check to ensure that the position is non-negative in the position() method, making the record handling more robust.",8.07,21.82,21.2,0.0,"refactor: Enhance WALRecord with additional record type and input validation
This commit refactors the WALRecord class to include a new record type, HEADER_RECORD, and adds input validation to the position method to ensure non-negative values. These changes improve the internal structure and functionality of the WALRecord class.",6.34,20.87,19.08,0.0
f6d42f3e304a7947824650e5a7692fb787174ebf,apache/ignite,,"File: modules/yardstick/src/main/java/org/apache/ignite/yardstick/cache/IgniteAtomicSequenceBenchmark.java
Status: modified
```diff
@@ -34,6 +34,8 @@ public class IgniteAtomicSequenceBenchmark extends IgniteAbstractBenchmark {
         super.setUp(cfg);
 
         seq = ignite().atomicSequence(""benchSequence"", 0, true);
+
+        seq.batchSize(args.batch());
     }
 
     /** {@inheritDoc} */
```",Configure sequence batch size in IgniteAtomicSequenceBenchmark.,0,4,4,4,fix bug in IgniteAtomicSequenceBenchmark,2,2,4,4,"Feat: Set batch size in IgniteAtomicSequenceBenchmark setUp method In the setUp method of the IgniteAtomicSequenceBenchmark class, the atomic sequence is now initialized with a specified batch size. This is a new feature added to the method, which allows for more flexible configuration of the atomic sequence for benchmark tests.",4,4,4,4,"refactor: Initialize atomic sequence with batch size
Initialize atomic sequence with batch size to reflect benchmark arguments, enhancing the accuracy of benchmark results.","feat: Initialize Ignite atomic sequence with batch size
Modified the setUp method to include batch size specified by the benchmark arguments, allowing for more flexible benchmarking.",3.6,28.17,22.0,0.0,"refactor: Improve setup method in IgniteAtomicSequenceBenchmark
This commit refactors the setUp method in IgniteAtomicSequenceBenchmark to include batch size specified by the benchmark arguments. This change enhances the benchmark setup process by considering the batch size, making it more accurate and reliable.",9.71,26.97,29.77,0.0
babfc2f051f8471f541bd054650a47cceb3cc09e,apache/ignite,,"File: modules/core/src/main/java/org/apache/ignite/util/AttributeNodeFilter.java
Status: modified
```diff
@@ -65,6 +65,9 @@
  * {@code cpu-group} and {@code memory-group} attributes set to value {@code high}.
  */
 public class AttributeNodeFilter implements IgnitePredicate<ClusterNode> {
+    /** */
+    private static final long serialVersionUID = 0L;
+
     /** Attributes. */
     private final Map<String, Object> attrs;
 
```",AttributeNodeFilter: added serialVersionUID.,0,4,4,4,add serialVersionUID constant,0,4,4,4,Feat: Add serialVersionUID field to AttributeNodeFilter class This commit adds a new field `serialVersionUID` to the `AttributeNodeFilter` class. This field is necessary for the serialization of the class.,2,4,4,4,"refactor: Add serialVersionUID to AttributeNodeFilter
Added serialVersionUID to AttributeNodeFilter to comply with Java's serialization mechanism, ensuring consistent serialization behavior across different Java versions.","style: Add serialVersionUID to AttributeNodeFilter
Ensure compatibility and serialization correctness by adding serialVersionUID.",8.04,28.0,18.16,0.0,"refactor: Add serialVersionUID to AttributeNodeFilter
Added serialVersionUID to AttributeNodeFilter class to ensure version compatibility. This change is part of the Ignite 1.7.5 update.",12.41,42.31,34.15,0.0
a3baa4e8beeee9f69d9c92fa8e08da3135063194,apache/isis,,"File: example-ecs/xat/org/nakedobjects/example/ecs/ECSAcceptanceTest.java
Status: modified
```diff
@@ -177,8 +177,7 @@ public void testReuseBooking() {
     }
     
     public void testNewMethods() {
-//      setup
-        testBasicBooking();
+       testBasicBooking();
         // end of setup
        
         TestObject customer = getTestClass(Customer.class.getName()).findInstance(""Pawson"");
```",Moved the XAT to a separate source folder. This way the eploration build can exclude the XATs.,0,0,4,4,remove booking booking tests,0,0,4,4,Style: Adjust indentation and remove comment in testNewMethods() The indentation of the method call `testBasicBooking();` in the `testNewMethods()` method of the `ECSAcceptanceTest.java` file has been adjusted. A comment line preceding this method call has also been removed. The context of the use of `testNewMethods()` has shifted from testing new methods in the customer class to testing new methods for customer booking. No associated issues or pull requests were found for this commit.,4,1,3,4,"refactor: Remove setup code from testNewMethods
Simplified testNewMethods by removing unnecessary setup code, improving the test's focus and the overall structure of ECSAcceptanceTest.","refactor: Simplify testNewMethods in ECSAcceptanceTest by removing unnecessary setup code
Reformat the method to improve readability and reduce clutter.",0.86,12.63,7.07,0.0,"refactor: Simplify testNewMethods in ECSAcceptanceTest
Removed unnecessary setup code and reformatted the testNewMethods method in ECSAcceptanceTest to improve its readability and maintainability. The method's functionality remains unchanged, still testing new methods for the customer object, including field entry, assertion, and action invocation.",6.24,22.81,16.77,0.0
b8aabc096aa14f43786f8b50e7b8aa270aaea9ba,apache/isis,,"File: no-core/src/org/nakedobjects/object/persistence/defaults/LocalObjectManager.java
Status: modified
```diff
@@ -403,17 +403,25 @@ public void resolveEagerly(NakedObject object, NakedObjectField field) {
     }
 
     public void resolveImmediately(NakedObject object) {
-        if (object.isResolved() || !isPersistent(object)) {
+        if (object.isResolved()) {
+            LOG.debug(""resolve requested, but already resolved: "" + object);
+           return;
+        }
+
+        if (!isPersistent(object)) {
+            LOG.debug(""resolve requested, but not persistent: "" + object);
             return;
         }
-        LOG.info(""resolve-immediately "" + object);
+
+        LOG.info(""resolve-immediately: "" + object);
         try {
+            object.setResolved();
             objectStore.resolveImmediately(object);
             objectsToBeSaved.remove(object);
         } catch (ObjectStoreException e) {
             throw new NakedObjectRuntimeException(e);
         }
-        object.setResolved();
+      //  object.setResolved();
     }
 
     public void saveChanges() {
```",Moved the setting of the resovled flag in an object to before the call to the object store. This ensures that any recursive resolving will not attempt to resovlve the same object in an infinite loop,4,4,4,4,add more logging,4,3,4,4,"Refactor: Improve structure of `resolveImmediately` method in `LocalObjectManager.java` This commit refactors the `resolveImmediately` method in the `LocalObjectManager.java` file. The method now resolves the specified object immediately if it is persistent and not already resolved, and throws an exception if the object cannot be resolved. This change improves the structure of the code and makes it easier to understand.",2,1,3,4,"fix: Resolve resolved objects correctly
Refactor resolveImmediately to correctly handle already resolved and non-persistent objects, adding debug logging for these cases.","fix: Fix resolveImmediately to correctly handle resolved and non-persistent objects
Added checks and logging to prevent unnecessary computations and ensure correct object state.",1.58,10.0,9.5,0.0,"refactor: Improve resolveImmediately method
Refactor the resolveImmediately method to add logging and early returns for already resolved or non-persistent objects, making the method more efficient and easier to understand.",6.0,31.82,24.89,0.0
75f8ac6890e5ff108b77207794a25b2480e0f6a3,apache/isis,,"File: viewer-skylark/src/org/nakedobjects/viewer/skylark/AwtText.java
Status: modified
```diff
@@ -65,11 +65,11 @@ public String toString() {
     }
 
     public int getLineHeight() {
-        return 0;
+        return getTextHeight() + getLineSpacing();
     }
 
     public int getLineSpacing() {
-        return 0;
+        return lineSpacing;
     }
 }
 
```",Fixed missing line spacing and line height properties.,4,4,4,4,fix toString for toString,0,0,2,0,"Fix: Update getLineHeight() and getLineSpacing() in AwtText.java The getLineHeight() and getLineSpacing() methods in AwtText.java were previously returning a fixed value of 0. This commit updates these methods to return the actual values, improving the functionality of the AwtText class.",4,4,4,4,"refactor: Update AwtText to return accurate line height and spacing
This change improves the accuracy of line height and spacing calculations in `AwtText` by updating `getLineHeight` and `getLineSpacing` methods to return correct values, rather than fixed zeros.","fix: Return correct line height and spacing in AwtText
Fixed getLineHeight to include line spacing and getLineSpacing to return actual value, rather than hardcoded 0.",12.27,28.57,34.67,0.0,"refactor: Improve AwtText's getLineHeight and getLineSpacing methods
Refactored getLineHeight and getLineSpacing methods in AwtText class to return accurate values. getLineHeight now includes line spacing, and getLineSpacing returns the actual line spacing value instead of a hardcoded 0.",19.8,36.36,41.1,0.0
7490080673e5c686651a3224dca46d6cfb4d6d37,apache/isis,,"File: viewer-skylark/src/org/nakedobjects/viewer/skylark/InteractionHandler.java
Status: modified
```diff
@@ -242,7 +242,7 @@ public void mouseMoved(MouseEvent me) {
                 viewer.mouseMoved(location);
                 spy.addTrace(overView, "" mouse location"", location);
 
-  //              redraw();
+                redraw();
             }
         }
     }
```","Reinstated the redrawing after a movement of the mouse. So changes to screen, such as showing the resize outline, are shown as the mouse moves.",4,4,3,4,remove redraw redraw call,0,3,2,0,"Fix: Uncommented redraw in mouseMoved method In the `mouseMoved` method of the `InteractionHandler.java` file, the `redraw()` line was uncommented. This method handles the mouseMoved event by tracking the mouse movement within the viewer, identifying the view under the mouse, and triggering appropriate actions. The uncommented line of code redraws the viewer. This change is classified as a 'Fix'.",4,4,3,4,"fix: Enable view redraw on mouse movement
This change ensures the view is updated correctly on mouse movement by enabling redraw on mouse events. Previously, the view was not being redrawn, leading to incorrect display.","fix: Redraw view on mouse movement
Previously, the view was not redrawn when the mouse was moved over the viewer component. This fix ensures the view is updated accordingly.",3.41,15.05,16.69,0.0,"refactor: Uncomment redraw call in mouseMoved method
This commit refactors the mouseMoved method in InteractionHandler to uncomment the redraw call, ensuring the view is updated accordingly. This change improves the internal structure of the code, making it easier to understand and maintain.",7.95,28.0,24.55,0.0
861a7ba8549d06717a4d9c019000f172f7ac18a1,apache/jclouds,,"File: gogrid/src/main/java/org/jclouds/gogrid/compute/config/GoGridComputeServiceContextModule.java
Status: modified
```diff
@@ -209,7 +209,7 @@ protected GoGridDestroyNodeStrategy(GoGridClient client) {
       public boolean execute(String id) {
          Server server = Iterables.getOnlyElement(client.getServerServices().getServersById(
                   new Long(id)));
-         client.getServerServices().deleteByName(server.getName());
+         client.getServerServices().deleteById(server.getId());
          return serverLatestJobCompleted.apply(server);
       }
 
```",fixed gogrid deletebyname to by id,2,4,4,4,fix failing test,0,0,4,4,"Refactor: Change server deletion method in GoGridComputeServiceContextModule In the ""execute"" method of the GoGridComputeServiceContextModule.java file, the server deletion method was changed from deleting by name to deleting by id. This refactor improves the internal structure of the code without altering its external behavior.",3,4,4,4,"fix: Use server ID for deletion
Use server ID for deletion to avoid potential name collisions and improve deletion accuracy.","refactor: Use server ID for deletion in execute method
Updated execute method to delete server by ID instead of name, ensuring correct deletion and latest job completion status update.",2.31,12.7,10.59,0.0,"refactor: Update execute method to delete server by ID
Refactored the execute method in GoGridComputeServiceContextModule to delete a server by its ID instead of name, improving the accuracy of the deletion operation. This change aligns with the expected behavior of the method, which is to remove a server with the given ID and check if its latest job is completed.",8.49,27.18,42.01,0.0
cb880cfcf0c31e341eb3ff3a2fedccd3ef9e4669,apache/jclouds,,"File: aws/core/src/main/java/org/jclouds/aws/simpledb/SimpleDBPropertiesBuilder.java
Status: modified
```diff
@@ -36,7 +36,6 @@
  * Builds properties used in SimpleDB Clients
  * 
  * @author Adrian Cole
- * @author Luís A. Bastião Silva <bastiao@ua.pt>
  */
 public class SimpleDBPropertiesBuilder extends PropertiesBuilder {
    @Override
@@ -47,15 +46,15 @@ protected Properties defaultProperties() {
       properties.setProperty(PROPERTY_API_VERSION, SimpleDBAsyncClient.VERSION);
       properties.setProperty(PROPERTY_REGIONS, Joiner.on(',').join(Region.US_EAST_1,
                Region.US_WEST_1, Region.EU_WEST_1, Region.AP_SOUTHEAST_1));
-      properties.setProperty(PROPERTY_ENDPOINT, ""http://sdb.amazonaws.com"");
+      properties.setProperty(PROPERTY_ENDPOINT, ""https://sdb.amazonaws.com"");
       properties.setProperty(PROPERTY_ENDPOINT + ""."" + Region.US_EAST_1,
-               ""http://sdb.amazonaws.com"");
+               ""https://sdb.amazonaws.com"");
       properties.setProperty(PROPERTY_ENDPOINT + ""."" + Region.US_WEST_1,
-               ""http://sdb.us-west-1.amazonaws.com"");
+               ""https://sdb.us-west-1.amazonaws.com"");
       properties.setProperty(PROPERTY_ENDPOINT + ""."" + Region.EU_WEST_1,
-               ""http://sdb.eu-west-1.amazonaws.com"");
+               ""https://sdb.eu-west-1.amazonaws.com"");
       properties.setProperty(PROPERTY_ENDPOINT + ""."" + Region.AP_SOUTHEAST_1,
-               ""http://sdb.ap-southeast-1.amazonaws.com"");
+               ""https://sdb.ap-southeast-1.amazonaws.com"");
       return properties;
    }
 
```",Revert properties to use https,4,4,4,4,fix a typo in SimpleDBPropertiesBuilder,0,0,4,4,Fix: Update endpoint URLs in SimpleDBPropertiesBuilder This commit updates the endpoint URLs in the defaultProperties method of the SimpleDBPropertiesBuilder class from http to https. This change is likely made to enhance the security of the SimpleDB clients.,4,4,4,4,"refactor: Update SimpleDB endpoint URLs to use HTTPS
Switched to HTTPS protocol for SimpleDB endpoint URLs to enhance security and adhere to modern web standards.","fix: Use HTTPS for SimpleDB endpoint URLs
Update default endpoint URLs for SimpleDB clients to ensure secure communication.",6.63,26.23,22.68,0.0,"refactor: Update SimpleDB endpoint URLs to use HTTPS
This commit updates the default properties for SimpleDB client configuration to use HTTPS endpoint URLs instead of HTTP. This change affects the PROPERTY_ENDPOINT and region-specific endpoint properties. The functionality of the SimpleDBPropertiesBuilder class remains unchanged.",15.21,37.5,46.97,0.0
783f137bb59e645880d30e4b70b52c4aba90ef0b,apache/jclouds,,"File: demos/tweetstore/runatcloud-tweetstore/src/test/java/org/jclouds/demo/tweetstore/integration/TweetStoreLiveTest.java
Status: modified
```diff
@@ -202,7 +202,7 @@ public void testPrimeContainers() throws IOException, InterruptedException {
       for (String context : blobstores) {
          System.out.println(""storing at context: "" + context);
          HttpURLConnection connection = (HttpURLConnection) gurl.openConnection();
-         connection.addRequestProperty(""X-AppEngine-QueueName"", ""twitter"");
+         connection.addRequestProperty(""X-RUN@cloud-Submitter"", ""twitter"");
          connection.addRequestProperty(""context"", context);
          InputStream i = connection.getInputStream();
          String string = Strings2.toStringAndClose(i);
```","Using the correct ""it's me"" header in the RUN@cloud integration tests",3,3,4,4,fix a typo in TweetStoreLiveTest,0,0,4,4,"Fix: Update request property in testPrimeContainers method In the testPrimeContainers() method of the TweetStoreLiveTest.java file, the request property ""X-AppEngine-QueueName"" has been replaced with ""X-RUN@cloud-Submitter"". This change was made to correct an error in the code.",4,4,4,4,"refactor: Update request property in TweetStoreLiveTest
Updated the request property in TweetStoreLiveTest to use 'X-RUN@cloud-Submitter' instead of 'X-AppEngine-QueueName' to align with the expected request headers for testing prime containers in a live environment.","refactor: Update request property in TweetStoreLiveTest to use X-RUN@cloud-Submitter
Changed the request property from 'X-AppEngine-QueueName' to 'X-RUN@cloud-Submitter' to adapt to the new submitter.",13.92,29.41,25.71,0.0,"refactor: Update request property in TweetStoreLiveTest
Modified the request property in TweetStoreLiveTest to use 'X-RUN@cloud-Submitter' instead of 'X-AppEngine-QueueName' to adapt to the new submission mechanism. This change ensures that prime containers are correctly stored and can be retrieved from the blob store after a delay for eventual consistency.",13.04,26.51,38.24,0.0
7f9973e037f1e8b5387f4ac258bae082440bc862,apache/jclouds,,"File: apis/vcloud/src/main/java/org/jclouds/vcloud/VCloudAsyncClient.java
Status: modified
```diff
@@ -616,6 +616,7 @@ ListenableFuture<? extends Task> updateNetworkConnectionOfVm(
     */
    @Deprecated
    @DELETE
+   @Consumes(TASK_XML)
    @ExceptionParser(ReturnVoidOnNotFoundOr404.class)
    @XMLResponseParser(TaskHandler.class)
    ListenableFuture<? extends Task> deleteVApp(@EndpointParam URI id);
```",VAppAsyncClient.deleteVApp (deprecated API) requires @consume(TASK_XML) annotation,2,4,4,4,add TASK_XML to VCloudAsyncClient interface,0,1,4,4,Feat: Add @Consumes annotation to deleteVApp method in VCloudAsyncClient This commit adds a @Consumes(TASK_XML) annotation to the deleteVApp method in the VCloudAsyncClient class. This annotation specifies the type of data the method consumes. The method is used to asynchronously delete a Virtual Application (VApp) given its URI.,4,4,4,4,"refactor: Annotate deleteVApp with @Consumes(TASK_XML)
Add @Consumes(TASK_XML) annotation to deleteVApp method to explicitly declare its expected input format, ensuring consistency with the API's XML-based task handling.","refactor: Update deleteVApp method to consume TASK_XML
Added @Consumes(TASK_XML) annotation to deleteVApp method to enable proper handling of task XML responses.",11.14,24.0,11.55,0.0,"refactor: Update deleteVApp method to consume TASK_XML
This commit updates the deleteVApp method in VCloudAsyncClient to include the @Consumes(TASK_XML) annotation. This change is a refactoring of the method's implementation details to better align with the expected usage and internal structure of the class.",17.8,26.09,29.24,0.0
e82e198a9f848708b922038b280830246650e914,apache/jclouds,,"File: providers/gogrid/src/test/java/org/jclouds/gogrid/GoGridLiveTestDisabled.java
Status: modified
```diff
@@ -354,8 +354,7 @@ public void testShellAccess() throws IOException {
 
       socketOpen.apply(socket);
 
-      SshClient sshClient = new SshjSshClient(new BackoffLimitedRetryHandler(), socket, 60000,
-               instanceCredentials.identity, instanceCredentials.credential, null);
+      SshClient sshClient = context.utils().injector().getInstance(SshClient.Factory.class).create(socket, instanceCredentials);
       sshClient.connect();
       String output = sshClient.exec(""df"").getOutput();
       assertTrue(output.contains(""Filesystem""),
```",changed gogrid to not use ssh ctor,0,1,1,0,fix the test,2,1,4,4,"Refactor: Update SSH connection in testShellAccess method In the testShellAccess() method of the GoGridLiveTestDisabled.java file, the way an SSH connection is established has been refactored. Instead of creating a new SshjSshClient instance directly, the method now retrieves an instance of SshClient.Factory from the context's injector and uses it to create the SshClient. This change improves the structure of the code without altering its functionality.",4,4,4,4,"refactor: Use injector to create SshClient
Replaced manual SshClient instantiation with injector-based creation in GoGridLiveTestDisabled to simplify test setup and improve dependency management.","refactor: Replace hardcoded SshClient constructor with injector-based creation
This change improves the test's modularity and maintainability by using the injector to create the SshClient instance, rather than hardcoding it.",1.17,11.36,7.99,0.0,"refactor: Improve SshClient creation in GoGridLiveTestDisabled
Refactor the way SshClient is created in GoGridLiveTestDisabled to use the context.utils().injector().getInstance(SshClient.Factory.class).create method, making the code more modular and easier to maintain.",3.65,20.2,16.51,0.0
a760e409a42cb6c6c2e1e264736617081b924af2,apache/jclouds,,"File: core/src/test/java/org/jclouds/http/utils/ModifyRequestTest.java
Status: modified
```diff
@@ -147,4 +147,12 @@ public void testParseQueryEncodedWithDefaultJavaEncoder() {
       assertEquals(parsedMap.get(""publickey""), expected);
    }
 
+   @Test
+   public void testParseQueryWithKeysThatRequireDecoding() {
+      Multimap<String, String> parsedMap = parseQueryToMap(""network%5B0%5D.id=23&network%5B0%5D.address=192.168.0.1"");
+
+      assertEquals(parsedMap.get(""network[0].id""), ImmutableSet.of(""23""));
+      assertEquals(parsedMap.get(""network[0].address""), ImmutableSet.of(""192.168.0.1""));
+   }
+
 }
```",Added test to check that the key is decoded as expected,4,4,4,4,add unit test for Multimap of,1,3,4,4,Feat: Add test for parsing query with keys requiring decoding This commit adds a new test method `testParseQueryWithKeysThatRequireDecoding` to the `ModifyRequestTest` class. The test checks the parsing of a query with keys that require decoding.,4,4,4,4,"feat: Add test for URL-encoded key parsing
Added a unit test to cover the parsing of URL-encoded keys, ensuring that the query parser correctly handles keys that require decoding.","feat: Add test for parsing query strings with URL-encoded keys
Ensure the query parser correctly handles keys that require URL decoding, covering scenarios like network%5B0%5D.id=23&network%5B0%5D.address=192.168.0.1.",22.76,47.62,42.36,0.0,"feat: Add test for parsing query strings with URL-encoded keys
This commit introduces a new unit test to ensure that the query parser correctly handles keys that require URL decoding. The test, testParseQueryWithKeysThatRequireDecoding, verifies that the parseQueryToMap method correctly decodes and parses a query string with keys that require URL decoding.",22.11,54.12,69.71,0.0
559a37ceff1f7d5dc83cd32e377610e410769eeb,apache/jclouds,,"File: labs/jenkins/src/test/java/org/jclouds/jenkins/v1/features/ComputerClientLiveTest.java
Status: modified
```diff
@@ -39,8 +39,10 @@ public void testGetComputerView(){
       assertNotNull(view.getDisplayName());
       for (Computer computerFromView : view.getComputers()) {
          assertNotNull(computerFromView.getDisplayName());
-         Computer computerFromGetRequest = getClient().getComputer(computerFromView.getDisplayName());
-         assertEquals(computerFromGetRequest, computerFromView);
+         if (!""master"".equals(computerFromView.getDisplayName())) {
+            Computer computerFromGetRequest = getClient().getComputer(computerFromView.getDisplayName());
+            assertEquals(computerFromGetRequest, computerFromView);
+         }
       }
    }
 
```",master is not accessible via getComputer,4,4,4,4,fix failing test,2,2,4,4,"Fix: Exclude ""master"" from testGetComputerView() test In the testGetComputerView() method in the ComputerClientLiveTest.java file, a condition has been added to exclude the ""master"" from the test. This change ensures that the test only validates the display name of each computer in the view, excluding the ""master"".",4,4,4,4,"fix: Exclude master from getComputer equality check
Exclude 'master' from equality check to prevent false positives and ensure accurate test results.","fix: Ignore master computer in testGetComputerView
Modified testGetComputerView to account for the 'master' computer's unique behavior, which may cause assertion failures. This change ensures the test remains reliable and focused on verifying the ComputerClient API's functionality.",5.11,20.9,11.04,0.0,"refactor: Improve testGetComputerView method
Refactor the testGetComputerView method to exclude 'master' computers from the assertion, making the test more robust and accurate. This change improves the testing of the ComputerClient API by retrieving and verifying computer views and details.",9.51,35.29,33.85,0.0
b84a923615e00ef9177498693883c90b489659be,apache/jclouds,,"File: labs/elb/src/main/java/org/jclouds/elb/ELB.java
Status: modified
```diff
@@ -39,5 +39,9 @@ public String toString() {
          }
       });
    }
+   
+   public static Iterable<LoadBalancer> list(LoadBalancerClient loadBalancerClient) {
+      return list(loadBalancerClient, new ListLoadBalancersOptions());
+   }
 
 }
```",added default list op,3,3,4,4,add list to ELB,2,3,4,4,"Feat: Add list method to ELB class This commit introduces a new feature to the ELB class in the labs/elb module. A new method `list` has been added, which takes a `LoadBalancerClient` as an argument and returns an iterable of `LoadBalancer` objects. This method lists all load balancers using the provided `loadBalancerClient` and default options.",4,4,4,4,"feat: Add list method for load balancers with default options
Provide a convenient way to list load balancers without requiring additional criteria, simplifying the retrieval process.","feat: Add list method for load balancers with default options
Introduce a convenience method to list all load balancers using the provided LoadBalancerClient, with default list options.",5.09,25.0,17.28,0.0,"feat: Add convenience method to list load balancers
This commit introduces a new method to list all load balancers using a provided load balancer client with default options. This convenience method simplifies the process of retrieving load balancers and makes the ELB class more user-friendly.",17.41,34.34,44.82,0.0
b93cfa42e1498c65d452765b97fd9237d6884ed4,apache/jclouds,,"File: apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/options/CreateServerOptions.java
Status: modified
```diff
@@ -292,13 +292,10 @@ public CreateServerOptions adminPass(String adminPass) {
     * Custom cloud server metadata can also be supplied at launch time. This
     * metadata is stored in the API system where it is retrievable by querying
     * the API for server status. The maximum size of the metadata key and value
-    * is each 255 bytes and the maximum number of key-value pairs that can be
-    * supplied per server is 5.
+    * is each 255 bytes.
     */
    public CreateServerOptions metadata(Map<String, String> metadata) {
       checkNotNull(metadata, ""metadata"");
-      checkArgument(metadata.size() <= 5,
-            ""you cannot have more then 5 metadata values.  You specified: "" + metadata.size());
       for (Entry<String, String> entry : metadata.entrySet()) {
          checkArgument(
                entry.getKey().getBytes().length < 255,
```","Remove Nova instance metadata limitRackspace cloud limits instance metadata to 5 key-value pairs, but upstream Nova only sets the limit at 128 by default.  This patch removes the limit entirely; the official python clients don't check it and the server is responsible for enforcing it anyway.",4,4,4,4,remove unused method,0,0,4,4,"Fix: Remove limit on metadata key-value pairs in CreateServerOptions The previous implementation of the metadata method in the CreateServerOptions class had a limit on the number of key-value pairs that could be supplied per server. This commit removes that limit, in line with the findings of issue JCLOUDS-507 that Nova instance metadata is not limited to 5 pairs.",4,4,4,4,"refactor: Simplify metadata validation
Removed unnecessary metadata size and count checks, simplifying the validation process.","refactor: Remove unnecessary metadata size constraint
Removed the check for maximum 5 metadata values and updated the comment to reflect the correct maximum size of metadata key and value.",0.51,8.33,4.5,0.0,"refactor: Relax metadata size constraint in CreateServerOptions
Removed the limitation of 5 metadata key-value pairs per server in CreateServerOptions, allowing for more flexible metadata configuration. This change simplifies the API usage and makes it more user-friendly.",5.64,23.66,21.14,0.0
6cb1558424055972a6e04539b88cda29680fc31c,apache/jclouds,,"File: apis/openstack-cinder/src/test/java/org/jclouds/openstack/cinder/v1/features/AvailabilityZoneApiLiveTest.java
Status: modified
```diff
@@ -40,8 +40,8 @@ public AvailabilityZoneApiLiveTest() {
    @BeforeClass(groups = {""integration"", ""live""})
    public void setupContext() {
       super.setup();
-      String zone = Iterables.getFirst(api.getConfiguredZones(), ""regionOne"");
-      availabilityZoneApi = api.getAvailabilityZoneApi(zone);
+      String region = Iterables.getFirst(api.getConfiguredRegions(), ""regionOne"");
+      availabilityZoneApi = api.getAvailabilityZoneApi(region);
    }
 
    public void testListAvailabilityZones() {
```",zone -> region in Cinder AvailabilityZoneApiLiveTest,0,4,4,4,fix unit test,2,2,4,4,"Refactor: Update setupContext method in AvailabilityZoneApiLiveTest In the `setupContext()` method of the `AvailabilityZoneApiLiveTest.java` file, the testing context setup has been updated. Previously, the availability zone API was initialized for the first configured zone. Now, the availability zone API is initialized for a specified region. This change improves the structure of the code without altering its behavior.",4,4,4,4,"refactor: Update setupContext to use region-based configuration
Refactored setupContext to use region-based configuration, aligning with the updated Availability Zone API testing requirements.","refactor: Use region instead of zone in setupContext
Update setupContext to initialize the availability zone API for a specific region, making the test context more specific and accurate.",2.77,23.08,18.19,0.0,"refactor: Update setupContext to use region instead of zone
Modified the setupContext method to initialize the availability zone API with a specific region instead of the first configured zone. This change improves the test context setup for integration and live tests.",20.22,37.11,41.66,0.0
2a5928b55dff2e7e26a29c1c887400d4c645852e,apache/jclouds,,"File: core/src/main/java/org/jclouds/reflect/Reflection2.java
Status: modified
```diff
@@ -71,6 +71,23 @@ public static <T> TypeToken<T> typeToken(Class<T> in) {
       return (TypeToken<T>) get(typeTokenForClass, checkNotNull(in, ""class""));
    }
 
+   /**
+    * returns an {@link Invokable} object that reflects a constructor present in the {@link TypeToken} type.
+    * 
+    * @param ownerType
+    *           corresponds to {@link Invokable#getOwnerType()}
+    * @param parameterTypes
+    *           corresponds to {@link Constructor#getParameterTypes()}
+    * 
+    * @throws IllegalArgumentException
+    *            if the constructor doesn't exist or a security exception occurred
+    */
+   @SuppressWarnings(""unchecked"")
+   public static <T> Invokable<T, T> constructor(Class<T> ownerType, Class<?>... parameterTypes) {
+      return (Invokable<T, T>) get(constructorForParams, new TypeTokenAndParameterTypes(typeToken(ownerType),
+            parameterTypes));
+   }
+
    /**
     * return all constructors present in the class as {@link Invokable}s.
     * 
```",Re-adding Reflection2.constructor Removed in 671749d but used downstream in jclouds-labs,4,4,4,4,add Reflection2 constructor,0,4,4,4,Feat: Add constructor method to Reflection2 class This commit adds a new method `constructor` to the `Reflection2` class. This method returns an `Invokable` object that reflects a constructor present in the `TypeToken` type.,4,4,4,4,"feat: Introduce constructor method for creating Invokable instances
This commit provides a convenient way to create Invokable instances representing constructors, allowing users to specify the owner type and parameter types. The new constructor method simplifies working with Java reflection by encapsulating implementation details within the Invokable instance.","feat: Introduce constructor method for Invokable objects
Add a method to Reflection2 that returns an Invokable object reflecting a constructor with specified parameter types, enabling creation of new instances with specific parameters.",5.09,22.78,24.79,0.0,"feat: Add constructor method to Reflection2
This commit introduces a new method to the Reflection2 class, allowing users to retrieve an Invokable object that reflects a constructor present in a given TypeToken type. The method takes the owner type and parameter types as input and returns an Invokable instance representing the constructor. This feature enhances the utility methods for reflection operations provided by the Reflection2 class.",29.28,48.98,75.06,0.0
60e43e5faef6dc63ca453d61ae65ead6d22ebc8c,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/riot/web/HttpOp.java
Status: modified
```diff
@@ -241,7 +241,7 @@ public static void execHttpPost(String url,
     {
         try {
             long id = counter.incrementAndGet() ;
-            String requestURI = determineBaseIRI(url) ;
+            String requestURI = determineRequestURI(url) ;
             String baseIRI = determineBaseIRI(requestURI) ;
             
             HttpPost httppost = new HttpPost(requestURI);
```",Fix - was using base URI for request URI.,1,4,4,3,fix typo in HttpOp,0,0,4,4,"Refactor: Update URI determination in execHttpPost method In the execHttpPost method, the way the request URI is determined has been updated. The method determineBaseIRI(url) has been replaced with determineRequestURI(url). This change does not alter the functionality of the method but improves its structure.",1,3,3,4,"refactor: Replace determineBaseIRI with determineRequestURI
Refactor `determineBaseIRI` to `determineRequestURI` to improve request URI determination in `HttpOp`, aligning with the intended functionality.","fix: Correctly determine request URI in HttpOp
Rename determineBaseIRI to determineRequestURI to fix incorrect URI determination.",4.44,22.22,15.79,0.0,"refactor: Rename determineBaseIRI to determineRequestURI
Renamed the method determineBaseIRI to determineRequestURI in the HttpOp class to better reflect its functionality. This change improves the code readability and maintainability.",6.72,20.0,20.46,0.0
7d3fd73ee5e0ed47e256aa6e95609189f667e92b,apache/jena,,"File: jena-fuseki/src/main/java/org/apache/jena/fuseki/FusekiCmd.java
Status: modified
```diff
@@ -26,6 +26,7 @@
 
 import org.apache.jena.atlas.io.IO ;
 import org.apache.jena.atlas.lib.FileOps ;
+import org.apache.jena.atlas.lib.Lib ;
 import org.apache.jena.atlas.lib.StrUtils ;
 import org.apache.jena.atlas.logging.Log ;
 import org.apache.jena.fuseki.mgt.ManagementServer ;
@@ -49,6 +50,7 @@
 import com.hp.hpl.jena.sparql.core.DatasetGraphFactory ;
 import com.hp.hpl.jena.tdb.TDB ;
 import com.hp.hpl.jena.tdb.TDBFactory ;
+import com.hp.hpl.jena.tdb.sys.Names ;
 import com.hp.hpl.jena.tdb.transaction.TransactionManager ;
 
 public class FusekiCmd extends CmdARQ
@@ -284,9 +286,14 @@ protected void processModulesAndArgs()
         if ( contains(argTDB) )
         {
             String dir = getValue(argTDB) ;
-            log.info(""TDB dataset: directory=""+dir) ;
-            if ( ! FileOps.exists(dir) )
-                throw new CmdException(""Directory not found: ""+dir) ;
+            
+            if ( Lib.equal(dir, Names.memName) ) {
+                log.info(""TDB dataset: in-memory"") ;
+            } else {
+                if ( ! FileOps.exists(dir) )
+                    throw new CmdException(""Directory not found: ""+dir) ;
+                log.info(""TDB dataset: directory=""+dir) ;
+            }
             dsg = TDBFactory.createDatasetGraph(dir) ;
         }
         
```","Allow lcoation '--mem--' on the command line (TDB, in-memory). Same effect as --memTDB",4,4,4,4,improve exception message,0,0,4,4,"Feat: Add in-memory TDB dataset handling in FusekiCmd This commit adds the ability to handle in-memory TDB datasets in the FusekiCmd class. Specifically, the processModulesAndArgs() method has been modified to check if the directory is equal to Names.memName. If so, it logs that the TDB dataset is in-memory. If not, it checks if the directory exists and logs the directory of the TDB dataset. This feature enhances the flexibility of handling TDB datasets.",4,4,3,4,"refactor: Add support for in-memory TDB dataset directory
This commit extends the TDB dataset directory support to include in-memory directories, allowing users to specify 'mem' as the directory name. The implementation involves conditional checks and logging updates to handle this new scenario.","refactor: Improve TDB dataset handling
Handle the case where the TDB dataset is in-memory by checking for the special directory name. This allows for more flexibility in configuring the Fuseki server.",4.67,26.09,18.04,0.0,"refactor: Improve TDB dataset handling
Refactor the processModulesAndArgs method to handle TDB dataset directories more robustly, including in-memory datasets. This change improves the configuration and setup of the Fuseki server.",2.9,25.24,16.64,0.0
ace3649faeac426eef52535019a9468d9f07cf76,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/atlas/lib/FileOps.java
Status: modified
```diff
@@ -19,8 +19,13 @@
 package org.apache.jena.atlas.lib;
 
 import java.io.File ;
+import java.io.FileInputStream ;
+import java.io.FileOutputStream ;
+import java.io.IOException ;
+import java.nio.channels.FileChannel ;
 
 import org.apache.jena.atlas.AtlasException ;
+import org.apache.jena.atlas.io.IO ;
 import org.apache.jena.atlas.logging.Log ;
 
 public class FileOps
@@ -189,6 +194,20 @@ public static String fullDirectoryPath(String filename)
         }
     }
     
+    /** Copy a file */
+    public static void copyFile(File source, File dest) {
+        try {
+            @SuppressWarnings(""resource"")
+            FileChannel sourceChannel = new FileInputStream(source).getChannel();
+            @SuppressWarnings(""resource"")
+            FileChannel destChannel = new FileOutputStream(dest).getChannel();
+            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
+            sourceChannel.close();
+            destChannel.close();
+        } catch (IOException ex) { IO.exception(ex); }
+    }
+
+    
 //    public static String getExt(String filename)
 //    {
 //        int i = filename.lastIndexOf('.') ;
```",File copy helper,2,4,4,4,add copyFile method to FileOps,0,4,4,4,"Feat: Add copyFile method to FileOps class This commit adds a new method `copyFile` to the `FileOps` class. This method copies a file from a source to a destination using FileChannels. If the destination file exists, it will be overwritten. This feature enhances the file operation capabilities of the `FileOps` class.",4,4,4,4,"feat: Introduce file copying functionality
This commit adds a file copying functionality to the FileOps class, enabling efficient copying of files using FileChannel. This new feature complements the existing file operation utilities, such as deletion, existence checks, and path manipulation.","feat: Add copyFile method to FileOps
Introduce a utility method to efficiently copy file contents from a source to a destination using FileChannel, enhancing the file operation utilities.",10.95,31.11,34.7,0.0,"feat: Add file copying utility method
This commit introduces a new method, copyFile, to the FileOps class, which allows for efficient file copying using FileChannel. This new feature provides a utility method for copying the contents of one file to another.",17.91,37.36,37.4,0.0
1c997c0dfa00796a3804b836668d9bcec44d9e15,apache/jena,,"File: jena-fuseki/src/main/java/org/apache/jena/fuseki/servlets/SPARQL_Query.java
Status: modified
```diff
@@ -217,7 +217,7 @@ private void execute(String queryString, HttpAction action)
         Query query = null ;
         try {
             // NB syntax is ARQ (a superset of SPARQL)
-            query = QueryFactory.create(queryString, Syntax.syntaxARQ) ;
+            query = QueryFactory.create(queryString, ""http://example/query-base"", Syntax.syntaxARQ) ;
             queryStringLog = formatForLog(query) ;
             validateQuery(action, query) ;
         } catch (ActionErrorException ex) {
```",Always explicitly set base URI,0,2,4,4,remove unnecessary logging,0,0,4,4,"feat: Add base URI to QueryFactory.create in SPARQL_Query.java This commit modifies the `execute` method in `SPARQL_Query.java` to add a base URI parameter to the `QueryFactory.create` method. This change affects how the query is executed. The base URI is set to ""http://example/query-base"".",4,4,4,4,"refactor: Specify base URI for QueryFactory creation
Specify base URI for QueryFactory creation to ensure consistent query execution, improving robustness and preventing potential errors.","refactor: Use query base when creating SPARQL query
Modify the execute method in SPARQL_Query to include a query base when creating a SPARQL query, using 'http://example/query-base' as the base.",2.63,20.0,15.03,0.0,"refactor: Update QueryFactory.create to use base URI
Modified the execute method in SPARQL_Query to use a base URI when creating a query with QueryFactory.create. This change improves the handling of SPARQL queries and their execution based on HTTP requests.",21.1,38.64,29.15,0.0
f8f254b6ff03eb206421385069b3bf8e6e8fee79,apache/jena,,"File: dboe-trans-data/src/main/java/org/seaborne/dboe/trans/bplustree/BPTreePage.java
Status: modified
```diff
@@ -119,6 +119,7 @@ protected static void promote(AccessPath path, BPTreePage page) {
                     // newPtr == s.page.getId() ??
                     if ( newPtr != s.page.getId() ) {
                         System.err.println(""  Promotion: newPtr != s.page.getId(): ""+newPtr+"" != ""+s.page.getId()) ;
+                        throw new InternalErrorException() ;
                     }
                     n.ptrs.set(s.idx, newPtr) ;
                     newPtr = n.getId() ;
```",Throw exception on unexpected condition.,4,3,4,4,add missing newline,0,0,4,4,Fix: Throw exception in 'promote' method of BPTreePage This commit modifies the 'promote' method in the BPTreePage.java file to throw an InternalErrorException when the newPtr does not equal the page ID. This change ensures the consistency of the B+ tree by preventing the promotion of a page when the access path is not consistent.,4,4,4,4,"fix: Enforce page ID consistency in promote method
Previously, the promote method did not check for page ID consistency, leading to potential inconsistencies in the B+ tree structure. This change enforces consistency by throwing an InternalErrorException when the page IDs do not match.","fix: Throw InternalErrorException when newPtr mismatches s.page.getId()
Ensure B+ tree page promotion consistency by validating newPtr against s.page.getId()",13.73,35.05,44.24,0.0,"fix: Ensure page promotion consistency
Throw an InternalErrorException when promoting a page in a B+ tree and the new pointer does not match the page ID, to maintain tree consistency and prevent potential errors.",6.9,25.0,24.04,0.0
cfaa3d72040b71d40dfb41c21684c48ed2f34240,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/riot/out/NodeFormatterBase.java
Status: modified
```diff
@@ -66,7 +66,7 @@ public void formatLiteral(AWriter w, Node n)
             // RDF 1.0, simple literal.
             formatLitString(w, lex) ;
         } else if ( JenaRuntime.isRDF11 && dt.equals(XSDDatatype.XSDstring) ) {
-            // RDF 1.1, xsd:string - outptu as short string.
+            // RDF 1.1, xsd:string - output as short string.
             formatLitString(w, lex) ;
         } else {
             // Datatype, no language tag, not short string.
```",Fix comment typo.,4,4,4,4,add a comment,0,0,4,4,"Fix: Correct typo in comment in NodeFormatterBase Corrected a typo in the comment of the `formatLiteral` method in the `NodeFormatterBase` class. The word ""outptu"" has been changed to ""output"".",4,4,4,4,"fix: Fix typo in RDF 1.1 xsd:string output
Fixed typo in RDF 1.1 xsd:string output formatting in NodeFormatterBase.java, which previously generated incorrect output due to the typo.","fix: Fix typo in formatLitString method
Correct 'outptu' to 'output' in NodeFormatterBase.",8.8,27.59,16.34,0.0,"fix: Correct typo in NodeFormatterBase
Fixed a typo in the comment of the formatLiteral method in NodeFormatterBase, changing 'outptu' to 'output'. This commit ensures the accuracy of the code comments, making it easier for developers to understand the implementation.",35.76,53.73,59.37,0.0
e9e6fa1c2b27b3e45bb0c17f4c948b8c025ac6cf,apache/jena,,"File: dboe-quack/src/test/java/org/seaborne/dboe/sparql/test/LibTestSPARQL.java
Status: modified
```diff
@@ -49,9 +49,9 @@ public class LibTestSPARQL
              ""PREFIX mf:     <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#>"",
              ""PREFIX qt:     <http://www.w3.org/2001/sw/DataAccess/tests/test-query#>"",
              ""PREFIX dawgt:   <http://www.w3.org/2001/sw/DataAccess/tests/test-dawg#>"",
-             ""PREFIX apf:     <http://jena.hpl.hp.com/ARQ/property#>"",
-             ""PREFIX afn:     <http://jena.hpl.hp.com/ARQ/function#>"",
-             ""PREFIX list:    <http://jena.hpl.hp.com/ARQ/list#>"") ;
+             ""PREFIX apf:     <http://jena.apache.org/ARQ/property#>"",
+             ""PREFIX afn:     <http://jena.apache.org/ARQ/function#>"",
+             ""PREFIX list:    <http://jena.apache.org/ARQ/list#>"") ;
 
     // qt:data and qt:graphData - multiple.
     private final static String testsQueryString =
@@ -276,4 +276,4 @@ public static String fixupName(String string) {
         string = string.replace(')', ']') ;
         return string ;
     }
-}
\ No newline at end of file
+}
```",Convert http://jena.hpl.hp.com/ARQ to http://jena.apache.org/ARQ,0,4,4,4,fix broken test,0,0,4,4,Refactor: Update PREFIX URLs in LibTestSPARQL.java The PREFIX URLs in the SPARQL query strings in LibTestSPARQL.java have been updated. The changes do not affect the functionality of the code.,3,4,4,4,"refactor: Replace hpl.hp.com with apache.org in namespace prefixes
Update namespace prefixes to reflect the migration from HP to Apache, ensuring consistency with the project's new domain.","refactor: Update Jena namespace URLs to apache.org
Update namespace URLs from jena.hpl.hp.com to jena.apache.org to reflect the project's new home.",5.01,13.56,9.84,0.0,"refactor: Update namespace URLs for Jena ARQ
Updated the namespace URLs for Jena ARQ from 'hpl.hp.com' to 'apache.org' to reflect the project's migration to the Apache Software Foundation.",6.42,22.95,17.33,0.0
d0ce13b2587905859c9ed854f5114b8c86c2125c,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/sparql/modify/request/QuadAcc.java
Status: modified
```diff
@@ -18,13 +18,12 @@
 
 package org.apache.jena.sparql.modify.request;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
+import java.util.ArrayList ;
+import java.util.Collections ;
+import java.util.List ;
 
-import org.apache.jena.atlas.lib.SinkToCollection;
-import org.apache.jena.sparql.core.BasicPattern;
-import org.apache.jena.sparql.core.Quad;
+import org.apache.jena.atlas.lib.SinkToCollection ;
+import org.apache.jena.sparql.core.Quad ;
 
 /** Accumulate quads (including allowing variables) during parsing. */
 public class QuadAcc extends QuadAccSink
@@ -61,13 +60,5 @@ public boolean equals(Object other)
         QuadAcc acc = (QuadAcc)other ;
         return quads.equals(acc.quads) ; 
     }
-    
-    public BasicPattern getBGP(){
-    	BasicPattern bgp = new BasicPattern();
-    	for(Quad qd: this.quadsView){
-    		bgp.add(qd.asTriple());
-    	}
-    	return bgp;
-    }
 
 }
```",add licence info for ExampleConstructQuads; retain QuadAcc unchanged,0,0,4,4,remove unused code,4,3,4,4,Refactor: Reformat import statements and remove method in QuadAcc.java This commit reformats the import statements in the `QuadAcc.java` file for better readability. It also removes the `getBGP()` method.,4,4,4,4,"refactor: Simplify QuadAcc by removing unused imports and methods
Removed unused imports and methods from QuadAcc, making its implementation more concise and focused on its core functionality.","refactor: Remove getBGP method from QuadAcc
The method was unused and has been removed to simplify the QuadAcc class.",4.56,10.71,13.47,0.0,"refactor: Simplify QuadAcc class
Removed unnecessary imports and the getBGP method, which was not being used. The class now focuses on managing a list of Quad objects and providing an immutable view of them.",8.07,15.87,19.15,0.0
01bc520eda0dce834d20a71c9b90781346570a57,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/query/Dataset.java
Status: modified
```diff
@@ -30,9 +30,8 @@
  *  and a background graph (also called the default
  *  graph or unnamed graph). */
 
-public interface Dataset extends Transactional
+public interface Dataset extends Transactional 
 {
-    // Rather than pull in the internal ""Tranactional"" interface, we duplicate it here. 
     /** Get the default graph as a Jena Model */
     public Model getDefaultModel() ;
     
```",Remove out-of-date comment. This closes #83.,4,4,4,4,make Dataset public,0,0,4,4,Refactor: Remove out-of-date comment from Dataset.java Removed an out-of-date comment from the Dataset class. The functionality of the class remains the same. This change is part of a larger effort to clean up the codebase.,4,4,4,4,"style: Remove outdated comment and unnecessary @Override
Removed outdated comment and unnecessary @Override annotations from Dataset interface, ensuring consistency with its actual implementation of Transactional.","style: Remove outdated comment and unnecessary @Override from Dataset
The comment incorrectly stated that Dataset does not implement Transactional, which is now implemented. This change aligns the code with reality.",4.48,20.0,9.54,0.0,"style: Remove outdated comment and unnecessary override
Removed a comment in Dataset that incorrectly stated it did not implement Transactional, and also removed the now-unnecessary overridden methods. This change improves code readability and maintainability by removing redundant information.",7.38,19.18,20.96,0.0
8a4a285d62642cbdba787464c9e2a64e808eda60,apache/jena,,"File: jena-arq/src/test/java/org/apache/jena/sparql/engine/ref/TestTableJoin.java
Status: modified
```diff
@@ -44,13 +44,14 @@ public class TestTableJoin extends BaseTest
     Table zero = new TableEmpty() ;
     Table zeroData = SSE.parseTable(""(table)"") ;
     Table unitData = SSE.parseTable(""(table (row))"") ;
+    
     Table data1 = SSE.parseTable(""(table (row (?a 1) (?b 2)))"") ;
     Table data2 = SSE.parseTable(""(table (row (?a 1) (?c 3)) (row (?a 9) (?c 5))  )"") ;
     Table data3 = SSE.parseTable(""(table (row (?a 1) (?c 3)) (row (?a 1) (?c 4)) (row (?a 9) (?c 5))  )"") ;
-    
+
     Table data1J2 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) )"") ;
-    Table data1LJ2 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) (row (?a 9) (?c 5)) )"") ;
-    Table data2LJ1 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) )"") ;
+    Table data1LJ2 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) )"") ;
+    Table data2LJ1 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) (row (?a 9) (?c 5)) )"") ;
     
     Table data1J3 = SSE.parseTable(""(table (row (?a 1) (?b 2) (?c 3)) (row (?a 1) (?b 2) (?c 4)) )"") ;
     
```",Fix test data,2,1,4,4,fix test on windows,1,0,4,4,Style: Update TestTableJoin class Updated the TestTableJoin class to improve code style. The changes are related to the testing of left joins in the reference query engine. No associated issues or pull requests.,4,4,2,4,"refactor: Rearrange table join test data
To simplify test data maintenance, rearranged table join test data into a more logical and consistent structure.","refactor: Reorganize table join test data
Rearranged and added tables to improve test coverage for table join operations.",3.01,0.0,4.32,0.0,"refactor: Improve TestTableJoin with additional test cases
This commit refactors the TestTableJoin class by adding new test cases for table join operations. The changes include adding new tables and modifying existing ones to cover more scenarios. This improvement enhances the test coverage and robustness of the table join functionality.",7.67,24.69,37.36,0.0
7a85483509b353e4abb30901532c529b58e16592,apache/jena,,"File: jena-text/src/test/java/org/apache/jena/query/text/TestDatasetWithConfigurableAnalyzer.java
Status: modified
```diff
@@ -45,14 +45,17 @@ public void testConfigurableAnalyzerIsCaseAndAccentInsensitive() {
         final String turtle = StrUtils.strjoinNL(
                 TURTLE_PROLOG,
                 ""<"" + RESOURCE_BASE + testName + "">"",
-                ""  rdfs:label 'Feeling a déjà vu'"",
+                ""  rdfs:label 'déjà vu'"",
+                ""."",
+                ""<"" + RESOURCE_BASE + ""irrelevant>"",
+                ""  rdfs:label 'not déjà vu'"",
                 "".""
                 );
         String queryString = StrUtils.strjoinNL(
                 QUERY_PROLOG,
                 ""SELECT ?s"",
                 ""WHERE {"",
-                ""    ?s text:query ( rdfs:label '\""feeling ä déja\""*' 10 ) ."",
+                ""    ?s text:query ( rdfs:label '\""Déja Vü\""' 10 ) ."",
                 ""}""
                 );
         Set<String> expectedURIs = Sets.newHashSet(RESOURCE_BASE + testName);
```",fix accent-insensitive search unit test that didn't actually test the right thing,4,3,4,4,add a test for TestDatasetWithConfigurableAnalyzer,0,1,4,4,Fix: Update testConfigurableAnalyzerIsCaseAndAccentInsensitive() method The testConfigurableAnalyzerIsCaseAndAccentInsensitive() method in the TestDatasetWithConfigurableAnalyzer.java file has been updated. The changes involve modifying the rdfs:label and the text:query in the turtle and queryString respectively. This was done to enhance the testing of the case and accent insensitivity of the ConfigurableAnalyzer.,4,4,4,4,"fix: Fix testConfigurableAnalyzerIsCaseAndAccentInsensitive to ignore case and accents
This update ensures the testConfigurableAnalyzerIsCaseAndAccentInsensitive test accurately reflects the analyzer's case and accent insensitivity, by ignoring case and accents in the query string and expected URIs.","fix: Fix case and accent sensitivity in testConfigurableAnalyzerIsCaseAndAccentInsensitive
Update the test method to correctly handle case and accent insensitivity by querying for resources with specific labels.",9.28,25.32,21.27,0.0,"refactor: Improve test case for configurable analyzer
Refactor the testConfigurableAnalyzerIsCaseAndAccentInsensitive method to improve the test case for configurable analyzer's case and accent insensitivity. The test now correctly handles labels with different case and accent.",10.0,25.32,22.71,0.0
f7693a68cca53df0292624e90254a9233b8d8504,apache/jena,Y,"File: jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java
Status: modified
```diff
@@ -95,12 +95,6 @@ public Stream<Quad> find(Node g, Node s, Node p, Node o) {
     /**
      * We descend through the nested {@link PMap}s building up {@link Stream}s of partial tuples from which we develop a
      * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.
-     *
-     * @param first the value in the first slot of the tuple
-     * @param second the value in the second slot of the tuple
-     * @param third the value in the third slot of the tuple
-     * @param fourth the value in the fourth slot of the tuple
-     * @return a <code>Stream</code> of tuples matching the pattern
      */
     @SuppressWarnings(""unchecked"") // Because of (Stream<Quad>) -- but why is that needed?
     private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {
@@ -157,6 +151,7 @@ protected TConsumer4<Node> add() {
         };
     }
 
+    @Override
     protected TConsumer4<Node> delete() {
         return (first, second, third, fourth) -> {
             debug(""Removing four-tuple: {} {} {} {} ."", first, second, third, fourth);
```


File: jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java
Status: modified
```diff
@@ -94,11 +94,6 @@ public Stream<Triple> find(final Node s, final Node p, final Node o) {
     /**
      * We descend through the nested {@link PMap}s building up {@link Stream}s of partial tuples from which we develop a
      * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.
-     *
-     * @param first the value in the first slot of the tuple
-     * @param second the value in the second slot of the tuple
-     * @param third the value in the third slot of the tuple
-     * @return a <code>Stream</code> of tuples matching the pattern
      */
     @SuppressWarnings(""unchecked"") // Because of (Stream<Triple>) -- but why is that needed?
     private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {
```",Remove javadoc errors.,4,3,4,4,fix PMapQuadTable delete,0,1,4,2,"Refactor: Simplify comments and override method in PMapQuadTable and PMapTripleTable This commit simplifies the comments in the PMapQuadTable and PMapTripleTable classes and overrides a method. The changes do not affect the functionality of the classes, which are used for storing and managing quads and triples using nested persistent maps. The refactor aims to improve the structure and design of the code without changing its behavior.",4,4,4,4,"refactor: Remove unnecessary Javadoc parameter tags
Removed unnecessary Javadoc parameter tags from PMapQuadTable and PMapTripleTable classes, aligning with the existing code style and reducing visual noise.","style: Remove redundant Javadoc comments
Removed unnecessary Javadoc comments in PMapQuadTable and PMapTripleTable classes, improving code readability.",3.07,15.56,7.05,0.0,"refactor: Remove redundant method parameter documentation
This commit removes unnecessary JavaDoc parameter descriptions in PMapQuadTable and PMapTripleTable classes. The changes do not affect the functionality of the classes, but improve code readability and maintainability.",17.02,40.82,28.37,0.0
ecfe9eda7adf6f9fcc0d88e8538e436103e823b0,apache/jena,,"File: jena-arq/src/main/java/org/apache/jena/sparql/function/scripting/ScriptFunction.java
Status: modified
```diff
@@ -111,12 +111,11 @@ public NodeValue exec(List<NodeValue> args) {
         }
     }
 
-
     private Invocable getEngine() {
         Pool<Invocable> pool = enginePools.computeIfAbsent(lang, key -> PoolSync.create(new PoolBase<>()));
         Invocable engine = pool.get();
         if (engine == null) {
-            engine = createEngine(lang);
+            engine = createEngine();
         }
         return engine;
     }
@@ -125,7 +124,7 @@ private void recycleEngine(Invocable engine) {
         enginePools.get(lang).put(engine);
     }
 
-    private static Invocable createEngine(String lang) {
+    private Invocable createEngine() {
         ScriptEngine engine = scriptEngineManager.getEngineByName(lang);
         if (engine == null) {
             throw new ExprBuildException(""Unknown scripting language: "" + lang);
```",Simplify script engine instantiation,4,4,4,4,remove unused method,0,0,4,4,Refactor: Update `createEngine` and `getEngine` methods in `ScriptFunction.java` This commit updates the `createEngine` method in `ScriptFunction.java` to be non-static and removes the language parameter. The `getEngine` method is also updated to call the new version of `createEngine`. These changes improve the structure of the code without changing its behavior.,4,4,4,4,"refactor: Simplify engine creation and retrieval
Removed language parameter from `createEngine` method, allowing for a more flexible and reusable engine creation process. This change simplifies the `getEngine` method and reduces code duplication.","refactor: Decouple language from engine creation
Removed language parameter from createEngine method, making it more flexible and reusable.",5.37,21.95,20.2,0.0,"refactor: Remove language parameter from script engine creation
This commit refactors the script engine creation to remove the language parameter from the createEngine method. The language is now determined internally, making the API easier to use and understand. This change is part of the larger effort to support multiple scripting languages via GraalVM, as described in JENA-1951.",8.02,24.3,28.97,0.0
1f659ccfe6592fa13d62721ed85032a3797f7a6d,apache/jmeter,,"File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/AccessLogSamplerGui.java
Status: modified
```diff
@@ -162,7 +162,6 @@ public String getStaticLabel()
     public TestElement createTestElement()
     {
     	if (SAMPLER == null){
-    		System.out.println(""the sampler was null, therefore we create a new one"");
 			SAMPLER = new AccessLogSampler();
 			SAMPLER.setSamplerGUI(this);
 			this.configureTestElement(SAMPLER);
```","Remove unnecessary ""throws"" clauses.",4,3,4,4,remove unused code,3,3,4,4,Refactor: Remove print statement from AccessLogSamplerGui Removed a print statement from the createTestElement() method in the AccessLogSamplerGui class. This is a part of code cleanup and does not affect the functionality of the class. The AccessLogSamplerGui class is used for configuring and managing an AccessLogSampler in JMeter.,4,4,4,4,"fix: Suppress unnecessary debug output
Removed unnecessary debug output to reduce noise and improve logging relevance, ensuring the GUI configuration for access log samplers in JMeter remains unaffected.","fix: Remove unnecessary print statement
The print statement in AccessLogSamplerGui was not serving any purpose and has been removed.",3.21,13.51,10.03,0.0,"refactor: Remove unnecessary debug print statement
The debug print statement in AccessLogSamplerGui was removed as it was not providing any useful information and was cluttering the code. This change improves the code quality and maintainability.",5.56,27.16,25.09,0.0
bfaa285c92cb44742553d2035b26d8e20edba5d1,apache/jmeter,,"File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/ParseRegexp.java
Status: modified
```diff
@@ -72,7 +72,8 @@
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
-// TODO: look at using Java 1.4 regexp instead of ORO.
+// NOTE: Also looked at using Java 1.4 regexp instead of ORO. The change was
+// trivial. Performance did not improve -- at least not significantly. [Jordi]
 import org.apache.oro.text.regex.MatchResult;
 import org.apache.oro.text.regex.Pattern;
 import org.apache.oro.text.regex.PatternMatcherInput;
```",Add comment on ORO-vs-java.util.regex for posterity.,4,4,4,4,fix import order,0,0,4,4,Refactor: Update comment in ParseRegexp.java The comment in the ParseRegexp.java file was updated to reflect that the consideration of using Java 1.4 regexp instead of ORO did not significantly improve performance.,4,4,4,4,"style: Remove TODO comment about using Java 1.4 regexp
Removed outdated TODO comment, as Java 1.4 regexp alternative was explored and deemed inefficient.","style: Update comment to reflect Java 1.4 regexp investigation
Changed TODO to NOTE and added a comment about the performance impact of using Java 1.4 regexp instead of ORO.",8.37,24.14,20.3,0.0,"style: Update comment about using Java 1.4 regexp
Updated a TODO comment to a NOTE comment, providing feedback on the result of investigating the use of Java 1.4 regexp instead of ORO, which did not improve performance significantly.",22.74,49.32,52.93,0.0
373a9a8d344ff5c23f58333990c331af60262398,apache/jmeter,,"File: src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Status: modified
```diff
@@ -80,7 +80,6 @@
  * For efficiency reasons, most customizers should implement
  * SharedCustomizer.
  * 
- * @author <a href=""mailto:jsalvata@apache.org"">Jordi Salvat i Alabart</a>
  * @version $Revision$ updated on $Date$
  */
 public class TestBeanGUI
@@ -433,4 +432,12 @@ else if (SharedCustomizer.class.isAssignableFrom(customizerClass))
         
         if (customizer != null) add((Component)customizer, BorderLayout.CENTER);
     }
+
+	/* (non-Javadoc)
+	 * @see org.apache.jmeter.gui.JMeterGUIComponent#getLabelResource()
+	 */
+	public String getLabelResource() {
+		// TODO Auto-generated method stub
+		return null;
+	}
 }
```",Dummy implementation of getLabelResource(),3,4,4,4,add getLabelResource to TestBeanGUI,0,0,4,4,"Feat: Add getLabelResource method in TestBeanGUI This commit adds a new method getLabelResource() in the TestBeanGUI.java file. The method is supposed to return the label resource, but it's not implemented yet and currently returns null. The author information was also removed from a comment in the same file.",4,4,4,4,"refactor: Add getLabelResource method to TestBeanGUI
Added getLabelResource method to TestBeanGUI to comply with JMeterGUIComponent interface, currently returning null as a placeholder for future implementation.","feat: Add getLabelResource method to TestBeanGUI
This method returns the resource associated with the label, currently returning null. It needs to be overridden or implemented according to specific requirements.",3.88,24.66,21.91,0.0,"feat: Add getLabelResource method to TestBeanGUI
This commit introduces a new method getLabelResource to the TestBeanGUI class, which is currently a placeholder returning null. This method is intended to be implemented later to retrieve a label resource. It provides a default implementation of the getLabelResource method, which needs to be overridden or implemented according to specific requirements.",13.84,34.29,33.82,0.0
98ab7fd2575c5f8d78cdf22c28ad106ec5b6e56e,apache/jmeter,Y,"File: src/core/org/apache/jmeter/visualizers/Visualizer.java
Status: modified
```diff
@@ -38,4 +38,11 @@ public interface Visualizer
      * the visualizer about the arrival of a new sample.
      */
     public void add(SampleResult sample);
+    
+    /**
+     * This method is used to indicate a visualizer generates
+     * statistics.
+     * @return
+     */
+    public boolean isStats();
 }
```


File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Status: modified
```diff
@@ -122,6 +122,7 @@ public abstract class AbstractVisualizer
     SampleSaveConfiguration saveConfig;
     
     protected ResultCollector collector = new ResultCollector();
+	private boolean isStats = true;
 
     public AbstractVisualizer()
     {
@@ -151,6 +152,10 @@ public void actionPerformed(ActionEvent e)
                 
     }
 
+	public boolean isStats(){
+        return isStats;
+	}
+
     /**
      * Gets the checkbox which selects whether or not only errors should be
      * logged.  Subclasses don't normally need to worry about this checkbox,
```",added a method to Visualizer interface to indicate if a visualizer generates or displays calculated statistics,4,4,4,4,add Visualizer isStats,0,4,4,4,Feat: Add isStats method to Visualizer and AbstractVisualizer This commit introduces a new method `isStats()` to the `Visualizer` interface and `AbstractVisualizer` class. This method is used to check if the statistics tracking is enabled. It returns true if statistics tracking is enabled. The `AbstractVisualizer` class is a base class for JMeter GUI components that display or log test results. The `Visualizer` interface is used to display and log test results in JMeter. The addition of the `isStats()` method enhances the functionality of these classes by allowing them to check the status of statistics tracking.,4,4,4,4,"feat: Add isStats method to Visualizer
Added isStats method to Visualizer interface and implemented it in AbstractVisualizer, allowing visualizers to indicate whether they generate statistics.","feat: Add isStats method to Visualizer interface and implementation
Introduce a method to check if statistics are enabled, allowing for more informative visualization and logging.",1.63,25.42,14.41,0.0,"feat: Add isStats method to Visualizer interface
This commit introduces a new method isStats to the Visualizer interface, which allows visualizers to indicate whether they generate statistics. The method is implemented in the AbstractVisualizer class. This change enables more flexibility and customization in visualizing test results.",14.14,35.97,24.09,0.0
84cf363d55d5e49648d4c13952b3e26d0dd8007d,apache/jmeter,,"File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java
Status: modified
```diff
@@ -21,7 +21,6 @@
 
 import javax.swing.JPanel;
 
-import org.apache.jmeter.config.gui.LoginConfigGui;
 import org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui;
 import org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler;
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
@@ -41,7 +40,6 @@
  ***************************************/
 
 public class LdapExtTestSamplerGui extends AbstractSamplerGui {
-    private LoginConfigGui loginPanel;
     private LdapExtConfigGui ldapDefaultPanel;
 
     /****************************************
```",Remove unused variable and corresponding import,4,4,4,4,remove unused field,4,3,4,4,Refactor: Remove unused LoginConfigGui from LdapExtTestSamplerGui The LoginConfigGui import and object declaration were removed from LdapExtTestSamplerGui.java as they were not being used. This simplifies the code and reduces unnecessary dependencies.,4,4,4,4,"refactor: Remove unused imports and fields
Removed unnecessary dependencies and simplified the implementation of `LdapExtTestSamplerGui` by eliminating unused imports and fields, making the code more maintainable and efficient.","refactor: Remove unused LoginConfigGui
Simplify LdapExtTestSamplerGui by removing unnecessary import and variable declaration.",9.92,27.59,36.23,0.0,"refactor: Remove unused import and field
This commit removes the unused import of LoginConfigGui and the corresponding field loginPanel from the LdapExtTestSamplerGui class, simplifying its internal structure and making it easier to maintain.",9.54,28.57,26.15,0.0
2c24d688aad7e71a6760f902525a652489ccd9c9,apache/jmeter,,"File: src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java
Status: modified
```diff
@@ -1,4 +1,3 @@
-// $Header$
 /*
  * Copyright 2004 The Apache Software Foundation.
  *
@@ -17,22 +16,20 @@
 package org.apache.jmeter.visualizers;
 
 import java.io.Serializable;
-import java.net.HttpURLConnection;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
-import java.util.List;
 import java.util.LinkedList;
+import java.util.List;
 
-import org.apache.jmeter.samplers.Clearable;
-import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.monitor.model.ObjectFactory;
 import org.apache.jmeter.monitor.model.Status;
 import org.apache.jmeter.monitor.util.Stats;
 import org.apache.jmeter.protocol.http.sampler.HTTPSampleResult;
-import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
+import org.apache.jmeter.samplers.Clearable;
+import org.apache.jmeter.samplers.SampleResult;
 
 public class MonitorAccumModel implements Clearable, Serializable {
 
```",Remove unused imports,4,3,4,4,remove unused imports,4,3,4,4,Refactor: Reorganize import statements in MonitorAccumModel.java The import statements in MonitorAccumModel.java have been reorganized for better readability and maintenance. No changes have been made to the functionality of the code.,4,3,4,4,"style: Remove unnecessary imports
Removed unused imports to simplify the code and reduce unnecessary dependencies, making it easier to maintain and understand.","style: Remove unnecessary imports and comments
Clean up MonitorAccumModel.java by removing redundant code elements.",4.59,11.32,15.47,0.0,"style: Remove unnecessary imports and comments
This commit removes unnecessary imports and comments from the MonitorAccumModel.java file, cleaning up the code and making it more maintainable.",7.97,17.24,18.6,0.0
5692ba3f8a1ea6f37c2bbd7ac21f7b3ac0c93b98,apache/jmeter,,"File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/StandardGenerator.java
Status: modified
```diff
@@ -1,6 +1,5 @@
-// $Header$
 /*
- * Copyright 2003-2004 The Apache Software Foundation.
+ * Copyright 2003-2004,2006 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -19,13 +18,14 @@
 package org.apache.jmeter.protocol.http.util.accesslog;
 
 import java.io.File;
-import java.io.FileWriter;
 import java.io.FileOutputStream;
+import java.io.FileWriter;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.Serializable;
-import org.apache.jmeter.protocol.http.sampler.HTTPSampler;
+
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
+import org.apache.jmeter.protocol.http.sampler.HTTPSamplerFactory;
 
 /**
  * Description:<br>
@@ -48,9 +48,8 @@
  * so the user can pass the desired listener to the tool.
  * <p>
  * 
- * @author Peter Lin<br>
- * @version $Revision$ last updated $Date$ Created
- *          on: Jul 1, 2003<br>
+ * author Peter Lin<br>
+ * Created on: Jul 1, 2003<br>
  */
 
 public class StandardGenerator implements Generator, Serializable {
@@ -216,7 +215,7 @@ public void setTarget(Object target) {
 	 */
 	public Object generateRequest() {
 		try {
-			SAMPLE = new HTTPSampler();
+			SAMPLE = HTTPSamplerFactory.newInstance();
 		} catch (NullPointerException e) {
 			e.printStackTrace();
 		}
```",Use HTTPSamplerFactory to create the sampler,0,4,4,4,catch NullPointerException in StandardGenerator,0,0,4,4,"Refactor: Update generateRequest method in StandardGenerator.java This commit refactors the generateRequest method in the StandardGenerator.java file. The method now creates a new instance of HTTPSamplerFactory instead of using the HTTPSampler. This change improves the structure of the code without changing its behavior. If a NullPointerException occurs during the creation of the HTTPSamplerFactory instance, it is caught and the stack trace is printed.",4,3,4,4,"refactor: Use HTTPSamplerFactory to instantiate HTTPSampler
Replaced direct instantiation of HTTPSampler with HTTPSamplerFactory to promote flexibility and maintainability in StandardGenerator.","refactor: Replace direct HTTPSampler creation with factory
Updated generateRequest() method in StandardGenerator to use HTTPSamplerFactory for creating HTTPSampler instances, improving code maintainability and readability.",1.17,14.46,7.33,0.0,"refactor: Update StandardGenerator to use HTTPSamplerFactory
Refactored the StandardGenerator class to use the HTTPSamplerFactory for creating HTTP request samples. This change improves the internal structure of the class and makes it easier to understand and modify. The generateRequest method has been updated to use the factory, and the class now generates HTTP request objects and saves them to a JMX file.",13.35,29.03,29.98,0.0
399d67f64b51a44ce72e702c0df7f853d943e682,apache/jmeter,,"File: test/src/org/apache/jmeter/control/TestWhileController.java
Status: modified
```diff
@@ -164,8 +164,7 @@ public void testAlwaysFailOK() throws Exception {
 			runTestAlwaysFail(true); // Should be OK
 		}
 
-		// TODO - re-enable when fix found
-		public void disabletestAlwaysFailBAD() throws Exception {
+		public void testAlwaysFailBAD() throws Exception {
 			runTestAlwaysFail(false); // Currently fails
 		}
 
```",Re-enabling test as it seems to have been fixed,4,4,4,4,remove unused code,0,0,4,4,"Fix: Re-enable testAlwaysFailBAD() in TestWhileController The testAlwaysFailBAD() method in TestWhileController.java was re-enabled. This method is expected to always fail, but currently, it is not failing as expected. Further investigation is needed to understand why the test is not failing.",1,3,4,4,"refactor: Rename disabletestAlwaysFailBAD to testAlwaysFailBAD
Rename `disabletestAlwaysFailBAD` to `testAlwaysFailBAD` to accurately convey its intended behavior as a failing test.","feat: Add test for always failing scenario to TestWhileController
This test method, testAlwaysFailBAD, is used to verify that a specific test case always fails, marked as 'BAD' (possibly indicating a known issue or bug).",2.44,13.79,10.08,0.0,"feat: Add testAlwaysFailBAD method to TestWhileController
This commit introduces a new test method, testAlwaysFailBAD, to TestWhileController to verify that a specific test case always fails. This test is expected to fail and is used to verify that the failure scenario is properly handled.",8.94,29.27,22.51,0.0
8e269061bac22627f76bfa280122cbafa38ba2b0,apache/jmeter,,"File: src/core/org/apache/jmeter/visualizers/SamplingStatCalculator.java
Status: modified
```diff
@@ -224,7 +224,7 @@ public Sample getSample(int index) {
 	}
 
 	private long getEndTime(SampleResult res) {
-		long endTime = res.getTimeStamp();
+		long endTime = res.getEndTime();
 		long lastTime = getCurrentSample().getEndTime();
 		if (res.isStampedAtStart()) {
 			endTime += res.getTime();
@@ -364,4 +364,4 @@ public Number getPercentPoint(float percent) {
 	public double getStandardDeviation() {
 		return calculator.getStandardDeviation();
 	}
-} // class RunningSample
+}
```",Assumed that the timstamp was always at the end,3,0,4,4,fix SamplingStatCalculator getEndTime,0,0,4,4,"Fix: Improve end time calculation in SamplingStatCalculator In the `SamplingStatCalculator` class, the `getEndTime` method has been updated to return the end time of the current sample instead of the timestamp. This change provides a more accurate calculation of the end time of a sample.",4,4,4,4,"fix: Fix getEndTime method to use correct timestamp
Fixed incorrect timestamp usage in `getEndTime` method, ensuring accurate end time calculation based on sample result stamping.","fix: Fix end time calculation in getEndTime method
The method now uses res.getEndTime() instead of res.getTimeStamp() to correctly handle sample results stamped at the start or end of the sample.",5.63,26.47,19.43,0.0,"refactor: Update getEndTime method to use SampleResult's getEndTime
Refactored the getEndTime method in SamplingStatCalculator to use the getEndTime method of SampleResult instead of calculating it manually. This change improves the accuracy and consistency of end time calculation.",11.2,32.5,35.34,0.0
0b35e7c54b590d245f8e7e67c9013adc48852b7f,apache/jmeter,,"File: test/src/org/apache/jmeter/junit/JMeterTest.java
Status: modified
```diff
@@ -40,6 +40,7 @@
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
+import org.apache.jmeter.config.gui.ObsoleteGui;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.functions.Function;
 import org.apache.jmeter.gui.GuiPackage;
@@ -275,6 +276,9 @@ private static Test suiteGUIComponents() throws Exception {
 				System.out.println(""INFO: JMeterGUIComponent: skipping all tests  "" + item.getClass().getName());
 				continue;
 			}
+			if (item instanceof ObsoleteGui){
+				continue;
+			}
 			TestSuite ts = new TestSuite(item.getClass().getName());
 			ts.addTest(new JMeterTest(""GUIComponents1"", item));
 			if (item instanceof TestBeanGUI) {
```",Exclude ObsoleteGui from tests,0,4,4,4,do not add ObsoleteGui to the test case,0,4,4,4,Fix: Skip ObsoleteGui instances in suiteGUIComponents() The method suiteGUIComponents() in JMeterTest.java has been modified to skip GUI components that are instances of ObsoleteGui when creating a test suite. This change ensures that only relevant GUI components are included in the test suite.,4,4,4,4,"refactor: Exclude ObsoleteGui from GUI component tests
Remove ObsoleteGui from the test suite to align with the refactoring goal of excluding unnecessary GUI components.","fix: Exclude ObsoleteGui from test suite
ObsoleteGui instances were incorrectly included in the test suite, causing inaccurate results. This change ensures they are skipped.",5.44,21.21,23.91,0.0,"refactor: Improve JMeterTest to skip obsolete GUI components
This commit refactors the JMeterTest class to skip obsolete GUI components during test suite creation. It adds a check for ObsoleteGui instances and skips them, ensuring that only relevant components are included in the test suite. This change improves the overall efficiency and accuracy of the testing process.",24.35,38.78,54.77,0.0
ea06fea815dc986f1940f40970d727ce5fc748f6,apache/jmeter,,"File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Status: modified
```diff
@@ -37,6 +37,7 @@
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testbeans.TestBean;
+import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.Data;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
@@ -50,7 +51,10 @@
 public class JDBCSampler extends AbstractSampler implements TestBean {
 	private static final Logger log = LoggingManager.getLoggerForClass();
 
-	private static final int MAX_ENTRIES = 200;
+	// This value is used for both the connection (perConnCache) and statement (preparedStatementMap) caches.
+	// TODO - do they have to be the same size?
+	private static final int MAX_ENTRIES = 
+		JMeterUtils.getPropDefault(""jdbcsampler.cachesize"",200); // $NON-NLS-1$
 
 	private static final Map mapJdbcNameToInt;
 
```",Allow default cache size to be defined,3,4,4,4,use a jdbc name for JDBCSampler,0,1,4,4,feat: Update JDBCSampler.java Added import statement and modified MAX_ENTRIES constant in JDBCSampler.java. The MAX_ENTRIES constant now uses the JMeterUtils.getPropDefault method to get its value. This change is not associated with any issues or pull requests.,1,4,4,4,"refactor: Make MAX_ENTRIES configurable
Extracted MAX_ENTRIES as a configurable property, replacing the hardcoded value, to enable customization of cache size for various environments and scenarios.","feat: Make MAX_ENTRIES in JDBCSampler configurable
Introduce a new property 'jdbcsampler.cachesize' to allow users to customize the cache size, providing more flexibility in JDBC query execution.",6.68,18.18,10.9,0.0,"refactor: Make JDBCSampler's MAX_ENTRIES configurable
The MAX_ENTRIES constant in JDBCSampler is now configurable through the 'jdbcsampler.cachesize' property. This change allows for more flexibility in tuning the cache size for JDBC queries.",18.17,24.66,26.85,0.0
9e9c17963dc2f148a5bbcd002764e42b68dc5d20,apache/jmeter,,"File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Status: modified
```diff
@@ -69,7 +69,7 @@ public class HTTPSampler extends HTTPSamplerBase {
 	private static final byte[] NULL_BA = new byte[0];// can share these
 
 	/** Handles writing of a post request */
-    private PostWriter postWriter;
+    private transient PostWriter postWriter;
 
 	/**
 	 * Constructor for the HTTPSampler object.
```",PostWriter is non-serializable,4,4,4,4,remove unused field,0,0,4,4,Refactor: Make 'postWriter' variable transient in HTTPSampler class This commit makes the 'postWriter' variable in the HTTPSampler class transient. This is a minor refactor with no associated issues or pull requests.,3,4,4,4,"refactor: Add transient modifier to postWriter field
To prevent unintended serialization, added transient modifier to postWriter field, ensuring it's not part of the object's persistent state.","refactor: Add transient modifier to PostWriter field
This change improves the serialization behavior of HTTPSampler by making the PostWriter field transient.",5.04,17.86,10.84,0.0,"refactor: Make PostWriter field transient in HTTPSampler
This change makes the PostWriter field transient in the HTTPSampler class, which is likely to improve the serialization behavior of the class. This refactoring does not change the observable behavior of the class.",16.31,37.14,39.43,0.0
b4d3fcd1df15af8d22c1d0c446b672ca480347f2,apache/jmeter,,"File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Status: modified
```diff
@@ -381,12 +381,14 @@ public synchronized void deliverSampler(HTTPSamplerBase sampler, TestElement[] s
 
 			placeSampler(sampler, subConfigs, myTarget);
 
-			notifySampleListeners(new SampleEvent(result, sampler.getName()));
+			notifySampleListeners(new SampleEvent(result, ""WorkBench"")); // TODO - is this the correct threadgroup name?
 		}
 		else {
 			if(log.isDebugEnabled()) {
 				log.debug(""Sample excluded based on url or content-type: "" + result.getUrlAsString() + "" - "" + result.getContentType());
 			}
+			result.setSampleLabel(""[""+result.getSampleLabel()+""]"");
+			notifySampleListeners(new SampleEvent(result, ""WorkBench"")); // TODO - is this the correct threadgroup name?
 		}
 	}
 
```",Correct the SampleEvent parameter Deliver excluded samples as [name],3,2,4,4,do not notify the listeners to the sample,0,0,4,4,"Fix: Modify deliverSampler method in ProxyControl.java This commit modifies the deliverSampler method in the ProxyControl.java file. The method now filters the sampler based on content type and URL, modifies its configurations, and places it in the target controller node. If the sampler is excluded based on URL or content-type, it now notifies the sample listeners.",3,2,3,4,"refactor: Set thread group name to WorkBench in SampleEvent
Updated thread group name to 'WorkBench' in SampleEvent to ensure accurate sample result attribution, aligning with the ProxyControl's deliverSampler method expectations.","refactor: Use 'WorkBench' as thread group name in notifySampleListeners
Updated notifySampleListeners to use 'WorkBench' as the thread group name and added sample label to result when sample is excluded based on url or content-type.",2.33,9.3,7.25,0.0,"refactor: Update deliverSampler method to use WorkBench thread group name
Refactored the deliverSampler method to use 'WorkBench' as the thread group name when notifying sample listeners. This change ensures that the correct thread group name is used when processing samples.",5.9,16.67,14.91,0.0
aa4e1164fc1cf246a154e45338dadd0bedde8f66,apache/jmeter,,"File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
Status: modified
```diff
@@ -129,10 +129,20 @@ public NamingEnumeration searchTest(DirContext dirContext, String searchBase, St
 		if (dirContext == null) {
 			throw new NamingException(CONTEXT_IS_NULL);
 		}
+        if (log.isDebugEnabled()){
+            log.debug(
+                    ""searchBase="" + searchBase +
+                    "" scope="" + scope +
+                    "" countlim="" + countlim +
+                    "" timelim="" + timelim +
+                    "" attrs="" + attrs +
+                    "" retobj="" + retobj +
+                    "" deref="" + deref +
+                    "" filter="" + searchFilter
+                      );
+        }
 		SearchControls searchcontrols = null;
 		searchcontrols = new SearchControls(scope, countlim, timelim, attrs, retobj, deref);
-		log.debug(""scope, countlim, timelim, attrs, retobj, deref= "" + searchFilter + scope + countlim + timelim
-				+ attrs + retobj + deref);
 		return dirContext.search(searchBase, searchFilter, searchcontrols);
 	}
 
```",Tidy debug statement,4,4,4,4,add more logging for üòÖ,0,0,3,0,Refactor: Improve readability of debug log statements in LdapExtClient This commit refactors the 'searchTest' method in the LdapExtClient.java file to improve the readability of the debug log statements. The functionality of the method remains the same.,4,4,4,4,"refactor: Log search parameters at debug level
Log search parameters at debug level to aid in debugging and troubleshooting of LDAP search operations.","feat: Log LDAP search operation parameters
Added debug logging to display searchBase, scope, countlim, timelim, attrs, retobj, and deref parameters in LdapExtClient.searchTest method.",3.68,13.56,10.96,0.0,"refactor: Improve logging in LdapExtClient
Enhance the logging mechanism in the searchTest method of LdapExtClient by adding more informative debug logs, making it easier to understand the search operation parameters.",8.51,27.27,25.29,0.0
30f3e481a1f21ee8dce5bdbc3662ed30227d1b99,apache/jmeter,,"File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Status: modified
```diff
@@ -34,6 +34,7 @@
 import org.apache.jmeter.protocol.http.control.TestHTTPMirrorThread;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
@@ -1091,7 +1092,6 @@ private void setupFormData(HTTPSamplerBase httpSampler, boolean isEncoded, Strin
      * 
      * @param httpSampler
      */
-    @SuppressWarnings(""deprecation"")
     private void setupFileUploadData(
             HTTPSamplerBase httpSampler,
             boolean isEncoded,
@@ -1105,9 +1105,9 @@ private void setupFileUploadData(
         // Set the form data
         setupFormData(httpSampler, isEncoded, titleField, titleValue, descriptionField, descriptionValue);
         // Set the file upload data
-        httpSampler.setFileField(fileField);
-        httpSampler.setFilename(fileValue.getAbsolutePath());
-        httpSampler.setMimetype(fileMimeType);      
+        HTTPFileArg[] hfa = {new HTTPFileArg(fileValue == null ? """" : fileValue.getAbsolutePath(), fileField, fileMimeType)};
+        httpSampler.setHTTPFiles(hfa);
+
     }
 
     /**
```",Stop using deprecated methods,4,4,4,4,remove unused code,0,0,4,4,Refactor: Update file upload data setup in HTTP sampler This commit updates the setupFileUploadData method in the TestHTTPSamplersAgainstHttpMirrorServer.java file. The changes involve how the file upload data is set up for the HTTP sampler. The previous implementation has been replaced with a new approach that uses the HTTPFileArg class. This refactor improves the structure of the code without changing its behavior.,4,4,4,4,"refactor: Use HTTPFileArg for file upload in setupFileUploadData
Replaced deprecated file upload setup with HTTPFileArg to modernize and simplify the setupFileUploadData method, making it more maintainable and efficient.","refactor: Use HTTPFileArg in setupFileUploadData
Replace deprecated setFileField, setFilename, and setMimetype methods with HTTPFileArg.",3.16,20.22,17.36,0.0,"refactor: Refactor setupFileUploadData method to use HTTPFileArg
Refactored the setupFileUploadData method to use HTTPFileArg instead of setting file fields individually. This change improves the internal structure of the method and makes it easier to understand and modify.",5.32,22.45,22.99,0.0
793ada2cfd1276768b885f30036566dd174e8f07,apache/jmeter,,"File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Status: modified
```diff
@@ -169,9 +169,11 @@ private SampleResult sampleWithListener() {
         }
         result.sampleEnd();
        
+        int read = 0;
         for(cnt = 0; cnt < loop ; cnt++) {
             TextMessage msg = queue.poll();
             if (msg != null) {
+                read++;
                 try {
                     buffer.append(msg.getText());
                     Enumeration<?> props = msg.getPropertyNames();
@@ -197,9 +199,9 @@ private SampleResult sampleWithListener() {
         result.setDataType(SampleResult.TEXT);
         result.setSuccessful(true);
         result.setResponseCodeOK();
-        result.setResponseMessage(loop + "" messages received""); // TODO fix
+        result.setResponseMessage(read + "" messages received"");
         result.setSamplerData(loop + "" messages expected"");
-        result.setSampleCount(loop);
+        result.setSampleCount(read);
 
         return result;
     }
```",Count messages actually read,3,4,4,4,fix sampler sampler,0,0,2,0,"Refactor: Improve accuracy of response message and sample count in SubscriberSampler In the `sampleWithListener()` method of the `SubscriberSampler.java` file, a new variable `read` was introduced to count the actual number of messages read from the queue. This variable is then used to set the response message and sample count, improving their accuracy.",4,4,4,4,"fix: Update SubscriberSampler to accurately count received messages
Fixed inaccurate message count in SubscriberSampler by introducing a `read` variable, ensuring correct reporting of received messages.","fix: Fix incorrect sample count and response message in SubscriberSampler
The sampleWithListener method was incorrectly setting the sample count and response message. This change fixes the issue by using the correct count of received messages.",3.58,20.78,13.7,0.0,"refactor: Improve SubscriberSampler to accurately report received messages
This commit refactors the sampleWithListener method in SubscriberSampler to correctly count and report the number of received messages. The previous implementation had a hardcoded loop count, which has been replaced with a dynamic read counter. This change ensures that the SampleResult object accurately reflects the number of messages received.",8.7,29.36,37.89,0.0
81ff872b26ce169faaae3df54d9f71cd28cf8da5,apache/jmeter,,"File: test/src/org/apache/jmeter/samplers/TestSampleResult.java
Status: modified
```diff
@@ -215,8 +215,15 @@ private void testSubResults(boolean nanoTime) throws Exception {
             if (totalTime < allsamplesTime) {
                 fail(""Total: ""+totalTime+"" < sum(samples): ""+ allsamplesTime);
             }
-            if (totalTime > overallTime) {
-                fail(""Total: ""+totalTime+"" > overall time: ""+ overallTime);
+            /*
+             * The granularity of System.currentTimeMillis() - plus the fact that the nanoTime()
+             * offset is now calculated for each sampleResult - means that there can be some
+             * minor variation in the value returned by SampleResult#currentTimeInMillis().
+             * 
+             * Allow for this by adding a fudge factor - 3ms seems to be sufficient.
+            */
+            if (totalTime > overallTime+3) {
+                fail(""Total: ""+totalTime+"" > 3 + overall time: ""+ overallTime);
             }
             
             // Check that calculator gets the correct statistics from the sample
```",Add fudge factor for overall time comparison,3,4,4,4,fix TestSampleResult üòÖ javadoc,0,0,2,0,"Fix: Adjust time calculation in testSubResults method In the testSubResults method of the TestSampleResult.java file, the time calculation has been adjusted to account for the granularity of System.currentTimeMillis(). A ""fudge factor"" of 3ms has been added to the overall time to allow for minor variations in the value returned by SampleResult#currentTimeInMillis(). This change ensures that the test accurately reflects the time taken by the HTTP sample and its sub-samples.",4,4,4,4,"fix: Allow 3ms tolerance in total time comparison
To accommodate minor variations in SampleResult#currentTimeInMillis() due to System.currentTimeMillis() granularity and nanoTime() offset calculation, this change introduces a 3ms tolerance in total time comparison.","fix: Tolerate 3ms variation in SampleResult#currentTimeInMillis()
System.currentTimeMillis() granularity and nanoTime() offset calculation can cause minor variations. This commit adds a 3ms fudge factor to account for this.",3.92,19.42,18.69,0.0,"fix: Relax timing comparison in TestSampleResult
The commit fixes a timing comparison issue in TestSampleResult by introducing a fudge factor of 3ms to account for the granularity of System.currentTimeMillis() and the nanoTime() offset calculation. This change ensures that the test does not fail due to minor variations in the value returned by SampleResult#currentTimeInMillis().",33.05,35.48,42.1,0.0
dfe51f026a532172863f27fd303cb26b0a48279d,apache/jmeter,,"File: src/core/org/apache/jmeter/services/FileServer.java
Status: modified
```diff
@@ -40,7 +40,6 @@
 import org.apache.jmeter.gui.JMeterFileFilter;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
-import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 /**
@@ -395,7 +394,7 @@ public synchronized void closeFile(String name) throws IOException {
     private void closeFile(String name, FileEntry fileEntry) throws IOException {
         if (fileEntry != null && fileEntry.inputOutputObject != null) {
             log.info(""Close: ""+name);
-            JOrphanUtils.closeQuietly(fileEntry.inputOutputObject);
+            fileEntry.inputOutputObject.close();
             fileEntry.inputOutputObject = null;
         }
     }
```",Don't swallow IOException,0,4,4,4,remove unnecessary call to closeQuietly,0,1,4,4,"Refactor: Replace JOrphanUtils.closeQuietly with direct close method in FileServer In the FileServer.java file, the closeFile method has been refactored. The use of JOrphanUtils.closeQuietly to close the fileEntry.inputOutputObject has been replaced with the direct close method. This change improves the internal structure of the code without altering its external behavior.",3,4,4,4,"refactor: Close input/output objects directly in FileServer
Replace JOrphanUtils.closeQuietly with direct close to simplify error handling and reduce dependencies on JOrphanUtils.","refactor: Use direct close instead of JOrphanUtils.closeQuietly
Removed dependency on JOrphanUtils and instead called close directly on the inputOutputObject in the closeFile method.",5.82,21.62,11.94,0.0,"refactor: Simplify closeFile method
Replace JOrphanUtils.closeQuietly with direct close method call to simplify the closeFile method implementation and make it more efficient.",7.75,26.67,15.06,0.0
420947c1d431f2ce795d13e995c79eec4ae8d040,apache/jmeter,,"File: src/core/org/apache/jmeter/engine/util/FunctionParser.java
Status: modified
```diff
@@ -134,9 +134,9 @@ Object makeFunction(StringReader reader) throws InvalidVariableException {
                         if (reader.read(current) == 0 || current[0] != '}') {
                             reader.reset();// set to start of string
                             char []cb = new char[100];
-                            reader.read(cb);// return deliberately ignored
+                            int nbRead = reader.read(cb);
                             throw new InvalidVariableException
-                            (""Expected } after ""+funcName+"" function call in ""+new String(cb));
+                            (""Expected } after ""+funcName+"" function call in ""+new String(cb, 0, nbRead));
                         }
                         if (function instanceof TestListener) {
                             StandardJMeterEngine.register((TestListener) function);
```",Read return value of read,0,3,4,3,add a variable to FunctionParser,0,1,4,4,"Refactor: Simplify failure message assignment in ResponseAssertion In the `getResult` method of `ResponseAssertion.java`, the assignment of the failure message in the `AssertionResult` object has been simplified. The failure message is now set using `response.responseDatatoString()` instead of `new String((byte[]) response.getResponseData())`. This change improves readability and maintainability of the code.",3,2,4,4,"fix: Fix reader.read() to properly handle return value
Prevent incorrect error messages by properly handling the return value of reader.read(), which was previously ignored, and ensure the correct substring is used when throwing an InvalidVariableException.","fix: Handle read count in FunctionParser's InvalidVariableException message
Previously, the exception message was truncated due to ignoring the read count. This fix ensures the correct error message is constructed.",2.84,9.2,9.11,0.0,"fix: Handle read result in FunctionParser
Fixed an issue in FunctionParser where the read result from the StringReader was ignored, leading to incorrect error messages. Now, the read result is properly handled and used to construct the error message.",3.14,17.98,15.03,0.0
72b574cefec3c12cc534f64fd14a26d093f84a1c,apache/jmeter,,"File: src/components/org/apache/jmeter/modifiers/CounterConfig.java
Status: modified
```diff
@@ -48,11 +48,11 @@ public class CounterConfig extends AbstractTestElement
 
     private final static String FORMAT = ""CounterConfig.format""; // $NON-NLS-1$
 
-    public final static String PER_USER = ""CounterConfig.per_user""; // $NON-NLS-1$
+    private final static String PER_USER = ""CounterConfig.per_user""; // $NON-NLS-1$
 
-    public final static String VAR_NAME = ""CounterConfig.name""; // $NON-NLS-1$
+    private final static String VAR_NAME = ""CounterConfig.name""; // $NON-NLS-1$
 
-    public final static String RESET_ON_THREAD_GROUP_ITERATION = ""CounterConfig.reset_on_tg_iteration""; // $NON-NLS-1$
+    private final static String RESET_ON_THREAD_GROUP_ITERATION = ""CounterConfig.reset_on_tg_iteration""; // $NON-NLS-1$
 
 	private static final boolean RESET_ON_THREAD_GROUP_ITERATION_DEFAULT = false;
 
```",make constants private as not used anywhere else,4,4,4,4,fix typo in CounterConfig,0,0,4,4,"Refactor: Change access modifiers of static variables in CounterConfig class The access modifiers of three static String variables (PER_USER, VAR_NAME, RESET_ON_THREAD_GROUP_ITERATION) in the CounterConfig class have been changed from public to private. This change is part of a refactoring effort to improve the encapsulation of the class.",4,4,4,4,"refactor: Make constants private
Change access modifier of constants to private to follow best practices and improve code consistency.","style: Make CounterConfig constants private
Changed public final static strings to private final static in CounterConfig.java",1.22,19.72,16.17,0.0,"refactor: Change access modifiers of static fields in CounterConfig
This commit changes the access modifiers of several static fields in the CounterConfig class from public to private, following best practices for encapsulation and data hiding. This refactoring improves the internal structure of the class without changing its observable behavior.",23.67,51.49,55.96,0.0
3eb16cd9abd44055599b6930028ca4d5b4cfefa9,apache/jmeter,,"File: src/core/org/apache/jmeter/testelement/property/NullProperty.java
Status: modified
```diff
@@ -48,6 +48,7 @@ public String getStringValue() {
     }
 
     public void setObjectValue(Object v) {
+        // NOOP
     }
 
     /**
@@ -81,7 +82,7 @@ public void mergeIn(JMeterProperty prop) {
     }
 
     @Override
-    public final NullProperty clone() {
+    public NullProperty clone() {
         return this;
     }
 
```",remove final on method as class is final,4,4,4,4,fix the build,0,0,4,4,"Refactor: Update setObjectValue and clone methods in NullProperty.java This commit adds a comment to the setObjectValue method indicating that it does nothing (NOOP), and modifies the clone method. The changes are made to improve the structure or design of the code without changing its behavior.",2,2,3,4,"refactor: Make setObjectValue no-op
Align setObjectValue with its intended no-op behavior, simplifying the implementation and clarifying its purpose as a placeholder or override for an abstract method.","feat: Add NOOP implementation for setObjectValue method in NullProperty
Also, remove final keyword from clone method.",3.78,16.67,14.44,0.0,"refactor: Improve NullProperty implementation
Refactored the NullProperty class to improve its implementation. Specifically, the setObjectValue method was modified to explicitly do nothing, making its behavior more explicit and consistent with its purpose as a no-op method.",7.7,22.22,23.74,0.0
8d609412395e97d79b09f18c2f0aded10bb055e4,apache/jmeter,,"File: src/protocol/native/org/apache/jmeter/protocol/system/NativeCommand.java
Status: modified
```diff
@@ -48,4 +48,4 @@ public NativeCommand(File directory, Map<String, String> env, String stdin, Stri
         super(directory, 0L, 100, env, stdin, stdout, stderr);
     }
 
-}
\ No newline at end of file
+}
```",Add EOL at EOF,4,4,4,3,fix checkstyle error,0,0,4,4,"Style: Add newline at end of NativeCommand.java This commit adds a newline at the end of the NativeCommand.java file. The change is purely stylistic and does not affect the functionality of the NativeCommand class, which executes system commands with specified environment variables and working directory.",4,4,2,4,"style: Add newline at end of file
Fixed file to have a newline character at the end.","style: Add newline at end of file
Fixed missing newline at the end of NativeCommand.java",6.1,34.92,26.1,0.0,"style: Remove trailing whitespace
Removed unnecessary newline at the end of the file to maintain consistent file formatting.",5.39,25.0,15.61,0.0
42167f08f0e35229f6446ab3942d83914a7cb241,apache/karaf,,"File: diagnostic/common/src/main/java/org/apache/karaf/diagnostic/common/ThreadDumpProvider.java
Status: modified
```diff
@@ -40,11 +40,12 @@ public ThreadDumpProvider() {
     protected void writeDump(OutputStreamWriter outputStream) throws Exception {_x000D_
         ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();_x000D_
 _x000D_
-        outputStream.write(""Number of threads: "" + threadMXBean.getDaemonThreadCount() + ""\n"");_x000D_
-        ThreadInfo[] threadDump = threadMXBean.dumpAllThreads(true, true);_x000D_
-        for (ThreadInfo threadInfo : threadDump) {_x000D_
+        outputStream.write(""Number of threads: "" + threadMXBean.getThreadCount() + ""\n"");_x000D_
+_x000D_
+        for (ThreadInfo threadInfo : threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(), Integer.MAX_VALUE)) {_x000D_
             outputStream.write(threadInfo.toString() + ""\n\n"");_x000D_
         }_x000D_
+_x000D_
     }_x000D_
 _x000D_
 }_x000D_
```",Fix build after adding diagnostic stuff,3,3,4,4,fix dump of ThreadDumpProvider,3,3,4,4,"Refactor: Improve completeness of thread dump information In the `writeDump` method of the `ThreadDumpProvider.java` file, the number of threads and their detailed information are now written to the output stream, instead of just the number of daemon threads. This change improves the completeness of the thread dump information provided by the method.",3,3,3,4,"fix: Use getThreadCount instead of getDaemonThreadCount in ThreadDumpProvider
This change uses `getThreadCount` instead of `getDaemonThreadCount` to ensure the thread dump includes all threads, not just daemon threads, as intended.","fix: Correct thread count in writeDump
Previously, the method was reporting the number of daemon threads instead of the total number of threads. This change fixes the issue by using getThreadCount.",4.84,19.75,18.62,0.0,"refactor: Update ThreadDumpProvider to use getThreadCount instead of getDaemonThreadCount
This commit refactors the writeDump method in ThreadDumpProvider to use getThreadCount instead of getDaemonThreadCount, providing a more accurate count of threads in the system. This change improves the accuracy of the thread dump information.",19.04,42.11,38.37,0.0
5ea93654cf709383c1d59012e749e0fa20e70ffb,apache/karaf,Y,"File: features/command/src/main/java/org/apache/karaf/features/command/InfoFeatureCommand.java
Status: modified
```diff
@@ -17,11 +17,9 @@
 package org.apache.karaf.features.command;
 
 import java.util.Iterator;
-import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import org.apache.karaf.features.Conditional;
 import org.apache.karaf.shell.commands.Argument;
```


File: features/command/src/main/java/org/apache/karaf/features/command/ListFeaturesCommand.java
Status: modified
```diff
@@ -16,7 +16,6 @@
  */
 package org.apache.karaf.features.command;
 
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
@@ -46,7 +45,7 @@ protected void doExecute(FeaturesService featuresService) throws Exception {
         table.column(""Version"");
         table.column(""Installed"");
         table.column(""Repository"");
-        table.column(""Description"");
+        table.column(""Description"").maxSize(50);
         table.emptyTableText(onlyInstalled ? ""No features installed"" : ""No features available"");
 
         List<Repository> repos = Arrays.asList(featuresService.listRepositories());
```",Limit size of description to avoid ugly layout,4,4,4,4,remove unused imports,0,0,4,4,"Refactor: Remove unused imports and limit description column size In this commit, unused imports are removed from the InfoFeatureCommand.java and ListFeaturesCommand.java files. Additionally, the size of the ""Description"" column in the ListFeaturesCommand.java file is set to 50 to improve the readability of the output. These changes are part of a code refactoring effort and do not alter the functionality of the affected classes.",4,4,4,4,"refactor: Clean up unused imports
Removed unnecessary imports to declutter the codebase and improve maintainability. This change reduces the likelihood of potential conflicts and makes the code easier to understand.","refactor: Simplify imports in feature commands
Removed unnecessary import statements in InfoFeatureCommand and ListFeaturesCommand classes to reduce clutter and improve code readability.",1.78,21.05,16.67,0.0,"refactor: Remove unnecessary imports in InfoFeatureCommand and ListFeaturesCommand
This commit removes unused import statements in two classes, InfoFeatureCommand and ListFeaturesCommand, to improve code organization and readability. No functional changes were made to the classes.",3.3,30.3,23.46,0.0
b220722c3652bf02ca00150d0decb2509b83adc0,apache/karaf,,"File: jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesLoginModule.java
Status: modified
```diff
@@ -59,9 +59,10 @@ public void initialize(Subject sub, CallbackHandler handler, Map sharedState, Ma
             LOGGER.debug(""Initialized debug={} usersFile={}"", debug, usersFile);
         }
        
-        if (propertiesInstaller == null || !usersFile.equals(propertiesInstaller.getUsersFileName()) ) {
+        if (propertiesInstaller == null 
+            || (usersFile != null && !usersFile.equals(propertiesInstaller.getUsersFileName())) ) {
        
-            LOG.debug(""Register PropertiesInstaller service"");
+            LOGGER.debug(""Register PropertiesInstaller service"");
             
             propertiesInstaller = new PropertiesInstaller(this, usersFile);
             if (this.bundleContext != null) {
```",add a NPE checker,4,3,4,4,fix potential npe,4,3,4,4,Fix: Update initialization of PropertiesInstaller in PropertiesLoginModule This commit modifies the initialize method in the PropertiesLoginModule class. The changes involve the initialization of the PropertiesInstaller service. The condition check for 'propertiesInstaller' and 'usersFile' has been updated to prevent potential null pointer exceptions. The debug log message has also been updated for consistency.,4,4,4,4,"fix: Handle null usersFile in PropertiesLoginModule
This change prevents NullPointerExceptions by ensuring the PropertiesInstaller service is only registered when usersFile is not null, thereby making the initialize method more robust.","refactor: Improve PropertiesLoginModule initialization
Add null check for usersFile to prevent unexpected behavior",5.22,19.75,14.77,0.0,"refactor: Improve PropertiesLoginModule initialization
Refactor the initialize method to handle null usersFile correctly. This change ensures that the PropertiesInstaller service is registered only when necessary, making the authentication module more efficient.",5.81,19.51,17.55,0.0
6d2764319c6a87420767b8604c3d12f5022200a8,apache/lenya,,"File: src/java/org/apache/lenya/cms/authoring/DefaultCreator.java
Status: modified
```diff
@@ -1,5 +1,5 @@
 /*
- * $Id: DefaultCreator.java,v 1.3 2003/02/07 12:14:07 ah Exp $
+ * $Id: DefaultCreator.java,v 1.4 2003/02/10 14:45:45 egliwyona Exp $
  * <License>
  * The Apache Software License
  *
@@ -195,7 +195,8 @@ public String generateTreeId(String childId, short childType)
      *
      * @throws Exception DOCUMENT ME!
      */
-    public void create(File samplesDir, File parentDir, String childId, short childType)
+    public void create(File samplesDir, File parentDir,
+		       String childId, short childType, String childName)
         throws Exception {
         String filename = null;
         String filenameMeta = null;
```",The signature of the create method of the parent class had changed. That's why client's would invoke the create of the parent class which does nothing. Adapted the create method to match the signature.,4,4,4,4,fix a bug in DefaultCreator,2,2,4,4,feat: add childName parameter to create method The 'create' method in the 'DefaultCreator.java' file has been modified to include an additional parameter 'childName'. This method now creates a new file and its corresponding metadata file based on the child type and copies the content from the sample files to these new files.,1,4,3,4,"feat: Add childName parameter to create method
Extend the create method to accept a childName parameter, enabling the creation of child nodes with custom names and improving the overall flexibility of the DefaultCreator class.","feat: Add childName parameter to create method
Introduce a new parameter to the create method in DefaultCreator, enabling the creation of new child nodes with custom names in the directory structure. This change enhances the flexibility of the method, allowing for more tailored node creation.",12.83,37.21,25.63,0.0,"feat: Add child name parameter to create method
This commit introduces a new feature to the DefaultCreator class by adding a child name parameter to the create method. This allows for more flexibility when creating new child nodes in the directory structure. The method now creates a new file and its corresponding metadata file based on the provided parameters, including the child name.",30.68,43.48,56.66,0.0
27c5bd80093d211c4935f7f845dc0d75fb491995,apache/lenya,,"File: src/java/org/apache/lenya/cms/workflow/WorkflowFactory.java
Status: modified
```diff
@@ -16,7 +16,6 @@
 import org.apache.lenya.workflow.*;
 import org.apache.lenya.workflow.Workflow;
 import org.apache.lenya.workflow.impl.WorkflowBuilder;
-import org.apache.lenya.workflow.impl.WorkflowImpl;
 import org.apache.lenya.xml.DocumentHelper;
 import org.apache.lenya.xml.NamespaceHelper;
 import org.w3c.dom.Element;
@@ -99,12 +98,4 @@ public Situation buildSituation(User user) throws WorkflowException {
         return new CMSSituation(user);
     }
     
-    /**
-     * Creates an event object for a given command.
-     */
-    public Event buildEvent(WorkflowInstance instance, String command) throws WorkflowException {
-        WorkflowImpl workflow = (WorkflowImpl) instance.getWorkflow();
-        return workflow.getEvent(command);
-    }
-    
 }
```",removed buildEvent() method,0,4,4,4,remove unused method,4,4,4,4,"Refactor: Remove unused method and import in WorkflowFactory class The `buildEvent` method and the `import org.apache.lenya.workflow.impl.WorkflowImpl;` statement were removed from the `WorkflowFactory.java` file. This class is used to create new instances of workflows, workflow situations, and workflow documents. The removed method was previously used to create events, but it is no longer needed. This change improves the structure of the code without altering its behavior.",4,4,2,4,"refactor: Remove unnecessary WorkflowImpl import and method
Removed unnecessary WorkflowImpl import and the associated buildEvent method, which is no longer required. This cleanup simplifies the WorkflowFactory class and eliminates dead code.","refactor: Remove buildEvent method from WorkflowFactory
The method was unused and has been removed to simplify the class.",3.06,27.72,22.79,0.0,"refactor: Remove unused import and method
This commit removes the unused import of WorkflowImpl and the buildEvent method, which is not used anywhere in the codebase. This refactoring simplifies the WorkflowFactory class and makes it easier to maintain.",4.6,25.93,23.9,0.0
dce9cd620ac1d508a684477d6cd3cef596ec7a04,apache/lenya,,"File: src/java/org/apache/lenya/cms/publication/DefaultDocument.java
Status: modified
```diff
@@ -43,6 +43,8 @@
  */
 package org.apache.lenya.cms.publication;
 
+import java.io.File;
+
 /**
  * A typical CMS document.
  * 
@@ -75,5 +77,25 @@ public String getId() {
     public Publication getPublication() {
         return publication;
     }
+    
+    /**
+     * Returns the file for this document in a certain area and language.
+     * @param area The area.
+     * @param language The language.
+     * @return A file object.
+     */
+    public File getFile(String area, String language) {
+        return getPublication().getPathMapper().getFile(
+            getPublication(), area, getId(), language);
+    }
+    
+    /**
+     * Returns the files for this document in a certain area and all languages.
+     * @param area The area.
+     * @return A file object.
+     */
+    public File[] getFiles(String area) {
+        return getPublication().getPathMapper().getFiles(getPublication(), area, getId());
+    }
 
 }
```",added file getters,3,4,4,4,add DefaultDocument getFile,3,4,3,4,"Feat: Add getFile and getFiles methods to DefaultDocument.java This commit introduces two new methods to the DefaultDocument.java file. The getFile method returns the file associated with a specific area and language in the publication, and the getFiles method returns an array of files for a specific area in the publication with the given ID. These methods enhance the functionality of the DefaultDocument class by providing more granular access to the files associated with a document in a publication.",4,4,4,4,"feat: Add getFile and getFiles methods to DefaultDocument
Added getFile and getFiles methods to DefaultDocument to provide a convenient way to access files associated with a document in a publication. These methods utilize the publication's path mapper to retrieve files based on area and language, enhancing the overall document management experience.","feat: Add file retrieval methods to DefaultDocument class
Introduce getFile and getFiles methods to provide access to files associated with a document in a publication, enabling further document manipulation and analysis.",19.96,33.85,39.16,0.0,"feat: Add file retrieval methods to DefaultDocument
This commit introduces two new methods to the DefaultDocument class: getFile(String area, String language) and getFiles(String area). These methods allow for retrieving files associated with a specific area and language, or all languages, respectively. This enhancement provides a more comprehensive document representation, enabling easier access to related files.",20.63,35.82,42.27,0.0
983e12d5005d8b7450e389f867269e170d3dfe89,apache/lenya,,"File: src/java/org/apache/lenya/cms/cocoon/components/modules/input/SitetreeModule.java
Status: modified
```diff
@@ -68,7 +68,7 @@ public Object getAttribute(String name, Configuration modeConf, Map objectModel)
             }
             
             if (name.equals(TRASH_NODE)) {
-                SiteTree authoringTree = publication.getSiteTree(Publication.TRASH_AREA);
+                SiteTree authoringTree = manager.getTree(Publication.TRASH_AREA);
                 value = authoringTree.getNode(envelope.getDocument().getId());
             }
         } catch (Exception e) {
```",Fixed my last checkin :),1,0,4,4,fix npe in SitetreeModule,0,0,4,4,"Refactor: Update method of accessing authoringTree in SitetreeModule In the `SitetreeModule.java` file, the method of accessing the `authoringTree` object has been updated. Previously, the `authoringTree` was obtained from the `publication` object. Now, it is obtained from the `manager` object. This change is a refactor aimed at improving the internal structure of the code without altering its external behavior.",4,4,4,4,"refactor: Use site manager to get authoring tree for trash node
Replaced direct publication site tree access with site manager retrieval in `SitetreeModule` to decouple dependencies and improve maintainability.","fix: Get site tree from manager instead of publication in SitetreeModule
Fixed the implementation of getAttribute method to correctly retrieve site tree nodes, ensuring consistency with the expected behavior.",2.03,6.9,8.52,0.0,"refactor: Update SitetreeModule to use manager for getting site tree
Changed the implementation of getAttribute method in SitetreeModule to retrieve site tree nodes from the manager instead of publication. This refactoring improves the internal structure of the module and makes it easier to understand and maintain.",11.48,26.92,33.79,0.0
77eb1cd2c02961e62c50caf61d944ea835aac41c,apache/lenya,,"File: src/java/org/apache/lenya/cms/cocoon/source/SourceUtil.java
Status: modified
```diff
@@ -30,7 +30,7 @@
 
 import org.apache.avalon.framework.service.ServiceException;
 import org.apache.avalon.framework.service.ServiceManager;
-import org.apache.commons.io.CopyUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.output.ByteArrayOutputStream;
 import org.apache.excalibur.source.ModifiableSource;
 import org.apache.excalibur.source.Source;
@@ -75,10 +75,10 @@ public static void copy(Source source, ModifiableSource destination, boolean use
 
             if (useBuffer) {
                 final ByteArrayOutputStream sourceBos = new ByteArrayOutputStream();
-                CopyUtils.copy(sourceInputStream, sourceBos);
-                CopyUtils.copy(sourceBos.toByteArray(), destOutputStream);
+                IOUtils.copy(sourceInputStream, sourceBos);
+                IOUtils.write(sourceBos.toByteArray(), destOutputStream);
             } else {
-                CopyUtils.copy(sourceInputStream, destOutputStream);
+                IOUtils.copy(sourceInputStream, destOutputStream);
             }
         } finally {
             if (destOutputStream != null) {
```",Use IOUtils instead of deprecated CopyUtils.,4,4,4,4,fix a bug in SourceUtil,0,1,4,4,"Refactor: Replace CopyUtils with IOUtils in SourceUtil In the SourceUtil class, the CopyUtils.copy method has been replaced with IOUtils.copy and IOUtils.write methods. This change is made in the copy method which is responsible for copying data from a source to a destination, with an option to use a buffer for the operation. The functionality of the SourceUtil class remains the same, providing methods for handling and manipulating sources, such as checking existence, reading, and writing.",4,4,1,4,"refactor: Replace CopyUtils with IOUtils for source copying
Replaced CopyUtils with IOUtils for source copying, aligning with the Apache Commons IO package's recommended utility class for stream operations.","refactor: Use IOUtils instead of CopyUtils in SourceUtil
Updated the copy method to leverage IOUtils for efficient data copying from a source to a destination, replacing the previous implementation with CopyUtils.",2.96,26.67,13.58,0.0,"refactor: Replace CopyUtils with IOUtils in SourceUtil
This commit replaces the usage of CopyUtils with IOUtils in the copy method of SourceUtil class. This change improves the internal structure of the code, making it more maintainable and efficient.",8.92,33.04,22.29,0.0
4f42be43b3cf21f5f08fdd0d7c4b9c777f56b1a3,apache/lenya,,"File: src/modules/repository/java/test/org/apache/lenya/cms/repo/RepositoryTest.java
Status: modified
```diff
@@ -28,7 +28,7 @@
 /**
  * JCR repository test.
  */
-public class RepositoryTest extends TestCase {
+public abstract class RepositoryTest extends TestCase {
 
     protected static final String AREA_ID = ""authoring"";
     protected static final String PUBLICATION_ID = ""test"";
@@ -43,7 +43,7 @@ public RepositoryTest() {
         setWebappDirectory(System.getProperty(""test.repo.webappDirectory""));
         setRepositoryFactory(System.getProperty(""test.repo.repositoryFactory""));
     }
-
+    
     private String webappDirectory;
     private String repositoryFactory;
 
```",Made RepositoryTest abstract so it isn't executed by Junit,4,4,4,4,make RepositoryTest abstract,1,4,4,4,"Refactor: Make RepositoryTest class abstract The `RepositoryTest` class, used for testing the functionality of a JCR repository and setting up and managing a test repository for a web application, has been made abstract. This change does not affect any methods within the class.",4,4,4,4,"refactor: Make RepositoryTest abstract
To enable inheritance and facilitate testing of repository-related functionality, this change makes RepositoryTest an abstract class.","refactor: Convert RepositoryTest to abstract base class
This change enables more flexibility and extensibility in testing repository-related functionality.",5.06,25.81,25.51,0.0,"refactor: Make RepositoryTest abstract
This change modifies the RepositoryTest class to be abstract, providing a base class for testing repository-related functionality. This refactoring improves the internal structure of the code, making it easier to understand and modify.",10.17,27.85,35.62,0.0
b09b1c16b61a1a39aa6b6c371ba76d9d812e335c,apache/lenya,,"File: src/modules-core/observation-impl/java/test/org/apache/lenya/cms/observation/ObservationTest.java
Status: modified
```diff
@@ -92,6 +92,7 @@ protected void testListener(Document doc, TestListener listener) throws Exceptio
         Thread.currentThread().sleep(100);
         
         assertTrue(listener.wasNotified());
+        listener.reset();
     }
 
 }
```",Resetting listener after test,2,4,4,4,fix unit test,0,1,4,4,"Fix: Reset listener in testListener method In the `testListener` method of the `ObservationTest.java` file, a line of code was added to reset the listener after it gets notified. This ensures that the listener is ready for the next notification. This change is classified as a 'Fix', suggesting that it corrects an issue or bug.",4,4,4,4,"refactor: Add listener reset in testListener method
Add listener reset to ensure a clean state for subsequent test runs.","fix: Reset TestListener after notification
Prevent false positives in subsequent tests by ensuring the TestListener is reset after being notified.",1.43,13.7,10.34,0.0,"refactor: Improve testListener method
Added a reset call to the testListener method to ensure it is properly reset after each test, making the test more reliable and robust.",3.64,19.51,16.46,0.0
cf66909a1c442b36ae3fc2324c1c55823f6f260e,apache/lenya,,"File: src/modules/lucene/java/src/org/apache/lenya/cms/lucene/IndexUpdater.java
Status: modified
```diff
@@ -28,7 +28,6 @@
 import org.apache.lenya.cms.observation.ObservationRegistry;
 import org.apache.lenya.cms.observation.RepositoryEvent;
 import org.apache.lenya.cms.observation.RepositoryListener;
-import org.apache.lenya.cms.publication.Document;
 
 /**
  * Index updater which updates the index when a document changes.
```",[minor change] removed unused import,4,4,4,4,remove unused import,4,4,4,4,Refactor: Remove unused import in IndexUpdater.java This commit removes an unused import statement in the IndexUpdater.java file. The removed import is for the Document class. This change is a part of code refactoring and does not affect the functionality of the code.,4,4,4,4,"refactor: Remove unused import of Document
No functional changes were introduced by this commit, as the removed import was not being utilized in the IndexUpdater class.","style: Remove unused import of Document
Removed unnecessary import of org.apache.lenya.cms.publication.Document in IndexUpdater.java",10.41,31.88,29.68,0.0,"refactor: Remove unused import statement
Removed the unused import statement for org.apache.lenya.cms.publication.Document in IndexUpdater.java, cleaning up the code and reducing unnecessary dependencies.",15.24,36.62,26.14,0.0
c90b7af96858006bd95e2faa3040a0588c809eba,apache/lenya,,"File: src/modules-core/sitemanagement/java/src/org/apache/lenya/cms/site/usecases/Assets.java
Status: modified
```diff
@@ -114,7 +114,7 @@ protected Document[] getResourceDocuments() throws DocumentException {
         Document[] docs = getSourceDocument().area().getDocuments();
         for (int i = 0; i < docs.length; i++) {
             if (docs[i].getResourceType().getName().equals(""resource"")) {
-                list.add(docs);
+                list.add(docs[i]);
             }
         }
         return (Document[]) list.toArray(new Document[list.size()]);
```",add single resource Doc and not all docs in area to the ArrayList for each resource,0,4,4,4,fix bug in Assets,1,2,4,4,"Fix: Corrected element addition in getResourceDocuments method In the 'getResourceDocuments' method of the 'Assets.java' file, corrected the addition of elements to the list. Previously, the entire 'docs' array was being added to the list. This has been fixed to add only the current element 'docs[i]'. This change ensures that the method correctly returns an array of documents that have a resource type of ""resource"" from the source document's area.",4,4,4,4,"fix: Fix list addition in getResourceDocuments method
Prevents incorrect list population by adding individual documents of type 'resource' instead of the entire array, ensuring accurate results from getResourceDocuments method.","fix: Add individual documents to getResourceDocuments()
Changed the implementation to iterate over the array and add each document individually, instead of adding the entire array.",2.79,20.41,15.31,0.0,"fix: Correctly add resource documents to list
In the getResourceDocuments method, the entire array of documents was being added to the list instead of individual documents. This commit fixes the issue by adding each document separately, ensuring that only resource documents are returned.",11.29,32.14,29.61,0.0
f3c5e70e7f9cdc18ac0dcef205bc5fcacdee2bf7,apache/lenya,,"File: src/java/org/apache/lenya/cms/publication/DocumentLocator.java
Status: modified
```diff
@@ -38,10 +38,8 @@ public class DocumentLocator {
      */
     public static DocumentLocator getLocator(String pubId, String area, String path, String language) {
         String key = DocumentLocator.getKey(pubId, area, path, language);
-        DocumentLocator locator = null;
-        if (locators.containsKey(key)) {
-            locator = (DocumentLocator) locators.get(key);
-        } else {
+        DocumentLocator locator = (DocumentLocator) locators.get(key);
+        if (locator == null) {
             locator = new DocumentLocator(pubId, area, path, language);
             locators.put(key, locator);
         }
```",Avoid returning null-value DocumentLocator objects,1,4,4,4,fix quality flaw,0,0,4,4,"Refactor: Simplify the existence check in getLocator method The `getLocator` method in the `DocumentLocator` class has been refactored. The old code first checked if a key exists in the `locators` map and then retrieved the value associated with the key. The new code directly retrieves the value associated with the key and then checks if the retrieved value is null. This change simplifies the code and improves its readability. The functionality of the method remains the same: it returns a `DocumentLocator` for the given parameters. If a `DocumentLocator` for these parameters does not exist, a new one is created, stored, and then returned.",4,4,4,4,"refactor: Remove unnecessary null checks from getLocator method
Removed redundant null checks, as the method's logic ensures that the locator is always initialized or retrieved from the cache before being returned.","refactor: Simplify getLocator method implementation to reduce redundancy
Remove unnecessary null check and optimize the logic for creating a new DocumentLocator instance, making the code more concise and efficient.",0.59,10.53,10.51,0.0,"refactor: Simplify getLocator method
The getLocator method has been refactored to reduce unnecessary null checks and improve code readability. The method's functionality remains the same, but the implementation is now more concise and efficient.",1.9,27.94,19.21,0.0
27c0a1556a47a2c594aece3c355e891ff4f19836,apache/logging-log4j2,,"File: log4j2-core/src/main/java/org/apache/logging/log4j/core/Appender.java
Status: modified
```diff
@@ -65,12 +65,6 @@ public interface Appender extends Lifecycle {
      */
     boolean requiresLayout();
 
-    /**
-     * Returns a Filter if one is present.
-     * @return the Filter or null if no Filter is associated with the Appender.
-     */
-    Filter getFilter();
-
     /**
      * If set to true any exceptions thrown by the Appender will be logged but not thrown.
      * @return true if Exceptions should be suppressed, false otherwise.
```",Remove getFilter method inadvertantly left in,4,4,4,4,remove unused method,4,4,4,4,"Refactor: Remove getFilter method from Appender class The getFilter method was removed from the Appender class in the log4j2-core module. This change is part of a refactor and affects how filters are managed in the Appender class. The Appender class is responsible for handling logging events, managing exceptions, and configuring layouts for logging.",2,4,3,4,"refactor: Remove getFilter method from Appender interface
Remove unnecessary method to simplify the Appender interface. This method was not implemented in the current codebase.","refactor: Remove unused getFilter method from Appender interface
This method was not referenced anywhere, simplifying the interface.",8.89,31.58,16.83,0.0,"refactor: Remove getFilter method from Appender interface
The getFilter method has been removed from the Appender interface, as it is no longer needed. This change simplifies the interface and reduces unnecessary complexity.",15.18,38.1,30.86,0.0
45776f1f16a197428c3cb02520e9d1b28ab4dff6,apache/logging-log4j2,,"File: core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java
Status: modified
```diff
@@ -16,6 +16,8 @@
  */
 package org.apache.logging.log4j.core.appender;
 
+import java.util.Locale;
+
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -87,7 +89,7 @@ public static SocketAppender createAppender(@PluginAttr(""host"") String host,
     }
 
     protected static AbstractSocketManager createSocketManager(String protocol, String host, int port, int delay) {
-        Protocol p = Protocol.valueOf(protocol.toUpperCase());
+        Protocol p = Protocol.valueOf(protocol.toUpperCase(Locale.ENGLISH));
         switch (p) {
             case TCP:
                 return TCPSocketManager.getSocketManager(host, port, delay);
```",Avoid problems on the Turkish Locale.,4,4,4,4,use the correct locale in SocketAppender,4,4,4,4,Refactor: Use Locale.ENGLISH in toUpperCase method call in SocketAppender This commit refactors the `createSocketManager` method in the `SocketAppender.java` file. The `toUpperCase` method call was changed to use `Locale.ENGLISH` to ensure consistent behavior across different locales. This change does not alter the external behavior of the method.,4,4,4,4,"refactor: Specify locale in Protocol.valueOf
Specify the locale in Protocol.valueOf to ensure consistent parsing of protocol strings, avoiding potential issues with case-insensitive locales.","fix: Use Locale.ENGLISH for toUpperCase in createSocketManager
Prevents potential locale-based issues in createSocketManager by using Locale.ENGLISH for toUpperCase.",4.43,24.66,16.03,0.0,"refactor: Improve locale handling in SocketAppender
This commit refactors the createSocketManager method in SocketAppender to use Locale.ENGLISH when converting the protocol to uppercase, ensuring consistent behavior across different locales.",21.59,51.28,36.54,0.0
f0665f7f3807575bf510786b184486262db1e2e1,apache/logging-log4j2,,"File: core/src/main/java/org/apache/logging/log4j/core/config/plugins/ResolverUtil.java
Status: modified
```diff
@@ -276,7 +276,8 @@ public void findInPackage(final Test test, String packageName) {
     }
 
     private void loadImplementationsInBundle(final Test test, final String packageName) {
-        final BundleWiring wiring = FrameworkUtil.getBundle(ResolverUtil.class).adapt(BundleWiring.class);
+        //Do not remove the cast on the next line as removing it will cause a compile error on Java 7.
+        final BundleWiring wiring = (BundleWiring)FrameworkUtil.getBundle(ResolverUtil.class).adapt(BundleWiring.class);
         final Collection<String> list = wiring.listResources(packageName, ""*.class"", BundleWiring.LISTRESOURCES_RECURSE);
         for (final String name : list) {
             addIfMatching(test, name);
```","Revert change to remove ""unnecessary"" cast. Compile fails on OS/X in Java 7 without it.",4,4,4,4,fix ResolverUtil loadImplementationsInBundle,1,1,4,4,"Refactor: Add cast for Java 7 compatibility in ResolverUtil In the 'loadImplementationsInBundle' method of the 'ResolverUtil.java' file, a cast has been added to the return value of a method call. This change ensures compatibility with Java 7. The method is used to load classes from a package in a bundle that match a given test condition.",4,4,3,4,"fix: Add explicit cast to FrameworkUtil result in loadImplementationsInBundle
Explicitly cast FrameworkUtil result to BundleWiring to prevent compile errors on Java 7, ensuring backwards compatibility with older Java versions.","fix: Cast FrameworkUtil.getBundle to avoid Java 7 compile error
Added explicit cast to BundleWiring in loadImplementationsInBundle method of ResolverUtil to prevent compile errors on Java 7.",2.91,18.82,16.45,0.0,"refactor: Add explicit cast to BundleWiring in ResolverUtil
This commit adds an explicit cast to BundleWiring in the loadImplementationsInBundle method of ResolverUtil to avoid a potential compile error on Java 7. The functionality of the method remains unchanged.",13.05,34.04,26.63,0.0
a61bbe965d014f8d36ec59713e20ebee8cf07ff1,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
Status: modified
```diff
@@ -112,6 +112,8 @@ public abstract class ConfigurationFactory {
      * @return the ConfigurationFactory.
      */
     public static ConfigurationFactory getInstance() {
+        // volatile works in Java 1.6+, so double-checked locking also works properly
+        //noinspection DoubleCheckedLocking
         if (factories == null) {
             synchronized(TEST_PREFIX) {
                 if (factories == null) {
```",Add comment regarding proper double-checked locking. Quiets the static code analyzers.,4,4,4,3,fix ConfigurationFactory getInstance,0,0,4,4,Refactor: Add comments to getInstance() method in ConfigurationFactory class This commit adds two lines of comments to the getInstance() method in the ConfigurationFactory class. The comments explain the use of volatile and double-checked locking in the method. The functionality of the method remains the same.,4,4,4,4,"refactor: Ensure thread-safety in getInstance() using double-checked locking
Previously, the getInstance() method was not thread-safe. This refactor introduces double-checked locking to ensure thread-safety when lazily initializing the singleton instance of the configuration factory. This change prevents potential concurrency issues and ensures the correct behavior of the getInstance() method in multi-threaded environments.","refactor: Add double-checked locking to getInstance() for thread-safety
Ensure lazy initialization of ConfigurationFactory is thread-safe by introducing double-checked locking in getInstance() method.",10.62,25.26,26.67,0.0,"refactor: Improve thread-safety in ConfigurationFactory getInstance
This commit refactors the getInstance method in ConfigurationFactory to use double-checked locking, ensuring thread-safety. The change improves the internal structure of the method without changing its observable behavior.",14.6,43.59,27.22,0.0
8ee19f2d2c54c10a99ff53c62c97b96953e60358,apache/logging-log4j2,,"File: log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java
Status: modified
```diff
@@ -67,7 +67,7 @@ public void testAppender() throws Exception {
         final File dir = new File(DIR);
         assertTrue(""Directory not created"", dir.exists() && dir.listFiles().length > 0);
 
-        final int MAX_TRIES = 10;
+        final int MAX_TRIES = 20;
         for (int i = 0; i < MAX_TRIES; i++) {
             final File[] files = dir.listFiles();
             assertTrue(""No files created"", files.length > 0);
@@ -76,7 +76,8 @@ public void testAppender() throws Exception {
                     return; // test succeeded
                 }
             }
-            Thread.sleep(50); // Allow time for rollover to complete
+            logger.debug(""Adding additional event "" + i);
+            Thread.sleep(100); // Allow time for rollover to complete
         }
         fail(""No compressed files found"");
     }
```",additional fix to prevent spurious test failures,4,2,4,4,fix unit test,2,2,4,4,"Fix: Increase tries and sleep time in testAppender() In the testAppender() method of the RollingAppenderTimeTest.java file, the number of tries was increased from 10 to 20 to ensure the test has enough attempts to pass. A debug log statement was added for better tracking of the test progress. The sleep time was also increased from 50 to 100 to allow more time for the rollover to complete. These changes aim to improve the reliability of the test.",4,4,4,4,"refactor: Increase timeout for rollover completion in RollingAppenderTimeTest
Increase the timeout in RollingAppenderTimeTest to accommodate the slower rollover completion process. This change allows the test to wait longer for the rollover to complete, reducing the likelihood of false failures.","refactor: Improve RollingAppenderTimeTest reliability
Increase MAX_TRIES to 20 and add debug logging to help diagnose issues, allowing more time for rollover to complete.",5.39,27.59,13.65,0.0,"refactor: Improve rolling appender time test
Increase the MAX_TRIES from 10 to 20 and add a debug log to provide more visibility into the test execution. This change aims to make the test more robust and reliable.",5.29,27.83,23.53,0.0
0645447e8bfd7136f00d32b72ea9db2a304a2897,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java
Status: modified
```diff
@@ -238,20 +238,23 @@ public String toString() {
 
     /**
      * Create a pattern layout.
-     *
+     * 
      * @param pattern
-     *            The pattern. If not specified, defaults to DEFAULT_CONVERSION_PATTERN.
+     *        The pattern. If not specified, defaults to DEFAULT_CONVERSION_PATTERN.
      * @param config
-     *            The Configuration. Some Converters require access to the Interpolator.
+     *        The Configuration. Some Converters require access to the Interpolator.
      * @param replace
-     *            A Regex replacement String.
+     *        A Regex replacement String.
      * @param charsetName
-     *            The character set.
+     *        The character set.
      * @param always
-     *            If {@code ""true""} (default) exceptions are always written even if the pattern contains no exception
-     *            tokens.
+     *        If {@code ""true""} (default) exceptions are always written even if the pattern contains no exception tokens.
      * @param noConsoleNoAnsiStr
-     *            If {@code ""true""} (default is false) and {@link System#console()} is null, do not output ANSI escape codes
+     *        If {@code ""true""} (default is false) and {@link System#console()} is null, do not output ANSI escape codes
+     * @param header
+     *        The footer to place at the end of the document, once.
+     * @param footer
+     *        The footer to place at the top of the document, once.
      * @return The PatternLayout.
      */
     @PluginFactory
```",Add missing Javadoc tags.,4,4,4,4,fix PatternLayout javadoc,4,3,4,4,"Style: Refactor comments and add parameters in PatternLayout The comments in the PatternLayout class have been reformatted for better readability. Additionally, two new parameters, 'header' and 'footer', have been added to a method. These changes do not affect the functionality of the class.",4,4,4,4,"refactor: Introduce header and footer options to PatternLayout constructor
Allow users to customize the layout of log events by introducing optional header and footer parameters to the PatternLayout constructor, providing more control over the output format.","refactor: Add header and footer parameters to PatternLayout constructor
Updated Javadoc comments to reflect new parameters.",7.07,25.64,21.32,0.0,"refactor: Improve PatternLayout constructor documentation
This commit refactors the documentation of the PatternLayout constructor by reformatting the Javadoc comments to improve readability. Two new parameters, header and footer, are also added to the constructor.",17.05,39.47,39.84,0.0
1f7b97e92461f0943b8d1ba0f02ef289ee4c09a2,apache/logging-log4j2,,"File: log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java
Status: modified
```diff
@@ -63,9 +63,11 @@ public final class StatusLogger extends AbstractLogger {
     private final SimpleLogger logger;
 
     private final Collection<StatusListener> listeners = new CopyOnWriteArrayList<StatusListener>();
+    @SuppressWarnings(""NonSerializableFieldInSerializableClass"") // ReentrantReadWriteLock is Serializable
     private final ReadWriteLock listenersLock = new ReentrantReadWriteLock();
 
     private final Queue<StatusData> messages = new BoundedQueue<StatusData>(MAX_ENTRIES);
+    @SuppressWarnings(""NonSerializableFieldInSerializableClass"") // ReentrantLock is Serializable
     private final Lock msgLock = new ReentrantLock();
 
     private int listenersLevel;
```",Suppress serialization warnings where applicable.,0,4,4,4,suppress unchecked warning,0,1,4,4,Style: Add annotations to suppress warnings in StatusLogger class This commit adds two annotations to suppress warnings for non-serializable fields in the StatusLogger class. The StatusLogger class is responsible for recording and managing logging system events. The added annotations improve the style of the code and do not affect its functionality.,4,4,4,4,"refactor: Introduce thread-safe locking for listeners and messages
Ensured thread safety in StatusLogger by introducing locking mechanisms for listeners and messages, utilizing CopyOnWriteArrayList and ReentrantReadWriteLock/ReentrantLock to prevent concurrent modifications and guarantee safe access.","refactor: Add thread safety locks to StatusLogger
Introduced ReentrantReadWriteLock and ReentrantLock to ensure thread safety in StatusLogger, making it more robust and concurrent-access-friendly.",3.36,14.46,7.71,0.0,"refactor: Improve synchronization in StatusLogger
Added ReadWriteLock and Lock to ensure thread safety in StatusLogger. This change improves the internal structure of the class to make it more robust and easier to maintain.",4.37,19.28,19.06,0.0
7831dde2eb0d0aa371639f8984b7a8b9f1b3aa53,apache/logging-log4j2,,"File: log4j-core/src/test/java/org/apache/logging/log4j/core/net/ssl/SslConfigurationTest.java
Status: modified
```diff
@@ -41,7 +41,7 @@ public void emptyConfigurationHasDefaultTrustStore() throws IOException {
         final SslConfiguration sc = SslConfiguration.createSSLConfiguration(null, null, null);
         final SSLSocketFactory factory = sc.getSslSocketFactory();
         final SSLSocket clientSocket = (SSLSocket) factory.createSocket(TLS_TEST_HOST, TLS_TEST_PORT);
-        Assert.assertTrue(true);
+        Assert.assertNotNull(clientSocket);
     }
 
     @Test(expected = IOException.class)
```",Clearer test assertion.,0,1,4,4,fix failing test,0,0,4,4,"Fix: Correct assertion in SslConfigurationTest In the method emptyConfigurationHasDefaultTrustStore() of the SslConfigurationTest.java file, the assertion has been corrected. Previously, the assertion was always passing (Assert.assertTrue(true)), which did not correctly test the functionality. The assertion has been replaced with Assert.assertNotNull(clientSocket) to ensure that the clientSocket is not null when the default trust store is used with an empty SSL configuration.",4,4,4,4,"fix: Update Assert statement to assertNotNull in SslConfigurationTest
Changed the assertion in SslConfigurationTest to assertNotNull, ensuring the test correctly verifies the default trust store behavior when no custom trust store settings are provided.","fix: Verify default trust store in emptyConfigurationHasDefaultTrustStore test
Update assertion to assertNotNull, ensuring an SSL configuration with no custom trust store settings defaults to the system trust store.",6.01,21.28,22.55,0.0,"fix: Improve assertion in SslConfigurationTest
The assertion in the emptyConfigurationHasDefaultTrustStore method was strengthened to verify that an SSL configuration with no custom trust store settings defaults to the JVM's truststore. This change ensures that the test is more robust and accurate.",4.5,23.53,28.33,0.0
d2aea7458f08e8b9d48f3768b719aafaf4246007,apache/logging-log4j2,,"File: log4j-core/src/test/java/org/apache/logging/log4j/core/selector/TestClassLoader.java
Status: modified
```diff
@@ -22,10 +22,10 @@
 import java.net.URL;
 import java.net.URLConnection;
 
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.core.util.Closer;
 import org.apache.logging.log4j.core.util.Throwables;
 import org.apache.logging.log4j.util.LoaderUtil;
-import sun.misc.IOUtils;
 
 /**
  * ClassLoader that loads class in this package (or sub-package) by hand, otherwise delegating to the TCCL.
@@ -57,10 +57,9 @@ protected Class<?> findClass(final String name) throws ClassNotFoundException {
             final URLConnection uc = resource.openConnection();
             final int len = uc.getContentLength();
             final InputStream in = new BufferedInputStream(uc.getInputStream());
-            byte[] bytecode;
+            byte[] bytecode = new byte[len];
             try {
-                // laziness means using sun.misc
-                bytecode = IOUtils.readFully(in, len, true);
+                IOUtils.readFully(in, bytecode);
             } finally {
                 Closer.closeSilently(in);
             }
```",Use Apache Commons IOUtils instead of sun.misc.IOUtils.,0,4,4,4,remove unnecessary code,0,0,4,4,"Refactor: Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils in TestClassLoader This commit refactors the TestClassLoader class by replacing the sun.misc.IOUtils with org.apache.commons.io.IOUtils. The change is made in the findClass method, which finds and loads the class with the specified name. The way the class file is loaded into a byte array has been modified. The commit does not change the functionality of the method or the class.",4,4,4,4,"refactor: Refactor TestClassLoader to use Apache Commons IOUtils
Switched to Apache Commons IOUtils for improved maintainability and to avoid using a proprietary Sun class.","refactor: Use org.apache.commons.io.IOUtils instead of sun.misc.IOUtils
Updated TestClassLoader to read bytecode from a URL connection using the Apache Commons IOUtils, replacing the sun.misc.IOUtils dependency.",0.57,18.18,8.37,0.0,"refactor: Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils
This commit replaces the usage of sun.misc.IOUtils with org.apache.commons.io.IOUtils in the TestClassLoader class. This change is a refactoring of the internal structure of the code to make it more maintainable and easier to understand.",35.22,46.03,24.2,0.0
efa163b9a33a8c9bbe948e4de629fdbafccd0783,apache/logging-log4j2,,"File: log4j-core/src/test/java/org/apache/logging/log4j/junit/LoggerContextRule.java
Status: modified
```diff
@@ -40,6 +40,8 @@
  */
 public class LoggerContextRule implements TestRule {
 
+    private static final String SYS_PROP_KEY_DISPLAY_NAME = ""org.apache.logging.log4j.junit.LoggerContextRule#DisplayName"";
+    private static final String SYS_PROP_KEY_CLASS_NAME = ""org.apache.logging.log4j.junit.LoggerContextRule#ClassName"";
     private final String configLocation;
     private final Class<? extends ContextSelector> contextSelectorClass;
 
@@ -81,6 +83,8 @@ public void evaluate() throws Throwable {
                 if (contextSelectorClass != null) {
                     System.setProperty(Constants.LOG4J_CONTEXT_SELECTOR, contextSelectorClass.getName());
                 }
+                System.setProperty(SYS_PROP_KEY_CLASS_NAME, description.getClassName());
+                System.setProperty(SYS_PROP_KEY_DISPLAY_NAME, description.getDisplayName());
                 context = Configurator.initialize(
                     description.getDisplayName(),
                     description.getTestClass().getClassLoader(),
@@ -92,6 +96,8 @@ public void evaluate() throws Throwable {
                     Configurator.shutdown(context);
                     StatusLogger.getLogger().reset();
                     System.clearProperty(Constants.LOG4J_CONTEXT_SELECTOR);
+                    System.clearProperty(SYS_PROP_KEY_CLASS_NAME);
+                    System.clearProperty(SYS_PROP_KEY_DISPLAY_NAME);
                 }
             }
         };
```",Set the class name and display name when executing a rule. This is to let configuration files to be more flexible in a large test suite. For example: I want to use one log file per test class.,4,4,4,4,add support for LoggerContextRule class,0,1,4,4,"Feat: Add new system properties to LoggerContextRule This commit adds two new system properties to the LoggerContextRule class in the log4j-core module. These properties, SYS_PROP_KEY_DISPLAY_NAME and SYS_PROP_KEY_CLASS_NAME, are set and cleared in the apply method. This method sets up and tears down the Log4J context for each test. The addition of these properties does not change the overall functionality of the method.",4,4,4,4,"refactor: Add test class name and display name system properties
This change adds test class name and display name as system properties, allowing for more informative logging and easier debugging of test failures. It also ensures these properties are properly cleared after test execution to prevent interference with subsequent tests.","refactor: Add system properties for test class name and display name
Update LoggerContextRule to set and clear system properties for test class name and display name, improving logging context management for JUnit tests.",3.41,18.49,17.72,0.0,"refactor: Enhance LoggerContextRule to set system properties
This commit refactors the LoggerContextRule class to set system properties for test class names and display names before executing the test, and clears them afterwards. This change allows for custom logging configurations and context selectors to be used during JUnit tests.",4.18,20.51,21.68,0.0
856607faf268136fc6f2e27cf3716a5e16a0f48d,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Status: modified
```diff
@@ -549,4 +549,20 @@ public String toString() {
         return ""DefaultRolloverStrategy(min="" + minIndex + "", max="" + maxIndex + ')';
     }
 
+    public boolean isUseMax() {
+        return useMax;
+    }
+
+    public StrSubstitutor getSubst() {
+        return subst;
+    }
+
+    public List<Action> getCustomActions() {
+        return customActions;
+    }
+
+    public boolean isStopCustomActionsOnError() {
+        return stopCustomActionsOnError;
+    }
+
 }
```",Add getters for private ivars.,4,4,4,3,add isUseMax to DefaultRolloverStrategy,0,1,4,4,"Feat: Add getter methods to DefaultRolloverStrategy class This commit adds several getter methods to the DefaultRolloverStrategy class. These methods provide access to the properties of the class, including useMax, subst, customActions, and stopCustomActionsOnError. The addition of these methods enhances the functionality of the DefaultRolloverStrategy class, which is responsible for managing the renaming and deletion of log files.",4,4,4,4,"feat: Expose custom actions and rollover strategy properties
Expose internal properties of DefaultRolloverStrategy to allow for more advanced customization and configuration of log file rollover and compression strategies, including custom actions and rollover strategy properties.","feat: Expose DefaultRolloverStrategy properties through getters
Add getters for useMax, subst, customActions, and stopCustomActionsOnError to provide more flexibility in configuring and customizing the DefaultRolloverStrategy.",3.55,17.58,15.76,0.0,"feat: Add getter methods to DefaultRolloverStrategy
This commit introduces new getter methods to the DefaultRolloverStrategy class, allowing for more flexibility and customization. The added methods include isUseMax, getSubst, getCustomActions, and isStopCustomActionsOnError, which provide access to underlying configuration and behavior.",17.5,35.79,32.65,0.0
11ab37bcc2c070c5baae055969aabfc403fe4163,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java
Status: modified
```diff
@@ -343,21 +343,17 @@ public void mergePropertiesIntoContextMap(final Map<Property, Boolean> propertie
      * Release references held by ring buffer to allow objects to be garbage-collected.
      */
     public void clear() {
-        setValues(null, // asyncLogger
-                null, // loggerName
-                null, // marker
-                null, // fqcn
-                null, // level
-                null, // data
-                null, // t
-                null, // map
-                null, // contextStack
-                0, // threadName
-                null, // location
-                0, // currentTimeMillis
-                null,
-                0, 0 // nanoTime
-        );
+        this.asyncLogger = null;
+        this.loggerName = null;
+        this.marker = null;
+        this.fqcn = null;
+        this.level = null;
+        this.message = null;
+        this.thrown = null;
+        this.thrownProxy = null;
+        this.contextMap = null;
+        this.contextStack = null;
+        this.location = null;
         trimMessageText();
     }
 
```","RingBufferLogEvent bugfix: do not use setValues(null, null....) to clear() the RingBufferLogEvent: Message is expected to be non-null in setValues()",4,4,4,4,remove unused code,0,0,0,0,"Refactor: Simplify clearing of properties in RingBufferLogEvent In the `clear()` method of the `RingBufferLogEvent` class, the properties are now cleared individually instead of using the `setValues()` method. This refactor does not change the functionality of the method but makes the code more readable and easier to understand.",4,4,4,4,"refactor: Clear logging context fields in RingBufferLogEvent
Simplify clear() method by removing unnecessary parameter list and directly setting fields to null, improving code readability and maintainability.","refactor: Set fields to null individually in clear method
Release references held by ring buffer to allow objects to be garbage-collected.",3.34,16.67,13.61,0.0,"refactor: Simplify clear method in RingBufferLogEvent
Refactor the clear method to individually set each field to null, making the code more readable and maintainable. This change improves the internal structure of the RingBufferLogEvent class without changing its observable behavior.",19.16,30.59,38.67,0.0
0fb4ed116d4ce7d90e43270eec7e00bc656d8fae,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java
Status: modified
```diff
@@ -422,8 +422,9 @@ private void readObject(final ObjectInputStream stream) throws InvalidObjectExce
      * @return a new immutable copy of the data in this {@code MutableLogEvent}
      */
     public Log4jLogEvent createMemento() {
-        // TODO implement MutableLogEvent.createMemento()
-        return Log4jLogEvent.deserialize(Log4jLogEvent.serialize(this, includeLocation));
+        Log4jLogEvent.Builder builder = new Log4jLogEvent.Builder(this);
+        builder.setMessage(memento());
+        return builder.build();
     }
 
 }
```",Implement MutableLogEvent.createMemento(),4,4,4,4,remove unnecessary serialize,0,0,4,3,"Refactor: Update createMemento method in MutableLogEvent class The createMemento method in the MutableLogEvent class has been refactored. The method was previously creating a memento of the current log event state for later restoration. Now, it creates a memento of the current log event with the updated message. This change does not affect the external behavior or functionality of the method.",0,2,2,3,"refactor: Use Log4jLogEvent.Builder to create memento
Replaced serialization-based memento creation with a more efficient and readable approach using Log4jLogEvent.Builder, which simplifies the implementation and improves performance.","refactor: Improve createMemento method implementation
Replace serialization and deserialization with a builder pattern to create a memento of the current log event.",1.89,9.2,6.64,0.0,"refactor: Improve createMemento method implementation
Refactor the createMemento method in MutableLogEvent to use a Builder pattern, replacing the previous serialization and deserialization approach. This change improves the method's implementation and makes it more efficient.",8.51,27.96,19.11,0.0
d219411e6834340cc4434e350e23e3f437a89b76,apache/logging-log4j2,,"File: log4j-core/src/test/java/org/apache/logging/log4j/core/pattern/MdcPatternConverterTest.java
Status: modified
```diff
@@ -92,7 +92,7 @@ public void testConverterWithKeys() {
 
     @After
     public void tearDown() {
-        ThreadContext.clearStack();
+        ThreadContext.clearMap();
     }
 }
 
```",Fix test clean-up,4,2,4,4,fix unit test,2,2,4,4,Fix: Update tearDown method in MdcPatternConverterTest The tearDown method in MdcPatternConverterTest has been updated to clear the thread context map instead of the thread context stack after each test. This change is likely made to prevent potential memory leaks.,4,4,4,4,"fix: Update tearDown to clear thread context map
Update tearDown to clear thread context map, ensuring a clean state for subsequent tests.","fix: Clear thread context map in tearDown method
Updated tearDown method to clear thread context map instead of stack, ensuring a clean state for subsequent tests.",8.13,30.0,29.28,0.0,"refactor: Update tearDown method to clear thread context map
Changed the tearDown method in MdcPatternConverterTest to clear the thread context map instead of the stack, ensuring a clean state for subsequent tests.",33.86,51.43,54.22,0.0
eae58c051fc1ca6f65e2157a066d104a49e4e544,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDisruptor.java
Status: modified
```diff
@@ -74,6 +74,7 @@ Disruptor<RingBufferLogEvent> getDisruptor() {
      *
      * @see #stop()
      */
+    @Override
     public synchronized void start() {
         if (disruptor != null) {
             LOGGER.trace(
```",Add missing '@OverRide' annotations.,3,4,4,4,add missing override annotation,3,4,4,4,"Feat: Add @Override annotation to start() method in AsyncLoggerDisruptor class This commit adds the @Override annotation to the start() method in the AsyncLoggerDisruptor class. The start() method is responsible for starting the AsyncLogger disruptor for the current context. If a disruptor already exists for this context, it will not create a new one. This change ensures that the method correctly overrides a method from its superclass.",3,4,2,4,"feat: Implement start functionality for asynchronous logging
Adds start functionality to AsyncLoggerDisruptor, enabling disruptor-based asynchronous logging. This allows for efficient management of logging tasks.","feat: Add start method to AsyncLoggerDisruptor
Introduce start method to initialize and configure disruptor, ring buffer, wait strategy, executor, and exception handler for asynchronous logging.",1.46,11.24,9.7,0.0,"feat: Add start method to AsyncLoggerDisruptor
This commit introduces a new start method to the AsyncLoggerDisruptor class, which initializes and starts the disruptor for asynchronous logging, setting up the ring buffer, wait strategy, executor, and event handlers. This feature enables the management of asynchronous logging using a Disruptor ring buffer.",6.61,29.57,27.31,0.0
6c4a094b0834adfd1de04398582e723ef645cb3b,apache/logging-log4j2,Y,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/LifeCycle.java
Status: modified
```diff
@@ -17,8 +17,6 @@
 
 package org.apache.logging.log4j.core;
 
-import java.util.concurrent.TimeUnit;
-
 /**
  * All proper Java frameworks implement some sort of object life cycle. In Log4j, the main interface for handling
  * the life cycle context of an object is this one. An object first starts in the {@link State#INITIALIZED} state
```


File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java
Status: modified
```diff
@@ -25,7 +25,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.zip.Deflater;
 
-import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.core.appender.rolling.action.Action;
 import org.apache.logging.log4j.core.appender.rolling.action.CommonsCompressAction;
 import org.apache.logging.log4j.core.appender.rolling.action.CompositeAction;
@@ -40,7 +39,6 @@
 import org.apache.logging.log4j.core.config.plugins.PluginFactory;
 import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.core.util.Integers;
-import org.apache.logging.log4j.status.StatusLogger;
 
 /**
  * When rolling over, <code>DefaultRolloverStrategy</code> renames files according to an algorithm as described below.
```",Remove unused imports.,4,4,4,4,remove unused imports,4,4,4,4,"Refactor: Remove unused imports In this commit, unused import statements have been removed from the files LifeCycle.java and DefaultRolloverStrategy.java. This is a code cleanup activity that helps to keep the codebase clean and easy to maintain.",4,4,4,4,"style: Remove unused imports
Removed unused imports to conform to best practices and reduce code clutter.","refactor: Remove unused imports
Cleaned up LifeCycle.java and DefaultRolloverStrategy.java by removing unnecessary import statements",2.98,18.87,16.31,0.0,"refactor: Remove unnecessary imports
This commit removes unused import statements from LifeCycle.java and DefaultRolloverStrategy.java, cleaning up the code and making it more maintainable.",19.57,45.16,42.01,0.0
f9ff2d6f4ffd88957d298e397e11bbeb1d6f3dba,apache/logging-log4j2,,"File: log4j-api/src/test/java/org/apache/logging/log4j/osgi/AbstractLoadBundleTest.java
Status: modified
```diff
@@ -27,6 +27,7 @@
 import org.junit.Assert;
 import org.junit.Assume;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.osgi.framework.Bundle;
@@ -117,6 +118,7 @@ public void testLoadStartStop() throws BundleException {
      * Tests the log of a simple message in an OSGi container
      */
     @Test
+    @Ignore(""Fails locally (for Gary Gregory) and on Travis CI. Passes on Jenkins somehow"")
     public void testSimpleLogInAnOsgiContext() throws BundleException, ReflectiveOperationException {
 
         final BundleContext bundleContext = osgi.getFramework().getBundleContext();
@@ -160,6 +162,7 @@ public void testSimpleLogInAnOsgiContext() throws BundleException, ReflectiveOpe
      * Tests LOG4J2-920.
      */
     @Test
+    @Ignore(""Fails locally (for Gary Gregory) and on Travis CI. Passes on Jenkins somehow"")
     public void testMissingImportOfCoreOsgiPackage() throws BundleException, ReflectiveOperationException {
 
         final BundleContext bundleContext = osgi.getFramework().getBundleContext();
```","ignore since these tests fail locally (for Gary Gregory) and on Travis E209CI. Passes on Jenkins somehow"".C210",4,4,4,4,ignore test for now,3,4,4,4,"Fix: Ignore failing tests in AbstractLoadBundleTest Two tests in AbstractLoadBundleTest.java are failing locally and on Travis CI, but passing on Jenkins. These tests have been annotated with @Ignore until the cause of the inconsistency is resolved.",4,4,4,4,"fix: Mark tests as ignored due to inconsistent behavior
Mark tests as ignored due to inconsistent behavior on different environments (local, Travis CI, and Jenkins) to prevent false failures. This change is necessary to avoid misleading test results, as the tests currently pass on Jenkins but fail on local and Travis CI environments. By ignoring these tests, we can ensure a more reliable testing process until the underlying issue is resolved.","fix: Ignore tests with inconsistent behavior in AbstractLoadBundleTest
Tests testSimpleLogInAnOsgiContext and testMissingImportOfCoreOsgiPackage are ignored due to inconsistent behavior on different environments.",5.71,26.17,44.82,0.0,"fix: Ignore failing tests in AbstractLoadBundleTest
Two tests, testSimpleLogInAnOsgiContext and testMissingImportOfCoreOsgiPackage, are currently ignored due to inconsistent behavior on different environments. This commit updates the tests to reflect their current ignored state.",13.41,26.47,20.0,0.0
d9a12634030d659e3754df960a802f72fd7f3ee3,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/StringBuilderEncoder.java
Status: modified
```diff
@@ -16,16 +16,16 @@
  */
 package org.apache.logging.log4j.core.layout;
 
-import org.apache.logging.log4j.core.util.Constants;
-import org.apache.logging.log4j.status.StatusLogger;
-
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.Charset;
 import java.nio.charset.CharsetEncoder;
 import java.nio.charset.CodingErrorAction;
 import java.util.Objects;
 
+import org.apache.logging.log4j.core.util.Constants;
+import org.apache.logging.log4j.status.StatusLogger;
+
 /**
  * Encoder for StringBuilders that uses ThreadLocals to avoid locking as much as possible.
  */
@@ -69,7 +69,6 @@ private void encodeWithThreadLocals(final CharsetEncoder charsetEncoder, final C
         try {
             TextEncoderHelper.encodeTextWithCopy(charsetEncoder, charBuffer, temp, source, destination);
         } catch (final Exception ex) {
-            ex.printStackTrace();
             logEncodeTextException(ex, source, destination);
             TextEncoderHelper.encodeTextFallBack(charset, source, destination);
         }
```",Remove exception stack trace print This is already logged by the StatusLogger.,4,4,4,4,don t printStackTrace the stack trace,0,4,4,4,Refactor: Rearrange import statements and remove exception print in StringBuilderEncoder.java Rearranged the import statements for better organization and removed an exception print statement to improve code cleanliness. No associated issues or pull requests.,3,4,4,4,"refactor: Remove unnecessary imports and reorder remaining ones
Removed unnecessary imports to declutter the codebase and improved import organization for better maintainability.","style: Remove unused imports and reorder remaining ones in StringBuilderEncoder
Imports were reordered to maintain consistency, and unnecessary imports of Constants and StatusLogger were removed to declutter the code.",5.21,21.82,23.41,0.0,"refactor: Reorganize imports and remove printStackTrace
This commit reorganizes the import statements in StringBuilderEncoder.java to group related imports together. Additionally, it removes the printStackTrace call in the catch block, replacing it with a more robust error handling mechanism. These changes improve the code organization and robustness without changing its observable behavior.",10.69,21.18,34.76,0.0
69c7b5a42f15f2b21e7b6b73822d47639ec15d5a,apache/logging-log4j2,,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java
Status: modified
```diff
@@ -271,7 +271,7 @@ private static LogEvent convertMutableToLog4jEvent(final LogEvent event) {
     }
 
     protected Object wrapLogEvent(final LogEvent event) {
-         if (additionalFields.length > 0) {
+        if (additionalFields.length > 0) {
             // Construct map for serialization - note that we are intentionally using original LogEvent
             Map<String, String> additionalFieldsMap = resolveAdditionalFields(event);
             // This class combines LogEvent with AdditionalFields during serialization
@@ -282,9 +282,9 @@ protected Object wrapLogEvent(final LogEvent event) {
         }
     }
 
-    private Map<String,String> resolveAdditionalFields(LogEvent logEvent) {
+    private Map<String, String> resolveAdditionalFields(LogEvent logEvent) {
         // Note: LinkedHashMap retains order
-        final Map<String,String> additionalFieldsMap = new LinkedHashMap<>(additionalFields.length);
+        final Map<String, String> additionalFieldsMap = new LinkedHashMap<>(additionalFields.length);
         final StrSubstitutor strSubstitutor = configuration.getStrSubstitutor();
 
         // Go over each field
```",AbstractJacksonLayout - reformated new code,4,4,4,4,fix bug in AbstractJacksonLayout,0,0,4,4,"Style: Improve code readability in AbstractJacksonLayout.java This commit enhances the readability and consistency of the code in AbstractJacksonLayout.java. The changes are related to the handling of additional fields in a log event. The changes do not alter the functionality of the methods, but rather improve the code quality. The changes include adjusting the spacing and formatting of the code.",4,4,2,4,"style: Align code in AbstractJacksonLayout.java
Aligned code blocks and removed unnecessary whitespace in AbstractJacksonLayout.java to conform to the project's coding standards, enhancing overall code quality and consistency.","style: Fix whitespace and add semi-colons in AbstractJacksonLayout
Consistent formatting and added missing semi-colons in AbstractJacksonLayout.java for better code readability.",7.51,29.21,16.69,0.0,"refactor: Improve code formatting in AbstractJacksonLayout
This commit refactors the code in AbstractJacksonLayout to improve its formatting and readability. Specifically, it fixes inconsistent spacing in the wrapLogEvent and resolveAdditionalFields methods. These changes do not affect the functionality of the class, but make the code easier to understand and maintain.",12.91,40.37,28.81,0.0
edbd3e7d6a9212411b50b245d5c17d0c8a943273,apache/logging-log4j2,Y,"File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java
Status: modified
```diff
@@ -164,6 +164,10 @@ protected static <M extends AbstractManager> M narrow(final Class<M> narrowClass
                         manager.getName() + ""'"");
     }
 
+    protected static StatusLogger logger() {
+        return StatusLogger.getLogger();
+    }
+
     /**
      * May be overridden by managers to perform processing while the manager is being released and the
      * lock is held. A timeout is passed for implementors to use as they see fit.
```


File: log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java
Status: modified
```diff
@@ -45,7 +45,6 @@
 import org.apache.logging.log4j.message.MapMessage;
 import org.apache.logging.log4j.spi.ThreadContextMap;
 import org.apache.logging.log4j.spi.ThreadContextStack;
-import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.IndexedReadOnlyStringMap;
 import org.apache.logging.log4j.util.ReadOnlyStringMap;
 import org.apache.logging.log4j.util.Strings;
@@ -55,10 +54,6 @@
  */
 public final class JdbcDatabaseManager extends AbstractDatabaseManager {
 
-    private static StatusLogger logger() {
-        return StatusLogger.getLogger();
-    }
-
     private static final JdbcDatabaseManagerFactory INSTANCE = new JdbcDatabaseManagerFactory();
 
     // NOTE: prepared statements are prepared in this order: column mappings, then column configs
```",Pull up logger() method.,4,4,4,4,remove unused method,0,0,4,4,"Refactor: Move logger() method to AbstractManager class The logger() method was moved from the JdbcDatabaseManager class to its superclass, AbstractManager. This change allows all managers that extend AbstractManager to have access to the logger() method, potentially improving code reuse and maintainability. No associated issues or pull requests were found for this commit.",4,4,4,4,"refactor: Introduce protected logger() method in AbstractManager
Extracted the logger creation logic into a protected method in AbstractManager, allowing subclasses to reuse it. This refactoring eliminates code duplication and improves maintainability.","refactor: Move logger method to AbstractManager
Extracted the logger method from JdbcDatabaseManager to avoid duplication and make the code more maintainable.",4.63,26.83,22.16,0.0,"refactor: Extract StatusLogger creation to AbstractManager
This commit extracts the creation of StatusLogger to the AbstractManager class, making it reusable across subclasses. The JdbcDatabaseManager class no longer needs to define its own logger method, reducing code duplication.",6.71,27.27,24.81,0.0
0fc31ef9a44015c45a8d7d9374a583340a79ba8f,apache/maven,,"File: maven-core/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java
Status: modified
```diff
@@ -159,6 +159,12 @@ public void assembleModelInheritance( Model child, Model parent )
             }
         }
 
+        // ciManagement
+        if ( child.getCiManagement() == null )
+        {
+            child.setCiManagement( parent.getCiManagement() );
+        }
+
         // developers
         if ( child.getDevelopers().size() == 0 )
         {
```",o Adding ci management inhertiance.,0,3,4,4,fix a bug in assembleModelInheritance,0,1,4,4,"Feat: Inherit ciManagement from parent model In the `assembleModelInheritance` method of the `DefaultModelInheritanceAssembler.java` file, the code has been modified to inherit the `ciManagement` property from the parent model to the child model if it is not set in the child model. This is a new feature that enhances the inheritance functionality of the method.",4,4,4,4,"feat: Inherit ciManagement from parent
Inherit ciManagement from parent model when it's not set in the child model, ensuring consistency in model inheritance assembly.","feat: Inherit ciManagement from parent
Added logic to DefaultModelInheritanceAssembler to inherit ciManagement from parent model to child model.",10.65,38.46,25.24,0.0,"feat: Inherit ciManagement from parent model
This commit enhances the model inheritance assembly by also considering ciManagement. Now, if the child model does not have ciManagement set, it will be inherited from the parent model. This change ensures that ciManagement is properly propagated during model inheritance assembly.",17.99,33.66,30.36,0.0
30eedfb62610381a93bad4187eb2283d07489674,apache/maven,,"File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java
Status: modified
```diff
@@ -211,7 +211,12 @@ private void verifyMojoPhase( String task, MavenSession session )
         {
             pluginManager.verifyPluginForGoal( task, session );
             mojoDescriptor = pluginManager.getMojoDescriptor( task );
-            if ( mojoDescriptor != null && mojoDescriptor.getPhase() != null )
+            if ( mojoDescriptor == null )
+            {
+                throw new LifecycleExecutionException( ""Required goal not found: "" + task );
+            }
+
+            if ( mojoDescriptor.getPhase() != null )
             {
                 Phase phase = (Phase) phaseMap.get( mojoDescriptor.getPhase() );
                 phase.getGoals().add( task );
```",add missing error message when the package goal is not found,4,4,4,4,fix potential npe,0,1,4,4,"Fix: Add validation for mojo phase in verifyMojoPhase method This commit adds a validation in the `verifyMojoPhase` method of the `DefaultLifecycleExecutor` class to check if the given task is a valid mojo phase. If the task is not a valid mojo phase, an exception is thrown. This change improves the error handling in the method and ensures that only valid tasks are processed.",4,4,4,4,"fix: Throw exception when required goal is not found
Previously, the build process would silently continue when a required goal was missing, potentially leading to downstream issues. This change introduces an explicit exception to ensure that the build fails immediately when a critical goal is not found, making it easier to diagnose and fix such issues.","fix: Throw exception when mojo descriptor is null
Verify mojo phase for a given task by checking for null mojo descriptor and throwing a LifecycleExecutionException if the required goal is not found. This fix ensures proper error handling in the DefaultLifecycleExecutor.",5.24,13.56,20.47,0.0,"fix: Verify mojo phase for a given task
This commit fixes the verification of mojo phase for a given task by throwing a LifecycleExecutionException if the required goal is not found. It ensures that the plugin and phase are properly configured and registered during the Maven build lifecycle.",5.45,29.09,25.32,0.0
657fde08f4a5d95dc99cc220716d54048716a89b,apache/maven,,"File: maven-mboot2/src/main/java/jar/JarMojo.java
Status: modified
```diff
@@ -26,7 +26,7 @@ public void execute( File basedir, String outputDirectory, String jarName )
 
         Map includes = new LinkedHashMap();
 
-        addDirectory( includes, ""**/**"", ""**/package.html"", """", basedir );
+        addDirectory( includes, ""**/**"", ""**/package.html,**/.svn/**"", """", basedir );
 
         createJar( jarFile, includes );
     }
```",exclude svn directories in mboot,0,4,4,4,fix directory includes,0,2,4,3,"Fix: Exclude certain files when creating jar in JarMojo.java In the execute method of the JarMojo.java file, an additional exclusion pattern ""**/.svn/**"" has been added to the addDirectory method call. This change ensures that certain files like package.html and .svn files are excluded when creating a jar file.",4,4,4,4,"refactor: Exclude .svn directories from jar creation
Exclude .svn directories to prevent unnecessary inclusions and improve jar creation efficiency.","fix: Exclude .svn directories from jar files
Fixed JarMojo to ignore .svn directories, in addition to package.html files, when creating jar files to prevent unnecessary inclusions.",2.01,17.39,8.53,0.0,"refactor: Exclude .svn directories from jar creation
Modified the execute method in JarMojo to exclude .svn directories when creating a jar file. This change ensures that unnecessary files are not included in the jar file, making it more efficient.",21.04,33.71,45.5,0.0
40d47927dee5a419ad71add6a80789bfd07e52ee,apache/maven,,"File: maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGenerator.java
Status: modified
```diff
@@ -76,10 +76,13 @@ public void execute( File destinationDirectory, PluginDescriptor pluginDescripto
             
             w.startElement( ""mojos"" );
 
-            for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
+            if ( pluginDescriptor.getMojos() != null )
             {
-                MojoDescriptor descriptor = (MojoDescriptor) it.next();
-                processMojoDescriptor( descriptor, w );
+                for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )
+                {
+                    MojoDescriptor descriptor = (MojoDescriptor) it.next();
+                    processMojoDescriptor( descriptor, w );
+                }
             }
 
             w.endElement();
@@ -362,4 +365,4 @@ public void element( XMLWriter w, String name, String value )
 
         w.endElement();
     }
-}
\ No newline at end of file
+}
```",o Fixing a small bug that would cause a NPE if a plugin doesn't contain any mojos.,4,4,4,4,do not merge fix npe,0,3,4,4,"Fix: Add null check before iterating over pluginDescriptor.getMojos() This commit adds a null check before iterating over the pluginDescriptor.getMojos() in the execute method of the PluginDescriptorGenerator.java file. This prevents a potential NullPointerException when the pluginDescriptor.getMojos() is null. The functionality of the method remains the same, but the implementation has been modified to handle this edge case.",4,4,4,4,"fix: Check for null pluginDescriptor.getMojos() before iteration
Previously, the plugin generation process would throw a NullPointerException when iterating over pluginDescriptor.getMojos() if it was null. This change introduces a null check to prevent this issue, ensuring that the plugin generation process is more robust and fault-tolerant.","fix: Check for null mojo descriptors in PluginDescriptorGenerator
Prevent NullPointerException by iterating over pluginDescriptor.getMojos() only if it's not null.",12.68,26.42,25.58,0.0,"refactor: Improve PluginDescriptorGenerator mojo handling
Refactor the execute method in PluginDescriptorGenerator to handle null mojo descriptors, ensuring a more robust plugin generation process. This change improves the internal structure of the code, making it easier to understand and maintain.",4.8,18.37,13.13,0.0
e53ecf1af2f069eb6e14827d9504468dd6c3eb12,apache/maven,,"File: maven-plugins/maven-compiler-plugin/src/main/java/org/apache/maven/plugin/CompilerMojo.java
Status: modified
```diff
@@ -23,8 +23,6 @@
  * @phase compile
  * @requiresDependencyResolution compile
  * @description Compiles application sources
- * @todo change debug parameter type to Boolean
- * @todo change staleMillis parameter type to Long
  */
 
 public class CompilerMojo
```",remove old comments,4,4,4,4,remove author tag,0,0,4,4,Refactor: Remove outdated comments in CompilerMojo.java The comments about changing the debug parameter type to Boolean and changing the staleMillis parameter type to Long were removed from the CompilerMojo.java file. These comments were outdated and no longer relevant to the current state of the code.,4,4,4,4,"style: Remove TODO comments from CompilerMojo.java
No implementation was provided for the TODO comments regarding changing debug parameter type to Boolean and staleMillis parameter type to Long, so they were removed to avoid confusion and misleading information.","style: Remove todo comments from CompilerMojo.java
Clean up unnecessary comments in CompilerMojo.java to improve code readability.",20.93,47.62,42.89,0.0,"style: Remove todo comments from CompilerMojo.java
Removed two todo comments from the CompilerMojo.java file, which were related to changing parameter types. These comments were not relevant anymore and were removed to keep the code clean and up-to-date.",20.26,37.65,39.15,0.0
4c85dfc33154be5933b4ecb302e395ce72c226a0,apache/maven,,"File: maven-project/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java
Status: modified
```diff
@@ -482,6 +482,7 @@ private static DeploymentRepository copyDistributionRepository( DeploymentReposi
         return repository;
     }
 
+    // TODO: This should eventually be migrated to DefaultPathTranslator.
     protected String appendPath( String parentPath, String childPath, String pathAdjustment, boolean appendPaths )
     {
         List pathFragments = new ArrayList();
@@ -570,7 +571,12 @@ else if ( !""."".equals( currentToken ) )
         
         if ( appendPaths && lastPathPart != null && !lastPathPart.endsWith( ""/"" ) )
         {
-            cleanedPath.setLength( cleanedPath.length() - 1 );
+            int cleanedPathLen = cleanedPath.length();
+            
+            if ( cleanedPathLen > 0 )
+            {
+                cleanedPath.setLength( cleanedPathLen - 1 );
+            }            
         }
 
         return cleanedPath.toString();
```",Adding defensive code for one more place where cleanedPath length could cause a problem with string manipulation in appendPath(..).,4,4,4,4,add appendPath method to copyDistributionRepository,0,1,4,4,"Fix: Improve path adjustment handling in appendPath method In the `appendPath` method of the `DefaultModelInheritanceAssembler.java` file, the handling of the path adjustment has been improved. A check has been added to ensure that the `cleanedPath` length is greater than 0 before reducing its length by 1. This prevents potential errors when the `cleanedPath` length is 0. A comment has also been added indicating that this method should eventually be migrated to `DefaultPathTranslator`.",4,4,4,4,"fix: Handle null or empty strings in appendPath method
This change prevents `appendPath` from throwing exceptions when handling null or empty strings, ensuring robustness and reliability in path construction.","fix: Prevent StringIndexOutOfBoundsException in appendPath method
Check cleanedPath length before modifying it to avoid exceptions.",1.4,11.88,10.62,0.0,"refactor: Improve appendPath method implementation
Refactor the appendPath method to handle path adjustments and relative path references more robustly. The changes ensure that the resulting path is valid and canonical. Additionally, a TODO comment is added to eventually migrate this functionality to DefaultPathTranslator.",5.97,29.57,22.9,0.0
92e731eb8007890b624f8b88984980660a2e587a,apache/maven,,"File: maven-core/src/main/java/org/apache/maven/plugin/PluginException.java
Status: modified
```diff
@@ -21,6 +21,7 @@
  *
  * @author <a href=""mailto:carlos@apache.org"">Carlos Sanchez</a>
  * @version $Id$
+ * @since 2.0.5
  */
 public abstract class PluginException
     extends Exception
```",Added @SInCE tag,4,4,4,4,add missing javadoc,0,0,4,4,Style: Add version comment to PluginException.java A comment indicating the version since the PluginException.java file exists was added. This change does not affect the functionality of the code.,4,4,4,4,"style: Add @since Javadoc tag
Added @since Javadoc tag to PluginException.java to maintain consistency in version history tracking.","style: Add @since tag to PluginException.java
Updated the PluginException class to include version information.",10.62,25.0,16.65,0.0,"style: Add @since tag to PluginException class
Added the @since 2.0.5 tag to the PluginException class to provide version information.",6.57,31.37,18.35,0.0
40aacad4f0d2b0b33f3a70b971030c5d42afa167,apache/maven,,"File: maven-cli/src/main/java/org/apache/maven/cli/MavenCli.java
Status: modified
```diff
@@ -43,6 +43,13 @@
  */
 public class MavenCli
 {
+    public static int main( String[] args )
+    {
+        ClassWorld classWorld = new ClassWorld( ""plexus.core"", Thread.currentThread().getContextClassLoader() );
+        
+        return main( args, classWorld );
+    }
+
     /**
      * @noinspection ConfusingMainMethod
      */
```","o Add a method that can be used with booting with a ClassWorld, we will just create one when the standard main method is invoked. Work required for Dan's new rework of the bootstrap to make it dead simple to understand.",3,4,4,4,add main to MavenCli,0,1,4,4,Feat: Add main entry point for application A new `main` method has been added to the `MavenCli` class. This method serves as the main entry point for the application when run from the command-line. It is designed to provide a main entry point for the application when the classworld has not been set up.,4,4,4,4,"feat: Add main entry point for Plexus application
Introduces a new main entry point for the Plexus application, which initializes a ClassWorld instance and delegates to another main method to perform the actual work. This change provides a clear separation of concerns and sets the stage for further application initialization and configuration.","feat: Add main entry point for Plexus application
Introduce a new main method that initializes ClassWorld and delegates to the main method with ClassWorld parameter, serving as the entry point for the Plexus application.",21.31,34.29,36.68,0.0,"feat: Add main entry point for Plexus application
This commit introduces a new main entry point for the Plexus application, which sets up the ClassWorld and delegates to the main method that takes a ClassWorld parameter. This change enables the execution of the program with the correct setup.",22.38,37.62,40.34,0.0
d5f5abeb5749318085df7dd07ecadcdb49567b8b,apache/maven,,"File: maven-project/src/main/java/org/apache/maven/profiles/manager/DefaultProfileManager.java
Status: modified
```diff
@@ -33,7 +33,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Properties;
 
 public class DefaultProfileManager
     implements ProfileManager
```",o dead import,3,3,4,2,remove unused import,4,4,4,4,Style: Remove unused import in DefaultProfileManager.java The import statement for java.util.Properties was removed from DefaultProfileManager.java as it was unused. This change is part of code style maintenance.,4,4,4,4,"style: Remove unused import java.util.Properties
No functional changes were introduced by this removal.","style: Remove unused java.util.Properties import
DefaultProfileManager.java no longer imports unnecessary java.util.Properties",10.92,31.11,16.42,0.0,"style: Remove unused import statement
Removed the unused import statement for java.util.Properties in DefaultProfileManager.java, cleaning up the code and reducing unnecessary dependencies.",33.47,50.91,42.9,0.0
3571f9e2ac2552c6279cebd7c675254b9a785a62,apache/maven,,"File: maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java
Status: modified
```diff
@@ -29,6 +29,7 @@
 import org.apache.maven.reactor.MavenExecutionException;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /** @author Jason van Zyl */
@@ -83,7 +84,7 @@ public MavenExecutionResult setArtifactResolutionResult( ArtifactResolutionResul
 
     public List getExceptions()
     {
-        return exceptions;
+        return exceptions == null ? Collections.EMPTY_LIST : exceptions;
     }
 
     public MavenExecutionResult addExtensionScanningException( ExtensionScanningException e )
@@ -147,7 +148,7 @@ private void addException( Throwable t )
 
     public boolean hasExceptions()
     {
-        return (( exceptions != null ) && ( exceptions.size() > 0 ) );
+        return !getExceptions().isEmpty();
     }
 
     public ReactorManager getReactorManager()
```","Do not return null collections, makes life easier for clients",4,4,4,4,fix npe in setArtifactResolutionResult,0,0,4,4,"Fix: Update exception handling in DefaultMavenExecutionResult This commit updates the getExceptions() and hasExceptions() methods in the DefaultMavenExecutionResult.java file. The getExceptions() method now returns an empty list if the exceptions list is null, and the hasExceptions() method now checks if the exceptions list is empty. This change ensures that the methods behave correctly when the exceptions list is null.",1,4,4,4,"fix: Return empty list instead of null from getExceptions() and hasExceptions() methods
This change prevents NullPointerExceptions and ensures consistency by returning an empty list instead of null from `getExceptions()` and `hasExceptions()` methods, aligning with best practices for exception handling.","fix: Return empty list from getExceptions when no exceptions are present
Previously, getExceptions would return null when no exceptions were present, leading to potential NullPointerExceptions. This change ensures that an empty list is returned instead, making the code more robust.",8.22,22.68,22.49,0.0,"refactor: Improve exception handling in DefaultMavenExecutionResult
This commit refactors the getExceptions and hasExceptions methods in DefaultMavenExecutionResult to handle empty exception lists more elegantly. It returns an empty list instead of null when no exceptions are present, making the code more robust and easier to use.",15.74,34.95,26.51,0.0
1cb3190b0faf83c77f93dcf2ca9c76b62021e2bf,apache/maven,,"File: maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java
Status: modified
```diff
@@ -609,7 +609,7 @@ public void executeMojo( MavenProject project,
             if ( getLogger().isFatalErrorEnabled() )
             {
                 getLogger().fatalError(
-                                        mojo.getClass().getName() + ""#execute() caused a linkage error (""
+                                        mojoDescriptor.getImplementation() + ""#execute() caused a linkage error (""
                                             + e.getClass().getName() + "") and may be out-of-date. Check the realms:"" );
 
                 StringBuffer sb = new StringBuffer();
```",Make the error message construction a little more resilient to errors in classloading.,3,3,4,4,use the correct implementation of the mojo,0,0,4,4,"Refactor: Improve error logging in executeMojo method In the `executeMojo` method of the `DefaultPluginManager.java` file, the way of logging an error message has been improved. Instead of using `mojo.getClass().getName()`, it now uses `mojoDescriptor.getImplementation()`. This change does not affect the functionality of the method, but it makes the error reporting and logging more accurate.",4,4,4,4,"fix: fix: Log fatalError with mojoDescriptor's implementation instead of mojo's class name
Changed fatalError logging to use mojoDescriptor's implementation instead of mojo's class name, which was previously causing inaccurate error messages.","fix: Use mojoDescriptor.getImplementation() in linkage error message
Previously, the error message used mojo.getClass().getName(), which is incorrect. This change fixes the linkage error message to include the correct implementation class name.",2.19,11.49,9.35,0.0,"fix: Improve error message for linkage error
When a linkage error occurs during mojo execution, the error message is now more informative, including the implementation class name. This change enhances the debugging experience by providing more context about the error.",5.33,22.92,23.17,0.0
3051c4974b0f7780528114c49492d8930b2fbd6d,apache/maven,Y,"File: maven-repository/src/main/java/org/apache/maven/repository/LegacyMavenRepositorySystem.java
Status: modified
```diff
@@ -90,6 +90,9 @@ public class LegacyMavenRepositorySystem
     @Requirement
     private ArtifactMetadataSource artifactMetadataSource;
 
+    @Requirement
+    private MirrorBuilder mirrorBuilder;
+    
     @Requirement
     private Logger logger;
 
@@ -626,4 +629,11 @@ public Artifact retrieveRelocatedArtifact( Artifact artifact, ArtifactRepository
     {
         return artifactMetadataSource.retrieveRelocatedArtifact( artifact, localRepository, remoteRepositories );
     }
+    
+    // Mirror 
+    
+    public void addMirror( String id, String mirrorOf, String url )
+    {
+        mirrorBuilder.addMirror( id, mirrorOf, url );
+    }
 }
```


File: maven-repository/src/main/java/org/apache/maven/repository/MavenRepositorySystem.java
Status: modified
```diff
@@ -127,4 +127,8 @@ public Artifact retrieveRelocatedArtifact( Artifact artifact, ArtifactRepository
     void addAuthenticationInfo( String repositoryId, String username, String password, String privateKey, String passphrase );
 
     void addPermissionInfo( String repositoryId, String filePermissions, String directoryPermissions );
+    
+    // Mirrors
+    
+    void addMirror( String id, String mirrorOf, String url );
 }
```",o Fix compilation error with mirrors,4,4,4,4,add support for add mirrorBuilder mirror mirror in the list,2,2,4,2,"feat: Add mirror to Maven Repository System This commit introduces a new feature to the Maven Repository System. Two new methods have been added to the classes ""LegacyMavenRepositorySystem"" and ""MavenRepositorySystem"". These methods allow adding a mirror to the mirror builder with the given id, mirrorOf, and url. This feature enhances the flexibility and configurability of the Maven Repository System.",4,4,4,4,"feat: Add mirror functionality
This commit introduces mirror functionality by adding a MirrorBuilder requirement to LegacyMavenRepositorySystem and implementing the addMirror method in both LegacyMavenRepositorySystem and MavenRepositorySystem. This allows for the creation of mirror repositories, enhancing the overall Maven repository system.","feat: Introduce mirror management to MavenRepositorySystem
Adds addMirror method to MavenRepositorySystem and LegacyMavenRepositorySystem, enabling the registration of new mirrors with a given id, mirroring a specified resource, and located at a provided url.",12.38,36.73,37.66,0.0,"feat: Add mirror functionality to MavenRepositorySystem
This commit introduces a new feature to add mirrors to the MavenRepositorySystem. A new method, addMirror, is added to both LegacyMavenRepositorySystem and MavenRepositorySystem, allowing users to register new mirror sites for repositories. This feature enhances the system's ability to manage and resolve artifacts.",20.53,44.86,40.34,0.0
eb43b9be114e9fc2ccaa21d25fac8110fdf75331,apache/maven,,"File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java
Status: modified
```diff
@@ -822,7 +822,8 @@ public static void main( String... args )
                     + ( ( compare == 0 ) ? ""=="" : ( ( compare < 0 ) ? ""<"" : "">"" ) ) + ' ' + version );
             }
 
-            System.out.println( ( i++ ) + "". "" + version + "" -> "" + c.getCanonical() + ""; tokens: "" + c.items.toListString() );
+            System.out.println( ( i++ ) + "". "" + version + "" -> "" + c.getCanonical()
+                                    + ""; tokens: "" + c.items.toListString() );
 
             prev = c;
         }
```",Fix Checkstyle violation.,4,4,4,4,remove debug output,0,0,4,4,Style: Improve readability in ComparableVersion.java Split a line of code in the `main` method into two for better readability. The functionality of the method remains the same.,4,4,4,4,"style: Split long println statement into multiple lines
Improve code readability by breaking up a long println statement into multiple lines.","style: Split long System.out.println statement in ComparableVersion
Improve code readability by formatting the System.out.println statement in the main method of ComparableVersion.",5.1,16.67,15.96,0.0,"style: Improve formatting in ComparableVersion main method
This commit reformats the System.out.println statement in the main method of ComparableVersion to improve code readability. The functionality of the method remains unchanged.",33.6,50.85,49.06,0.0
7e631d612896cd1b8d4de46ff500677de9c63900,apache/mesos,,"File: src/examples/java/TestFramework.java
Status: modified
```diff
@@ -268,6 +268,16 @@ public static void main(String[] args) throws Exception {
     // Ensure that the driver process terminates.
     driver.stop();
 
+    // For this test to pass reliably on some platforms, this sleep is
+    // required to ensure that the SchedulerDriver teardown is complete
+    // before the JVM starts running native object destructors after
+    // System.exit() is called. 500ms proved successful in test runs,
+    // but on a heavily-loaded machine it might not.
+    // TODO(greg): Ideally, we would inspect the status of the driver
+    // and its associated tasks via the Java API and wait until their
+    // teardown is complete to exit.
+    Thread.sleep(500);
+
     System.exit(status);
   }
 }
```",Fixed flaky ExamplesTest.JavaFramework.,4,4,4,4,add System exit to TestFramework,0,1,4,4,Fix: Added sleep function to ensure SchedulerDriver teardown This commit adds a sleep function to the main method in the TestFramework.java file. The sleep function is added to ensure that the SchedulerDriver teardown is complete before the JVM starts running native object destructors after System.exit() is called. This change is a corrective action to handle a potential issue where the JVM might start running native object destructors before the SchedulerDriver teardown is complete.,4,4,3,4,"fix: Ensure SchedulerDriver teardown completes before System.exit
Ensures SchedulerDriver teardown completes before System.exit by introducing a temporary 500ms sleep, mitigating potential issues on some platforms where the JVM may run native object destructors after System.exit. Ideally, we should refactor this to inspect the driver's status and its associated tasks via the Java API, waiting for their teardown to complete before exiting.","fix: Wait for SchedulerDriver teardown before System.exit
Added a 500ms sleep to ensure reliable teardown. Ideally, we should inspect the driver's status via the Java API and wait until its teardown is complete before exiting.",14.32,30.43,30.66,0.0,"fix: Ensure reliable teardown of SchedulerDriver
Added a 500ms sleep before System.exit() to ensure that the SchedulerDriver teardown is complete before the JVM starts running native object destructors. This change is necessary to make the test pass reliably on some platforms. Ideally, we would inspect the status of the driver and its associated tasks via the Java API and wait until their teardown is complete to exit.",28.63,42.25,38.79,0.0
483eb1aa075f0c56fab07e5d04a0cc565c64909a,helterskelterr/ofbizApp,,"File: framework/widget/src/org/ofbiz/widget/screen/ScreenWidgetViewHandler.java
Status: modified
```diff
@@ -30,6 +30,7 @@
 
 import org.ofbiz.base.util.GeneralException;
 import org.ofbiz.base.util.UtilJ2eeCompat;
+import org.ofbiz.base.util.template.FreeMarkerWorker;
 import org.ofbiz.webapp.view.ViewHandler;
 import org.ofbiz.webapp.view.ViewHandlerException;
 import org.ofbiz.widget.html.HtmlScreenRenderer;
@@ -88,6 +89,7 @@ public void render(String name, String page, String info, String contentType, St
             ScreenRenderer screens = new ScreenRenderer(writer, null, htmlScreenRenderer);
             screens.populateContextForRequest(request, response, servletContext);
             // this is the object used to render forms from their definitions
+            FreeMarkerWorker.getSiteParameters(request, screens.getContext());
             screens.getContext().put(""formStringRenderer"", new HtmlFormRenderer(request, response));
             screens.render(page);
         } catch (IOException e) {
```","Added FreeMarkerWorker.getSiteParameters to render method. This data, particularly ""rootDir"", is used loading FTL content templates. I figured it could not hurt normal screen rendering.",4,4,4,4,add HtmlFormRenderer for screen widget,0,0,4,4,Feat: Enhance render method in ScreenWidgetViewHandler class This commit enhances the render method in the ScreenWidgetViewHandler class. The method is now set up to decide whether to use an OutputStream or a Writer based on the servlet context. This change improves the flexibility of the method in rendering a page.,4,4,4,4,"feat: Add FreeMarker template engine support to ScreenWidgetViewHandler
This commit adds FreeMarker template engine support to ScreenWidgetViewHandler, enabling more flexible and customizable HTML screen rendering through template-based rendering.","feat: Add FreeMarker template engine support
Introduce FreeMarkerWorker to ScreenWidgetViewHandler, enabling HTML screen rendering with FreeMarker templates and improved exception handling.",2.51,10.39,8.91,0.0,"feat: Add FreeMarker template engine support to ScreenWidgetViewHandler
This commit enhances the ScreenWidgetViewHandler to render HTML screens using a FreeMarker template engine, allowing for more flexible and dynamic screen rendering. The FreeMarkerWorker is now used to get site parameters and render forms from their definitions.",7.14,19.15,23.32,0.0
aa92b107eca7e828d7e47dc9b7a37a5b888f39c4,helterskelterr/ofbizApp,,"File: framework/base/src/base/org/ofbiz/base/component/ComponentConfig.java
Status: modified
```diff
@@ -33,6 +33,8 @@
 
 import javolution.util.FastList;
 import javolution.util.FastMap;
+
+import org.ofbiz.base.location.FlexibleLocation;
 import org.ofbiz.base.util.*;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -488,7 +490,7 @@ public URL getURL(String resourceLoaderName, String location) throws ComponentEx
             String fullLocation = getFullLocation(resourceLoaderName, location);
             URL url = null;
             try {
-                url = new URL(fullLocation);
+                url = FlexibleLocation.resolveLocation(location);
             } catch (java.net.MalformedURLException e) {
                 throw new ComponentException(""Error with malformed URL while trying to load URL resource at location ["" + fullLocation + ""]"", e);
             }
```",Changed to use FlexibleLocation so that for url resource loaders in component config files you can use the component:// style url for resources in components,4,4,4,4,fix ComponentConfig to use FlexibleLocation instead of URL,1,4,4,4,"Refactor: Improve URL resolution in ComponentConfig This commit refactors the `getURL(String resourceLoaderName, String location)` method in the `ComponentConfig.java` file. The method now resolves the location in the context of the component, which improves the internal structure of the code without altering its external behavior.",3,3,4,4,"refactor: Use FlexibleLocation to construct URLs
Replaced manual URL construction with FlexibleLocation, making the code more robust and easier to maintain by delegating URL resolution to a dedicated utility class.","refactor: Resolve URL in ComponentConfig using FlexibleLocation
Changed the implementation of getURL method to use FlexibleLocation.resolveLocation instead of creating a URL object directly, improving resource location resolution to URLs.",3.99,10.81,11.51,0.0,"refactor: Improve URL resolution in ComponentConfig
Refactored the getURL method to use FlexibleLocation.resolveLocation for resolving resource locations to URLs. This change improves the internal structure of the ComponentConfig class, making it more efficient and easier to maintain.",20.75,31.71,39.47,0.0
c5c2b2c9b3f2e5b8cb6e2960b2a6daf9eb9a335c,helterskelterr/ofbizApp,,"File: framework/base/src/base/org/ofbiz/base/util/AliasKeyManager.java
Status: modified
```diff
@@ -48,7 +48,7 @@ public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket so
             String[] aliases = keyManager.getClientAliases(keyType[i], null); // ignoring the issuers 
             if (aliases != null && aliases.length > 0) {
                 for (int x = 0; x < aliases.length; x++) {
-                    if (this.alias.equals(aliases[i])) {
+                    if (this.alias.equals(aliases[x])) {
                         if (Debug.verboseOn()) Debug.logVerbose(""chooseClientAlias for keyType ["" + keyType[i] + ""] got alias "" + this.alias, module);
                         //Debug.logInfo(new Exception(), ""Location where chooseClientAlias is called"", module);
                         return this.alias;
```",Just implementing Adam's request.,0,0,4,3,add logVerbose logging to AliasKeyManager,0,0,4,4,"Fix: Correct index used in 'chooseClientAlias' method In the 'chooseClientAlias' method of the 'AliasKeyManager.java' file, the wrong index was being used in the if condition inside a for loop. This commit fixes this bug by replacing 'aliases[i]' with 'aliases[x]'.",4,4,4,4,"fix: Fix alias matching in chooseClientAlias method
Fixed incorrect alias matching in chooseClientAlias method by using the correct loop variable, preventing potential security issues.","fix: Fix alias comparison in chooseClientAlias
The method was incorrectly comparing the alias with aliases[i] instead of aliases[x]. This fix ensures the correct index is used.",5.62,25.4,21.36,0.0,"fix: Fix alias matching in chooseClientAlias method
The method chooseClientAlias was incorrectly using the index 'i' instead of 'x' when comparing aliases, leading to incorrect alias matching. This commit fixes the issue by using the correct index 'x' in the comparison.",12.98,27.5,35.9,0.0
c882ee248d8dc0d770079f2ece6db68b8cab0a49,helterskelterr/ofbizApp,,"File: framework/base/src/base/org/ofbiz/base/util/cache/CacheLineTable.java
Status: modified
```diff
@@ -88,16 +88,17 @@ public synchronized Object put(Object key, Object value) {
             if (Debug.verboseOn()) Debug.logVerbose(""In CacheLineTable tried to put with null key, using NullObject"" + this.cacheName, module);
             key = ObjectType.NULL;
         }
-        memoryTable.put(key, value);
+        Object oldValue = memoryTable.put(key, value);
         if (fileTable != null) {
             try {
+                if (oldValue == null) oldValue = fileTable.get(key);
                 fileTable.put(key, value);                
                 CacheLineTable.jdbmMgr.commit();
             } catch (IOException e) {
                 Debug.logError(e, module);
             }
         }
-        return value;
+        return oldValue;
     }
 
     public Object get(Object key) {
```","Remove was returning the *new* object, instead of the *old*. Closes https://issues.apache.org/jira/browse/OFBIZ-1322.",2,0,4,0,fix npe in CacheLineTable,0,2,4,4,Refactor: Improve design of put method in CacheLineTable.java The put method in the CacheLineTable.java file has been refactored to return the previous value associated with the key instead of the new value. This change improves the design of the method without altering its functionality. The associated issue report [OFBIZ-1322] indicates that there may have been a similar issue with the remove method in the same class.,0,1,3,4,"refactor: Update put method to return previous value
This change ensures the `put` method returns the correct value in case of a cache hit by returning the previous value associated with the key, if any.","refactor: Return previous value from put method in CacheLineTable
Updated the put method to handle null keys, synchronize access, and persist changes to disk if a file table is present.",9.5,27.45,18.95,0.0,"refactor: Improve put method in CacheLineTable
This commit refactors the put method in CacheLineTable to return the previous value associated with the key, if any, and ensures thread safety. It also updates the file-based table if it exists. This change improves the cache management functionality.",22.03,44.64,31.11,0.0
cd5870de6af529b968547a6130aaafa33d0f4ffc,helterskelterr/ofbizApp,,"File: framework/entity/src/org/ofbiz/entity/model/ModelGroupReader.java
Status: modified
```diff
@@ -197,7 +197,7 @@ public Collection<String> getEntityNamesByGroup(String groupName) {
         Collection<String> enames = new LinkedList<String>();
 
         if (groupName == null || groupName.length() <= 0) return enames;
-        if (gc == null || gc.size() < 0) return enames;
+        if (gc == null || gc.size() == 0) return enames;
         for (Map.Entry<String, String> entry: gc.entrySet()) {
             if (groupName.equals(entry.getValue())) enames.add(entry.getKey());
         }
```",Collection size can not be negative.,4,4,4,4,fix npe in ModelGroupReader,0,1,4,4,"Fix: Ensure getEntityNamesByGroup returns empty collection for null or empty group cache In the method getEntityNamesByGroup in the ModelGroupReader.java file, the condition checking the size of the group cache has been modified. Previously, the method would return an empty collection if the group cache was null or if its size was less than 0. This has been corrected to return an empty collection if the group cache is null or if its size is 0. This ensures that the method correctly returns an empty collection when the group cache is null or empty.",4,4,4,4,"fix: Handle empty group collection in getEntityNamesByGroup
Prevent unexpected behavior by handling null or empty group collections in getEntityNamesByGroup, ensuring consistent results.","fix: Handle empty gc correctly in getEntityNamesByGroup
Previously, the method would return incorrectly when gc was empty.",0.59,15.65,10.94,0.0,"fix: Correct null check in ModelGroupReader
Fixed a bug in the getEntityNamesByGroup method where it would return an empty collection if the group collection size was less than 0. Now, it correctly returns an empty collection if the group collection size is 0.",14.68,41.18,30.22,0.0
5fd95a9590a6fa7dc530bd85c37aa0bbed1f76db,helterskelterr/ofbizApp,,"File: framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java
Status: modified
```diff
@@ -485,8 +485,12 @@ public void doRequest(HttpServletRequest request, HttpServletResponse response,
         // if the request has the save-last-view attribute set, save it now before the view can be rendered or other chain done so that the _LAST* session attributes will represent the previous request
         if (nextRequestResponse.saveLastView) {
         	// Debug.log(""======save last view: "" + session.getAttribute(""_LAST_VIEW_NAME_""));
-            session.setAttribute(""_SAVED_VIEW_NAME_"", session.getAttribute(""_LAST_VIEW_NAME_""));
-            session.setAttribute(""_SAVED_VIEW_PARAMS_"", session.getAttribute(""_LAST_VIEW_PARAMS_""));
+            String lastViewName = (String) session.getAttribute(""_LAST_VIEW_NAME_"");
+            // Do not save the view if the last view is the same as the current view and saveCurrentView is false
+            if (!(!nextRequestResponse.saveCurrentView && ""view"".equals(nextRequestResponse.type) && nextRequestResponse.value.equals(lastViewName))) {
+                session.setAttribute(""_SAVED_VIEW_NAME_"", session.getAttribute(""_LAST_VIEW_NAME_""));
+                session.setAttribute(""_SAVED_VIEW_PARAMS_"", session.getAttribute(""_LAST_VIEW_PARAMS_""));
+            }
         }
         String saveName = null;
         if (nextRequestResponse.saveCurrentView) { saveName = ""SAVED""; }
```",Do not save the view if the last view is the same as the current view and saveCurrentView is false,1,4,4,4,add support for üòÖ,0,0,4,0,"Style: Remove commented out print statements in CategoryContentWrapper This commit removes some commented out print statements in the CategoryContentWrapper class. These comments were not contributing to the functionality of the code and were removed to improve the readability of the code. The functionality of the CategoryContentWrapper class, which retrieves and displays content for a specific product category, remains unchanged.",4,4,3,4,"fix: Prevent unnecessary saving of last view name and params
This optimization prevents unnecessary session attribute updates by avoiding redundant saves of the last view name and params when the current view is the same and saveCurrentView is false.","fix: Avoid overwriting saved view with current view
Added a check to prevent saving the view when the last view is the same as the current view and saveCurrentView is false.",2.97,14.43,6.7,0.0,"refactor: Improve request handling logic
Refactor the request handling logic in RequestHandler to avoid saving the view if the last view is the same as the current view and saveCurrentView is false. This change improves the efficiency and accuracy of the request handling process.",3.72,17.65,16.44,0.0
86b15e131cc28624d258b1415652c8b088e22d85,helterskelterr/ofbizApp,,"File: applications/product/src/org/ofbiz/product/product/ProductSearch.java
Status: modified
```diff
@@ -717,7 +717,7 @@ public ArrayList<String> makeProductIdList(EntityListIterator eli) {
                 productIds.add(searchResult.getString(""mainProductId""));
                 productIdSet.add(searchResult.getString(""mainProductId""));
 
-                while (((searchResult = (GenericValue) eli.next()) != null) && (maxResults == null || numRetreived < maxResults.intValue())) {
+                while ((maxResults == null || numRetreived < maxResults.intValue()) && ((searchResult = (GenericValue) eli.next()) != null)) {
                     String productId = searchResult.getString(""mainProductId"");
                     if (!productIdSet.contains(productId)) {
                         productIds.add(productId);
```",Fixed problem preventing the correct number of records being determined when setting maxRows for the product search query,4,4,4,4,fix ProductSearch üòÖ,0,1,4,0,"Refactor: Change condition order in while loop of makeProductIdList method The condition order in the while loop of the makeProductIdList method in the ProductSearch class has been changed. This is a refactor and does not affect the overall functionality of the method or the class. The method is used to create a list of unique product IDs from the given EntityListIterator, handling pagination and avoiding duplicates. The class provides utilities for product search based on various constraints like categories, features, and keywords.",4,4,2,4,"fix: Fix condition order in makeProductIdList
Reorder the condition in the while loop to avoid null pointer exceptions and ensure correct pagination.","fix: Fix null pointer exception in ProductSearch.makeProductIdList
Swap the order of conditions in the while loop to prevent null pointer exceptions.",1.34,21.36,12.05,0.0,"refactor: Improve logic in ProductSearch.makeProductIdList
Rearrange conditional statements in makeProductIdList method to improve code readability and maintainability. This change does not affect the method's functionality or behavior.",2.72,22.02,15.21,0.0
015bfa6df25abf19fe8eb36a205d7ca8dfbc27ab,helterskelterr/ofbizApp,,"File: applications/product/src/org/ofbiz/product/store/ProductStoreWorker.java
Status: modified
```diff
@@ -76,8 +76,8 @@ public static GenericValue getProductStore(ServletRequest request) {
 
     public static String getProductStoreId(ServletRequest request) {
         HttpServletRequest httpRequest = (HttpServletRequest) request;
-        HttpSession session = httpRequest.getSession();
-        if (session.getAttribute(""productStoreId"") != null) {
+        HttpSession session = httpRequest.getSession(false);
+        if (session != null && session.getAttribute(""productStoreId"") != null) {
             return (String) session.getAttribute(""productStoreId"");
         } else {
             GenericValue webSite = CatalogWorker.getWebSite(request);
```",Don't force the session to be created in getProductStoreId.,0,4,4,4,fix npe in ProductStoreWorker,0,0,4,4,"Fix: Handle potential null session in getProductStoreId method The getProductStoreId method in the ProductStoreWorker.java file has been updated to handle a potential null session. Previously, the method would create a new session if one did not already exist. This has been changed so that a new session is not created. Additionally, a null check has been added for the session before attempting to get the productStoreId attribute. This change ensures that a NullPointerException is not thrown if the session is null.",4,4,4,4,"fix: Prevent unnecessary session creation in getProductStoreId
Prevent unnecessary session creations, reducing performance overhead, by using getSession(false) to return an existing session or null if none exists.","fix: Check for null session in getProductStoreId
Avoid potential NullPointerException by verifying session existence before retrieving productStoreId.",0.7,12.96,6.24,0.0,"fix: Improve getProductStoreId method
This commit fixes the getProductStoreId method to handle the case where the session is null. It now checks for a null session before attempting to retrieve the product store ID from it. This change ensures that the method is more robust and less prone to errors.",13.15,35.11,29.5,0.0
0d0a229fdb24765078940b5f062bebcc82ef808d,helterskelterr/ofbizApp,,"File: framework/base/src/org/ofbiz/base/config/JNDIConfigUtil.java
Status: modified
```diff
@@ -63,13 +63,13 @@ private static Document getXmlDocument() throws GenericConfigException {
     public static void initialize(Element rootElement) throws GenericConfigException {
         // jndi-server - jndiServerInfos
         for (Element curElement: UtilXml.childElementList(rootElement, ""jndi-server"")) {
-            JNDIConfigUtil.JndiServerInfo jndiServerInfo = new JNDIConfigUtil.JndiServerInfo(curElement);
+            JndiServerInfo jndiServerInfo = new JndiServerInfo(curElement);
 
-            JNDIConfigUtil.jndiServerInfos.put(jndiServerInfo.name, jndiServerInfo);
+            jndiServerInfos.put(jndiServerInfo.name, jndiServerInfo);
         }
     }
 
-    public static JNDIConfigUtil.JndiServerInfo getJndiServerInfo(String name) {
+    public static JndiServerInfo getJndiServerInfo(String name) {
         return jndiServerInfos.get(name);
     }
 
```","For internal classes, you don't need to prefix with the containing class.",4,4,4,4,remove unused method,0,0,4,4,"Refactor: Remove class name prefix in method calls and variable declarations This commit refactors the 'initialize' method in the JNDIConfigUtil class. The class name prefix in the method calls and variable declarations has been removed to improve code readability. Additionally, a new method 'getJndiServerInfo' has been added which retrieves the JNDI server information for the given name.",4,3,4,4,"refactor: Remove class qualification from JNDIConfigUtil
Simplified JNDIConfigUtil by removing redundant class qualifications, making the code easier to read and understand.","refactor: Simplify JNDIConfigUtil by removing redundant class references
Removed unnecessary class qualifications for JndiServerInfo in initialize and getJndiServerInfo methods, improving code readability and conciseness.",2.17,18.18,13.15,0.0,"refactor: Simplify JNDIConfigUtil class
Removed unnecessary qualification of JndiServerInfo class in JNDIConfigUtil, making the code more concise and easier to read. This change does not affect the functionality of the class.",3.43,20.69,13.11,0.0
42acc7a8a3f7f2b41927a2d6aa16e6ce36368477,helterskelterr/ofbizApp,,"File: framework/widget/src/org/ofbiz/widget/form/ModelFormField.java
Status: modified
```diff
@@ -1367,7 +1367,7 @@ public void setRequiredField(boolean required) {
     }
 
     public boolean isSortField() {
-        return this.sortField != null ? this.sortField.booleanValue() : false;
+        return this.sortField != null && this.sortField.booleanValue();
     }
 
     /**
```",Minor code simplification: no functional changes.,4,4,4,4,fix quality flaw,0,0,4,4,"Refactor: Corrected logic in isSortField method The logic in the isSortField method of the ModelFormField class has been corrected. Previously, the method returned true if the sort field was not null, regardless of its boolean value. Now, it returns true only if the sort field is not null and its boolean value is true. This change ensures the correct behavior of the method.",4,0,3,4,"fix: Return correct boolean value for null sortField
Ensures `isSortField()` returns correct boolean value when `sortField` is null or true, fixing incorrect behavior.","fix: Return correct value in isSortField method
Previously, the method returned false when the sort field was null, even if it was set to true. This change ensures the method correctly checks the sort field value.",1.67,18.82,16.16,0.0,"fix: Improve isSortField method logic
The isSortField method has been modified to correctly return true only if the sortField is not null and its value is true. This change fixes the previous implementation that would return true if the sortField was not null, regardless of its value.",26.51,40.37,38.47,0.0
1659ab436259e12fe07292f55f1831520c10164f,helterskelterr/ofbizApp,,"File: framework/base/src/org/ofbiz/base/util/ObjectWrapper.java
Status: modified
```diff
@@ -48,7 +48,7 @@ public NestedException(Throwable cause) {
         }
     }
 
-    public class ConfigurationException extends ObjectException {
+    public class ConfigurationException extends RuntimeException {
         public ConfigurationException(String msg) {
             super(msg);
         }
```",ConfigurationException is now a RuntimeException.,0,4,4,4,make ConfigurationException public,0,0,4,4,"Refactor: Change ConfigurationException to extend RuntimeException In the class ObjectWrapper, the ConfigurationException class has been refactored to extend RuntimeException instead of ObjectException. This change is part of an effort to improve the handling of exceptions in the ObjectWrapper class, which provides a method to retrieve an object and handle exceptions related to it.",4,4,4,4,"fix: Change ConfigurationException to extend RuntimeException
Changed ConfigurationException to extend RuntimeException, aligning with Java's built-in exception hierarchy and best practices for unchecked exceptions.","refactor: Make ConfigurationException extend RuntimeException
Updated the inheritance hierarchy of ConfigurationException to improve exception handling.",6.0,26.67,14.24,0.0,"refactor: Change ConfigurationException to extend RuntimeException
This commit changes the parent class of ConfigurationException from ObjectException to RuntimeException. This change does not affect the functionality of the ObjectWrapper class, which still provides a wrapper for objects with exception handling mechanisms.",16.61,43.48,42.72,0.0
380246944bc1fc1ef1cc39cf95810e3dc10c2243,helterskelterr/ofbizApp,,"File: framework/base/src/org/ofbiz/base/util/cache/UtilCache.java
Status: modified
```diff
@@ -644,12 +644,8 @@ public static <K, V> UtilCache<K, V> getOrCreateUtilCache(String name, int sizeL
         if (existingCache != null) return existingCache;
         String cacheName = name + getNextDefaultIndex(name);
         UtilCache<K, V> newCache = new UtilCache<K, V>(cacheName, sizeLimit, maxInMemory, expireTime, useSoftReference, useFileSystemStore, name, names);
-        UtilCache<K, V> oldCache = (UtilCache<K, V>) utilCacheTable.putIfAbsent(name, newCache);
-        if (oldCache == null) {
-            return newCache;
-        } else {
-            return oldCache;
-        }
+        utilCacheTable.putIfAbsent(name, newCache);
+        return (UtilCache<K, V>) utilCacheTable.get(name);
     }
 
     public static <K, V> UtilCache<K, V> createUtilCache(String name, int sizeLimit, int maxInMemory, long expireTime, boolean useSoftReference, boolean useFileSystemStore, String... names) {
```","Slight tweak to getOrCreateUtilCache, to get better code coverage.",3,3,4,4,fix UtilCache üòÖ,0,1,4,4,"Refactor: Simplify getOrCreateUtilCache method in UtilCache.java The getOrCreateUtilCache method in UtilCache.java has been refactored for simplicity. The new implementation directly puts the newCache in the utilCacheTable and returns the cache from the utilCacheTable, instead of checking if an oldCache was null and returning newCache if true, and oldCache if false. This change improves the structure of the code without altering its functionality.",4,4,4,4,"fix: Use putIfAbsent to ensure thread-safety in getOrCreateUtilCache
This change replaces manual thread-safety implementation with `putIfAbsent` to simplify code and ensure correctness in `getOrCreateUtilCache`.","refactor: Use putIfAbsent to ensure thread-safety in getOrCreateUtilCache
Removed unnecessary oldCache variable and simplified the method logic to improve readability and maintainability.",1.16,6.9,8.21,0.0,"refactor: Simplify getOrCreateUtilCache method
Removed unnecessary conditional logic in getOrCreateUtilCache method, replacing it with a more concise and efficient implementation that achieves the same functionality. This change improves the internal structure of the UtilCache class, making it easier to understand and maintain.",10.45,28.57,30.32,0.0
3234ce48d57222043d1fb8aec33d81315a5f30d9,apache/poi,,"File: src/testcases/org/apache/poi/hssf/record/formula/TestFormulaParser.java
Status: modified
```diff
@@ -54,6 +54,16 @@ public void testFormulaWithSpaceNRef() {
         assertTrue(""two tokens expected, got ""+ptgs.length,ptgs.length == 2);
     }
     
+    public void testFormulaWithString() {
+        Ptg[] ptgs;
+        FormulaParser fp;
+        fp = new FormulaParser(""\""hello\"" & \""world\"" ;"");
+        fp.parse();
+        ptgs = fp.getRPNPtg();
+        assertTrue(""three token expected, got "" + ptgs.length, ptgs.length == 3);
+    }
+
+    
      public static void main(String [] args) {
         System.out.println(""Testing org.apache.poi.hssf.record.formula.FormulaParser"");
         junit.textui.TestRunner.run(TestFormulaParser.class);
```",test for parsing strings,4,4,4,4,add TestFormulaParser testFormulaWithString,4,4,4,4,Feat: Add new test method in TestFormulaParser A new test method `testFormulaWithString` has been added to the `TestFormulaParser` class. This method tests the formula parsing functionality with a string input.,4,4,4,4,"feat: Add test for string concatenation formula parsing
Adds a unit test to cover the parsing of formulas with string concatenation using the ampersand (&) operator, ensuring the FormulaParser class behaves correctly in this scenario.","feat: Add test for string concatenation formula parsing
Verify FormulaParser's ability to handle formulas that concatenate two strings using the ampersand (&) operator.",7.21,31.75,30.79,0.0,"feat: Add test for parsing formula with string concatenation
This commit introduces a new unit test, testFormulaWithString, to cover the parsing of formulas that concatenate two strings using the ampersand (&) operator. This test ensures the FormulaParser class correctly handles string concatenation operations.",6.95,33.8,38.4,0.0
3a59e361ff066a5d3d25fbbf05fab8d848f1f6e0,apache/poi,Y,"File: src/java/org/apache/poi/util/HexDump.java
Status: modified
```diff
@@ -73,6 +73,12 @@ public synchronized static void dump(final byte [] data, final long offset,
             throws IOException, ArrayIndexOutOfBoundsException,
                     IllegalArgumentException
     {
+        if (data.length == 0)
+        {
+            stream.write( ""No Data"".getBytes() );
+            stream.flush();
+            return;
+        }
         if ((index < 0) || (index >= data.length))
         {
             throw new ArrayIndexOutOfBoundsException(
@@ -83,6 +89,7 @@ public synchronized static void dump(final byte [] data, final long offset,
         {
             throw new IllegalArgumentException(""cannot write to nullstream"");
         }
+
         long         display_offset = offset + index;
         StringBuffer buffer         = new StringBuffer(74);
 
```


File: src/testcases/org/apache/poi/util/TestHexDump.java
Status: modified
```diff
@@ -277,6 +277,11 @@ public void testDump()
 
             // as expected
         }
+
+        // verify proper behaviour with empty byte array
+        ByteArrayOutputStream os = new ByteArrayOutputStream( );
+        HexDump.dump( new byte[0], 0, os, 0 );
+        assertEquals( ""No Data"", os.toString() );
     }
 
     public void testToHex()
```",Empty byte array case for HexDump,0,3,4,4,fix hex dump of HexDump,0,1,4,4,"Fix: Handle empty data array in HexDump.dump method In the HexDump.dump method, a condition was added to handle the case when the data array is empty. If the data array is empty, the method now writes ""No Data"" to the output stream and then returns. This change ensures that the method behaves correctly when given an empty data array. A test case was also added in TestHexDump.testDump to verify this new behavior. The test case checks that ""No Data"" is written to the output stream when an empty data array is passed to the HexDump.dump method.",4,4,4,4,"fix: Handle empty input in dump method
Prevents `ArrayIndexOutOfBoundsException` by handling empty input in the `dump` method, and updates the corresponding test to cover this scenario.","fix: Handle empty byte array in HexDump.dump
Add check for empty byte array and write 'No Data' to output stream. Update test case to verify behavior.",0.58,22.4,8.56,0.0,"fix: Handle empty byte array in HexDump
This commit fixes the HexDump.dump method to properly handle empty byte arrays by writing 'No Data' to the output stream. A new test case is added to verify this behavior.",6.24,37.96,23.08,0.0
98b8864c401f8d3d605ea06ae7294ce226a19471,apache/poi,,"File: src/scratchpad/src/org/apache/poi/hslf/HSLFSlideShow.java
Status: modified
```diff
@@ -35,6 +35,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.hpsf.SummaryInformation;
 import org.apache.poi.hpsf.DocumentSummaryInformation;
 
+import org.apache.poi.hslf.exceptions.CorruptPowerPointFileException;
 import org.apache.poi.hslf.exceptions.EncryptedPowerPointFileException;
 import org.apache.poi.hslf.record.*;
 import org.apache.poi.hslf.usermodel.PictureData;
@@ -272,6 +273,13 @@ private void readPictures() throws IOException {
             byte[] imgdata = new byte[imgsize];
             System.arraycopy(pictstream, pos, imgdata, 0, imgdata.length);
 
+			// The image size must be 0 or greater
+			// (0 is allowed, but odd, since we do wind on by the header each
+			//  time, so we won't get stuck)
+			if(imgsize < 0) {
+				throw new CorruptPowerPointFileException(""The file contains a picture, at position "" + p.size() + "", which has a negatively sized data length, so we can't trust any of the picture data"");
+			}
+
 			// If they type (including the bonus 0xF018) is 0, skip it
 			if(type == 0) {
 				System.err.println(""Problem reading picture: Invalid image type 0, on picture with length"" + imgsize + "".\nYou document will probably become corrupted if you save it!"");
```",Throw an exception if a picture claims to have a negative amount of data. Should avoid problem in bug #41357,4,4,4,4,add debug info,4,3,4,4,"Fix: Handle negative image size in readPictures method This commit modifies the `readPictures()` method in `HSLFSlideShow.java` to handle a potential error situation where the image size is less than 0. A new exception `CorruptPowerPointFileException` is thrown when this condition is met, ensuring the integrity of the picture data.",4,4,4,4,"fix: Reject negatively sized picture data
Prevent corruption by rejecting negatively sized picture data, ensuring trustworthy picture data in HSLFSlideShow's readPictures method.","fix: Throw exception when reading picture with negative size
Added a check to prevent potential corruption when reading pictures from a PowerPoint file by ensuring the image size is not negative, and throwing a CorruptPowerPointFileException if it is.",2.72,11.43,17.25,0.0,"fix: Validate image size in HSLFSlideShow
This commit fixes a potential issue in HSLFSlideShow where a negatively sized image data length could cause corruption. It adds a check to ensure the image size is 0 or greater, and throws a CorruptPowerPointFileException if the size is invalid.",12.11,34.04,25.48,0.0
a817230732d857295ab7a1067aa8857af9e3502a,apache/poi,,"File: src/java/org/apache/poi/hssf/usermodel/HSSFSheet.java
Status: modified
```diff
@@ -347,18 +347,25 @@ public int getPhysicalNumberOfRows()
     }
 
     /**
-     * gets the first row on the sheet
-     * @return the number of the first logical row on the sheet
+     * Gets the first row on the sheet
+     * @return the number of the first logical row on the sheet, zero based
      */
-
     public int getFirstRowNum()
     {
         return firstrow;
     }
 
     /**
-     * gets the last row on the sheet
-     * @return last row contained n this sheet.
+     * Gets the number last row on the sheet.
+     * Owing to idiosyncrasies in the excel file
+     *  format, if the result of calling this method
+     *  is zero, you can't tell if that means there 
+     *  are zero rows on the sheet, or one at
+     *  position zero. For that case, additionally
+     *  call {@link #getPhysicalNumberOfRows()} to
+     *  tell if there is a row at position zero
+     *  or not. 
+     * @return the number of the last row contained in this sheet, zero based.
      */
 
     public int getLastRowNum()
```",Improve javadocs relating to getLastRowNumber,4,4,4,4,fix javadoc warnings,3,3,4,4,"Refactor: Improve clarity in HSSFSheet class comments and method descriptions This commit refactors the HSSFSheet class in the Apache POI project. The changes are mainly in the comments and method descriptions, which are intended to improve the clarity of the code. The HSSFSheet class represents a worksheet in an Excel file, and the changes allow for better understanding and manipulation of rows, cells, and sheet properties. No associated issues or pull requests were found for this commit.",4,4,4,4,"style: Format Javadoc comments in HSSFSheet.java
No functional changes were made, only formatting adjustments to Javadoc comments in HSSFSheet.java to conform to standard conventions.","style: Update Javadoc comments in HSSFSheet.java
Improved comments for getFirstRowNum and getLastRowNum methods to provide clearer descriptions and handle edge cases.",1.24,9.8,5.31,0.0,"style: Improve Javadoc comments in HSSFSheet
This commit updates the Javadoc comments for getFirstRowNum and getLastRowNum methods in HSSFSheet class to make them more descriptive and clear. The changes include rephrasing the comments to follow the conventional JavaDoc style and adding additional information to clarify the behavior of the getLastRowNum method.",5.32,23.62,18.49,0.0
e07b60d81466c0d07ef2bfd694b222806ea18880,apache/poi,,"File: src/scratchpad/testcases/org/apache/poi/hwpf/converter/TestWordToFoConverter.java
Status: modified
```diff
@@ -71,6 +71,15 @@ public void testEquation() throws Exception
                 .contains( ""<!--Image link to '0.emf' can be here-->"" ) );
     }
 
+    public void testInnerTable() throws Exception
+    {
+        final String sampleFileName = ""innertable.doc"";
+        String result = getFoText( sampleFileName );
+
+        assertTrue( result
+                .contains( ""padding-end=\""0.0in\"" padding-start=\""0.0in\"" width=\""1.0770833in\"""" ) );
+    }
+
     public void testHyperlink() throws Exception
     {
         final String sampleFileName = ""hyperlink.doc"";
```",add test case for lost cell properties,4,4,4,4,add unit test for word inner class,4,0,4,3,Feat: Add test method for inner table properties in TestWordToFoConverter A new test method `testInnerTable()` has been added to the `TestWordToFoConverter.java` file. This method tests if the inner table in the document has the correct padding and width properties.,4,4,4,4,"feat: Introduce test for inner table formatting in Word-to-FO conversion
Adds a unit test to cover the inner table formatting in Word-to-FO conversion, which was previously untested. This ensures that future changes to the conversion process do not inadvertently break this functionality.","feat: Add test for inner table formatting in Word-to-FO conversion
Verify that the generated FO text for an inner table in a document contains the expected padding and width attributes.",10.38,34.57,29.74,0.0,"feat: Add test for inner table formatting in Word-to-FO conversion
This commit introduces a new unit test to verify the formatting of inner tables in Word-to-FO conversion. The test method checks for specific padding and width attributes in the generated FO text. This enhancement improves the test coverage of the Word-to-FO conversion feature.",10.67,39.13,45.17,0.0
0c2415165f0da8e68e44979f580dfcbf5e886053,apache/poi,,"File: src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFBugs.java
Status: modified
```diff
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.util.Calendar;
 import java.util.List;
 
 import org.apache.poi.EncryptedDocumentException;
@@ -40,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.poifs.filesystem.POIFSFileSystem;
 import org.apache.poi.ss.formula.WorkbookEvaluator;
 import org.apache.poi.ss.formula.eval.ErrorEval;
+import org.apache.poi.ss.formula.eval.NumberEval;
 import org.apache.poi.ss.formula.eval.ValueEval;
 import org.apache.poi.ss.formula.functions.Function;
 import org.apache.poi.ss.usermodel.*;
@@ -1753,12 +1755,11 @@ public void testBug56688_3() {
     public void testBug56688_4() {
         XSSFWorkbook excel = XSSFTestDataSamples.openSampleWorkbook(""56688_4.xlsx"");
         
-//        Calendar calendar = Calendar.getInstance();
-//        calendar.add(Calendar.MONTH, 2);
-//        double excelDate = DateUtil.getExcelDate(calendar.getTime());
-//        NumberEval eval = new NumberEval(Math.floor(excelDate));
-//        checkValue(excel, eval.getStringValue() + "".0"");
-        checkValue(excel, ""41904.0"");
+        Calendar calendar = Calendar.getInstance();
+        calendar.add(Calendar.MONTH, 2);
+        double excelDate = DateUtil.getExcelDate(calendar.getTime());
+        NumberEval eval = new NumberEval(Math.floor(excelDate));
+        checkValue(excel, eval.getStringValue() + "".0"");
     }
 
     private void checkValue(XSSFWorkbook excel, String expect) {
```",Fix test to make it work on different date as well,4,4,4,4,fix unit test,4,3,4,4,"Fix: Corrected date handling in testBug56688_4() In the method `testBug56688_4()`, the code for setting a date two months from now, converting that date to Excel format, and checking the value was uncommented. This change allows the method to test the bug 56688_4 more accurately by considering the date handling.",4,4,4,4,"refactor: Refactor TestXSSFBugs to correctly calculate and format Excel dates
Improved date handling accuracy in TestXSSFBugs by correctly calculating and formatting Excel dates, ensuring consistent results in Excel files.","fix: Fix testBug56688_4 to correctly calculate Excel dates
Updated the test method to use Calendar and DateUtil to get the correct Excel date, and then verify the result.",2.9,12.5,14.07,0.0,"fix: Improve test case for bug 56688_4
This commit updates the test case for bug 56688_4 to correctly test the date handling in Excel files. The changes include removing commented out code and using the correct date calculation and formatting. This ensures that the test case accurately verifies the bug fix.",12.88,25.0,30.17,0.0
abae7473fccd54152563a9512d88c5b05de024f1,apache/poi,,"File: src/scratchpad/src/org/apache/poi/hslf/model/HeadersFooters.java
Status: modified
```diff
@@ -36,6 +36,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public final class HeadersFooters {
 
+    private static final String _ppt2007tag = ""___PPT12"";
+
     private final HeadersFootersContainer _container;
     private final HSLFSheet _sheet;
     private final boolean _ppt2007;
@@ -54,7 +56,7 @@ public HeadersFooters(HSLFSheet sheet, short headerFooterType) {
         
         // detect if this ppt was saved in Office2007
         String tag = ppt.getSlideMasters().get(0).getProgrammableTag();
-        _ppt2007 = ""___PPT12"".equals(tag);
+        _ppt2007 = _ppt2007tag.equals(tag);
 
         SheetContainer sc = _sheet.getSheetContainer();
         HeadersFootersContainer hdd = (HeadersFootersContainer)sc.findFirstOfType(RecordTypes.HeadersFooters.typeID);
```",extract string constant out of code,4,4,4,4,fix npe in HeadersFooters,0,0,4,4,"Refactor: Extract constant string in HeadersFooters class This commit introduces a refactoring change in the HeadersFooters class. A constant string ""_ppt2007tag"" has been extracted and used in the class. This change does not affect the functionality of the class, which manages the visibility, formatting, and content of headers and footers in a PowerPoint slide.",4,4,4,4,"refactor: Extract magic string '___PPT12' to a constant
Extracted magic string to a named constant for better code clarity and reduced duplication.","refactor: Extract magic string '___PPT12' to a constant
Moved the magic string '___PPT12' to a private static final variable _ppt2007tag in HeadersFooters, improving code readability and maintainability.",2.62,18.67,10.91,0.0,"refactor: Extract magic string to constant in HeadersFooters
The commit extracts the magic string '___PPT12' to a constant variable _ppt2007tag in the HeadersFooters class, making the code more readable and maintainable.",8.37,33.33,20.08,0.0
7ca959ac56dcf04e03d21443aa71bcb46dde0a42,apache/poi,,"File: src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFBugs.java
Status: modified
```diff
@@ -75,7 +75,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.poi.ss.util.CellRangeAddress;
 import org.apache.poi.ss.util.CellReference;
 import org.apache.poi.ss.util.CellUtil;
+import org.apache.poi.util.IOUtils;
 import org.apache.poi.util.LocaleUtil;
+import org.apache.poi.util.NullOutputStream;
 import org.apache.poi.util.TempFile;
 import org.apache.poi.xssf.XLSBUnsupportedException;
 import org.apache.poi.xssf.XSSFITestDataProvider;
@@ -3162,13 +3164,7 @@ public void test53611() throws IOException {
 
         // we currently only populate the dimension during writing out
         // to avoid having to iterate all rows/cells in each add/remove of a row or cell
-        //OutputStream str = new FileOutputStream(""/tmp/53611.xlsx"");
-        OutputStream str = new ByteArrayOutputStream();
-        try {
-            wb.write(str);
-        } finally {
-            str.close();
-        }
+        IOUtils.write(wb, new NullOutputStream());
 
         assertEquals(""B2:I5"", ((XSSFSheet) sheet).getCTWorksheet().getDimension().getRef());
 
```",simplify unit test code with IOUtils.write to a NullOutputStream,4,4,4,4,fix failing test,0,1,4,4,"Refactor: Simplify workbook writing in test53611 This commit simplifies the way the workbook is written out in the test method `test53611()`. The previous implementation used a `ByteArrayOutputStream` to write the workbook, which was then closed in a finally block. This has been replaced with a single line using `IOUtils.write()`, which automatically handles the closing of the stream. This change improves the readability and maintainability of the code without altering the functionality of the test.",4,4,4,4,"refactor: Simplify test53611 output stream handling
Replaced FileOutputStream and ByteArrayOutputStream with IOUtils.write and NullOutputStream to simplify test53611's output stream handling, reducing unnecessary file I/O operations.","refactor: Use IOUtils.write and NullOutputStream in test53611
Replace FileOutputStream and ByteArrayOutputStream to improve code readability and maintainability.",1.69,16.0,8.94,0.0,"refactor: Simplify test53611 method
Refactor the test53611 method to use IOUtils.write and NullOutputStream instead of FileOutputStream and ByteArrayOutputStream, making the code more concise and efficient.",1.92,24.0,13.92,0.0
ad14771ed871c21038779ee4829e6520f24207bf,apache/poi,,"File: src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFComment.java
Status: modified
```diff
@@ -109,7 +109,7 @@ public int getRow() {
     @Override
     public boolean isVisible() {
         boolean visible = false;
-        if(_vmlShape != null){
+        if(_vmlShape != null) {
             String style = _vmlShape.getStyle();
             visible = style != null && style.contains(""visibility:visible"");
         }
@@ -217,6 +217,9 @@ public void setString(String string) {
 
     @Override
     public ClientAnchor getClientAnchor() {
+        if(_vmlShape == null) {
+            return null;
+        }
         String position = _vmlShape.getClientDataArray(0).getAnchorArray(0);
         int[] pos = new int[8];
         int i = 0;
```",add null guard in XSSFComment,4,4,4,4,fix XSSFComment isVisible,2,2,4,4,Fix: Add null check in getClientAnchor() and format isVisible() This commit includes a minor formatting change in the isVisible() method and adds a null check for _vmlShape in the getClientAnchor() method in the XSSFComment.java file. The null check prevents potential NullPointerExceptions when trying to get the client anchor of a shape that does not have a VML shape associated with it.,4,4,4,4,"fix: Handle null VML shape in XSSFComment
Adds null safety checks to `isVisible()` and `getClientAnchor()` methods to handle cases where `_vmlShape` is null, ensuring the `XSSFComment` class behaves correctly in such scenarios.","fix: Prevent null pointer exceptions in XSSFComment
Added null checks for _vmlShape in isVisible and getClientAnchor methods.",3.3,17.2,18.63,0.0,"fix: Improve VML shape visibility and client anchor handling
This commit fixes issues with determining VML shape visibility and retrieving client anchors. It ensures that the isVisible method correctly checks the style attribute for visibility, and the getClientAnchor method returns null when the VML shape is null. These changes improve the accuracy and reliability of comment handling in Excel spreadsheets.",7.7,24.79,33.83,0.0
19005a4e63b6855c6cb889ba546781cb43fc22f5,apache/poi,,"File: src/java/org/apache/poi/ss/usermodel/DateUtil.java
Status: modified
```diff
@@ -71,7 +71,7 @@ protected DateUtil() {
             .appendPattern(""[[yyyy ]dd-MMM[-yyyy]][[ ]h:m[:s] a][[ ]H:m[:s]]"")
             .appendPattern(""[M/dd[/yyyy]][[ ]h:m[:s] a][[ ]H:m[:s]]"")
             .appendPattern(""[[yyyy/]M/dd][[ ]h:m[:s] a][[ ]H:m[:s]]"")
-            .parseDefaulting(ChronoField.YEAR_OF_ERA, Calendar.getInstance().get(Calendar.YEAR))
+            .parseDefaulting(ChronoField.YEAR_OF_ERA, LocaleUtil.getLocaleCalendar().get(Calendar.YEAR))
             .toFormatter();
 
     /**
```",Fix forbidden apis error,3,2,4,3,use the correct locale for the üòÖ,3,1,4,0,"Fix: Use LocaleUtil for obtaining year in DateUtil In the DateUtil class, the method for obtaining the current year has been updated. Previously, the year was obtained directly from the Calendar instance. This commit changes this to use the LocaleUtil.getLocaleCalendar() method instead. This change does not alter the overall functionality of the DateUtil class, which is responsible for handling and converting dates in Excel format in Java.",4,4,4,4,"fix: Use LocaleUtil.getLocaleCalendar() for default year
Replace Calendar.getInstance() with LocaleUtil.getLocaleCalendar() to respect locale settings.","fix: Use locale-specific calendar for default year parsing
Replace Calendar.getInstance() with LocaleUtil.getLocaleCalendar() in DateUtil to ensure correct default year parsing.",1.36,16.67,4.59,0.0,"refactor: Use LocaleUtil.getLocaleCalendar() for default year
Changed the default year calculation in DateUtil to use LocaleUtil.getLocaleCalendar() instead of Calendar.getInstance(). This ensures that the default year is locale-specific.",4.06,28.87,16.73,0.0
d9776561954a112f257477c41911f802ba15b0bc,apache/poi,,"File: poi-ooxml/src/main/java/org/apache/poi/xddf/usermodel/chart/XDDFChart.java
Status: modified
```diff
@@ -1051,7 +1051,6 @@ public void setWorkbook(XSSFWorkbook workbook) {
      * @since POI 4.0.0
      */
     public void setExternalId(String id) {
-        getCTChartSpace().addNewExternalData().setId(id);
         CTChartSpace ctChartSpace = getCTChartSpace();
         CTExternalData externalData = ctChartSpace.isSetExternalData()
                 ? ctChartSpace.getExternalData()
```",Remove invalid code,3,3,4,4,remove unnecessary setId,4,4,4,4,"Fix: Remove redundant line in setExternalId method This commit removes a redundant line of code in the setExternalId method of the XDDFChart class. The removed line was attempting to add new external data and set its id, which is unnecessary and could potentially cause errors. This fix ensures that the setExternalId method functions as expected.",4,4,4,4,"refactor: Remove unnecessary CTChartSpace call
No functional change, simply removed unnecessary CTChartSpace call to reduce code noise.","refactor: Remove redundant CTChartSpace manipulation in setExternalId
Simplified the method by avoiding unnecessary addNewExternalData call.",0.89,8.45,6.49,0.0,"refactor: Remove unnecessary CTChartSpace call
This commit simplifies the setExternalId method by removing the unnecessary call to getCTChartSpace().addNewExternalData().setId(id). The method now directly uses the CTChartSpace object to set the external data.",5.6,22.99,18.81,0.0
4682903e6ace561155a667e240b4736f89ab4805,apache/poi,,"File: poi-ooxml/src/test/java/org/apache/poi/xssf/usermodel/TestFormulaEvaluatorOnXSSF.java
Status: modified
```diff
@@ -213,10 +213,9 @@ void processFunctionRow(String targetFunctionName, int formulasRowIdx, int expec
                     fail(""Cannot expect formula as result of formula evaluation: "" + msg);
                 case NUMERIC:
                     assertEquals(CellType.NUMERIC, actValue.getCellType(), msg);
-                    BaseTestNumeric.assertDouble(msg, expValue.getNumericCellValue(), actValue.getNumberValue(), BaseTestNumeric.POS_ZERO, BaseTestNumeric.DIFF_TOLERANCE_FACTOR);
-//                double delta = Math.abs(expValue.getNumericCellValue()-actValue.getNumberValue());
-//                double pctExpValue = Math.abs(0.00001*expValue.getNumericCellValue());
-//                assertTrue(msg, delta <= pctExpValue);
+                    final double tolerance = targetFunctionName.equalsIgnoreCase(""RATE"")
+                            ? 0.000001 : BaseTestNumeric.DIFF_TOLERANCE_FACTOR;
+                    BaseTestNumeric.assertDouble(msg, expValue.getNumericCellValue(), actValue.getNumberValue(), BaseTestNumeric.POS_ZERO, tolerance);
                     break;
                 case STRING:
                     assertEquals(CellType.STRING, actValue.getCellType(), msg);
```",more test issues with rate change,1,2,4,3,fix broken test,2,2,4,4,"Refactor: Adjust tolerance calculation in processFunctionRow method In the `processFunctionRow` method of the `TestFormulaEvaluatorOnXSSF.java` file, the tolerance calculation for the ""RATE"" function has been adjusted. The new calculation provides a specific tolerance for the ""RATE"" function, improving the precision of the test results. This change does not affect the overall behavior of the method.",4,4,4,4,"fix: Fix numeric comparison tolerance in RATE function
Adjusted the tolerance for numeric comparisons in the RATE function to accommodate more precise results, ensuring reliable formula evaluation.","refactor: Tune numeric assertion tolerance in TestFormulaEvaluatorOnXSSF
Update assertion logic to use a function-specific tolerance for RATE, simplifying the test implementation.",4.08,24.69,16.78,0.0,"refactor: Improve formula evaluation test for RATE function
Refactor the processFunctionRow method to use a dynamic tolerance for numeric comparisons, specifically for the RATE function. This change improves the accuracy of formula evaluation tests.",9.52,31.82,27.22,0.0
a8ad56f53b6d476d1de0c084031bc61da27a519c,apache/qpid,,"File: qpid/java/client/src/org/apache/qpid/client/protocol/AMQProtocolSession.java
Status: modified
```diff
@@ -385,8 +385,8 @@ protected String generateQueueName()
         {
             id = _queueId++;
         }
-        //get rid of / and ; from address for spec conformance
-        String localAddress = StringUtils.replaceChars(_minaProtocolSession.getLocalAddress().toString(),""/;"","""");
+        //get rid of / and : and ; from address for spec conformance
+        String localAddress = StringUtils.replaceChars(_minaProtocolSession.getLocalAddress().toString(),""/;:"","""");
         return ""tmp_"" + localAddress + ""_"" + id;
     }
 
```",generateQueueName now removes colons as well as semi-colons,0,4,4,4,remove unused code,0,0,4,4,"Fix: Update character replacement in generateQueueName method In the `generateQueueName()` method of the `AMQProtocolSession` class, the character replacement has been updated. Now, along with ""/"" and "";"", the "":"" character is also being replaced in the local address. This change ensures the generation of a unique name for a temporary queue by appending an incrementing id to the local address of the protocol session, which is now free of these special characters.",4,4,4,4,"fix: Conform address to spec by removing special characters
Update address formatting to conform to spec by removing '/' and ':' characters, in addition to the existing '/' and ';' removal.","fix: Remove /:; from local address in queue name generation
Ensure conformance to spec by updating generateQueueName method to strip /:; characters.",1.58,10.53,8.89,0.0,"refactor: Improve queue name generation to conform to spec
Modified the generateQueueName method to remove ':' character from the local address, in addition to '/' and ';', to ensure conformance to spec. This change improves the internal structure of the AMQProtocolSession class, making it more robust and reliable.",9.05,21.24,26.0,0.0
aa97383bc73a09213063dade4080f7b4c1cf84b8,apache/qpid,,"File: qpid/java/broker/src/main/java/org/apache/qpid/server/handler/ConnectionOpenMethodHandler.java
Status: modified
```diff
@@ -66,7 +66,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<Connecti
         }
         else
         {
-            virtualHostName = String.valueOf(body.virtualHost);
+            virtualHostName = body.virtualHost == null ? null : String.valueOf(body.virtualHost);
         }
 
         VirtualHost virtualHost = stateManager.getVirtualHostRegistry().getVirtualHost(virtualHostName);
```",Fix for null virtual host (which got converted to the invalid string 'null').,4,4,4,4,fix npe in ConnectionOpenMethodHandler,0,1,4,4,"Fix: Add null check for virtual host name in ConnectionOpenMethodHandler This commit adds a null check for the 'virtualHost' field in the 'ConnectionOpenBody' object in the 'methodReceived' method of the 'ConnectionOpenMethodHandler' class. This change ensures that the method can handle null values for the virtual host name, preventing potential null pointer exceptions. The functionality of the method, which handles the receipt of a ConnectionOpen method from the client, sets the virtual host for the session, and sends a ConnectionOpenOk response back, remains unchanged.",4,4,4,4,"fix: Handle null virtual host
Ensure virtual host setup is robust against null virtual host names to maintain reliable connection handling.","fix: Check for null virtual host in ConnectionOpenMethodHandler
Prevent NullPointerException by handling null virtualHost before calling String.valueOf()",0.57,15.53,11.91,0.0,"fix: Handle null virtual host in ConnectionOpenMethodHandler
This commit fixes a potential NullPointerException in ConnectionOpenMethodHandler by adding a null check when setting the virtual host name. This ensures that the virtual host is properly authenticated and set up in the protocol session.",7.48,30.65,29.14,0.0
20a61421b9f4821253fef6c25fbea2acae9da1ed,apache/qpid,,"File: qpid/java/common/src/main/java/org/apache/qpid/transport/network/io/IoTransport.java
Status: modified
```diff
@@ -38,8 +38,8 @@
 import org.apache.qpid.transport.Sender;
 import org.apache.qpid.transport.TransportException;
 import org.apache.qpid.transport.network.ConnectionBinding;
-import org.apache.qpid.transport.network.ssl.SSLReceiver;
-import org.apache.qpid.transport.network.ssl.SSLSender;
+import org.apache.qpid.transport.network.security.ssl.SSLReceiver;
+import org.apache.qpid.transport.network.security.ssl.SSLSender;
 import org.apache.qpid.transport.util.Logger;
 
 /**
```",Updated the references to the new SSL package.,4,4,4,4,fix import order,0,0,4,4,Refactor: Update import statements for SSLReceiver and SSLSender The import statements for SSLReceiver and SSLSender in IoTransport.java have been updated to reflect the new package names. This is a refactor commit with no associated issues or pull requests.,4,4,4,4,"style: Update import statements
Updated import statements to use the correct package, org.apache.qpid.transport.network.security.ssl, for SSLReceiver and SSLSender classes, ensuring consistency and accuracy in the code.","style: Update SSLReceiver and SSLSender import statements
Renamed import statements from org.apache.qpid.transport.network.ssl to org.apache.qpid.transport.network.security.ssl",12.08,28.99,28.99,0.0,"refactor: Rename SSL import packages
Update import statements to use the new package names for SSLReceiver and SSLSender classes. This change is a part of the ongoing effort to reorganize the package structure for better maintainability.",17.94,32.43,39.75,0.0
8336885d725e5dac598e86f174baa61aa731d1ed,apache/storm,,"File: src/jvm/backtype/storm/utils/NimbusClient.java
Status: modified
```diff
@@ -26,6 +26,9 @@ public NimbusClient(String host) {
 
     public NimbusClient(String host, int port) {
         try {
+            if(host==null) {
+                throw new IllegalArgumentException(""Nimbus host is not set"");
+            }
             conn = new TFramedTransport(new TSocket(host, port));
             client = new Nimbus.Client(new TBinaryProtocol(conn));
             conn.open();
```",check that nimbus host is set,4,4,4,4,add check for null host,4,4,4,4,"Fix: Add null check for host in NimbusClient constructor This commit adds a null check for the host parameter in the constructor of the NimbusClient class. If the host is null, an IllegalArgumentException is thrown with the message ""Nimbus host is not set"". This fix prevents the creation of a NimbusClient with a null host, ensuring that a valid host is always provided when establishing a connection to a Nimbus server.",4,4,4,4,"fix: Throw exception when Nimbus host is not set
Prevent null pointer exceptions and ensure a valid connection to the Nimbus server by throwing an exception when the Nimbus host is not set. This change adds a necessary validation check to the NimbusClient constructor, guaranteeing that a connection can be established successfully.","fix: Require Nimbus host to be set
Added null check in NimbusClient constructor to prevent unexpected behavior when host is not provided.",14.16,27.87,31.14,0.0,"fix: Validate Nimbus host in NimbusClient constructor
Added a null check for the Nimbus host in the NimbusClient constructor to prevent potential NullPointerExceptions and ensure a valid connection to the Nimbus server.",7.67,37.25,25.2,0.0
9d267e8da0b9ab81aecc39903517beeaaaf2ea53,apache/storm,,"File: src/jvm/storm/starter/spout/TwitterSampleSpout.java
Status: modified
```diff
@@ -8,13 +8,13 @@
 import backtype.storm.topology.IRichSpout;
 import backtype.storm.topology.OutputFieldsDeclarer;
 import backtype.storm.tuple.Fields;
+import backtype.storm.tuple.Values;
 import backtype.storm.utils.Utils;
 import java.util.Map;
 import java.util.concurrent.LinkedBlockingQueue;
 import twitter4j.Status;
 import twitter4j.StatusDeletionNotice;
 import twitter4j.StatusListener;
-import static backtype.storm.utils.Utils.*;
 
 public class TwitterSampleSpout implements IRichSpout {
     SpoutOutputCollector _collector;
@@ -74,7 +74,7 @@ public void nextTuple() {
         if(ret==null) {
             Utils.sleep(50);
         } else {
-            _collector.emit(tuple(ret));            
+            _collector.emit(new Values(ret));
         }
     }
 
```",tuple() -> new Values(),0,4,4,4,fix sample code,0,0,4,4,"Refactor: Refactored tuple emission in TwitterSampleSpout In the `nextTuple()` method of `TwitterSampleSpout.java`, the way tuples are emitted has been refactored for improved code structure. The method still retrieves and emits the next tuple from the queue, or sleeps for 50 milliseconds if the queue is empty. However, the tuple emission is now done using `new Values(ret)` instead of `tuple(ret)`. This change does not affect the functionality of the method.",4,4,4,4,"refactor: Replace tuple with Values in emit
Improved code consistency and readability by replacing tuple with Values in emit method, making the internal structure of TwitterSampleSpout easier to understand and maintain.","refactor: Replace tuple with Values in nextTuple
Updated the nextTuple method to use the Values class instead of tuple, improving code consistency and readability.",1.83,16.0,10.17,0.0,"refactor: Update emit method in TwitterSampleSpout
Refactor the nextTuple method in TwitterSampleSpout to use Values instead of tuple, making the code more consistent and easier to understand. This change is part of the storm-starter project integration into the examples directory.",5.22,23.85,25.2,0.0
0449d31afae47c00ece64dd11aff8f7a261df5a6,apache/storm,,"File: src/jvm/storm/trident/operation/builtin/Debug.java
Status: modified
```diff
@@ -4,11 +4,19 @@
 import storm.trident.tuple.TridentTuple;
 
 public class Debug extends BaseFilter {
+    private final String name;
+
+    public Debug() {
+        name = ""DEBUG: "";
+    }
+
+    public Debug(String name) {
+        this.name = ""DEBUG("" + name + ""): "";
+    }
 
     @Override
     public boolean isKeep(TridentTuple tuple) {
-        System.out.println(""DEBUG: "" + tuple.toString());
+        System.out.println(name + tuple.toString());
         return true;
     }
-    
 }
```",Allow Debug filters to print an identifier,4,4,4,4,add Debug isKeep,0,0,4,1,Feat: Add name to debug print statement This commit adds a new feature to the Debug.java file in the storm.trident.operation.builtin package. A new variable 'name' was added and two constructors were added to initialize this variable. The 'isKeep' method was also modified to include this 'name' variable in the print statement. This allows for more specific debugging with a name.,4,4,4,4,"refactor: Make Debug class more flexible with customizable name
This change allows customizing the debug message prefix, making it easier to identify the source of debug messages and improving the class's usability for testing and debugging purposes.","refactor: Make Debug filter's output customizable
Introduce a name parameter to the Debug filter's constructor, allowing users to customize the prefix of debug messages. This change enhances the flexibility of the Debug filter without changing its observable behavior.",2.45,16.0,11.42,0.0,"refactor: Enhance Debug class to support custom names
Refactored the Debug class to allow for custom names in debug messages. This change introduces a new constructor that takes a name parameter, and updates the isKeep method to include the name in the debug message. This enhancement provides more flexibility and clarity in debug logging.",6.42,32.48,33.73,0.0
76353a80ff8d0121cdd5ef53e518f07f0be95a0a,apache/storm,,"File: storm-core/src/jvm/backtype/storm/task/ShellBolt.java
Status: modified
```diff
@@ -21,6 +21,7 @@
 import backtype.storm.generated.ShellComponent;
 import backtype.storm.metric.api.IMetric;
 import backtype.storm.metric.api.rpc.IShellMetric;
+import backtype.storm.topology.ReportedFailedException;
 import backtype.storm.tuple.MessageId;
 import backtype.storm.tuple.Tuple;
 import backtype.storm.utils.ShellProcess;
@@ -257,6 +258,7 @@ private void handleLog(ShellMsg shellMsg) {
                 break;
             case ERROR:
                 LOG.error(msg);
+                _collector.reportError(new ReportedFailedException(msg));
                 break;
             default:
                 LOG.info(msg);
```",reportError when receiving an error-level message in ShellBolt.,4,4,4,4,add error handling in ShellBolt,2,1,4,4,"Fix: Add error reporting in ShellBolt's handleLog method In the ShellBolt class, the handleLog method has been modified to report an error when the log level is ERROR. This change involves the addition of a new method call to _collector.reportError. This fix ensures that errors are properly reported and handled.",4,4,4,4,"feat: Report errors to collector on error-level messages
This change enables reporting of error-level messages from ShellBolt to the collector, enhancing error visibility in the Storm UI. It achieves this by modifying the handleLog method to report errors to the collector when logging error-level messages, as per the requirement outlined in pull request STORM-455.","feat: Report error-level messages to collector in ShellBolt
Add error reporting to the collector in ShellBolt's handleLog method, enabling error display in the Storm UI.",7.02,19.23,29.65,0.0,"feat: Report error-level messages from ShellBolt children
This commit introduces a new feature to report error-level messages from ShellBolt children to the collector, allowing them to be visible in the Storm UI. This change enhances the logging functionality of ShellBolt by reporting errors at the appropriate level and providing more visibility into the system's behavior.",7.26,19.05,28.97,0.0
2059f23d8a30df9089f6a928b4a2bf51d608099f,apache/storm,,"File: external/storm-redis/src/main/java/org/apache/storm/redis/trident/state/RedisClusterMapState.java
Status: modified
```diff
@@ -72,7 +72,7 @@ public String build(List<Object> key) {
     public static class Options<T> implements Serializable {
         public int localCacheSize = 1000;
         public String globalKey = ""$REDIS-MAP-STATE-GLOBAL"";
-        KeyFactory keyFactory = null;
+        public KeyFactory keyFactory = null;
         public Serializer<T> serializer = null;
         public String hkey = null;
     }
```","Made keyFactory public in RedisClusterMapState.Options To match the same change to RedisMapState.Options, for the same reasons. It can be set from the public API in other ways.  Having it public means we can set it along with other values like hkey.",4,4,4,4,make Options public,0,1,4,4,"Refactor: Change visibility of keyFactory in Options class The visibility of the `keyFactory` variable in the `Options` class of the `RedisClusterMapState.java` file has been changed from default to public. This is a refactor that does not alter the functionality of the `RedisClusterMapState` class, which manages state in a Redis cluster for different types of transactions.",4,4,3,4,"refactor: Make Options' keyFactory field public
This change enables users to set an expiry timeout on Redis keys updated by the state, as requested in STORM-761.","feat: Add expireIntervalSec option to RedisMapState
This allows users to set an expiry timeout on each Redis key updated by the state, similar to the mechanism available via RedisStateUpdater for RedisState instances.",2.01,17.28,10.2,0.0,"feat: Add expireIntervalSec option to RedisMapState
This commit introduces a new feature to set an expiry timeout on each Redis key updated by the state, similar to the mechanism available via RedisStateUpdater for RedisState instances. This change allows users to set expireIntervalSec in their RedisMapState.Options instance.",3.94,9.8,14.08,0.0
6d4fcde16652de39b2f41498e076ed6c9634d66f,apache/synapse,,"File: java/modules/core/src/main/java/org/apache/synapse/core/axis2/AsyncCallback.java
Status: modified
```diff
@@ -99,6 +99,8 @@ public void onComplete(AsyncResult result) {
     public void onError(Exception e) {
         // this will never be called as our custom SynapseCallbackReceiver will push
         // faults as well through the onComplete()
+        log.warn(e);
+        e.printStackTrace();
     }
 
     public void setSynapseOutMshCtx(org.apache.synapse.MessageContext synapseOutMsgCtx) {
```",print errors/exceptions until we enhance error handling to capture and handle non-blocking IO errors,4,4,4,4,add missing newline,0,0,4,4,"Fix: Add logging and exception printing to onError method In the AsyncCallback.java file, the onError method has been updated to log and print the stack trace of an exception. Previously, this method was not expected to be called due to the custom SynapseCallbackReceiver handling faults. Now, in the event that it is called, it will provide more detailed information about the error.",4,4,4,4,"fix: Handle onError exceptions explicitly
Add explicit logging and stack trace printing for onError exceptions, even though they are not expected to be called due to the custom SynapseCallbackReceiver handling faults through onComplete().","fix: Log exceptions in onError method
Added logging and stack trace printing for exceptions in onError method, although it will never be called due to custom SynapseCallbackReceiver.",14.91,35.79,32.06,0.0,"fix: Handle exceptions in onError method
Added logging and stack trace printing to the onError method, which was previously left empty. This ensures that exceptions are properly handled, even though this method is not expected to be called due to the custom SynapseCallbackReceiver.",19.24,40.0,41.97,0.0
47671ae1b1101633347421477fe45d3e8e6e169e,apache/synapse,,"File: java/modules/core/src/main/java/org/apache/synapse/config/Util.java
Status: modified
```diff
@@ -158,8 +158,9 @@ public static OMElement getOMElementFromURL(String url) throws IOException {
                 OMElement doc = builder.getDocumentElement();
                 doc.build();
                 return doc;
-            } catch (XMLStreamException e) {
-                log.error(""Error parsing resource at URL : "" + url + "" as XML"", e);
+            } catch (Exception e) {
+                handleException(""Error parsing resource at URL : "" + url +
+                    "" as XML"", e);
             } finally {
                 try {
                     urlInStream.close();
```",catch any Exception that may arise while trying to read from a URL,4,4,4,4,fix the build,0,0,4,4,"Fix: Broaden exception handling in getOMElementFromURL method In the `getOMElementFromURL` method in the `Util.java` file, the exception handling has been broadened to catch all exceptions, not just `XMLStreamException`. The handling of these exceptions has also been changed to use the `handleException` method. This method retrieves an `OMElement` object from a given URL by parsing the XML content from the URL.",4,4,3,4,"fix: Handle exceptions robustly in getOMElementFromURL
Improve error handling in getOMElementFromURL by catching general exceptions and logging errors, making the method more robust and reliable.","fix: Handle exceptions in getOMElementFromURL
Previously, only XMLStreamException was caught. Now, all exceptions are caught and handled by calling handleException to log errors.",2.4,16.47,10.98,0.0,"fix: Handle XMLStreamException as generic Exception
This commit modifies the getOMElementFromURL method to catch a generic Exception instead of XMLStreamException, and handles it by calling the handleException method. This change improves the error handling in the Util class.",10.96,26.53,24.35,0.0
20546674ef9dfe96c8cc689d28e8a78b182edd45,apache/synapse,,"File: java/modules/transports/src/main/java/org/apache/synapse/transport/jms/JMSSender.java
Status: modified
```diff
@@ -192,6 +192,10 @@ public void sendMessage(MessageContext msgCtx, String targetAddress,
                 }
             }
 
+            if(session == null) {
+               handleException(""Could not create JMS session"");
+            }
+            
             // now we are going to use the JMS session, but if this was a session from a
             // defined JMS connection factory, we need to synchronize as sessions are not
             // thread safe
```",jms sender - added a simple null check,4,4,4,4,fix npe in JMSSender,0,1,4,4,"Fix: Add null check for session in sendMessage method In the `sendMessage` method of the `JMSSender.java` file, a null check for the session has been added. If the session is null, an exception is thrown. This is a fix to prevent potential issues when the session is null.",4,4,4,4,"fix: Check for null session before using it
Prevents a NullPointerException in the sendMessage method of JMSSender class by checking for a null session before using it, ensuring the session is properly initialized.","fix: Handle null session in sendMessage method
Added a null check to prevent potential NullPointerExceptions when creating a JMS session in JMSSender.",12.25,39.51,30.24,0.0,"fix: Handle null JMS session in JMSSender
This commit fixes a potential NullPointerException in the JMSSender class by adding a null check for the JMS session. If the session is null, an exception is handled to prevent unexpected behavior. This change ensures that the sendMessage method is more robust and fault-tolerant.",31.36,50.51,51.56,0.0
f02e9889647bfac24d9020d6f9ea8dd982da3fc9,apache/synapse,,"File: java/modules/transports/src/test/java/org/apache/synapse/transport/mail/MailRequestResponseClient.java
Status: modified
```diff
@@ -30,6 +30,8 @@
 import javax.mail.Store;
 import javax.mail.internet.ContentType;
 
+import junit.framework.Assert;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.synapse.transport.testkit.client.ClientOptions;
@@ -63,6 +65,7 @@ private void tearDown() throws MessagingException {
     public IncomingMessage<byte[]> sendMessage(ClientOptions options, ContentType contentType, byte[] message) throws Exception {
         String msgId = sendMessage(contentType, message);
         Message reply = waitForReply(msgId);
+        Assert.assertNotNull(""No response received"", reply);
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         reply.getDataHandler().writeTo(baos);
         return new IncomingMessage<byte[]>(new ContentType(reply.getContentType()), baos.toByteArray());
```",Mail transport tests: avoid NPE in MailRequestResponseClient if no response is received,4,4,4,4,add null check to MailRequestResponseClient sendMessage,4,4,4,4,"Fix: Add assertion to ensure response in sendMessage method In the sendMessage method of the MailRequestResponseClient.java file, an assertion was added to ensure that a response is received after sending a message. This fix ensures that the method will not proceed without receiving a response, improving the reliability of the message sending process.",4,4,4,4,"fix: Assert non-null reply in sendMessage
Prevent sendMessage method from returning null replies, ensuring the method's contract is upheld.","refactor: Add null check for reply in sendMessage method
Prevent NullPointerExceptions by asserting reply is not null before processing.",1.47,16.67,9.73,0.0,"fix: Ensure response is not null in MailRequestResponseClient
Added a null check for the response in the sendMessage method of MailRequestResponseClient to prevent potential NullPointerExceptions. This change ensures that the response is not null before processing it.",12.84,35.56,26.73,0.0
098a576d2171de1001ddc9725811c438fc7ac7b8,apache/synapse,Y,"File: java/modules/core/src/main/java/org/apache/synapse/config/SynapseConfigUtils.java
Status: modified
```diff
@@ -34,7 +34,6 @@
 import org.apache.synapse.commons.security.definition.factory.KeyStoreInformationFactory;
 import org.apache.synapse.util.SynapseBinaryDataSource;
 import org.xml.sax.InputSource;
-import sun.net.www.protocol.https.HttpsURLConnectionImpl;
 
 import javax.activation.DataHandler;
 import javax.net.ssl.*;
@@ -376,7 +375,7 @@ private static HttpsURLConnection getHttpsURLConnection(URL url) {
         }
 
         try {
-            HttpsURLConnectionImpl connection = (HttpsURLConnectionImpl) url.openConnection();
+            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
             //Create a SSLContext
             SSLContext sslContext = SSLContext.getInstance(""TLS"");
             sslContext.init(keyManagers,
```


File: java/modules/extensions/src/main/java/org/apache/synapse/mediators/xquery/XQueryMediatorFactory.java
Status: modified
```diff
@@ -75,8 +75,7 @@ public Mediator createMediator(OMElement elem) {
         if (attrTarget != null) {
             String targetValue = attrTarget.getAttributeValue();
             if (targetValue != null && !"""".equals(targetValue)) {
-                try {
-                    xQueryMediator.setQuerySource(targetValue);
+                try {                             
                     xQueryMediator.setTarget(SynapseXPathFactory.getSynapseXPath(elem, ATT_TARGET));
                 } catch (JaxenException e) {
                     handleException(""Invalid XPath specified for the target attribute : "" +
```",remove sun JDK sepecific class dependency,0,3,4,4,fix failing test,0,0,4,4,"Refactor: Modify methods in SynapseConfigUtils and XQueryMediatorFactory In this commit, we have made changes to two files: SynapseConfigUtils.java and XQueryMediatorFactory.java. In SynapseConfigUtils.java, we have modified the method getHttpsURLConnection. Now, it creates a HttpsURLConnection from a given URL, loads the Synapse properties, and creates the identity and trust key store information.In XQueryMediatorFactory.java, we have modified the method createMediator. Now, it creates an XQuery mediator with the given XML configuration.These changes are part of a refactor and there are no associated issues or pull requests.",4,4,2,4,"refactor: Use HttpsURLConnection instead of HttpsURLConnectionImpl
This commit replaces the custom HttpsURLConnectionImpl with the standard HttpsURLConnection in SynapseConfigUtils, aligning with the Java standard library and removing unnecessary complexity. This change improves the maintainability and understandability of the Synapse configuration utility class.","refactor: Use standard HttpsURLConnection and simplify XQuery mediator creation
Refactored SynapseConfigUtils to use the standard HttpsURLConnection instead of HttpsURLConnectionImpl, and simplified XQuery mediator creation in XQueryMediatorFactory by removing unnecessary code and improving method implementations.",1.88,15.5,11.52,0.0,"refactor: Refactor SynapseConfigUtils and XQueryMediatorFactory
Refactored SynapseConfigUtils to use HttpsURLConnection instead of HttpsURLConnectionImpl, and XQueryMediatorFactory to correctly set the target attribute. These changes improve the internal structure of the code, making it easier to understand and maintain.",2.01,19.2,10.96,0.0
ddad1fad1b18d093ee7abed31d58d33e7aa3d1ed,apache/tomcat,,"File: java/org/apache/catalina/connector/CoyoteAdapter.java
Status: modified
```diff
@@ -224,7 +224,8 @@ public void service(org.apache.coyote.Request req,
             }
 
             if (request.getWrapper().getServlet() instanceof CometProcessor 
-                    && !response.isClosed()) {
+                    && !response.isClosed()
+                    && req.getAttribute(""org.apache.tomcat.comet.support"") == Boolean.TRUE) {
                 comet = true;
                 res.action(ActionCode.ACTION_COMET_BEGIN, null);
             }
```",Also check the support attribute.,0,4,4,4,fix a bug in üòÖ,0,0,4,0,"Fix: Add condition to start Comet process in CoyoteAdapter This commit adds a condition to the service method in the CoyoteAdapter class to start a Comet process. The new condition checks if the attribute ""org.apache.tomcat.comet.support"" of the request is true. This is a bug fix to ensure that the Comet process is started only when the attribute ""org.apache.tomcat.comet.support"" is true.",4,4,4,4,"fix: Check for comet support attribute in CoyoteAdapter service method
Added a check for the 'org.apache.tomcat.comet.support' attribute to prevent comet processing from being enabled unnecessarily, ensuring that the CoyoteAdapter service method behaves correctly in all scenarios.","fix: Check for comet support before processing
Added a conditional check in CoyoteAdapter's service method to prevent unnecessary comet processing when 'org.apache.tomcat.comet.support' attribute is not set.",12.4,28.04,25.59,0.0,"feat: Add support for comet processing in CoyoteAdapter
This commit enhances the CoyoteAdapter to handle comet processing by checking for the 'org.apache.tomcat.comet.support' attribute in the request. This change allows the adapter to properly service HTTP requests with comet processing.",13.53,34.55,30.64,0.0
de685def46dffd66bf918fca39e08b5a690ae350,apache/tomcat,,"File: java/org/apache/catalina/ha/jmx/ClusterJmxHelper.java
Status: modified
```diff
@@ -111,13 +111,10 @@ public static boolean unregisterDefaultCluster(SimpleTcpCluster cluster) throws
     private static ObjectName getDefaultClusterName(SimpleTcpCluster cluster) throws Exception {_x000D_
         String domain = getMBeanServer().getDefaultDomain();_x000D_
         String type = "":type="";_x000D_
-        boolean hostParent = false;_x000D_
-        //Step 1. Register the Cluster MBean_x000D_
         String clusterType= type+""Cluster"";_x000D_
         if (cluster.getContainer() instanceof StandardHost) {_x000D_
             domain = ((StandardHost) cluster.getContainer()).getDomain();_x000D_
             clusterType += "",host="" + cluster.getContainer().getName();_x000D_
-            hostParent = true;_x000D_
         } else {_x000D_
             if (cluster.getContainer() instanceof StandardEngine) {_x000D_
                 domain = ((StandardEngine) cluster.getContainer()).getDomain();_x000D_
```",remove not used fields,4,4,4,4,remove unused code,4,4,4,4,"Refactor: Simplify ClusterJmxHelper class This commit simplifies the ClusterJmxHelper class by removing some code related to the registration of clusters. The changes do not affect the behavior of the class, but improve the structure of the code.",3,3,4,4,"refactor: Remove unnecessary variables from getDefaultClusterName
Simplified the getDefaultClusterName method by removing unused variables, improving code readability and maintainability.","refactor: Simplify getDefaultClusterName logic
Removed unnecessary variables and hostParent flag, making the method more concise and efficient.",3.66,18.18,12.96,0.0,"refactor: Simplify getDefaultClusterName method
Removed unnecessary variables and simplified the logic in the getDefaultClusterName method of ClusterJmxHelper class. This change improves the code readability and maintainability.",6.5,25.81,26.77,0.0
097e43b2f6019eaafc062badb81fd11c76c9f5b6,apache/tomcat,,"File: java/org/apache/tomcat/buildutil/Txt2Html.java
Status: modified
```diff
@@ -81,10 +81,10 @@ public void execute()
         int count = 0;
         
         // Step through each file and convert.
-        Iterator iter = filesets.iterator();
+        Iterator<FileSet> iter = filesets.iterator();
         while( iter.hasNext() ) {
-            FileSet fs = (FileSet)iter.next();
-            DirectoryScanner ds = fs.getDirectoryScanner( project );
+            FileSet fs = iter.next();
+            DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             File basedir = ds.getBasedir();
             String[] files = ds.getIncludedFiles();
             for( int i = 0; i < files.length; i++ ) {
```",Fix generics and use of deprecated field,4,4,4,4,fix bug in Txt2Html,4,1,4,4,"Refactor: Update iteration and directory scanner retrieval in Txt2Html.java In the execute() method of Txt2Html.java, the way of iterating over filesets and getting the directory scanner for each fileset has been updated. The raw type Iterator has been replaced with a parameterized type Iterator<FileSet> to improve type safety. The project is now retrieved by calling the getProject() method instead of directly accessing the project variable. This change does not affect the functionality of the method, which is to convert files in the specified filesets to HTML format.",4,4,4,4,"refactor: Use parameterized iterator in Txt2Html.execute()
Replaced raw Iterator with parameterized Iterator<FileSet> to improve code readability and maintainability. Additionally, updated the project context retrieval to use getProject() instead of project, making the code more explicit and efficient.","refactor: Specify iterator type in Txt2Html.execute()
Changed the iterator type to FileSet in Txt2Html.execute() to improve type safety and readability.",3.1,26.98,15.17,0.0,"refactor: Improve iterator usage in Txt2Html
This commit refactors the execute method in Txt2Html to use a parameterized Iterator, making the code more type-safe and easier to maintain. The changes also include a minor improvement in getting the project instance.",2.9,18.75,13.95,0.0
4db6694a04c3da31ed33a146603f94b46665197b,apache/tomcat,,"File: java/org/apache/catalina/connector/CometEventImpl.java
Status: modified
```diff
@@ -124,5 +124,16 @@ public void setTimeout(int timeout) throws IOException, ServletException,
             throw new UnsupportedOperationException();
         }
     }
+    
+    public String toString() {
+        StringBuffer buf = new StringBuffer();
+        buf.append(super.toString());
+        buf.append(""[EventType:"");
+        buf.append(eventType);
+        buf.append("", EventSubType:"");
+        buf.append(eventSubType);
+        buf.append(""]"");
+        return buf.toString();
+    }
 
 }
```",implement a toString for the CometEventImpl,4,4,4,4,add toString to CometEventImpl,4,4,4,4,"Feat: Add toString method to CometEventImpl class This commit adds a new method `toString()` to the `CometEventImpl.java` file. The method returns a string representation of the event object, including its type and subtype. This feature enhances the readability and debuggability of the event object by providing a clear and comprehensive string representation.",4,4,4,4,"feat: Add toString method to CometEventImpl
Provide a more informative string representation of CometEventImpl objects, facilitating logging and debugging.","feat: Add toString method to CometEventImpl for informative string representation
Overrides the default toString method to include event type and event sub type.",4.45,28.17,17.63,0.0,"feat: Add toString method to CometEventImpl
This commit introduces a new toString method to the CometEventImpl class, providing a more informative string representation of the event object, including its type and subtype. This enhancement is useful for logging or debugging purposes.",32.73,53.76,52.32,0.0
55813d250b8c3f82bfd6401dc698ab669e42fd2d,apache/tomcat,,"File: java/javax/servlet/http/Cookie.java
Status: modified
```diff
@@ -88,8 +88,7 @@ public class Cookie implements Cloneable {
     private String path;       // ;Path=VALUE ... URLs that see the cookie
     private boolean secure;    // ;Secure ... e.g. use SSL
     private int version = 0;   // ;Version=1 ... means RFC 2109++ style
-    // TODO SERVLET3
-    private boolean httpOnly;  // Not in the spec but supported by most browsers
+    private boolean httpOnly;  // Not in cookie specs, but supported by browsers
     
 
     /**
```",Already support httpOnly - update comments,4,4,4,4,remove empty line,0,0,4,4,Style: Update comments in Cookie.java The comments in the Cookie.java file have been updated for clarity. The changes do not affect the functionality of the class.,4,3,4,4,"style: Remove TODO comment about SERVLET3
Removed outdated TODO comment about SERVLET3, as httpOnly is already implemented and not part of the cookie specs.","style: Remove unnecessary TODO comment
Removed TODO comment in Cookie.java, making the code more readable.",6.53,15.69,22.87,0.0,"style: Remove TODO comment in Cookie class
Removed an outdated TODO comment in the Cookie class, which was related to Servlet 3. The comment was not relevant anymore and has been cleaned up to improve code readability.",9.01,25.0,19.03,0.0
1a3d4f84ba0b8a7bd4c33c87698d7b4928ab0da9,apache/tomcat,,"File: java/org/apache/jasper/compiler/AttributeParser.java
Status: modified
```diff
@@ -24,7 +24,7 @@
  * ""\${1+1}"". After unquoting, both appear as ""${1+1}"" but the first should
  * evaluate to ""2"" and the second to ""${1+1}"". Literal \, $ and # need special
  * treatment to ensure there is no ambiguity. The JSP attribute unquoting
- * covers \\, \"", \', \$, \#, %\>, <\%, &apos; and &quot;
+ * covers \\, \"", \', \$, \#, %\&gt;, &lt;\%, &amp;apos; and &amp;quot;
  */
 public class AttributeParser {
 
```",Minor correction to the JavaDoc for AttributeParser class,4,4,4,4,fix javadoc for AttributeParser,4,4,4,4,Style: Update comment in AttributeParser.java The comment in AttributeParser.java has been updated to reflect the correct special treatment of certain characters in JSP attribute unquoting. The changes are purely stylistic and do not affect the functionality of the code.,4,4,4,4,"fix: Use HTML entities for special characters in attribute unquoting
To prevent ambiguity, replaced special characters in attribute unquoting with their HTML entities, ensuring correct evaluation of literals.","style: Update comment to use HTML entities
In AttributeParser.java, replaced literal characters with HTML entities (&lt;, &gt;, &amp;, and &quot;) to avoid ambiguity in the attribute unquoting comment.",4.64,20.59,18.74,0.0,"style: Update attribute unquoting comment
Updated the comment in AttributeParser.java to reflect the correct list of characters that need special treatment for unquoting, including %&gt;, &lt;% and &amp;apos; and &amp;quot;.",20.51,42.25,32.06,0.0
40d4721b1f972e7b443bbce7b8b56176fed3260f,apache/tomcat,,"File: java/org/apache/coyote/http11/Http11Processor.java
Status: modified
```diff
@@ -357,12 +357,14 @@ public SocketState asyncDispatch(SocketStatus status) throws IOException {
 
         if (async) {
             if (error) {
+                socket.setAsync(false);
                 recycle();
                 return SocketState.CLOSED;
             } else {
                 return SocketState.LONG;
             }
         } else {
+            socket.setAsync(false);
             if ( error || (!keepAlive)) {
                 recycle();
                 return SocketState.CLOSED;
```",Prevent looping by correctly setting the socket wrapper async state,4,4,4,4,set the socket to false before calling üòÖ,0,0,4,2,"Fix: Ensure socket is set to non-asynchronous in error conditions In the `asyncDispatch(SocketStatus status)` method of the `Http11Processor.java` file, the socket is now set to non-asynchronous when an error occurs or when the connection is not kept alive. This change ensures that the socket state is correctly managed in these conditions.",4,4,4,4,"fix: Ensure async flag is cleared on error or non-keepAlive
This change prevents unexpected behavior by ensuring the async flag is cleared on error or non-keepAlive, aligning with the expected socket state handling in the `asyncDispatch` method.","fix: Reset socket state after async dispatch
Ensure socket is set to non-async after asynchronous request dispatch",4.84,27.27,21.71,0.0,"fix: Ensure socket is set to non-async before recycling
This commit fixes an issue where the socket was not properly set to non-async before being recycled, which could lead to unexpected behavior. The fix is implemented in the asyncDispatch method of the Http11Processor class, ensuring that the socket is correctly set to non-async in both error and non-error scenarios.",20.38,32.73,42.21,0.0
77ccbf46068c863aedd20fe952185b8e67d30392,apache/tomcat,,"File: test/org/apache/catalina/startup/TestContextConfigAnnotation.java
Status: modified
```diff
@@ -151,7 +151,7 @@ public void testDuplicateMapping() throws Exception {
             config.processAnnotationsFile(pFile, webxml);
             fail();
         } catch (IllegalArgumentException ex) {
-            // ingore
+            // ignore
         }
         ServletDef servletDef = webxml.getServlets().get(""param"");
         assertNull(servletDef);
@@ -235,7 +235,7 @@ public void testDuplicateFilterMapping() throws Exception {
             config.processAnnotationsFile(pFile, webxml);
             fail();
         } catch (IllegalArgumentException ex) {
-            // ingore
+            // ignore
         }
         FilterDef filterDef = webxml.getFilters().get(""paramD"");
         assertNull(filterDef);
```",Typo in a comment,4,4,4,4,fix test on windows,0,0,4,4,"Style: Correct spelling in comments In the file `TestContextConfigAnnotation.java`, corrected a spelling mistake in the comments. The word 'ingore' was changed to 'ignore'. This change does not affect the functionality of the code.",4,4,4,4,"fix: Fix typo in ignore comment
Fixed typo in 'ignore' comments in TestContextConfigAnnotation.java to ensure accurate test expectations.","fix: Fix typos in TestContextConfigAnnotation.java
Corrected 'ingore' to 'ignore' in two places.",6.4,23.08,11.7,0.0,"fix: Correct typo in test comments
Fixed typo in comments of TestContextConfigAnnotation.java, changing 'ingore' to 'ignore'. This commit ensures that the test code is correctly formatted and easy to read.",14.7,34.38,28.5,0.0
aaaacec287f971b34657b48e43295a4f9a928c1d,apache/tomcat,Y,"File: java/org/apache/coyote/ajp/AjpAprProtocol.java
Status: modified
```diff
@@ -31,9 +31,9 @@
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.net.AprEndpoint;
+import org.apache.tomcat.util.net.AprEndpoint.Handler;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
-import org.apache.tomcat.util.net.AprEndpoint.Handler;
 
 
 /**
```


File: java/org/apache/coyote/ajp/AjpProtocol.java
Status: modified
```diff
@@ -31,11 +31,11 @@
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.modeler.Registry;
+import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.JIoEndpoint;
+import org.apache.tomcat.util.net.JIoEndpoint.Handler;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
-import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
-import org.apache.tomcat.util.net.JIoEndpoint.Handler;
 
 
 /**
```",Fix import order,4,4,4,4,remove unused imports,0,0,4,4,Refactor: Reorder import statements in AjpAprProtocol.java and AjpProtocol.java The import statements in AjpAprProtocol.java and AjpProtocol.java have been reordered for better code structure. This refactor does not affect the functionality of the code.,4,4,4,4,"refactor: Remove unused imports
Removed unused imports to simplify the codebase and improve maintainability.","refactor: Simplify imports in AjpAprProtocol and AjpProtocol
Removed unnecessary import statements in both classes to improve code organization",1.5,12.24,7.81,0.0,"refactor: Reorganize imports in AjpAprProtocol and AjpProtocol
Rearranged import statements in AjpAprProtocol.java and AjpProtocol.java to remove duplicates and improve code organization.",22.3,44.83,28.96,0.0
8519139d27c24df5ad920bb12803abed19dc9ae2,apache/tomcat,Y,"File: java/org/apache/coyote/ajp/AjpAprProtocol.java
Status: modified
```diff
@@ -60,7 +60,6 @@ public AjpAprProtocol() {
         cHandler = new AjpConnectionHandler(this);
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
-        //setServerSoTimeout(Constants.DEFAULT_SERVER_SOCKET_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
     }
 
```


File: java/org/apache/coyote/ajp/AjpProtocol.java
Status: modified
```diff
@@ -62,7 +62,6 @@ public AjpProtocol() {
         cHandler = new AjpConnectionHandler(this);
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
-        //setServerSoTimeout(Constants.DEFAULT_SERVER_SOCKET_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
     }
 
```


File: java/org/apache/coyote/ajp/Constants.java
Status: modified
```diff
@@ -41,7 +41,6 @@ public final class Constants {
     public static final int DEFAULT_CONNECTION_LINGER = -1;
     public static final int DEFAULT_CONNECTION_TIMEOUT = -1;
     public static final int DEFAULT_CONNECTION_UPLOAD_TIMEOUT = 300000;
-    public static final int DEFAULT_SERVER_SOCKET_TIMEOUT = 0;
     public static final boolean DEFAULT_TCP_NO_DELAY = true;
 
     // Prefix codes for message types from server to container
```",Remove unused code,4,4,4,4,remove unused code,4,4,4,4,"Refactor: Remove unused server socket timeout constant The server socket timeout constant, DEFAULT_SERVER_SOCKET_TIMEOUT, was removed from the Constants.java file. This constant was also removed from the AjpProtocol.java and AjpAprProtocol.java files where it was previously set but not used. This refactor does not affect the functionality of the classes and improves the clarity of the code.",4,4,4,4,"fix: Remove unused DEFAULT_SERVER_SOCKET_TIMEOUT constant
DEFAULT_SERVER_SOCKET_TIMEOUT was not being used in AjpAprProtocol or AjpProtocol, so it's been removed to simplify the Constants class.","refactor: Remove unused DEFAULT_SERVER_SOCKET_TIMEOUT constant
Remove unnecessary constant and its usages in AjpAprProtocol and AjpProtocol classes, simplifying the codebase.",10.46,26.97,14.47,0.0,"refactor: Remove unused constant and method call
This commit removes the unused constant DEFAULT_SERVER_SOCKET_TIMEOUT and its corresponding method call setServerSoTimeout in AjpAprProtocol and AjpProtocol classes. The removal of this constant and method call simplifies the code and eliminates unnecessary complexity.",14.73,33.01,23.49,0.0
0d9d35ef8632cb18c13c8e89ed65f79245a6e31a,apache/tomcat,,"File: java/org/apache/catalina/manager/JMXProxyServlet.java
Status: modified
```diff
@@ -52,8 +52,8 @@ public class JMXProxyServlet extends HttpServlet  {
     /**
      * MBean server.
      */
-    protected MBeanServer mBeanServer = null;
-    protected Registry registry;
+    protected transient MBeanServer mBeanServer = null;
+    protected transient Registry registry;
 
     // --------------------------------------------------------- Public Methods
     /**
@@ -227,8 +227,8 @@ public void listBeans( PrintWriter writer, String qry )
                         ExceptionUtils.handleThrowable(t);
                     }
                 }
-            } catch (Exception e) {
-                // Ignore
+            } catch (Throwable t) {
+                ExceptionUtils.handleThrowable(t);
             }
             writer.println();
         }
@@ -269,7 +269,13 @@ private void appendHead( StringBuilder sb, String value, int start, int end) {
         sb.append( value.substring(pos,end));
     }
 
-    public boolean isSupported( String type ) {
+    /**
+     * Determines if a type is supported by the {@link JMXProxyServlet}.
+     * 
+     * @param type  The type to check
+     * @return      Always returns <code>true</code>
+     */
+    public boolean isSupported(String type) {
         return true;
     }
 }
```",Fix FindBugs and Eclipse warnings,1,0,4,3,fix a bug in the JMXProxyServlet,2,2,4,4,"Refactor: Improve JMXProxyServlet code quality This commit refactors the JMXProxyServlet.java file. The listBeans method has been modified to handle Throwable instead of Exception, providing a more comprehensive error handling. A new method, isSupported, has been added which always returns true, indicating that all types are supported. These changes improve the code quality without altering the functionality of the JMXProxyServlet class.",4,2,4,4,"refactor: Add transient fields and isSupported to JMXProxyServlet
Added transient fields to MBeanServer and Registry to prevent unnecessary serialization, and introduced an isSupported method to provide a clear indication of type support. These changes improve the internal structure of JMXProxyServlet, making it easier to understand and maintain.","refactor: Make MBeanServer and Registry fields transient
Also, improve exception handling in listBeans method and add isSupported method that always returns true.",7.93,18.69,22.06,0.0,"refactor: Improve JMXProxyServlet's field declarations and exception handling
This commit refactors the JMXProxyServlet class to make its fields transient and improves exception handling in the listBeans method. Additionally, a new method isSupported is added, which always returns true, indicating that any type is supported. These changes enhance the overall structure and functionality of the JMXProxyServlet class.",30.38,50.0,55.0,0.0
275ea1c12b31dcc9e7a9c52a6ab55cf85ff48a27,apache/tomcat,,"File: java/org/apache/coyote/http11/InternalNioInputBuffer.java
Status: modified
```diff
@@ -39,6 +39,11 @@
  */
 public class InternalNioInputBuffer extends AbstractInputBuffer {
 
+    /**
+     * Logger.
+     */
+    private static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(InternalNioInputBuffer.class);
 
     // -------------------------------------------------------------- Constants
 
@@ -228,6 +233,11 @@ public boolean parseRequestLine(boolean useAvailableDataOnly)
                 if ( readSocket(true, false)==0 ) return false;
             }
             parsingRequestLinePhase = 2;
+            if (log.isDebugEnabled()) {
+                log.debug(""Received [""
+                        + new String(buf, pos, lastValid - pos, ""ISO-8859-1"")
+                        + ""]"");
+            }
         }
         if ( parsingRequestLinePhase == 2 ) {
             //
```",Implement debug logging in InternalNioInputBuffer. Log what we got with the first read.,4,4,4,4,add a Log to InternalNioInputBuffer,4,4,4,4,"Feat: Add logging capability to InternalNioInputBuffer class In the `parseRequestLine` method, a debug log statement has been added to log the received request. This will help in debugging and understanding the flow of requests in the system.",4,4,4,4,"refactor: Add request line logging
Added a debug log statement to track received request lines during parsing, enhancing visibility into the request line parsing phase.","feat: Add debug logging for received HTTP request lines
Log received HTTP request lines at debug level to provide more visibility into the parsing process in InternalNioInputBuffer.",9.95,29.51,18.27,0.0,"feat: Add logging for received HTTP request lines
This commit adds a debug log statement to the parseRequestLine method to log the received HTTP request lines. This change enhances the logging capabilities of the InternalNioInputBuffer class, providing more visibility into the HTTP request parsing process.",19.98,39.51,56.34,0.0
ae008e80741e10bc005af7ab161bce792538a1f5,apache/tomcat,,"File: java/org/apache/coyote/http11/AbstractHttp11Processor.java
Status: modified
```diff
@@ -1028,7 +1028,7 @@ public SocketState process(SocketWrapper<S> socketWrapper)
 
         if (error || endpoint.isPaused()) {
             return SocketState.CLOSED;
-        } else if (comet || isAsync()) {
+        } else if (isAsync() || comet) {
             return SocketState.LONG;
         } else {
             if (sendfileInProgress) {
```",async more likely than comet,4,3,4,4,fix the build,0,0,4,4,Refactor: Change condition order in process method The order of the conditions in the if statement in the process method of the AbstractHttp11Processor class has been changed. This is a refactor and does not affect the functionality of the method. The method still processes a socket connection and handles the request/response lifecycle.,4,4,3,4,"refactor: Rearrange async and comet checks in process method
Rearranged the async and comet checks in the process method to reduce conditional complexity. This change preserves the original functionality of the system.","refactor: Rearrange conditions in process method
Improved code readability and maintainability by swapping conditions in the process method of AbstractHttp11Processor.",9.33,31.33,20.69,0.0,"refactor: Reorder conditions in process method
Rearranged the conditions in the process method of AbstractHttp11Processor to improve code readability and maintainability. This change does not affect the observable behavior of the method.",19.16,45.78,27.95,0.0
add52847f681e23f4cc6489946828f6af7304f8d,apache/tomcat,,"File: java/org/apache/catalina/tribes/membership/McastService.java
Status: modified
```diff
@@ -282,7 +282,7 @@ public void setLocalLoopbackDisabled(boolean localLoopbackDisabled) {
         properties.setProperty(""localLoopbackDisabled"",String.valueOf(localLoopbackDisabled));
     }
     
-    public boolean getLocalLoopbackDisabled(boolean localLoopbackDisabled) {
+    public boolean getLocalLoopbackDisabled() {
         String p = properties.getProperty(""localLoopbackDisabled"");
         if(p != null){
             return Boolean.valueOf(p).booleanValue();
```",Removed parameter from get(),0,3,4,4,remove unused parameter,4,4,4,4,"Refactor: Remove parameter from getLocalLoopbackDisabled method The getLocalLoopbackDisabled method in McastService.java no longer takes a parameter. The method now checks if the local loopback is disabled by retrieving the property value from the properties file. If the property is not set, it defaults to false. This change is a refactor, which means the code has been restructured without changing its external behavior.",4,4,4,4,"refactor: Make getLocalLoopbackDisabled parameterless
Removed the unnecessary `localLoopbackDisabled` parameter from the `getLocalLoopbackDisabled` method, making it more intuitive and easier to use by relying on the configuration property setting.","feat: Introduce local loopback disabled property getter
This change adds a method to retrieve the local loopback disabled property setting, making it accessible for further configuration and handling.",3.05,20.0,12.86,0.0,"refactor: Remove unnecessary parameter from getLocalLoopbackDisabled method
The getLocalLoopbackDisabled method has been refactored to remove the unnecessary boolean parameter. This change simplifies the method's signature and makes it easier to use. The method's functionality remains unchanged, and it still returns whether local loopback is disabled based on the configuration property.",10.99,28.57,31.1,0.0
f4878ef9e4360cc3e1f0b94cc2e6d110b8defb78,apache/tomcat,,"File: java/org/apache/catalina/core/ContainerBase.java
Status: modified
```diff
@@ -1190,7 +1190,10 @@ protected void destroyInternal() throws LifecycleException {
             parent.removeChild(this);
         }
 
-        startStopExecutor.shutdownNow();
+        // If init fails, this may be null
+        if (startStopExecutor != null) {
+            startStopExecutor.shutdownNow();
+        }
 
         super.destroyInternal();
     }
```",Fix potential NPE,4,4,4,4,fix npe in ContainerBase,4,4,4,4,"Fix: Add null check before shutting down startStopExecutor In the `destroyInternal` method of the `ContainerBase` class, a null check is added before shutting down the `startStopExecutor`. This is to prevent a potential null pointer exception if the `startStopExecutor` is not initialized.",4,4,4,4,"fix: Prevent NPE in destroyInternal when startStopExecutor is null
Fixed a potential NullPointerException in destroyInternal() by checking if startStopExecutor is null before calling shutdownNow().","fix: Check startStopExecutor for null in destroyInternal
Prevent NullPointerException by adding a null check for startStopExecutor in the destroyInternal method.",5.0,31.25,24.62,0.0,"fix: Handle null startStopExecutor in destroyInternal
Prevent a potential NullPointerException in the destroyInternal method by checking if startStopExecutor is null before calling shutdownNow. This ensures that the container and its associated components are properly cleaned up during shutdown or undeployment.",12.93,27.5,34.77,0.0
de55e922010568aa727ac2e1f4171f0ef574046b,apache/tomcat,,"File: java/org/apache/catalina/startup/Tomcat.java
Status: modified
```diff
@@ -605,7 +605,7 @@ protected void initBaseDir() {
         }
         server.setCatalinaBase(baseFile);
 
-        if (catalinaHome == null) {
+        if (catalinaHome != null) {
             File homeFile = new File(catalinaHome);
             homeFile.mkdirs();
             if (!homeFile.isAbsolute()) {
```",Correct typo that broke nearly all the tests,4,4,4,4,fix npe in Tomcat,4,3,4,4,"Fix: Use Catalina home directory if base directory is not set This commit modifies the `initBaseDir` method in the `Tomcat.java` file. The condition `if (catalinaHome == null)` has been changed to `if (catalinaHome != null)`. This change ensures that the Catalina home directory is used if the base directory is not set, likely fixing a bug where the base directory was not being set correctly.",4,4,4,4,"fix: Use correct null check for catalinaHome in Tomcat.java
Fixes incorrect null check in initBaseDir() method, ensuring catalinaHome is properly initialized.","fix: Check catalinaHome for null before initializing base directory
Previously, the base directory was not correctly set up during Tomcat server initialization when catalinaHome was null. This change fixes the issue by checking for null before initialization.",1.72,16.47,14.74,0.0,"fix: Correct catalinaHome null check in Tomcat
The initBaseDir method was incorrectly initializing the base directory when catalinaHome was null. This commit fixes the issue by changing the null check to a non-null check, ensuring the base directory is properly initialized.",9.4,25.0,31.82,0.0
136ad629273cb90b8d48ed6ab2115f95ace1f11b,apache/tomcat,,"File: java/org/apache/catalina/core/StandardHostValve.java
Status: modified
```diff
@@ -60,6 +60,12 @@ final class StandardHostValve extends ValveBase {
 
     private static final Log log = LogFactory.getLog(StandardHostValve.class);
 
+    // Saves a call to getClassLoader() on very request. Under high load these
+    // calls took just long enough to appear as a hot spot (although a very
+    // minor one) in a profiler.
+    private static final ClassLoader MY_CLASSLOADER =
+            StandardHostValve.class.getClassLoader();
+
     protected static final boolean STRICT_SERVLET_COMPLIANCE;
 
     protected static final boolean ACCESS_SESSION;
@@ -184,12 +190,10 @@ public final void invoke(Request request, Response response)
 
         // Restore the context classloader
         if (Globals.IS_SECURITY_ENABLED) {
-            PrivilegedAction<Void> pa = new PrivilegedSetTccl(
-                    StandardHostValve.class.getClassLoader());
+            PrivilegedAction<Void> pa = new PrivilegedSetTccl(MY_CLASSLOADER);
             AccessController.doPrivileged(pa);
         } else {
-            Thread.currentThread().setContextClassLoader
-                    (StandardHostValve.class.getClassLoader());
+            Thread.currentThread().setContextClassLoader(MY_CLASSLOADER);
         }
     }
 
```",Minor performance tweak,4,3,4,4,add STRICT_SERVLET_COMPLIANCE to StandardHostValve,0,2,4,4,"Refactor: Optimize getClassLoader() calls in StandardHostValve This commit optimizes the number of getClassLoader() calls in the invoke method of the StandardHostValve class. A new static final variable MY_CLASSLOADER is added to replace the previous getClassLoader() calls, which reduces the number of these calls under high load. This change does not alter the functionality of the invoke method.",4,4,4,4,"refactor: Cache ClassLoader to avoid repeated getClassLoader calls
Reduces performance overhead under high load by caching the ClassLoader, eliminating repeated getClassLoader calls identified as a hot spot in profiling.","refactor: Cache class loader in StandardHostValve
Save a call to getClassLoader() on every request by caching the class loader in a static field. This optimization was identified as a minor hot spot in a profiler under high load.",3.66,18.6,14.99,0.0,"refactor: Optimize context class loader access
This commit optimizes the access to the context class loader in the StandardHostValve class by caching it in a static final variable, reducing the number of calls to getClassLoader() and improving performance under high load.",12.5,40.82,36.02,0.0
1824845878e59054c95339c2f8fe92e57c796729,apache/tomcat,,"File: java/org/apache/tomcat/jni/SSL.java
Status: modified
```diff
@@ -347,7 +347,7 @@ public static native long newBIO(long pool, BIOCallback callback)
      * {@link #SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION} and tcnative
      * supports that flag.</i>
      *
-     * @param Bitwise-OR of all SSL_OP_* to test.
+     * @param op Bitwise-OR of all SSL_OP_* to test.
      *
      * @return true if all SSL_OP_* are supported by OpenSSL library.
      */
```",Fix broken Javadoc,4,3,4,3,fix typo in SSL javadoc,0,1,4,4,"Style: Add parameter name in method comment In the SSL class, which is responsible for managing SSL/TLS security protocols and certificate handling, a parameter name 'op' was added in the comment of a method. This change does not affect the functionality of the class.",4,4,3,4,"style: Rename Javadoc parameter in SSL.java
No functional changes; renamed Javadoc parameter to improve code consistency.","style: Rename parameter to op in SSL.java
Improved parameter naming in method comment for better readability.",2.03,16.67,8.14,0.0,"style: Rename parameter in SSL.java
Renamed the parameter in the method comment from 'Bitwise-OR of all SSL_OP_* to test' to 'op' to improve code readability and clarity.",5.4,25.0,14.74,0.0
0dd98c1a6b04a3bfcb63b373ba905605f6aee83e,apache/tomcat,,"File: java/org/apache/tomcat/util/buf/B2CConverter.java
Status: modified
```diff
@@ -138,23 +138,6 @@ public void recycle() {
         leftovers.position(0);
     }
 
-    public boolean isUndeflow() {
-        return (leftovers.position() > 0);
-    }
-
-    /**
-     * Convert the given bytes to characters.
-     *
-     * @param bc byte input
-     * @param cc char output
-     *
-     * @deprecated  Use {@link #convert(ByteChunk, CharChunk, boolean)}
-     */
-    @Deprecated
-    public void convert(ByteChunk bc, CharChunk cc) throws IOException {
-        convert(bc, cc, false);
-    }
-
     /**
      * Convert the given bytes to characters.
      *
```",Remove one deprecated and one unused method,4,4,4,4,remove deprecated code,4,4,4,4,"Refactor: Remove deprecated methods in B2CConverter class The deprecated methods 'isUndeflow' and 'convert(ByteChunk bc, CharChunk cc)' were removed from the B2CConverter class. This class is responsible for converting byte data to character data. The removal of these methods does not affect the overall functionality of the class.",4,4,3,4,"refactor: Remove deprecated convert(ByteChunk, CharChunk) method
Removed deprecated method to simplify class functionality and align with the recommended alternative.","refactor: Remove deprecated and unused methods from B2CConverter
Removed the deprecated convert(ByteChunk, CharChunk) method and the unused isUndeflow method to simplify the code and remove unnecessary functionality.",3.15,24.62,19.32,0.0,"refactor: Remove deprecated method and unused isUndeflow method
This commit removes the deprecated convert method and the unused isUndeflow method from the B2CConverter class, simplifying its interface and removing unnecessary code.",9.41,25.97,27.71,0.0
d5205523b8592dce9a54181546e100b804c65e26,apache/tomcat,,"File: java/org/apache/catalina/authenticator/BasicAuthenticator.java
Status: modified
```diff
@@ -113,7 +113,7 @@ either the original SSO logon was of DIGEST or SSL (which
 
                 // Use the StringCache as these will be the same between
                 // requests
-                String encoded = authorizationBC.toString();
+                String encoded = authorizationBC.toStringInternal();
                 byte[] decoded = DatatypeConverter.parseBase64Binary(encoded);
 
                 // Get username and password
```",Keep auth headers out of the StringCache,0,0,4,3,remove unused code,0,0,4,4,"Refactor: Change method call in BasicAuthenticator.java In the `authenticate(Request request, HttpServletResponse response)` method, the `toString()` method call has been replaced with `toStringInternal()`. This change does not affect the functionality of the method, which is to authenticate a user based on the request and response. The change is in the implementation details.",4,4,2,4,"refactor: Use toStringInternal instead of toString for authorizationBC encoding
Replace toString() with toStringInternal() to leverage the latter's encoding capabilities, ensuring accurate authorizationBC encoding and maintaining the authenticator's functionality.","refactor: Replace toString with toStringInternal in authenticate method
Improved encoding in BasicAuthenticator by using the internal toString method.",2.96,20.25,14.36,0.0,"refactor: Update BasicAuthenticator to use toStringInternal
Refactored the authenticate method in BasicAuthenticator to use authorizationBC.toStringInternal() instead of toString() to improve the internal implementation of HTTP Basic Authentication.",3.24,22.78,11.7,0.0
6f31a1e42aa6ee3574874d4a32327c6572397068,apache/tomcat,,"File: java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
Status: modified
```diff
@@ -67,7 +67,7 @@ public class FarmWarDeployer extends ClusterListener
         StringManager.getManager(Constants.Package);
 
     /*--Instance Variables--------------------------------------*/
-    protected boolean started = false; //default 5 seconds
+    protected boolean started = false;
 
     protected final HashMap<String, FileMessageFactory> fileFactories =
         new HashMap<>();
```",remove invalid comment.,4,4,4,4,remove unused field,0,0,4,4,style: Remove comment in FarmWarDeployer.java A comment was removed from the 'started' variable declaration in the FarmWarDeployer.java file. This change does not affect the functionality of the code.,4,3,4,4,"refactor: Remove default value from started field
Removed the unnecessary default value from the started field, making the code more concise and easier to understand. This change has no functional impact, but improves the overall code quality.","refactor: Simplify started variable initialization
Removed unnecessary default value of 5 seconds from the started variable in FarmWarDeployer.java.",10.43,27.27,31.14,0.0,"refactor: Remove default value from started variable
The default value of 5 seconds was removed from the started variable in FarmWarDeployer class. This change does not affect the functionality of the class, which still deploys web applications to a cluster of servers.",35.26,50.7,59.9,0.0
f136cb430084778482bb7e34577373e41d2030aa,apache/tomcat,,"File: test/javax/el/TesterClass.java
Status: modified
```diff
@@ -20,12 +20,15 @@ public class TesterClass {
 
     public static String publicStaticString = ""publicStaticString"";
     public String publicString = ""publicString"";
+    @SuppressWarnings(""unused"") // Used in TestStaticFieldELREsolver
     private static String privateStaticString = ""privateStaticString"";
+    @SuppressWarnings(""unused"") // Used in TestStaticFieldELREsolver
     private String privateString = ""privateString"";
 
     public TesterClass() {
     }
 
+    @SuppressWarnings(""unused"") // Used in TestStaticFieldELREsolver
     private TesterClass(String privateString) {
         this.privateString = privateString;
     }
```",Silence some Eclipse warnings,4,4,4,4,add TesterClass privateStaticString,0,0,4,2,"feat: Add SuppressWarnings annotations to TesterClass This commit adds SuppressWarnings annotations to some fields and a constructor in the TesterClass.java file. The annotations are added to the private static string and private string fields, as well as to a private constructor. These changes are made to suppress warnings about these fields and constructor being unused, as they are actually used in TestStaticFieldELResolver.",4,4,4,4,"refactor: Introduce private fields and constructor for testing purposes
Enabled testing of private fields and non-public constructors by introducing private fields and a parameterized constructor in TesterClass, facilitating more comprehensive testing.","feat: Add private string fields and constructor to TesterClass for testing
Introduced private static and instance string fields, as well as a private constructor, to facilitate testing and demonstration purposes in TesterClass.",4.23,21.51,17.27,0.0,"feat: Add private fields and constructor to TesterClass
This commit enhances the TesterClass by introducing private static and instance string fields, as well as a private constructor, to provide additional testing and demonstration capabilities. These changes support the class's purpose of demonstrating access modifiers and static/non-static variable usage in a Java class.",14.41,38.6,25.78,0.0
45f1fb3021b0ad2df4c800afa2e31ca171d63256,apache/tomcat,,"File: java/org/apache/catalina/startup/HostConfig.java
Status: modified
```diff
@@ -81,12 +81,6 @@ public class HostConfig
     // ----------------------------------------------------- Instance Variables
 
 
-    /**
-     * The Java class name of the Context configuration class we should use.
-     */
-    protected String configClass = ""org.apache.catalina.startup.ContextConfig"";
-
-
     /**
      * The Java class name of the Context implementation we should use.
      */
@@ -162,28 +156,6 @@ public class HostConfig
     // ------------------------------------------------------------- Properties
 
 
-    /**
-     * Return the Context configuration class name.
-     */
-    public String getConfigClass() {
-
-        return (this.configClass);
-
-    }
-
-
-    /**
-     * Set the Context configuration class name.
-     *
-     * @param configClass The new Context configuration class name.
-     */
-    public void setConfigClass(String configClass) {
-
-        this.configClass = configClass;
-
-    }
-
-
     /**
      * Return the Context implementation class name.
      */
```",Remove unused class. The name of Context configuration class is acquired from the Host.,4,4,4,4,remove unused code,4,4,4,4,"Refactor: Remove unused `configClass` variable in `HostConfig` The `configClass` variable and its getter and setter methods were removed from the `HostConfig` class. This class configures properties of a host and its associated contexts, and manages their lifecycle events. The removal of the `configClass` variable and its methods does not affect the functionality of the `HostConfig` class.",4,4,4,4,"refactor: Remove configClass field and its accessors
The `configClass` field and its accessors were not being used anywhere in the codebase, so they were safely removed to reduce code clutter.","refactor: Remove unused configClass field and accessor methods
The configClass field and its getter/setter methods in HostConfig class were not being used, so they have been removed to simplify the code.",3.59,23.53,18.04,0.0,"refactor: Remove unused configClass variable and related methods
The configClass variable and its getter/setter methods were removed from the HostConfig class as they were not being used. This change simplifies the class structure and reduces unnecessary code.",21.49,41.3,33.66,0.0
e023baf3790eeac22ad53867e5d95e038342c9f4,apache/tomcat,,"File: java/org/apache/tomcat/util/net/SocketWrapper.java
Status: modified
```diff
@@ -31,10 +31,10 @@ public class SocketWrapper<E> {
     private long timeout = -1;
     private boolean error = false;
     private volatile int keepAliveLeft = 100;
-    private boolean comet = false;
-    private boolean async = false;
+    private volatile boolean comet = false;
+    private volatile boolean async = false;
     private boolean keptAlive = false;
-    private boolean upgraded = false;
+    private volatile boolean upgraded = false;
     private boolean secure = false;
     /*
      * Following cached for speed / reduced GC
```",Observed a hard to reproduce test failure with the non-blocking IO tests. Can't reproduce it yet. Working assumption is that Poller and application thread have a different view of the async field on the SocketWrapper so make all the flags the Poller uses volatile.,4,4,4,4,fix quality flaw,0,0,4,4,"Refactor: Enhance thread safety in SocketWrapper class In the SocketWrapper class, three boolean variables (`comet`, `async`, and `upgraded`) have been changed from non-volatile to volatile. This change is aimed at enhancing the thread safety of the class, which is responsible for managing socket access, state, and properties.",4,4,4,4,"refactor: Make comet, async, and upgraded fields volatile
Mark comet, async, and upgraded fields as volatile in SocketWrapper to ensure thread-safe access, as these fields are shared among multiple threads and require synchronized updates.","refactor: Declare boolean fields as volatile in SocketWrapper
Ensure thread safety by making comet, async, and upgraded fields volatile.",8.54,20.0,22.33,0.0,"refactor: Make fields volatile in SocketWrapper
This commit makes the comet, async, and upgraded fields in the SocketWrapper class volatile to ensure thread safety. This change does not affect the observable behavior of the class, but improves its internal structure.",17.73,32.56,42.34,0.0
e0c00a8a55555ea1902b725ff37bcbfd0608b964,apache/tomcat,,"File: test/org/apache/catalina/valves/TesterAccessLogValve.java
Status: modified
```diff
@@ -84,7 +84,7 @@ public void validateAccessLog(int count, int status, long minTime,
             assertEquals(status, entry.getStatus());
             assertTrue(entry.toString() + "" duration is not >= "" + (minTime - ERROR_MARGIN),
                     entry.getTime() >= minTime - ERROR_MARGIN);
-            assertTrue(entry.toString() + "" duration is not < "" + (maxTime - ERROR_MARGIN),
+            assertTrue(entry.toString() + "" duration is not < "" + (maxTime + ERROR_MARGIN),
                     entry.getTime() < maxTime + ERROR_MARGIN);
         }
     }
```",Correct typo in message printed by validateAccessLog() when a testcase runs too long.,4,4,4,4,fix log message,4,4,4,4,"Fix: Adjust duration check in validateAccessLog method In the validateAccessLog method of the TesterAccessLogValve class, the condition for the duration to be less than maxTime has been adjusted. Previously, the ERROR_MARGIN was subtracted from maxTime, but now it is added. This change does not affect the overall functionality of the method, which continues to validate the access log entries by checking the count, status, and duration of each entry.",4,4,4,4,"fix: Fix access log duration validation error
Fixed incorrect error margin in `validateAccessLog` method, which was causing duration validation errors.","fix: Validate duration correctly in TesterAccessLogValve
Use maxTime + ERROR_MARGIN instead of maxTime - ERROR_MARGIN in validateAccessLog method.",1.19,15.73,12.77,0.0,"fix: Correct duration validation in TesterAccessLogValve
Fixed a bug in the validateAccessLog method where the duration validation was incorrect. The maximum time check was previously using maxTime - ERROR_MARGIN, which has been corrected to maxTime + ERROR_MARGIN. This ensures that the access log entries are properly validated.",11.41,32.76,34.48,0.0
7605a452f697d0c1fed16e8f5c475015c74d5601,apache/tomcat,,"File: java/org/apache/coyote/Response.java
Status: modified
```diff
@@ -481,10 +481,6 @@ public String getContentType() {
         return ret;
     }
 
-    public void setContentLength(int contentLength) {
-        this.contentLength = contentLength;
-    }
-
     public void setContentLength(long contentLength) {
         this.contentLength = contentLength;
     }
```",Remove unnecessary method,4,4,4,4,remove unused method,4,4,4,4,"Refactor: Remove redundant setContentLength method in Response class The setContentLength(int contentLength) method was removed from the Response class. This change is a refactor and does not affect the overall functionality of the class, which handles HTTP responses, including status, headers, content, and error handling.",4,4,3,4,"refactor: Remove redundant setContentLength method
Removed setContentLength(int) method, which is redundant with the existing setContentLength(long) method.","refactor: Remove redundant setContentLength(int) method
The setContentLength(long) method is sufficient, making the int variant unnecessary.",4.09,27.12,12.79,0.0,"refactor: Remove setContentLength(int) method
The setContentLength(int) method has been removed from the Response class, as it is redundant with the setContentLength(long) method. This change simplifies the class's API and reduces code duplication.",14.53,34.67,36.59,0.0
0b41baf7500b79cfbdfb719bd084fd89bb8b253d,apache/tomcat,Y,"File: webapps/examples/WEB-INF/classes/websocket/echo/EchoAnnotation.java
Status: modified
```diff
@@ -24,6 +24,11 @@
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpoint;
 
+/**
+ * The three annotated echo endpoints can be used to test with Autobahn and
+ * the following command ""wstest -m fuzzingclient -s servers.json"". See the
+ * Autobahn documentation for setup and general information.
+ */
 @ServerEndpoint(""/websocket/echoAnnotation"")
 public class EchoAnnotation {
 
```


File: webapps/examples/WEB-INF/classes/websocket/echo/EchoAsyncAnnotation.java
Status: modified
```diff
@@ -25,7 +25,15 @@
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpoint;
 
-@ServerEndpoint(""/websocket/echoAsyncAnnotation"")
+/**
+ * The three annotated echo endpoints can be used to test with Autobahn and
+ * the following command ""wstest -m fuzzingclient -s servers.json"". See the
+ * Autobahn documentation for setup and general information.
+ *
+ * Note: This one is disabled by default since it allocates memory, and needs
+ * to be enabled back.
+ */
+//@ServerEndpoint(""/websocket/echoAsyncAnnotation"")
 public class EchoAsyncAnnotation {
 
     StringBuilder sb = null;
```


File: webapps/examples/WEB-INF/classes/websocket/echo/EchoStreamAnnotation.java
Status: modified
```diff
@@ -25,6 +25,11 @@
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpoint;
 
+/**
+ * The three annotated echo endpoints can be used to test with Autobahn and
+ * the following command ""wstest -m fuzzingclient -s servers.json"". See the
+ * Autobahn documentation for setup and general information.
+ */
 @ServerEndpoint(""/websocket/echoStreamAnnotation"")
 public class EchoStreamAnnotation {
 
```",Add some info and disable the async test (one CVE saved hehe).,1,3,4,3,add some comments,2,2,4,4,"Style: Add comments to EchoAnnotation, EchoAsyncAnnotation, and EchoStreamAnnotation classes This commit adds comments to the EchoAnnotation, EchoAsyncAnnotation, and EchoStreamAnnotation classes in the webapps/examples/WEB-INF/classes/websocket/echo directory. The comments provide information about the purpose of these classes and how to use them. In EchoAsyncAnnotation.java, the @ServerEndpoint annotation was also commented out.",4,4,4,4,"style: Document WebSocket echo endpoint classes with Javadoc
Added Javadoc comments to WebSocket echo endpoint classes, including notes on testing with Autobahn and specific details about EchoAsyncAnnotation's default disabled state.","feat: Document Autobahn testing for WebSocket echo endpoints
Add comments to EchoAnnotation, EchoAsyncAnnotation, and EchoStreamAnnotation classes to provide information on how to test them with Autobahn.",3.25,15.38,9.2,0.0,"feat: Add Autobahn testing documentation to WebSocket echo endpoints
This commit adds documentation to the WebSocket echo endpoints (EchoAnnotation, EchoAsyncAnnotation, and EchoStreamAnnotation) to facilitate testing with Autobahn using the command 'wstest -m fuzzingclient -s servers.json'. The added comments provide setup and general information for Autobahn testing.",10.71,31.58,31.19,0.0
e6859225d43d86d7d7dba609b8401157f4bc6f15,apache/tomcat,Y,"File: java/org/apache/coyote/ajp/AjpAprProtocol.java
Status: modified
```diff
@@ -62,7 +62,7 @@ public AjpAprProtocol() {
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
         // AJP does not use Send File
-        ((AprEndpoint) endpoint).setUseSendfile(false);
+        endpoint.setUseSendfile(false);
     }
 
 
```


File: java/org/apache/coyote/ajp/AjpNio2Protocol.java
Status: modified
```diff
@@ -59,7 +59,7 @@ public AjpNio2Protocol() {
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
         // AJP does not use Send File
-        ((Nio2Endpoint) endpoint).setUseSendfile(false);
+        endpoint.setUseSendfile(false);
     }
 
 
```


File: java/org/apache/coyote/ajp/AjpNioProtocol.java
Status: modified
```diff
@@ -61,7 +61,7 @@ public AjpNioProtocol() {
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
         // AJP does not use Send File
-        ((NioEndpoint) endpoint).setUseSendfile(false);
+        endpoint.setUseSendfile(false);
     }
 
 
```",Remove unnecessary cast,4,4,4,4,remove unnecessary code,4,4,4,4,"Refactor: Simplify setUseSendfile method call in AJP protocol handlers This commit simplifies the method call to setUseSendfile in the AJP protocol handlers AjpAprProtocol, AjpNio2Protocol, and AjpNioProtocol by removing the explicit type casting. This is a refactoring change that improves the structure of the code without altering its functionality.",3,4,4,4,"refactor: Simplify endpoint setUseSendfile calls
Unified setUseSendfile call across different endpoint types, eliminating the need for explicit casting.","refactor: Remove unnecessary type casting in AJP protocol endpoint setup
Simplify setUseSendfile method calls by removing endpoint type casting in AjpAprProtocol, AjpNio2Protocol, and AjpNioProtocol classes.",2.26,21.54,13.58,0.0,"refactor: Simplify setUseSendfile method calls
Remove unnecessary casts to endpoint types when calling setUseSendfile method in AjpAprProtocol, AjpNio2Protocol, and AjpNioProtocol classes. This change improves code readability and maintainability.",11.76,40.0,34.15,0.0
5408cdef7bf9e22d47e2305cde278151b32813f3,apache/tomcat,,"File: java/org/apache/jasper/compiler/Generator.java
Status: modified
```diff
@@ -586,7 +586,7 @@ private void genPreambleStaticInitializers() {
                 out.println(""\"");"");
             }
         }
-        if (packages.size() == 0) {
+        if (classes.size() == 0) {
             out.printin(""_jspx_imports_classes = null;"");
             out.println();
         } else {
```","When generating a list of package and class imports, the processing of classes was omitted.",4,4,4,4,fix Generator üòÖ,2,2,4,3,"Fix: Update condition in genPreambleStaticInitializers method The condition in the genPreambleStaticInitializers method of the Generator class has been updated. Previously, the condition checked if the size of the 'packages' set was zero. Now, it checks if the size of the 'classes' set is zero. This change ensures that the '_jspx_imports_classes' variable is correctly initialized. The Generator class is responsible for generating Java source code from Nodes for servlets and tag handlers. This change is crucial for the correct generation of the preamble of the static initializers for the JSP factory, dependencies, and imports.",4,4,4,4,"fix: Fix initialization of _jspx_imports_classes
Fixed incorrect initialization of _jspx_imports_classes, which was caused by checking packages size instead of classes size.","fix: Use classes instead of packages in genPreambleStaticInitializers
Changed the condition to check if classes size is 0 instead of packages size, to correctly generate static initializers for the JSP page.",2.12,11.76,8.22,0.0,"refactor: Update genPreambleStaticInitializers to use classes instead of packages
This commit refactors the genPreambleStaticInitializers method to use classes instead of packages, aligning with the updated requirements for JSP page compilation. The change ensures that the static initializer code is generated correctly, including the JspFactory, dependants, and imports.",4.81,25.53,25.35,0.0
b8f901a11afe72d1e6b4f3fc8a33b97c92a41690,apache/tomcat,,"File: java/org/apache/tomcat/util/net/SocketWrapperBase.java
Status: modified
```diff
@@ -472,7 +472,10 @@ protected void writeNonBlocking(byte[] buf, int off, int len) throws IOException
                     socketBufferHandler.configureWriteBufferForWrite();
                     thisTime = transfer(buf, off, len, socketBufferHandler.getWriteBuffer());
                 } else {
-                    thisTime = 0;
+                    // Didn't write any data in the last non-blocking write.
+                    // Therefore the write buffer will still be full. Nothing
+                    // else to do here. Exit the loop.
+                    break;
                 }
                 len = len - thisTime;
             }
```",Fix an infinite loop.,4,4,4,4,fix a bug in SocketWrapperBase,4,2,4,4,"Fix: Prevent blocking in writeNonBlocking method In the `writeNonBlocking` method of the `SocketWrapperBase.java` file, changes were made to prevent the method from blocking when the write buffer is full. Previously, if the write buffer was not writable, the data was added to the buffer and the method would block. Now, if the write buffer is full, the remaining data is buffered internally, preventing a blocking condition.",4,4,4,4,"fix: Break out of loop when write fails
Exit the loop early when a non-blocking write fails to prevent unnecessary iterations and avoid further failed writes.","fix: Handle remaining data on partial non-blocking write
Ensure the write buffer is correctly managed when a non-blocking write is incomplete.",1.54,17.39,9.27,0.0,"fix: Handle full write buffer in non-blocking write
In the writeNonBlocking method, when the last non-blocking write does not write any data, the write buffer remains full. This commit fixes this issue by breaking the loop in such cases, ensuring that the method exits correctly.",6.44,27.03,20.15,0.0
5e6b3a21134e0d21e77396723250ade9ed9e37e8,apache/tomcat,,"File: java/org/apache/tomcat/util/net/AbstractEndpoint.java
Status: modified
```diff
@@ -52,7 +52,7 @@ public abstract class AbstractEndpoint<S> {
 
     // -------------------------------------------------------------- Constants
 
-    protected static final String DEFAULT_CIPHERS = ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5"";
+    protected static final String DEFAULT_CIPHERS = ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA"";
 
     protected static final StringManager sm = StringManager.getManager(
             AbstractEndpoint.class.getPackage().getName());
```",Exclude cipher suites that use RSA key exchange. The remaining ciphers (with Java 8 at least) all then support forward secrecy.,4,4,4,4,remove unused code,0,0,4,4,"Fix: Update default ciphers in AbstractEndpoint The default ciphers used in the AbstractEndpoint class, which manages server socket connections, have been updated. The previous cipher string ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5"" has been replaced with ""HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA"". This change is part of a fix to improve the security of the server socket connections managed by the AbstractEndpoint class.",4,4,4,4,"feat: Update DEFAULT_CIPHERS to include kRSA
This change adds kRSA to the DEFAULT_CIPHERS to ensure better security and compatibility with a wider range of clients. This update is in line with the best practices for cipher suite configuration.","feat: Exclude kRSA from default ciphers
Updated the default ciphers to improve security by removing kRSA support.",5.2,21.74,17.33,0.0,"refactor: Update default ciphers in AbstractEndpoint
The default ciphers in AbstractEndpoint have been updated to include !kRSA. This change enhances the security of the socket connections managed by AbstractEndpoint.",17.12,54.32,41.76,0.0
f122c5fa68414fe32f6d17abac954130f5864d60,apache/tomcat,,"File: java/org/apache/catalina/realm/JNDIRealm.java
Status: modified
```diff
@@ -1150,7 +1150,7 @@ public String getHostnameVerifierClassName() {
      *            class name of the {@link HostnameVerifier} to be constructed
      */
     public void setHostnameVerifierClassName(String verifierClassName) {
-        if (hostNameVerifierClassName != null) {
+        if (verifierClassName != null) {
             this.hostNameVerifierClassName = verifierClassName.trim();
         } else {
             this.hostNameVerifierClassName = null;
```","Use the right variable for null check; the method variable, that is.",4,4,4,4,fix npe in JNDIRealm,0,0,4,4,"Fix: Correct condition in setHostnameVerifierClassName method The condition checked before setting the hostNameVerifierClassName in the JNDIRealm class was corrected. Previously, the condition checked if the class variable hostNameVerifierClassName was not null. Now, it checks if the parameter verifierClassName is not null. This change ensures that the hostNameVerifierClassName is set correctly",4,4,4,4,"fix: Fix variable naming in setHostnameVerifierClassName
Renamed variable 'hostNameVerifierClassName' to 'verifierClassName' to match the method parameter name, improving code readability and consistency.","fix: Set correct verifier class name in JNDIRealm
Update setHostnameVerifierClassName method to trim the input class name.",2.41,16.9,11.02,0.0,"refactor: Rename variable in setHostnameVerifierClassName
Rename 'hostNameVerifierClassName' to 'verifierClassName' in the setHostnameVerifierClassName method to improve code readability and consistency.",2.12,11.76,11.77,0.0
50ba973a15874c2597b26f45fd7edc7d92dfd985,apache/tomcat,,"File: modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
Status: modified
```diff
@@ -150,7 +150,7 @@ public void poolStarted(ConnectionPool pool) {
     @Override
     protected String reportFailedQuery(String query, Object[] args, String name, long start, Throwable t) {
         query = super.reportFailedQuery(query, args, name, start, t);
-        notifyJmx(query,FAILED_QUERY_NOTIFICATION);
+        if (isLogFailed()) notifyJmx(query,FAILED_QUERY_NOTIFICATION);
         return query;
     }
 
@@ -184,7 +184,7 @@ protected void notifyJmx(String query, String type) {
     @Override
     protected String reportSlowQuery(String query, Object[] args, String name, long start, long delta) {
         query = super.reportSlowQuery(query, args, name, start, delta);
-        notifyJmx(query,SLOW_QUERY_NOTIFICATION);
+        if (isLogSlow()) notifyJmx(query,SLOW_QUERY_NOTIFICATION);
         return query;
     }
 
```","In SlowQueryReportJmx, the LogSlow and logFailed attributes that inherited from SlowQueryReport are used as a condition of whether JMX notifications are sent.",4,4,4,4,fix SlowQueryReportJmx reportFailedQuery,1,3,4,4,Fix: Add logging condition before JMX notification in SlowQueryReportJmx This commit adds a condition to check if logging of slow or failed queries is enabled before notifying JMX in the `reportSlowQuery` and `reportFailedQuery` methods of the `SlowQueryReportJmx.java` file. This prevents unnecessary JMX notifications when logging is not enabled.,4,4,4,4,"fix: Wrap JMX notifications with logging flags
Conditionalize JMX notifications for slow and failed queries based on logging configuration, ensuring notifications are only sent when logging is enabled for the respective query types.","refactor: Notify JMX for slow and failed queries conditionally
Modified reportSlowQuery and reportFailedQuery methods to respect logging configuration, making JMX notifications more flexible and configurable.",6.54,27.16,26.48,0.0,"refactor: Conditionally notify JMX for slow and failed queries
Modified SlowQueryReportJmx to only notify JMX for slow and failed queries if logging is enabled, making the reporting more configurable and flexible.",4.9,25.32,23.2,0.0
02018b6a8c031145e1917e29ef1b62d0c06996f4,apache/tomcat,,"File: test/org/apache/coyote/http2/TestHttp2Section_6_9.java
Status: modified
```diff
@@ -203,6 +203,22 @@ public void testWindowSizeAndSettingsFrame() throws Exception {
                 ""3-Body-4096\n"", output.getTrace());
                 output.clearTrace();
 
+        // Now use a settings frame to further reduce the size of the flow
+        // control window. This should make the stream 3 window negative
+        sendSettings(0, false, new SettingValue(4, 2 * 1024));
+        // Ack
+        parser.readFrame(true);
+        Assert.assertEquals(""0-Settings-Ack\n"", output.getTrace());
+        output.clearTrace();
+
+        // Now use a settings frame to increase the size of the flow control
+        // window. The stream 3 window should still be negative
+        sendSettings(0, false, new SettingValue(4, 3 * 1024));
+        // Ack
+        parser.readFrame(true);
+        Assert.assertEquals(""0-Settings-Ack\n"", output.getTrace());
+        output.clearTrace();
+
         // Do a POST that won't be affected by the above limit
         sendSimplePostRequest(5, null);
         // Window size updates after reading POST body
```","Expand the test to ensure that once the flow control window goes negative, nothing is written until it becomes positive again.",4,4,4,4,add test for üòÖ,0,1,4,4,Feat: Enhance testWindowSizeAndSettingsFrame() in TestHttp2Section_6_9.java This commit enhances the `testWindowSizeAndSettingsFrame()` method in the `TestHttp2Section_6_9.java` file to test the behavior of the HTTP/2 flow control mechanism. It checks if the window size is correctly updated and if the flow control window can handle changes in size. This enhancement provides more comprehensive testing of the HTTP/2 flow control mechanism.,4,4,4,4,"feat: Update testWindowSizeAndSettingsFrame to test window size reduction
Added settings frames to testWindowSizeAndSettingsFrame to cover window size reduction and increase scenarios, ensuring the test's correctness in HTTP/2 flow control.","feat: Add tests for HTTP/2 window size and settings frame interactions
Verify correct handling of window size and settings frames in HTTP/2 connections with new test cases.",2.88,26.37,22.48,0.0,"feat: Enhance TestHttp2Section_6_9 to test window size and settings frame interactions
This commit extends the test case to cover scenarios where settings frames are used to reduce and then increase the flow control window, ensuring the correct handling of window size and settings frames in HTTP/2 connections.",11.83,30.63,22.53,0.0
6bd6795f7596d2d711d1bf40fdb932d0b7ee26e4,apache/tomcat,,"File: java/org/apache/coyote/http2/Http2UpgradeHandler.java
Status: modified
```diff
@@ -524,7 +524,7 @@ void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws
                 if (!stream.isActive()) {
                     activeRemoteStreamCount.decrementAndGet();
                 }
-             }
+            }
             ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());
             socketWrapper.write(true, header, 0, header.length);
             socketWrapper.write(true, data.array(), data.arrayOffset() + data.position(),
@@ -545,6 +545,7 @@ void writeWindowUpdate(Stream stream, int increment) throws IOException {
             // Change stream Id and re-use
             ByteUtil.set31Bits(frame, 5, stream.getIdentifier().intValue());
             socketWrapper.write(true, frame, 0, frame.length);
+            socketWrapper.flush(true);
         }
     }
 
```",A flush seems to be missing when writing a window update [for consistency at least].,4,4,4,4,add missing newline,0,0,4,4,Style: Correct indentation and add flush operation Corrected the indentation in the writeBody method and added a flush operation in the writeWindowUpdate method in the Http2UpgradeHandler class. The functionality of the methods remains unchanged.,4,4,4,4,"fix: fix: Ensure socket wrapper is flushed after writing
Added a call to `socketWrapper.flush(true)` after writing to ensure that all data is sent to the remote peer, fixing a potential issue where incomplete transmission could occur.","fix: Flush socket wrapper after writing
Added a call to socketWrapper.flush(true) to ensure that written data is sent over the network.",3.99,5.71,5.56,0.0,"fix: Ensure socket wrapper is flushed after writing
This commit fixes an issue where the socket wrapper was not being flushed after writing, which could lead to incomplete data being sent. The fix involves adding a call to `socketWrapper.flush(true)` after writing to the socket. This ensures that all data is properly sent and received.",3.48,9.09,16.72,0.0
878dda058cd45b3d4c48d165daa351fb4bed698a,apache/tomcat,,"File: java/org/apache/tomcat/util/net/NioEndpoint.java
Status: modified
```diff
@@ -1161,7 +1161,7 @@ public int read(boolean block, byte[] b, int off, int len)
 
             // Fill the read buffer as best we can.
             int nRead = fillReadBuffer(block);
-            lastRead = System.currentTimeMillis();
+            updateLastRead();
 
             // Full as much of the remaining byte array as possible with the
             // data that was just read
@@ -1246,7 +1246,7 @@ protected void doWrite(boolean block) throws IOException {
                         if (getSocket().flush(true, selector, writeTimeout)) break;
                     } while (true);
                 }
-                lastWrite = System.currentTimeMillis();
+                updateLastWrite();
             } finally {
                 if (selector != null) {
                     pool.put(selector);
```",Use methods updateLastRead/updateLastWrite instead of direct update of lastRead/lastWrite.,0,4,4,4,fix a bug in NioEndpoint,0,1,4,4,"Refactor: Replace direct calls to System.currentTimeMillis() in NioEndpoint.java In the methods doWrite and read in the NioEndpoint.java file, replaced direct calls to System.currentTimeMillis() with calls to the methods updateLastRead() and updateLastWrite(). This change does not affect the functionality of the methods, but rather how they handle time tracking.",4,4,4,4,"refactor: Update timestamp handling to use separate methods
Extracted lastRead and lastWrite timestamp updates into separate methods, updateLastRead() and updateLastWrite(), to improve code maintainability and flexibility.","refactor: Use updateLastRead and updateLastWrite methods
Replace direct System.currentTimeMillis() calls with updateLastRead() and updateLastWrite() methods in NioEndpoint.java to improve code organization and readability",4.51,18.18,11.55,0.0,"refactor: Update last read and write timestamps
Refactor the NioEndpoint class to use updateLastRead and updateLastWrite methods instead of directly setting lastRead and lastWrite timestamps. This change improves the internal structure of the class and makes it easier to maintain.",7.29,28.57,27.14,0.0
8ee194059d40bd3c51ff6893384ab7a00d15899a,apache/tomcat,,"File: test/org/apache/catalina/loader/TestWebappClassLoader.java
Status: modified
```diff
@@ -36,8 +36,8 @@ public void testGetURLs() throws Exception {
 
         String[] expected = new String[2];
         String warUrl = f.toURI().toURL().toExternalForm();
-        expected[0] = ""jar:"" + warUrl + ""!/WEB-INF/classes/"";
-        expected[1] = ""jar:"" + warUrl + ""!/WEB-INF/lib/test.jar"";
+        expected[0] = ""war:"" + warUrl + ""*/WEB-INF/classes/"";
+        expected[1] = ""war:"" + warUrl + ""*/WEB-INF/lib/test.jar"";
 
         Tomcat tomcat = getTomcatInstance();
 
```",Update test to check for new URL form,4,4,4,4,fix test on windows,0,1,4,4,"Fix: Update expected URLs in TestWebappClassLoader This commit updates the expected URLs in the `testGetURLs()` method of the `TestWebappClassLoader` class. The URLs, which were previously expected to start with ""jar:"", are now expected to start with ""war:"". This change ensures that the test accurately reflects the URLs returned by the URLClassLoader when a WAR file is loaded into a Tomcat server.",4,4,4,4,"refactor: Update URL patterns in TestWebappClassLoader to use war protocol
This refactoring updates the URL patterns in TestWebappClassLoader to use the 'war' protocol, replacing the previous 'jar' protocol. This change ensures that the testGetURLs() method returns accurate URLs, which is crucial for verifying the correct behavior of the WebappClassLoader in a Tomcat environment.","refactor: Update URL patterns to match Tomcat context's class loader
Changed 'jar:' to 'war:' in TestWebappClassLoader to reflect the correct URL pattern.",15.53,31.86,41.33,0.0,"refactor: Update URL patterns in TestWebappClassLoader
Refactored the URL patterns in the testGetURLs method of TestWebappClassLoader to use 'war:' instead of 'jar:' to correctly reflect the WAR file deployment in Tomcat. This change ensures that the URLs returned by the URLClassLoader match the expected URLs for a Tomcat context loaded from a WAR file.",27.04,45.61,45.41,0.0
e2093b565580bcb6849b990db2838d21e0090b3a,apache/tomcat,,"File: java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
Status: modified
```diff
@@ -335,8 +335,21 @@ private void validatePropertyNames(final Reference ref, final Name name, final L
      * @return the data source instance
      * @throws Exception if an error occurs creating the data source
      */
-    public static BasicDataSource createDataSource(final Properties properties) throws Exception {
+    public BasicDataSource createDataSource(final Properties properties) throws Exception {
         final BasicDataSource dataSource = new BasicDataSource();
+        configureDataSource(dataSource, properties);
+        return dataSource;
+    }
+
+    /**
+     * Configures a {@link BasicDataSource} instance based on the
+     * given properties.
+     *
+     * @param properties the datasource configuration properties
+     * @param dataSource the data source instance
+     * @throws Exception if an error occurs creating the data source
+     */
+    public void configureDataSource(final BasicDataSource dataSource, final Properties properties) throws Exception {
         String value = null;
 
         value = properties.getProperty(PROP_DEFAULTAUTOCOMMIT);
@@ -595,9 +608,6 @@ else if (""SERIALIZABLE"".equalsIgnoreCase(value)) {
         if (dataSource.getInitialSize() > 0) {
             dataSource.getLogWriter();
         }
-
-        // Return the configured DataSource instance
-        return dataSource;
     }
 
     /**
```",Make it possible to extend the BasicDataSource object factory without having to copy everything.,3,3,4,4,add BasicDataSourceFactory createDataSource method,0,1,4,4,Refactor: Update createDataSource and add configureDataSource in BasicDataSourceFactory This commit updates the `createDataSource` method in the `BasicDataSourceFactory` class to create and configure a `BasicDataSource` object using the provided properties. A new method `configureDataSource` has been added to configure a `BasicDataSource` object with properties from a `Properties` object. These changes improve the modularity and readability of the code.,4,4,4,4,"refactor: Extract data source configuration logic into configureDataSource method
Extracted data source configuration logic into a separate `configureDataSource` method, making it reusable and easier to test.","refactor: Extract configureDataSource method
Split the creation and configuration of a BasicDataSource into two separate methods to improve code organization and readability.",1.84,12.2,8.83,0.0,"refactor: Extract data source configuration into separate method
This commit refactors the createDataSource method to extract the data source configuration into a separate method, configureDataSource. This change improves the internal structure of the BasicDataSourceFactory class, making it easier to understand and modify.",7.26,26.53,32.48,0.0
4f7a7e85eac3b6aef7d2148bf61e6c0dba173248,apache/tomcat,,"File: java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
Status: modified
```diff
@@ -50,25 +50,14 @@
  * restarted!
  *
  * <p>
- * Add this Valve to your host definition at conf/server.xml .
- *
- * Since 5.5.10 as direct cluster valve:<br>
+ * Add this Valve to your cluster definition at conf/server.xml .
  *
  * <pre>
  *  &lt;Cluster&gt;
  *  &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot; /&gt;
  *  &lt;/Cluster&gt;
  * </pre>
  *
- * <br>
- * Before 5.5.10 as Host element:<br>
- *
- * <pre>
- *  &lt;Host&gt;
- *  &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot; /&gt;
- *  &lt;/Host&gt;
- * </pre>
- *
  * <em>A Trick:</em><br>
  * You can enable this mod_jk turnover mode via JMX before you drop a node to
  * all backup nodes! Set enable true on all JvmRouteBinderValve backups, disable
```",Fix javadoc. remove old description.,4,4,4,4,fix javadoc typos,0,1,4,4,Refactor: Update documentation in JvmRouteBinderValve.java This commit updates the documentation in the JvmRouteBinderValve.java file. The instructions on how to add this Valve to the configuration have been updated. The changes do not affect the functionality of the code.,4,4,4,4,"style: Fix JvmRouteBinderValve JavaDoc configuration
Simplified JavaDoc configuration examples by removing outdated host element configuration and focusing on cluster definition.","style: Update JvmRouteBinderValve.java comments to reflect current configuration
Remove outdated configuration examples and update remaining ones to match conf/server.xml cluster definition.",2.2,6.78,3.86,0.0,"refactor: Update JvmRouteBinderValve configuration documentation
This commit updates the configuration documentation for JvmRouteBinderValve to reflect the correct location for adding the valve in server.xml. The old instructions for adding the valve as a Host element have been removed, as they are no longer applicable.",9.11,30.95,32.19,0.0
778890c392dda8cd845db6871ca3ab9ead8b38bc,apache/tomcat,,"File: java/org/apache/tomcat/util/compat/JrePlatform.java
Status: modified
```diff
@@ -23,8 +23,6 @@
 public class JrePlatform {
 
     private static final String OS_NAME_PROPERTY = ""os.name"";
-    private static final String OS_NAME_WINDOWS_PREFIX = ""Windows"";
-    private static final String OS_NAME_MAC_OS_LC_PREFIX = ""mac os x"";
 
     static {
         /*
@@ -53,9 +51,9 @@ public String run() {
                 });
         }
 
-        IS_MAC_OS = osName.toLowerCase(Locale.ENGLISH).startsWith(OS_NAME_MAC_OS_LC_PREFIX);
+        IS_MAC_OS = osName.toLowerCase(Locale.ENGLISH).startsWith(""mac os x"");
 
-        IS_WINDOWS = osName.startsWith(OS_NAME_WINDOWS_PREFIX);
+        IS_WINDOWS = osName.startsWith(""Windows"");
     }
 
 
```",Inlined strings that are used only once,4,4,4,4,remove unused constant,0,1,4,4,Refactor: Remove redundant constants in JrePlatform.java This commit removes the constants OS_NAME_WINDOWS_PREFIX and OS_NAME_MAC_OS_LC_PREFIX in JrePlatform.java and uses their values directly in the code. This simplifies the code and improves readability.,4,4,4,4,"refactor: Remove unnecessary constants for OS name prefixes
Simplified the OS name prefix checks by inlining the prefix values, eliminating the need for separate constants. This change reduces code clutter and improves readability.","refactor: Use string literals for OS platform detection
Removed unnecessary constants OS_NAME_WINDOWS_PREFIX and OS_NAME_MAC_OS_LC_PREFIX, simplifying the JrePlatform class.",9.06,41.1,38.6,0.0,"refactor: Simplify OS platform detection
Remove unnecessary constants and directly use the OS name prefixes in the condition checks. This change improves the internal structure of the JrePlatform class, making it easier to understand and maintain.",4.82,26.32,26.65,0.0
32520eb992d0bdf2fccbc5702f957fd66a267f33,apache/tomcat,,"File: java/org/apache/tomcat/buildutil/translate/Utils.java
Status: modified
```diff
@@ -29,6 +29,7 @@ public class Utils {
 
     private static final Pattern ADD_CONTINUATION = Pattern.compile(""\\n"", Pattern.MULTILINE);
     private static final Pattern ESCAPE_LEADING_SPACE = Pattern.compile(""^(\\s)"", Pattern.MULTILINE);
+    private static final Pattern FIX_SINGLE_QUOTE = Pattern.compile(""([^'])'([^'])"", Pattern.MULTILINE);
 
     private Utils() {
         // Utility class. Hide default constructor.
@@ -63,6 +64,10 @@ static String formatValue(String in) {
         if (result.contains(""\n\\\t"")) {
             result = result.replace(""\n\\\t"", ""\n\\t"");
         }
+
+        if (result.contains(""[{0}]"")) {
+            result = FIX_SINGLE_QUOTE.matcher(result).replaceAll(""$1''$2"");
+        }
         return result;
     }
 }
```",Fix single quotes in strings with replacements on import/export rather than trying to do it manually in POEditor.,4,4,4,4,add support for fix,4,3,4,4,Feat: Handle single quotes within brackets in Utils.formatValue method This commit modifies the `formatValue` method in the `Utils` class to handle single quotes within brackets in addition to its previous functionality of adding continuation characters and escaping leading spaces. This change does not relate to any issue or pull request.,4,4,4,4,"fix: fix: Fix string formatting to handle single quotes
Added support for single quotes in formatted strings by introducing a new pattern to escape them correctly. This ensures that strings are properly formatted for further processing.","refactor: Improve formatValue method to handle single quotes
Enhance the method to handle single quotes in addition to escaping and normalizing line breaks and whitespace.",5.61,16.28,15.82,0.0,"feat: Add single quote fixing to formatValue method
This commit enhances the formatValue method in the Utils class to handle single quotes correctly. It introduces a new pattern to fix single quotes and updates the method's implementation to use this pattern. This change improves the method's functionality to format string values for use in SQL statements.",24.41,37.74,40.9,0.0
563f85ab1076fdf7329b2c6cbae22d64a859d572,apache/tomcat,,"File: java/org/apache/catalina/connector/Connector.java
Status: modified
```diff
@@ -321,36 +321,6 @@ public boolean setProperty(String name, String value) {
     }
 
 
-    /**
-     * Return a property from the protocol handler.
-     *
-     * @param name the property name
-     * @return the property value
-     *
-     * @deprecated Use {@link #getProperty(String)}. This will be removed in
-     *             Tomcat 10 onwards.
-     */
-    @Deprecated
-    public Object getAttribute(String name) {
-        return getProperty(name);
-    }
-
-
-    /**
-     * Set a property on the protocol handler.
-     *
-     * @param name the property name
-     * @param value the property value
-     *
-     * @deprecated Use {@link #setAttribute(String, Object)}. This will be
-     *             removed in Tomcat 10 onwards.
-     */
-    @Deprecated
-    public void setAttribute(String name, Object value) {
-        setProperty(name, String.valueOf(value));
-    }
-
-
     /**
      * @return the <code>Service</code> with which we are associated (if any).
      */
```",Remove deprecated code,4,4,4,4,remove deprecated code,4,4,4,4,"Refactor: Remove deprecated methods from Connector.java The deprecated methods `getAttribute(String name)` and `setAttribute(String name, Object value)` have been removed from the `Connector.java` file. These methods were previously marked for removal in Tomcat 10. The removal of these methods does not affect the functionality of the class.",4,4,4,4,"refactor: Remove deprecated getAttribute and setAttribute methods
Removed getAttribute and setAttribute methods, which were deprecated in favor of getProperty and setProperty, respectively, to maintain consistency with the Tomcat 10 roadmap.","refactor: Remove deprecated getAttribute and setAttribute
These methods were deprecated and scheduled for removal in Tomcat 10 onwards, simplifying the Connector class by removing unnecessary code.",5.13,23.38,18.46,0.0,"refactor: Remove deprecated methods
Removed deprecated methods getAttribute and setAttribute from Connector class, which were marked for removal in Tomcat 10 onwards. These methods were replaced by getProperty and setProperty respectively.",16.85,43.59,31.49,0.0
a4490a2af64308cfdd9cc92663fd390380aee1a2,apache/tomcat,,"File: test/org/apache/catalina/users/DataSourceUserDatabaseTests.java
Status: modified
```diff
@@ -16,11 +16,13 @@
  */
 package org.apache.catalina.users;
 
+import java.io.File;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.Statement;
 import java.util.Iterator;
 
+import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -109,6 +111,11 @@ public Connection getConnection() {
 
     private DerbyUserDatabase db;
 
+    @AfterClass
+    public static void derbyCleanup() {
+        System.out.println(""Deleted derby.log: "" + (new File(""derby.log"")).delete());
+    }
+
     @Test
     public void testBasicUserRoleDatabase()
         throws Exception {
@@ -156,6 +163,7 @@ public void testBasicUserRoleDatabase()
         Assert.assertFalse(""Unexpected role for user"", tomcatUser.isInRole(managerRole));
 
         db.close();
+
     }
 
     @Test
@@ -224,5 +232,6 @@ public void testUserDatabase()
         Assert.assertTrue(""No group for user"", randomUser.isInGroup(userGroup));
 
         db.close();
+
     }
 }
```",Cleanup derby.log,4,4,4,4,add test case for DataSourceUserDatabaseTests,0,1,4,4,"Feat: Add cleanup method and modify test methods in DataSourceUserDatabaseTests This commit introduces a new method, derbyCleanup(), to the DataSourceUserDatabaseTests class. This method is responsible for cleaning up the Derby database after all tests have run.  In addition, minor modifications were made to the testUserDatabase() and testBasicUserRoleDatabase() methods. These changes involve the addition of a new line after the db.close() call in each method.  These changes improve the cleanliness and readability of the test code, and ensure proper cleanup of resources after tests are run.",4,4,4,4,"feat: Implement derby.log cleanup in DataSourceUserDatabaseTests
Adds a derby.log cleanup mechanism to ensure consistent test results and prevent log file accumulation.","refactor: Add derby log cleanup after test class execution
Introduced an @AfterClass method to delete the derby.log file after running a set of JUnit tests, ensuring a clean state for subsequent test executions.",0.54,14.81,6.02,0.0,"refactor: Improve test cleanup for DerbyUserDatabaseTests
Added a new method derbyCleanup to delete the derby.log file after test class execution, and modified test methods to ensure proper cleanup. This change improves the internal structure of the test class, making it easier to maintain and modify.",7.71,24.43,25.53,0.0
f1e8677a6cf85b899ba4727728b10cccdc79b39f,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java
Status: modified
```diff
@@ -505,7 +505,7 @@ private void deploy(EjbModule ejbModule) throws OpenEJBException {
 
 
             // mdb message destination id
-            if (bean instanceof MessageDrivenBean) {
+            if (autoCreateResources && bean instanceof MessageDrivenBean) {
                 MessageDrivenBean mdb = (MessageDrivenBean) bean;
 
                 ResourceLink resourceLink = ejbDeployment.getResourceLink(""openejb/destination"");
```",Don't try to config mdb destination if we aren't auto creating resources.,0,4,4,4,fix bug in AutoConfig,2,2,4,4,Feat: Add condition to check autoCreateResources in AutoConfig This commit adds a condition to check if autoCreateResources is true before proceeding with the deployment of the EJB module in the AutoConfig class. This change is likely to prevent unnecessary resource creation when it's not needed. The deploy method in the AutoConfig class has been modified to include this condition.,4,4,4,4,"refactor: Add autoCreateResources check for MDB deployment
Added a conditional check for autoCreateResources to prevent unnecessary resource creation during MDB deployment, aligning with the intended behavior of the AutoConfig class.","refactor: Add autoCreateResources check for MessageDrivenBean deployment
Improve deployment logic in AutoConfig by considering autoCreateResources for MessageDrivenBean",9.72,31.82,26.84,0.0,"refactor: Improve deploy method for MessageDrivenBean
This commit refactors the deploy method in AutoConfig to include a check for autoCreateResources when deploying a MessageDrivenBean. This change ensures that resources are created only when necessary, making the deployment process more efficient.",9.0,18.37,23.92,0.0
5704ec0bd450554706b69906e5cf519c59ca9a71,apache/tomee,Y,"File: container/openejb-core/src/main/java/org/apache/openejb/util/SuperProperties.java
Status: modified
```diff
@@ -58,7 +58,7 @@
  * @see java.lang.System#getProperties
  */
 public class SuperProperties extends Properties {
-    private static final String LINE_SEPARATOR = System.getProperty(""line.separator"");
+    private static final String LINE_SEPARATOR = ""\n"";
 
     private static final String PROP_DTD_NAME = ""http://java.sun.com/dtd/properties.dtd"";
 
```


File: container/openejb-core/src/test/java/org/apache/openejb/util/SuperPropertiesTest.java
Status: modified
```diff
@@ -351,7 +351,7 @@ public void testIndentDetection() throws Exception {
         assertEquals(2, properties.getCommentIndent());
     }
 
-    protected String store(Properties properties) throws IOException {
+    protected String store(Properties properties) throws IOException {        
         ByteArrayOutputStream out = new ByteArrayOutputStream();
         properties.store(out, null);
         return new String(out.toByteArray());
```",Fix property handling on Windows,3,3,4,4,fix SuperProperties store,2,2,4,4,"Fix: Standardize line separator in SuperProperties This commit standardizes the line separator in the SuperProperties class to ""\n"". Previously, the line separator was obtained from the system properties, which could vary across different systems. This change ensures consistency across all systems. Additionally, a new method, store(Properties properties), was added to the SuperPropertiesTest class. This method converts the given properties into a string format, which could be related to the change in the line separator.",1,2,3,4,"refactor: Replace System.getProperty with hardcoded line separator
Replace System.getProperty with a hardcoded line separator to ensure consistency across different platforms. This change eliminates the dependency on the system property, making the code more predictable and reliable.","refactor: Replace System.getProperty with hardcoded line separator
In SuperProperties, changed LINE_SEPARATOR to use '\n' for consistency. Also, added a store method in SuperPropertiesTest to convert Properties to a string representation.",3.95,19.82,19.38,0.0,"refactor: Improve SuperProperties class
Refactor the SuperProperties class to use a fixed line separator and add a new method to convert Properties to a string representation. This change improves the internal structure of the class and makes it easier to use.",6.92,28.07,25.0,0.0
5e73258c58c5a142d68ec19bf846a9ede8583c8c,apache/tomee,,"File: container/openejb-loader/src/main/java/org/apache/openejb/loader/JarLocation.java
Status: modified
```diff
@@ -38,7 +38,7 @@ public static File jarLocation(Class clazz) {
 
             URI uri = classURL.toURI();
             if (uri.getPath() == null){
-                uri = new URI(uri.getSchemeSpecificPart());
+                uri = new URI(uri.getRawSchemeSpecificPart());
             }
 
             String path = uri.getPath();
```",Fix uri creation bug,3,3,4,4,use the correct raw uri in JarLocation,3,3,4,4,"Fix: Use getRawSchemeSpecificPart in jarLocation method This commit changes the method `getSchemeSpecificPart()` to `getRawSchemeSpecificPart()` in the `jarLocation(Class clazz)` method in the JarLocation.java file. The functionality of the method remains the same, indicating that this change is likely a bug fix in the implementation details.",4,4,4,4,"fix: Fix URI parsing by using getRawSchemeSpecificPart
Fixed URI parsing issue by using getRawSchemeSpecificPart instead of getSchemeSpecificPart, which was causing incorrect URI paths.","fix: Fix URI parsing in JarLocation
Replace getSchemeSpecificPart with getRawSchemeSpecificPart to correctly handle scheme-specific parts.",2.44,8.96,9.15,0.0,"refactor: Improve URI handling in JarLocation
Refactor the JarLocation class to use getRawSchemeSpecificPart instead of getSchemeSpecificPart when creating a new URI. This change improves the handling of URIs in the JarLocation class, making it more robust and accurate.",7.56,21.95,24.64,0.0
7f910176aa35fd411c6c7c82cca4c15f7bdf0553,apache/tomee,,"File: server/openejb-client/src/main/java/org/apache/openejb/client/ConnectionManager.java
Status: modified
```diff
@@ -29,6 +29,7 @@ public class ConnectionManager {
 
         factories.register(""default"", ejbdFactory);
         factories.register(""ejbd"", ejbdFactory);
+        factories.register(""ejbds"", ejbdFactory);
 
         HttpConnectionFactory httpFactory = new HttpConnectionFactory();
         factories.register(""http"", httpFactory);
```",ejbds should be enabled,0,4,4,4,add üòÖ to ConnectionManager,0,1,4,3,"Feat: Register new factory ""ejbds"" in ConnectionManager This commit registers a new factory ""ejbds"" with the ejbdFactory in the ConnectionManager class. The ConnectionManager class manages connections, strategies, and factories for different connection types and schemes. This change is part of a feature enhancement.",4,3,4,4,"feat: Add ejbds factory to connection factories
This change enables connections to ejbds servers by registering the ejbd factory under the 'ejbds' key, expanding the range of supported connection strategies and factories.","feat: Register ejbds factory in ConnectionManager
Allow connections to various servers using different connection strategies and factories.",6.52,27.03,19.06,0.0,"feat: Add ejbds connection factory to ConnectionManager
This commit introduces a new connection factory, ejbds, to the ConnectionManager class, allowing it to manage connections to various servers using different connection strategies and factories.",9.59,37.33,34.0,0.0
cf61a0e74d91b8bd28979cc747f529704b263993,apache/tomee,,"File: api/ejb31-api-experimental/src/main/java/javax/annotation/ManagedBean.java
Status: modified
```diff
@@ -22,8 +22,10 @@
 package javax.annotation;
 
 /**
- * @version $Revision$ $Date$
+ * @version $Rev$ $Date$
  */
+@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE})
+@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
 public @interface ManagedBean {
     java.lang.String value() default """"; 
 }
```",ManagedBean annotation should be available at runtime and be type-only assignable,0,4,4,4,add üòÖ annotation,0,1,4,3,Feat: Update annotations in ManagedBean.java This commit updates the ManagedBean.java file by adding two new annotations: @Target and @Retention. These annotations specify the applicable targets and the retention policy for the ManagedBean annotation. The version comment has also been updated.,4,4,4,4,"refactor: Specify target and retention for ManagedBean
Explicitly defined the target and retention policy for ManagedBean to ensure proper annotation usage and prevent potential misinterpretation.","refactor: Annotate ManagedBean with @Target and @Retention
Update ManagedBean interface to include metadata annotations.",6.33,30.3,24.37,0.0,"style: Update annotation in ManagedBean
Updated the annotation in ManagedBean.java to include @Target and @Retention annotations, and also updated the version comment to use $Rev instead of $Revision.",12.02,37.14,29.52,0.0
c23bac9d2e69bb9b660a8b9e1eca3e39598264d5,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/util/URLs.java
Status: modified
```diff
@@ -16,9 +16,11 @@
  */
 package org.apache.openejb.util;
 
+
+import static org.apache.openejb.loader.JarLocation.decode;
+
 import java.io.File;
 import java.net.MalformedURLException;
-import java.net.URISyntaxException;
 import java.net.URL;
 
 /**
@@ -42,11 +44,7 @@ public static File toFile(URL url) {
                 throw new IllegalStateException(e);
             }
         } else if (""file"".equals(url.getProtocol())) {
-            try {
-                return new File(url.toURI().getPath());
-            } catch (URISyntaxException e) {
-                throw new IllegalArgumentException(""bad url "" + url.toExternalForm(), e);
-            }
+            return new File(decode(url.getFile()));
         } else {
             throw new IllegalArgumentException(""Unsupported URL scheme: "" + url.toExternalForm());
         }
```",Reverting unintentional change,3,0,4,4,replace URISyntaxException with URISyntaxException,0,0,4,0,"Refactor: Simplify URL to File conversion in URLs.java This commit simplifies the method toFile(URL url) in the URLs.java file. The method still converts a URL to a File object, but the implementation has been changed to use the decode method from the JarLocation class. This change simplifies the code and removes the need for a try-catch block.",4,4,4,4,"refactor: Replace URI.toPath with decode for file protocol
Replaced URI.toPath with decode for file protocol in toFile method to avoid unnecessary URI creation and potential URISyntaxException.","refactor: Simplify URL to File conversion
Removed unnecessary URI conversion and used decode method from JarLocation instead.",2.07,13.95,8.83,0.0,"refactor: Simplify URL to File conversion
Refactored the toFile method to use the decode method from JarLocation, removing the need for URI conversion and handling of URISyntaxException. This change improves the internal structure of the URLs class, making it easier to understand and maintain.",18.73,35.29,40.16,0.0
919ffa4c42c0d2d37a3da8322a592d91796f2108,apache/tomee,,"File: examples/testing-transactions/src/test/java/org/superbiz/injection/tx/MoviesTest.java
Status: modified
```diff
@@ -28,8 +28,11 @@
 
 import static javax.ejb.TransactionAttributeType.REQUIRES_NEW;
 
+/**
+ * See the transaction-rollback example as it does the same thing
+ * via UserTransaction and shows more techniques for rollback 
+ */
 //START SNIPPET: code
-
 public class MoviesTest extends TestCase {
 
     @EJB
```",Added some comments about the transaction-rollback example,4,4,4,4,remove TestCase from MoviesTest,0,1,4,4,Style: Add comment to MoviesTest.java A comment was added to the MoviesTest.java file to provide additional information about the transaction-rollback example. The comment suggests that the transaction-rollback example does the same thing via UserTransaction and shows more techniques for rollback.,4,2,3,4,"style: Add Javadoc comment to MoviesTest
This Javadoc comment adds a cross-reference to the transaction-rollback example, enhancing the overall documentation of the MoviesTest class.","style: Add comment referencing transaction-rollback example
This comment provides additional context for the MoviesTest.java file, pointing to the transaction-rollback example that demonstrates similar techniques for rollback via UserTransaction.",6.48,33.85,22.54,0.0,"style: Add comment to MoviesTest.java
Added a comment to MoviesTest.java referencing the transaction-rollback example, which demonstrates similar techniques for rollback via UserTransaction.",19.16,49.23,35.03,0.0
5e52f14fc533ab7f29949f19830bc88a7c12c08f,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiBuilder.java
Status: modified
```diff
@@ -24,6 +24,7 @@
 import org.apache.openejb.assembler.classic.EjbJarInfo;
 import org.apache.openejb.core.ThreadContext;
 import org.apache.openejb.loader.SystemInstance;
+import org.apache.webbeans.config.WebBeansContext;
 import org.apache.webbeans.config.WebBeansFinder;
 import org.apache.webbeans.logger.WebBeansLogger;
 
@@ -33,11 +34,16 @@
 public class CdiBuilder {
     private static final WebBeansLogger logger = WebBeansLogger.getLogger(CdiBuilder.class);
 
+    private static final WebBeansContext noContext = new WebBeansContext();
+
     public CdiBuilder() {
     }
 
     public void build(AppInfo appInfo, AppContext appContext, List<BeanContext> allDeployments) {
-        if (!hasBeans(appInfo)) return;
+        if (!hasBeans(appInfo)) {
+            appContext.setWebBeansContext(noContext);
+            return;
+        }
 
         ThreadSingletonService singletonService = SystemInstance.get().getComponent(ThreadSingletonService.class);
         logger.info(""existing thread singleton service in SystemInstance() "" + singletonService);
```","Use an ""empty"" context if there is no beans.xml",2,4,4,4,fix failing test,0,0,4,4,"feat: Set WebBeansContext to noContext for apps without beans In the CdiBuilder class, the build method now sets the WebBeansContext to a new instance of WebBeansContext (noContext) if the application does not have any beans. This change could potentially affect the initialization and building of the CDI context.",4,4,4,4,"refactor: Add noContext field to CdiBuilder
This refactoring allows the CDI container to properly handle applications with no beans by introducing a `noContext` field in `CdiBuilder` and updating the `build` method accordingly.","refactor: Enhance CdiBuilder to handle apps with no beans
Initialize WebBeansContext in build method and set it to appContext when app has no beans. This change improves the CDI container building process.",6.09,17.72,19.52,0.0,"refactor: Improve CdiBuilder to handle no beans case
This commit refactors the CdiBuilder class to handle the case where an application has no beans. It introduces a new WebBeansContext instance and sets it in the AppContext when no beans are present. This change improves the internal structure of the CdiBuilder class, making it more robust and easier to maintain.",8.43,30.19,36.4,0.0
7f64b4e307a62586421545c8448d89e7e6fac10a,apache/tomee,,"File: container/openejb-activemq4/src/test/java/org/apache/openejb/core/mdb/JmsProxyTest.java
Status: modified
```diff
@@ -24,8 +24,6 @@
 
 public class JmsProxyTest extends JmsTest {
 
-    // set up in the parent class
-
     public void testProxy() throws Exception {
         // create reciever object
         JmsProxyTest.TestObject testObject = new JmsProxyTest.TestObject(""foo"");
```",Remove not relevant comment,4,4,4,4,remove unused method,0,0,4,4,"Refactor: Remove unnecessary comment in JmsProxyTest.java The comment line ""set up in the parent class"" was removed from the JmsProxyTest.java file. This change does not affect the functionality of the class, which tests the functionality of a JMS proxy using a test object and interface.",4,4,3,4,"refactor: Remove unnecessary comments from JmsProxyTest
No functional changes were introduced by this refactor, ensuring that the test class remains unaffected in terms of its behavior.","refactor: Remove unnecessary comment
Removed a redundant comment in the JmsProxyTest class, making the code cleaner and easier to read.",4.37,22.22,18.7,0.0,"refactor: Remove unnecessary code in JmsProxyTest
This commit removes two unnecessary lines of code in the JmsProxyTest class, which were commented out and seemed to be leftover from a previous implementation. The removal of these lines does not affect the functionality of the class, and the test still works as expected.",22.13,39.18,48.93,0.0
00b9c65f73a6b263b56f304a518e921434e357e8,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java
Status: modified
```diff
@@ -103,7 +103,7 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {
             for (URL persistenceUrl : persistenceUrls) {
                 String moduleName = """";
                 String path;
-                if (""file"".equals(persistenceUrl.getProtocol())) {
+                if (!persistenceUrl.toString().contains(""!"")) {
                     File file = URLs.toFile(persistenceUrl);
                     path = file.getAbsolutePath();
 
```",fixing modulename in readdescriptor for persistence,4,4,4,4,fix descriptors in descriptors,0,0,4,0,"Fix: Update condition in deploy method This commit updates the condition in the `deploy` method of the `ReadDescriptors` class. The change modifies the way the method processes the modules of an `AppModule` during deployment. The previous condition checked if the protocol of the `persistenceUrl` is ""file"". The updated condition checks if the `persistenceUrl` does not contain ""!"". This change is classified as a fix, suggesting it was made to correct a problem in the method's functionality.",4,4,3,4,"fix: Fix persistence URL protocol check
Updated persistence URL protocol check to ignore URLs containing '!' characters, fixing incorrect behavior.","fix: Check for '!' in persistence URL instead of protocol
Fixes an issue with file protocol URLs by changing the condition in ReadDescriptors.",0.34,6.45,4.74,0.0,"refactor: Improve persistence URL handling in ReadDescriptors
Refactor the condition for determining the protocol of a persistence URL in ReadDescriptors to make it more robust. Previously, it checked if the protocol was 'file', but now it checks if the URL contains '!' to ensure correct handling of persistence URLs.",7.25,26.23,19.85,0.0
3d812b426f7487bf07fadc9199f3903fa3958358,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/DataSourceFactory.java
Status: modified
```diff
@@ -24,14 +24,13 @@
 import org.apache.commons.dbcp.managed.XAConnectionFactory;
 import org.apache.openejb.loader.SystemInstance;
 import org.apache.openejb.resource.XAResourceWrapper;
-import org.apache.xbean.recipe.ObjectRecipe;
-import org.apache.xbean.recipe.Option;
 
 import javax.sql.DataSource;
 import javax.sql.XADataSource;
 import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.sql.SQLException;
-import java.util.Map;
 
 /**
  * @version $Rev$ $Date$
@@ -88,8 +87,13 @@ protected ConnectionFactory createConnectionFactory() throws SQLException {
         @Override
         public void setJdbcUrl(String string) {
             // TODO This is a big whole and we will need to rework this
-            if (dataSource instanceof org.hsqldb.jdbc.jdbcDataSource) {
-                ((org.hsqldb.jdbc.jdbcDataSource)dataSource).setDatabase(string);
+            try {
+                final Class<?> hsql = this.getClass().getClassLoader().loadClass(""org.hsqldb.jdbc.jdbcDataSource"");
+                final Method setDatabase = hsql.getMethod(""setDatabase"", String.class);
+                setDatabase.setAccessible(true);
+                setDatabase.invoke(dataSource, string);
+            } catch (Exception e) {
+                // only works if hsql is available and datasource is an HSQL jdbcDataSource
             }
         }
     }
```",use reflection to avoid direct dependency on hsqldb,4,4,4,4,fix compile error in DataSourceFactory,2,3,4,4,"Refactor: Use reflection to set JDBC URL in DataSourceFactory In the DataSourceFactory.java file, the setJdbcUrl method has been refactored to use reflection to set the JDBC URL for the HSQL database. This change allows for a more generic handling of setting the JDBC URL, potentially accommodating other types of databases in the future. No associated issues or pull requests provide additional context for this change.",4,4,4,4,"refactor: Improve setJdbcUrl method for HSQL data sources
Improved setJdbcUrl method to support HSQL data sources by using reflection to invoke the setDatabase method. This change is a temporary workaround, pending a more comprehensive rework of the method.","refactor: Invoke setDatabase method via reflection for HSQL data source
Changed the implementation of setJdbcUrl method to use reflection, temporarily supporting HSQL data sources. This hack needs reworking.",4.5,25.24,21.15,0.0,"refactor: Improve setJdbcUrl method to use reflection for HSQL data sources
Refactored the setJdbcUrl method to use reflection to set the JDBC URL for HSQL data sources, making it more flexible and robust. This change allows for better support of HSQL data sources and improves the overall functionality of the DataSourceFactory class.",21.35,41.03,36.22,0.0
37080c6d8db4dd001d637fad907538b2de95bc0e,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/OpenEjbContainer.java
Status: modified
```diff
@@ -527,10 +527,11 @@ private static boolean isOtherProvider(Map<?, ?> properties) {
         }
 
         private boolean match(String s, File file) {
-            String s2 = file.getName();
+            final String s2 = file.getName();
+            final String s3 = file.getAbsolutePath();
             boolean matches;
             if (file.isDirectory()) {
-                matches = s2.equals(s) || s2.equals(s + "".jar"");
+                matches = s2.equals(s) || s2.equals(s + "".jar"") || s3.equals(s);
             } else {
                 matches = s2.equals(s + "".jar"");
             }
```",why couldn't we use an absolute path in ejbcontainer?,3,4,4,4,fix ejb match,2,3,4,4,Fix: Update match method in OpenEjbContainer The 'match' method in the OpenEjbContainer.java file has been updated. The method now checks if the given string matches the name or absolute path of the file. This change enhances the matching accuracy and covers more cases.,4,4,4,4,"refactor: Match file names with absolute paths
Updated the match method to consider absolute file paths, in addition to file names, to improve the reliability of file matching.","refactor: Improve file matching logic by considering absolute paths
Updated match method in OpenEjbContainer to include absolute path checks",5.29,28.17,15.84,0.0,"refactor: Improve file matching logic in OpenEjbContainer
This commit refactors the match method in OpenEjbContainer to consider absolute file paths in addition to file names, making the matching logic more comprehensive. The change enhances the container's ability to manage EJB modules and their associated resources.",15.17,29.55,34.7,0.0
542008fa962c21ae22828f66325062992b8bfb1b,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/monitoring/StatsInterceptor.java
Status: modified
```diff
@@ -347,6 +347,6 @@ public void record(long time) {
     }
 
     public static boolean isStatsActivated() {
-        return SystemInstance.get().getOptions().get(DISABLE_STAT_INTERCEPTOR_PROPERTY, false);
+        return SystemInstance.get().getOptions().get(DISABLE_STAT_INTERCEPTOR_PROPERTY, true);
     }
 }
```",fixing the default for the activation of the stat interceptor,1,4,4,4,fix StatsInterceptor isStatsActivated,1,2,4,4,"Fix: Modify default behavior of isStatsActivated method in StatsInterceptor class The `isStatsActivated()` method in the `StatsInterceptor` class, which checks if the statistics interceptor is activated, has been modified. The default value for the `DISABLE_STAT_INTERCEPTOR_PROPERTY` has been changed from `false` to `true`. This change modifies the default behavior of the `isStatsActivated()` method. The `StatsInterceptor` class is responsible for monitoring and recording statistics about method invocations in a Java application.",4,4,3,4,"fix: Default stats activation to true
Change the default behavior of `isStatsActivated()` to reduce the need for explicit configuration, making statistics collection more accessible to users.","fix: Set default DISABLE_STAT_INTERCEPTOR_PROPERTY to true
Correct the default value of DISABLE_STAT_INTERCEPTOR_PROPERTY in StatsInterceptor to return true instead of false, ensuring accurate statistics collection.",2.81,22.92,13.45,0.0,"fix: Correct default value for DISABLE_STAT_INTERCEPTOR_PROPERTY
The default value for DISABLE_STAT_INTERCEPTOR_PROPERTY was incorrect, causing statistics collection to be enabled by default. This commit fixes the issue by setting the default value to true, ensuring that statistics interception is disabled by default.",12.67,25.64,16.93,0.0
c812a342c8df1c3d9782897404211c4107f197f4,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/resource/activemq/ActiveMQResourceAdapter.java
Status: modified
```diff
@@ -90,7 +90,7 @@ public void start(final BootstrapContext bootstrapContext) throws ResourceAdapte
         }
 
         // prefix server uri with 'broker:' so our broker factory is used
-        if (brokerXmlConfig != null && !brokerXmlConfig.isEmpty()) {
+        if (brokerXmlConfig != null && !brokerXmlConfig.trim().isEmpty()) {
 
             try {
 
```",Trim config line to be sure it is empty.,4,4,4,4,remove unnecessary check,0,0,4,4,Fix: Ensure correct setup of broker configuration in ActiveMQResourceAdapter This commit adds a trim() method to the brokerXmlConfig string before checking if it's empty in the start method of the ActiveMQResourceAdapter.java file. This change ensures that the broker configuration is set up correctly even when the brokerXmlConfig string contains only whitespace characters.,4,4,4,4,"fix: Trim brokerXmlConfig before checking its emptiness
Prevents incorrect behavior when brokerXmlConfig contains only whitespace characters, ensuring reliable configuration checks.","fix: Check for empty brokerXmlConfig after trimming
Prevents incorrect behavior in ActiveMQResourceAdapter by ensuring brokerXmlConfig is properly checked for emptiness.",3.91,33.33,23.8,0.0,"fix: Trim brokerXmlConfig before checking for emptiness
Fixed a bug in the start method of ActiveMQResourceAdapter where an empty brokerXmlConfig with whitespace was not properly handled. This change ensures that the config is trimmed before checking for emptiness, preventing potential issues during resource adapter startup.",18.77,35.05,37.1,0.0
4573e844fde9e92120b5770cdcd2bf7ab3d12271,apache/tomee,,"File: container/openejb-jee/src/main/java/org/apache/openejb/jee/PersistenceContextRef.java
Status: modified
```diff
@@ -64,6 +64,7 @@
     ""persistenceContextRefName"",
     ""persistenceUnitName"",
     ""persistenceContextType"",
+    ""persistenceContextSynchronization"",
     ""persistenceProperty"",
     ""mappedName"",
     ""injectionTarget"",
```",persistenceContextSynchronization in PersistenceContextRef propOrder,0,2,4,3,add üòÖ to üòÖ,0,0,0,0,"Feat: Add persistenceContextSynchronization field to PersistenceContextRef class This commit adds a new field, ""persistenceContextSynchronization"", to the PersistenceContextRef class. This class manages persistence context references and their properties in a Java application. The addition of this new field is likely to enhance the functionality of managing persistence context references.",4,4,4,4,"feat: Introduce persistenceContextSynchronization field
Added a new field to PersistenceContextRef to store persistence context synchronization information, expanding the data model to accommodate this additional aspect of persistence context references.","feat: Introduce persistence context synchronization field
Add persistenceContextSynchronization field to PersistenceContextRef class, enabling persistence context synchronization in Java EE applications.",10.57,39.47,31.15,0.0,"feat: Add persistence context synchronization property
This commit introduces a new property, 'persistenceContextSynchronization', to the PersistenceContextRef class, which represents a persistence context reference in a Java EE application. This change enhances the functionality of the class by providing an additional configuration option.",18.06,44.94,50.91,0.0
5c981f9c8275d6aaa465bee7ec33d467acf8ef83,apache/tomee,,"File: container/openejb-core/src/main/java/org/apache/openejb/resource/jdbc/managed/local/ManagedConnection.java
Status: modified
```diff
@@ -133,7 +133,7 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg
                         setAutoCommit(false);
                     } catch (final SQLException xae) { // we are alreay in a transaction so this can't be called from a user perspective - some XA DataSource prevents it in their code
                         final String message = ""Can't set auto commit to false cause the XA datasource doesn't support it, this is likely an issue"";
-                        final Logger logger = Logger.getInstance(LogCategory.OPENEJB_RESOURCE_JDBC, ManagedConnection.class)
+                        final Logger logger = Logger.getInstance(LogCategory.OPENEJB_RESOURCE_JDBC, ManagedConnection.class);
                         if (logger.isDebugEnabled()) { // we don't want to print the exception by default
                             logger.warning(message, xae);
                         } else {
```","too slow flush from idea, sorry for the noise",1,0,4,3,don t log an exception if we don t exist,0,0,4,1,Style: Add missing semicolon in ManagedConnection.java A semicolon was added at the end of a line in the ManagedConnection.java file to correct a syntax error. This change does not affect the functionality of the code.,4,4,3,4,"fix: Suppress exception logging in warning messages
Remove unnecessary exception logging in warning messages to align with the existing debug logging behavior, reducing log noise.","fix: Prevent unnecessary exception logging when setting auto commit to false
In ManagedConnection, changed the logging behavior to only log a warning when setting auto commit to false if the logger is debug enabled, to avoid unnecessary exception logging.",3.37,13.11,6.98,0.0,"fix: Handle SQLException when setting auto commit to false
Fixed an issue where setting auto commit to false could throw a SQLException due to XA datasource limitations. The error is now properly logged with a warning message.",4.15,8.22,10.78,0.0
269881d3725626f1a305b258d35f9a9285eccb02,apache/usergrid,,"File: stack/core/src/test/java/org/usergrid/persistence/cassandra/util/TraceTagUnitTest.java
Status: modified
```diff
@@ -31,6 +31,6 @@ public void createAttachDetach() throws Exception {
         taggedOpTimer.stop(timedOpTag,""op-tag-name"",true);
         assertTrue(timedOpTag.getElapsed() >= 500);
         assertEquals(timedOpTag, traceTag.iterator().next());
-
+        traceTagManager.detach();
     }
 }
```",quick poke to detach the tracetag threadlocal so we don't log all over the tests,4,4,4,4,fix flaky test,0,0,4,4,"Fix: Add TraceTag detachment in createAttachDetach test In the `createAttachDetach()` method of the `TraceTagUnitTest.java` file, a line of code was added to detach the TraceTag from the TraceTagManager. This change ensures that the TraceTag is properly detached after being used, which is crucial for the correct functioning of the TraceTagManager.",4,4,4,4,"fix: Fix detach not being called in TraceTagUnitTest
Adds missing detach call to ensure trace tag manager is properly cleaned up after test execution, preventing resource leaks.","fix: Detach trace tag in createAttachDetach test
Added a call to ensure proper cleanup and prevent potential issues.",3.01,15.58,13.13,0.0,"refactor: Improve TraceTagUnitTest by detaching traceTagManager
This commit refactors the createAttachDetach method in TraceTagUnitTest to properly detach the traceTagManager after testing, ensuring a clean state for subsequent tests. This change improves the test's reliability and maintainability.",7.74,25.58,27.44,0.0
8536f808d7d477652a14162213298381fd5d0d62,apache/usergrid,,"File: stack/rest/src/test/java/org/usergrid/rest/management/users/MUUserResourceIT.java
Status: modified
```diff
@@ -68,7 +68,7 @@ public class MUUserResourceIT extends AbstractRestIT
      *
      * From USERGRID-2075
      */
-    @Test
+    @Test @Ignore(""aok - check this please"")
     public void testCaseSensitivityAdminUser() throws Exception
     {
         LOG.info( ""Starting testCaseSensitivityAdminUser()"" );
```","not sure why this fails during batch testing, but it succeeds singly",3,0,4,3,ignore failing test for now,4,4,4,4,Fix: Temporarily disable testCaseSensitivityAdminUser test The testCaseSensitivityAdminUser test in MUUserResourceIT.java has been temporarily disabled by adding an @Ignore annotation. This is a temporary fix and needs to be revisited.,4,4,4,4,"fix: Ignore test case for admin user with mixed case username and email address
Ignoring this test case due to incompatibility with current admin user authentication behavior. The test case sensitivity will be revisited and updated accordingly.","fix: Temporarily ignore testCaseSensitivityAdminUser test
The test case is currently failing due to case sensitivity issues in admin user authentication. This change ignores the test until the issue is resolved.",6.02,18.18,23.28,0.0,"fix: Ignore testCaseSensitivityAdminUser due to case sensitivity issue
Temporarily ignoring testCaseSensitivityAdminUser test case to investigate case sensitivity issue in admin user authentication. The test case checks the sensitivity of admin user credentials, specifically testing if the system is case-insensitive when authenticating admin users.",5.19,16.67,18.58,0.0
983ba69963de7c0f28d09b5a97c93d7d1c7e37ab,apache/usergrid,,"File: stack/services/src/main/java/org/apache/usergrid/services/notifications/ApplicationQueueMessage.java
Status: modified
```diff
@@ -61,13 +61,23 @@ public static UUID bytesToUuid( byte[] sixteenBytes ) {
     public static ApplicationQueueMessage generate(Message message) {
 
         // this crazyness may indicate that Core Persistence is not storing UUIDs correctly
+
         byte[] mpaBytes = (byte[])message.getObjectProperty(MESSAGE_PROPERTY_APPLICATION_UUID);
         UUID mpaUuid = bytesToUuid(mpaBytes);
+
         byte[] mpnBytes = (byte[])message.getObjectProperty(MESSAGE_PROPERTY_NOTIFICATION_ID);
         UUID mpnUuid = bytesToUuid(mpnBytes);
-        // end of crazyness
 
-        UUID mpdUuid = (UUID)message.getObjectProperty(MESSAGE_PROPERTY_DEVICE_UUID);
+        final UUID mpdUuid;
+        Object o = message.getObjectProperty(MESSAGE_PROPERTY_DEVICE_UUID);
+        if ( o instanceof UUID ) {
+            mpdUuid = (UUID)message.getObjectProperty(MESSAGE_PROPERTY_DEVICE_UUID);
+        } else {
+            byte[] mpdBytes = (byte[])o;
+            mpdUuid =  bytesToUuid(mpdBytes);
+        }
+
+        // end of crazyness
 
         return new ApplicationQueueMessage(
                 mpaUuid, mpnUuid, mpdUuid,
```",Seeing some very odd behavior on different Java VMs with serialization of UUIDs.,4,3,4,4,fix ApplicationQueueMessage generate,2,2,4,4,Refactor: Handle non-UUID case in ApplicationQueueMessage generation This commit refactors the `generate` method in the `ApplicationQueueMessage.java` file to handle a case where the `MESSAGE_PROPERTY_DEVICE_UUID` object property is not an instance of `UUID`. This change ensures that the `ApplicationQueueMessage` is correctly generated from a given `Message` object.,4,4,4,4,"fix: Convert UUID properties from bytes or objects
This change fixes the inconsistent handling of UUID properties in ApplicationQueueMessage generation, which previously assumed UUIDs were always stored as objects, but now correctly handles cases where they are stored as bytes or objects.","refactor: Handle UUID properties stored as bytes or UUID objects
Updated the generate method to robustly convert UUIDs from bytes or UUID objects, improving flexibility and reliability.",5.52,10.99,28.12,0.0,"refactor: Improve UUID handling in ApplicationQueueMessage generation
This commit refactors the generate method in ApplicationQueueMessage to handle UUID properties that may be stored as bytes or UUID objects, making the method more robust and flexible. The changes ensure that the method can correctly extract and convert various UUID properties from the message, regardless of their storage format.",14.63,35.85,42.41,0.0
17cc01dc92c39878c7f917d4f361f129dee162ad,apache/usergrid,Y,"File: stack/corepersistence/collection/src/main/java/org/apache/usergrid/persistence/collection/EntityCollectionManager.java
Status: modified
```diff
@@ -51,6 +51,11 @@ public interface EntityCollectionManager {
      */
     public Observable<Entity> load( Id entityId );
 
+    //TODO TN Change load to use multiget and return multiple entities.  Only supports loading 1k per load operation.
+
+
+    //TODO Dave add a load versions using a multiget that will return a latest version structure for a collection of entity Ids
+
 
     /**
      * Takes the change and reloads an entity with all changes applied in this entity applied.
```


File: stack/corepersistence/queryindex/src/main/java/org/apache/usergrid/persistence/index/EntityIndexBatch.java
Status: modified
```diff
@@ -59,6 +59,9 @@ public interface EntityIndexBatch {
      */
     public EntityIndexBatch deindex(final IndexScope scope, final Id id, final UUID version);
 
+
+    //TODO: Create a delete method that delete's  by Id.  This will delete all documents from ES with the same entity Id
+
     /**
      * Execute the batch
      */
```",Added TODO's,4,4,4,4,add some comments,2,2,4,4,"chore: Add TODO comments for future work This commit adds TODO comments to two classes: EntityCollectionManager and EntityIndexBatch. These comments indicate future work to be done on these classes. In EntityCollectionManager, the comments suggest changing the load method to use multiget and return multiple entities, and adding a load versions method using a multiget that will return a latest version structure for a collection of entity Ids. In EntityIndexBatch, the comment suggests creating a delete method that deletes by Id, which will delete all documents from ES with the same entity Id.",4,4,2,4,"style: Remove redundant TODO comments
Removed redundant TODO comments from EntityCollectionManager and EntityIndexBatch classes.","style: Add TODO comments for future development
Added TODO comments in EntityCollectionManager and EntityIndexBatch to track potential improvements, including using multiget and adding delete method by Id.",0.07,13.33,5.13,0.0,"feat: Add TODOs for future improvements to EntityCollectionManager and EntityIndexBatch
This commit adds TODO comments to EntityCollectionManager and EntityIndexBatch classes, outlining potential future improvements. These TODOs include using multiget to load multiple entities, loading versions using multiget, and creating a delete method to remove documents from Elasticsearch by Id. These changes do not introduce new functionality but provide a roadmap for future development.",11.54,33.77,32.67,0.0
326c8effb05a1d71eca19eac03977f9aaea7dd8b,apache/usergrid,Y,"File: stack/core/src/test/java/org/apache/usergrid/corepersistence/migration/EntityTypeMappingMigrationIT.java
Status: modified
```diff
@@ -77,6 +77,7 @@ public void setup() {
     @Test
     public void testIdMapping() throws Throwable {
 
+        assertEquals(""version 1 expected"", 1, entityTypeMappingMigration.getVersion());
 
         final EntityManager newAppEm = app.getEntityManager();
 
@@ -112,6 +113,7 @@ public void testIdMapping() throws Throwable {
 
 
 
+
         AllEntitiesInSystemObservable.getAllEntitiesInSystem( managerCache )
                                      .doOnNext( new Action1<AllEntitiesInSystemObservable.EntityData>() {
                                          @Override
```


File: stack/core/src/test/java/org/apache/usergrid/corepersistence/migration/GraphShardVersionMigrationIT.java
Status: modified
```diff
@@ -82,6 +82,7 @@ public void setup() {
     @Test
     public void testIdMapping() throws Throwable {
 
+        assertEquals(""version 2 expected"", 2, graphShardVersionMigration.getVersion());
 
         /**
          * Drop our migration keyspaces to ensure we don't have a ""new version in there""
```",Added version check to ensure correct versions,4,4,4,4,add test for migration,0,1,4,4,Feat: Add version check to testIdMapping method This commit introduces a new feature to the testIdMapping() method in both EntityTypeMappingMigrationIT.java and GraphShardVersionMigrationIT.java files. The method now checks the version of the migration and verifies if it matches the expected version. This enhancement ensures the correct migration of data from an old version to a new version.,4,4,4,4,"feat: Add version assertions to entity type mapping and graph shard version migration tests
Added version assertions to entity type mapping and graph shard version migration tests to ensure that the migration process correctly updates entity types and versions, respectively.","test: Verify version after migration in entity type mapping and graph shard version tests
Added assertions to EntityTypeMappingMigrationIT and GraphShardVersionMigrationIT tests to ensure correct version after migration.",4.79,22.68,17.36,0.0,"feat: Add version checks to entity type mapping and graph shard version migration tests
This commit enhances the testIdMapping method in EntityTypeMappingMigrationIT and GraphShardVersionMigrationIT classes to verify the correct version of entity type mappings and graph shard versions after migration. The tests now assert that the versions are correctly updated during the migration process.",11.28,34.23,28.07,0.0
3c504f1cd9482fb8669ce8a447ae0d95f729ba37,apache/usergrid,,"File: stack/core/src/main/java/org/apache/usergrid/corepersistence/ApplicationIdCacheFig.java
Status: modified
```diff
@@ -19,16 +19,13 @@
  */
 package org.apache.usergrid.corepersistence;
 
-/**
- * Application id cache fig
- */
 
 import org.safehaus.guicyfig.Default;
 import org.safehaus.guicyfig.GuicyFig;
 import org.safehaus.guicyfig.Key;
 
 /**
- * The config for the entity cache
+ * Application id cache fig
  */
 public interface ApplicationIdCacheFig extends GuicyFig {
 
```",add cache fig,0,0,4,1,remove author tag,0,0,4,4,"Style: Update comments in ApplicationIdCacheFig.java This commit updates the comments in the ApplicationIdCacheFig.java file. The changes are not related to any method or class functionality, but rather to the style of the code. No associated issues or pull requests were found for this commit.",4,4,2,4,"style: Remove redundant Javadoc comments
No functional changes were made to the code. This commit solely focuses on removing redundant Javadoc comments to maintain consistency in code formatting.","style: Remove redundant comments from ApplicationIdCacheFig
Clean up unnecessary comments in the ApplicationIdCacheFig interface to improve code readability.",5.66,19.18,18.57,0.0,"refactor: Reformat ApplicationIdCacheFig.java
Removed unnecessary comments and rearranged import statements in ApplicationIdCacheFig.java to improve code readability and maintainability. This change is part of the Usergrid 550 migration to use the new structure for app info.",9.71,21.95,16.34,0.0
fbb5807e46a6270eadfc3822a60112d4a9e3faf1,apache/usergrid,,"File: stack/core/src/test/java/org/apache/usergrid/corepersistence/StaleIndexCleanupTest.java
Status: modified
```diff
@@ -70,7 +70,6 @@
  * Test on read style clean-up of stale ElasticSearch indexes.
  */
 @NotThreadSafe
-@Ignore(""These can be re-enabled when they properly know when Usergrid is set to de-index old versions of entities or not"")
 public class StaleIndexCleanupTest extends AbstractCoreIT {
     private static final Logger logger = LoggerFactory.getLogger( StaleIndexCleanupTest.class );
     public static final String EVENTS_DISABLED = ""corepersistence.events.disabled"";
@@ -134,7 +133,7 @@ public void testUpdateVersioning() throws Exception {
 
     }
 
-
+    
     /**
      * Test that the EntityDeleteImpl cleans up stale indexes on delete. Ensures that when an
      * entity is deleted its old indexes are cleared from ElasticSearch.
```","Revert ""Ignore non critical tests for now.""",0,2,4,4,remove ignore from StaleIndexCleanupTest,0,4,4,4,"Fix: Enable StaleIndexCleanupTest The `@Ignore` annotation was removed from the `StaleIndexCleanupTest` class, enabling the execution of tests for the cleanup of stale ElasticSearch indexes during entity updates and deletions.",4,4,4,4,"refactor: Enable StaleIndexCleanupTest
Unignored StaleIndexCleanupTest to enable its execution, ensuring stale index cleanup and versioning functionality is properly tested.","refactor: Remove @Ignore annotation and update test class
Enable StaleIndexCleanupTest to cover stale index cleanup and versioning in an entity management system.",5.1,21.28,17.3,0.0,"refactor: Unignore StaleIndexCleanupTest and update its functionality
This commit removes the @Ignore annotation from StaleIndexCleanupTest and updates its functionality to include versioning in the entity management system. The test now covers stale index cleanup and versioning.",8.44,31.25,32.29,0.0
8814a144b66054048be96a1c892fd750ee327327,apache/usergrid,,"File: stack/core/src/main/java/org/apache/usergrid/corepersistence/asyncevents/AsyncEventServiceImpl.java
Status: modified
```diff
@@ -355,9 +355,12 @@ else if (event instanceof ElasticsearchIndexEvent) {
                     throw new Exception(""Unknown EventType for message: ""+ message.getStringBody().trim());
                 }
 
-                if( single.isEmpty() ){
-                    logger.warn(""No index operation messages came back from event processing for msg {} "",
-                        message.getStringBody().trim());
+
+                if( !(event instanceof ElasticsearchIndexEvent)
+                    && !(event instanceof InitializeApplicationIndexEvent)
+                      && single.isEmpty() ){
+                        logger.warn(""No index operation messages came back from event processing for msg: {} "",
+                            message.getStringBody().trim());
                 }
 
 
```",Fix logging statement.,4,3,4,4,throw an exception if there are no message,0,0,4,4,"Refactor: Improve handling of AsyncEvents in AsyncEventServiceImpl This commit refactors the AsyncEventServiceImpl class to improve the handling of different types of AsyncEvents in the queue system. The changes are mainly in the condition of an if statement in the callEventHandlers method, which processes a list of messages from a queue. Each message is expected to contain an AsyncEvent. The changes ensure that the method handles different types of AsyncEvents more effectively. There are no associated issues or pull requests.",4,4,4,4,"fix: Limit empty index operation warning to relevant events
Updated the warning logic to only trigger for specific event types, reducing noise in the logs.","fix: Handle empty index operation messages for non-index events
Avoid logging warnings when no index operation messages are returned from event processing for non-ElasticsearchIndexEvent and non-InitializeApplicationIndexEvent.",0.77,9.71,5.12,0.0,"refactor: Improve event handling logic in AsyncEventServiceImpl
Refactored the callEventHandlers method to add additional checks for specific event types before logging a warning when no index operation messages are returned. This change improves the robustness and accuracy of event handling in the AsyncEventServiceImpl class.",4.48,19.67,20.33,0.0
2af22a87105629f423463c4132ff9141bb95930c,apache/usergrid,,"File: stack/corepersistence/common/src/main/java/org/apache/usergrid/persistence/core/datastax/impl/DataStaxClusterImpl.java
Status: modified
```diff
@@ -51,9 +51,6 @@ public class DataStaxClusterImpl implements DataStaxCluster {
     public DataStaxClusterImpl(final CassandraConfig cassandraFig ) throws Exception {
         this.cassandraConfig = cassandraFig;
         this.cluster = getCluster();
-        this.clusterSession = getClusterSession();
-        this.applicationSession = getApplicationSession();
-        this.queueMessageSession = getApplicationLocalSession();
 
         logger.info(""Initialized datastax cluster client. Hosts={}, Idle Timeout={}s,  Pool Timeout={}s"",
             getCluster().getMetadata().getAllHosts().toString(),
@@ -62,6 +59,7 @@ public DataStaxClusterImpl(final CassandraConfig cassandraFig ) throws Exception
 
         // always initialize the keyspaces
         this.createApplicationKeyspace(false);
+        this.createApplicationLocalKeyspace(false);
     }
 
     @Override
```",Make sure to create keyspaces on initialization before trying to obtain sessions to the keyspaces.,1,3,3,4,remove unnecessary call,0,1,4,4,"Refactor: Update initialization in DataStaxClusterImpl This commit refactors the initialization process in the DataStaxClusterImpl class. The initialization of clusterSession, applicationSession, and queueMessageSession has been removed, and the creation of an application local keyspace has been added. This change improves the structure of the code without altering the overall functionality of the class, which manages connections and sessions with a Cassandra database cluster.",3,4,3,4,"feat: Support local keyspaces in DataStaxClusterImpl
Added support for local keyspaces in DataStaxClusterImpl by introducing a new method createApplicationLocalKeyspace, which is called during initialization. This enhancement allows the cluster to manage local keyspaces, in addition to application and queue message keyspaces.","feat: Add application local keyspace initialization
Initialize application local keyspace in DataStaxClusterImpl constructor to provide support for local keyspaces",3.61,13.73,15.01,0.0,"refactor: Rearrange DataStaxClusterImpl initialization
This commit refactors the initialization process of DataStaxClusterImpl to create an application local keyspace. It removes the creation of cluster session, application session, and queue message session, and adds the creation of an application local keyspace. This change improves the internal structure of the class, making it easier to understand and modify.",25.69,47.86,43.28,0.0
d62a00f22daf79dda382e79cc7c9a6bd3ce31a0b,apache/wicket,Y,"File: wicket/src/java/wicket/Application.java
Status: modified
```diff
@@ -129,9 +129,12 @@ public Localizer getLocalizer()
     }
 
     /**
+     * Get and initialize a markup parser.
+     *  
+     * @param page Autolinks are resolved relative to a Page.
      * @return A new MarkupParser
      */
-    public IMarkupParser getMarkupParser()
+    public IMarkupParser getMarkupParser(final Page page)
     {
         final ApplicationSettings settings = getSettings();
         try
@@ -143,6 +146,8 @@ public IMarkupParser getMarkupParser()
             parser.setStripComments(settings.getStripComments());
             parser.setCompressWhitespace(settings.getCompressWhitespace());
             parser.setStripWicketParamTag(settings.getStripWicketParamTag());
+            parser.setAutolinking(settings.getAutomaticLinking());
+            parser.setAutolinkBasePage(page);
             return parser;
         }
         catch (IllegalAccessException e)
```


File: wicket/src/java/wicket/Container.java
Status: modified
```diff
@@ -745,7 +745,7 @@ private Markup loadMarkup(final Application application, final String key,
             final Resource markupResource) throws ParseException, IOException,
             ResourceNotFoundException
     {
-        final Markup markup = application.getMarkupParser().read(markupResource);
+        final Markup markup = application.getMarkupParser(getPage()).read(markupResource);
         markupCache.put(key, markup);
         return markup;
     }
```",bug fix for autolink,4,3,4,4,fix a bug where the üòÖ was not being set,3,0,4,3,"Feat: Add new getMarkupParser method and update loadMarkup method This commit introduces a new method, getMarkupParser, in Application.java. This method creates a new instance of the markup parser, configures it with the current settings, and sets the base page for autolinking.  The loadMarkup method in Container.java has been updated to use the new getMarkupParser method. This change enhances the functionality of the loadMarkup method by allowing it to load the markup for a given application and key, read the markup from the provided resource, store it in the markup cache, and then return the markup.  These changes contribute to the overall functionality and efficiency of the application.",4,4,4,4,"feat: Make markup parser page-aware
Enabled page-aware markup parsing by introducing a Page-parameterized getMarkupParser method, allowing autolinking to be resolved relative to a Page. This change improves the parser's ability to handle context-dependent markup.","refactor: Configure markup parser with page context
Update getMarkupParser method to accept a Page parameter, enabling autolinking to be resolved relative to the page. This change improves the markup parsing process by considering the page context.",1.16,15.49,11.92,0.0,"feat: Add page-aware markup parsing to Application and Container
This commit introduces a new method `getMarkupParser(final Page page)` in the `Application` class, which returns a markup parser instance configured with application settings and page information. The `Container` class is also updated to use this new method, enabling autolinking and markup parsing relative to a specific page. This change enhances the markup parsing functionality to be more flexible and page-aware.",10.35,35.03,29.64,0.0
7fa7ef16132c29e8a4fa9c0feabbdd21ac5043cb,apache/wicket,,"File: wicket/src/java/wicket/AttributeModifier.java
Status: modified
```diff
@@ -72,9 +72,9 @@ public class AttributeModifier extends AbstractBehaviour implements Serializable
 	private static final long serialVersionUID = 1L;
 
 	/** Marker value to have an attribute without a value added. */
-	public static final Object VALUELESS_ATTRIBUTE_ADD = new Object();
+	public static final Object VALUELESS_ATTRIBUTE_ADD = new String(""VA_ADD"");
 	/** Marker value to have an attribute without a value removed. */
-	public static final Object VALUELESS_ATTRIBUTE_REMOVE = new Object();
+	public static final Object VALUELESS_ATTRIBUTE_REMOVE = new String(""VA_REMOVE"");
 
 	/** Whether to add the attribute if it is not an attribute in the markup. */
 	private final boolean addAttributeIfNotPresent;
@@ -246,11 +246,11 @@ final void replaceAttibuteValue(final Component component, final ComponentTag ta
 			final ValueMap attributes = tag.getAttributes();
 			final Object replacementValue = getReplacementOrNull(component);
 
-			if (replacementValue == VALUELESS_ATTRIBUTE_ADD)
+			if (VALUELESS_ATTRIBUTE_ADD.equals(replacementValue))
 			{
 				attributes.put(attribute, null);
 			}
-			else if (replacementValue == VALUELESS_ATTRIBUTE_REMOVE)
+			else if (VALUELESS_ATTRIBUTE_REMOVE.equals(replacementValue))
 			{
 				attributes.remove(attribute);
 			}
```",fix for serializable and content equals,3,4,4,4,fix a bug in AttributeModifier,2,2,4,4,"Refactor: Update VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE in AttributeModifier This commit updates the values of VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE in the AttributeModifier class from new Object() to new String(""VA_ADD"") and new String(""VA_REMOVE"") respectively. The comparison in the 'replaceAttibuteValue' method is also updated from '==' to '.equals'. These changes improve the structure of the code without changing its behavior.",3,4,4,4,"refactor: Use meaningful constants for valueless attribute markers
Replaced magic objects with named constants (VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE) to improve code clarity and reduce ambiguity in the AttributeModifier class.","refactor: Replace object markers with string constants for attribute additions and removals
Swapped object-based marker values for adding and removing attributes without values with string constants, enhancing code readability and maintainability.",12.44,29.47,19.6,0.0,"refactor: Improve attribute modifier constants
Refactor the VALUELESS_ATTRIBUTE_ADD and VALUELESS_ATTRIBUTE_REMOVE constants to use String values instead of Object instances. This change improves the implementation of the replaceAttributeValue method in the AttributeModifier class.",15.4,30.3,22.77,0.0
3cc6fbd940b3f960866d8eaf383eb57605c7dadd,apache/wicket,Y,"File: wicket/src/java/wicket/protocol/http/MockWebApplication.java
Status: modified
```diff
@@ -115,12 +115,6 @@ public class MockWebApplication extends WebApplication
 	/** Session. */
 	private WebSession wicketSession;
 
-	/**
-	 * In case of an RuntimeException, Wicket usually renders a error page. In
-	 * some test cases however it is useful to get the exception instead.
-	 */
-	private boolean rethrowRuntimeException = false;
-
 	/**
 	 * Create the mock http application that can be used for testing.
 	 * 
@@ -373,17 +367,6 @@ public void setupRequestAndResponse()
 		wicketResponse = new WebResponse(servletResponse);
 	}
 
-	/**
-	 * If true, runtime exception will not be handled by Wicket. Instead the
-	 * exception will be rethrown.
-	 * 
-	 * @param enable
-	 */
-	public void setRethrowRuntimeException(boolean enable)
-	{
-		this.rethrowRuntimeException = enable;
-	}
-
 	/**
 	 * Gets the parameters to be set on the next request.
 	 * 
```


File: wicket/src/test/wicket/markup/parser/filter/HeaderSectionTest.java
Status: modified
```diff
@@ -44,7 +44,6 @@ public class HeaderSectionTest extends TestCase
 	protected void setUp() throws Exception
 	{
 		application = new MockWebApplication(null);
-		application.setRethrowRuntimeException(true);
 	}
 	
 	/**
```",removed unused variable,4,3,4,4,remove unused code,4,4,4,4,"Refactor: Remove rethrowRuntimeException feature from MockWebApplication The rethrowRuntimeException feature, which allowed runtime exceptions to be rethrown, has been removed from the MockWebApplication class. This change also affects the HeaderSectionTest class, where a line of code that called the removed method has been deleted. The functionality of the modified classes remains the same after the changes.",4,3,4,2,"refactor: Remove rethrowRuntimeException field and setter
Removed `rethrowRuntimeException` field and setter, which was previously used to control exception handling in test cases, but is no longer required.","refactor: Remove rethrowRuntimeException field and method
The rethrowRuntimeException field and its associated setter method in MockWebApplication were unused and have been removed to simplify the codebase.",3.15,14.81,13.55,0.0,"refactor: Remove rethrowRuntimeException field and setter
This commit removes the rethrowRuntimeException field and its associated setter method from MockWebApplication. This change simplifies the class and removes unnecessary functionality. The associated test in HeaderSectionTest has also been updated to reflect this change.",8.05,29.47,29.17,0.0
8515371d54c619eba3da2334d15ce7b2a6c17f6b,apache/wicket,,"File: wicket/src/test/wicket/markup/MarkupParserTest.java
Status: modified
```diff
@@ -22,11 +22,11 @@
 import java.util.Locale;
 
 import junit.framework.Assert;
-import junit.framework.TestCase;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import wicket.WicketTestCase;
 import wicket.markup.html.pages.PageExpiredErrorPage;
 import wicket.markup.parser.XmlPullParser;
 import wicket.markup.parser.XmlTag;
@@ -42,10 +42,19 @@
  * 
  * @author Jonathan Locke
  */
-public final class MarkupParserTest extends TestCase
+public final class MarkupParserTest extends WicketTestCase
 {
 	private static Log log = LogFactory.getLog(MarkupParserTest.class);
 
+	/**
+	 * Construct.
+	 * @param name
+	 */
+	public MarkupParserTest(String name)
+	{
+		super(name);
+	}
+	
 	/**
 	 * 
 	 * @throws StringValueConversionException
```",fixed a junit test set-up which succeded in Eclipse and failed on the comand line using maven,4,1,4,4,add MarkupParserTest WicketTestCase,0,3,4,4,"Refactor: Update MarkupParserTest to extend WicketTestCase This commit updates the `MarkupParserTest` class to extend `WicketTestCase` instead of `TestCase`. A constructor has also been added to the class. The functionality of the `MarkupParserTest` class remains the same, it is used to test the functionality of the `MarkupParser` in parsing HTML and XML documents.",4,4,4,4,"refactor: Make MarkupParserTest inherit from WicketTestCase
Inherit from WicketTestCase to utilize its testing infrastructure, enabling more robust testing of MarkupParserTest. This change allows for better test coverage and easier maintenance of test cases.","refactor: Change MarkupParserTest superclass to WicketTestCase
Update the superclass of MarkupParserTest from TestCase to WicketTestCase, allowing for more targeted testing of MarkupParser functionality.",3.06,19.05,12.29,0.0,"refactor: Update MarkupParserTest to extend WicketTestCase
This commit updates the MarkupParserTest class to extend WicketTestCase instead of TestCase, and adds a constructor to initialize the test case. This change refactors the internal structure of the test class to better align with Wicket's testing framework.",29.82,52.63,46.03,0.0
41ad9dfd682f2659301e133aa75e6e3775d92999,apache/wicket,,"File: wicket/src/test/wicket/markup/html/navigation/paging/PagingNavigationIncrementLinkTest.java
Status: modified
```diff
@@ -17,7 +17,6 @@
  */
 package wicket.markup.html.navigation.paging;
 
-import wicket.WicketTestCase;
 
 /**
  * Testcase for the navigation increment link.
```",removed unused import,4,4,4,4,remove unused import,4,4,4,4,Style: Remove unused import in PagingNavigationIncrementLinkTest.java Removed an unused import statement in the file `PagingNavigationIncrementLinkTest.java` to improve the style of the code.,4,3,3,4,"style: Remove unused import statement
Removed unused import statement 'wicket.WicketTestCase' from PagingNavigationIncrementLinkTest.java, as it was not being utilized in the test class.","style: Remove unused WicketTestCase import
Unnecessary import statement removed from PagingNavigationIncrementLinkTest.java",22.9,42.55,41.85,0.0,"style: Remove unnecessary import statement
Removed the unused import statement for WicketTestCase in PagingNavigationIncrementLinkTest.java, cleaning up the code and reducing unnecessary dependencies.",20.93,47.83,41.35,0.0
82aa4b1fc4b010100e051167f85662f439d92634,apache/wicket,,"File: wicket-examples/src/java/wicket/examples/ajax/builtin/AjaxApplication.java
Status: modified
```diff
@@ -40,6 +40,7 @@ protected void init()
 	{
 		getExceptionSettings().setThrowExceptionOnMissingResource(false);
 		getRequestCycleSettings().addResponseFilter(new ServerAndClientTimeFilter());
+		getAjaxSettings().setAjaxDebugModeEnabled(true);
 	}
 
 	/**
```",enable ajax debug in ajax examples,1,4,4,4,add missing debug mode,1,4,4,4,"Feat: Enable Ajax debug mode in application settings This commit involves a modification to the 'init()' method in the AjaxApplication.java file. The change enables the Ajax debugging mode in the application settings. This is part of the initialization of the Wicket application settings, which also includes exception handling and response filtering.",4,4,4,4,"feat: Enable Ajax debug mode
Enabled Ajax debug mode to facilitate debugging of Ajax-related issues in the application.","feat: Add Ajax debug mode to Wicket application initialization
Enable debug mode for Ajax settings during application initialization to facilitate debugging of Ajax-related issues.",3.88,28.99,17.98,0.0,"feat: Enable Ajax debug mode in AjaxApplication
This commit enables Ajax debug mode in the AjaxApplication class by setting AjaxSettings.ajaxDebugModeEnabled to true. This change allows for better debugging and troubleshooting of Ajax-related issues in the application.",16.8,36.36,32.61,0.0
cf357dc5be777bfebdc9d7a9a48ab6c7dca900ec,apache/wicket,,"File: wicket/src/java/wicket/markup/html/form/Form.java
Status: modified
```diff
@@ -292,10 +292,7 @@ public void formComponent(final FormComponent formComponent)
 	 * THIS METHOD IS NOT PART OF THE WICKET API. DO NOT ATTEMPT TO OVERRIDE OR
 	 * CALL IT.
 	 * 
-	 * Handles form submissions. By default, this method simply calls validate()
-	 * to validate the form and update the model if there is only one button. If
-	 * there is more than one button, it calls the onClick() method for the
-	 * button which submitted the form.
+	 * Handles form submissions.
 	 * 
 	 * @see Form#validate()
 	 */
```",removed stale javadoc,4,4,4,4,fix javadoc warning,2,3,4,4,Refactor: Simplify comments in formComponent method The comments in the formComponent method of the Form class have been simplified for better readability. The functionality of the method and the class remains the same.,3,3,3,4,"style: Remove redundant comment in Form.java
Removed redundant comment in Form.java, which was duplicating information already present in the method's JavaDoc and surrounding code. This change improves code readability by reducing noise.","style: Remove redundant comments from Form.java
Removed unnecessary comments in the Form class, making the code more concise and easier to read.",5.65,15.15,14.37,0.0,"refactor: Simplify Form submission handling comment
Removed unnecessary details from the comment explaining how form submissions are handled in the Form class. The comment now simply states that it handles form submissions.",9.82,25.0,22.67,0.0
413a7b5d98139b0b85fd76a237971b8f43eb1107,apache/wicket,,"File: wicket-spring/src/main/java/wicket/spring/test/ApplicationContextMock.java
Status: modified
```diff
@@ -167,6 +167,8 @@ public String[] getBeanDefinitionNames()
 	}
 
 	/**
+	 * @param type 
+	 * @return bean definition names
 	 * @see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionNames(java.lang.Class)
 	 */
 	public String[] getBeanDefinitionNames(Class type)
```",removed Session.setApplication + fixed some warnings,0,1,4,4,add missing javadoc,4,4,4,4,Style: Add comments to getBeanDefinitionNames method in ApplicationContextMock class Added comments to the getBeanDefinitionNames method in the ApplicationContextMock class to provide more information about the method parameters and return value. The ApplicationContextMock class is a mock implementation of the ApplicationContext interface for unit testing purposes.,4,4,3,4,"feat: Implement getBeanDefinitionNames method in ApplicationContextMock
Adds a new method getBeanDefinitionNames(Class type) to ApplicationContextMock, which returns an array of bean definition names for the given type.","refactor: Enhance getBeanDefinitionNames to accept a type parameter
This change allows for more specific bean definition name retrieval in ApplicationContextMock.",5.1,22.86,20.18,0.0,"refactor: Improve ApplicationContextMock
Added a parameter to the getBeanDefinitionNames method to make it more flexible and usable. This change does not affect the functionality of the ApplicationContextMock class, but rather enhances its internal structure.",11.26,25.64,23.23,0.0
315614b2f80be8f621c92ed769c529215d6b53bf,apache/wicket,,"File: wicket/src/java/wicket/model/AbstractPropertyModel.java
Status: modified
```diff
@@ -60,10 +60,6 @@ public AbstractPropertyModel(final Object target)
 	@Override
 	public IModel getNestedModel()
 	{
-		if (target instanceof IModel)
-		{
-			return ((IModel)target);
-		}
 		return null;
 	}
 
```","make it consistent. nested models are results of wrapping, this is a result of composition",1,0,4,2,remove unnecessary code,4,4,4,4,Refactor: Simplify AbstractPropertyModel class Removed unnecessary conditional check in the getNestedModel method of the AbstractPropertyModel class. The change does not affect the overall functionality of the class.,4,4,3,4,"refactor: Simplify getNestedModel
Removed redundant type check and casting in getNestedModel method, simplifying its implementation.","refactor: Remove unnecessary type check from getNestedModel
Simplified the implementation by eliminating the redundant type check, making it more concise and efficient.",6.02,29.27,20.74,0.0,"refactor: Simplify getNestedModel method
Removed unnecessary type check and casting in the getNestedModel method of AbstractPropertyModel. This change improves the internal structure of the class without changing its observable behavior.",22.37,53.57,47.98,0.0
e5524f77003c96dcd492cb0f987085edff9daebe,apache/wicket,,"File: wicket/src/java/wicket/protocol/http/WicketFilter.java
Status: modified
```diff
@@ -325,6 +325,9 @@ public void init(FilterConfig filterConfig) throws ServletException
 		filterConfig.getServletContext().setAttribute(contextKey, this.webApplication);_x000D_
 _x000D_
 		filterPath = filterConfig.getInitParameter(FILTER_PATH_PARAM);_x000D_
+		_x000D_
+		if (filterPath == null)_x000D_
+			filterPath = """";_x000D_
 _x000D_
 		try_x000D_
 		{_x000D_
```","Added default value ("""") for filterPath in case it's not specified in web.xml",4,4,4,4,fix npe in WicketFilter,4,4,4,4,"Fix: Add null check for filterPath in WicketFilter init method This commit adds a null check for `filterPath` in the `init` method of the `WicketFilter.java` file. If `filterPath` is null, it is set to an empty string. This change is part of the initialization process of the filter configuration, which includes creating a web application instance, setting the filter for the web application, and storing the application object in the servlet context.",4,4,4,4,"fix: Handle null filter path
Ensure filterPath is initialized to prevent null pointer exceptions during Wicket filter initialization.","refactor: Handle null filterPath in init method
Ensure filterPath is initialized with an empty string when not provided in FilterConfig, preventing potential NullPointerExceptions",0.47,13.33,7.22,0.0,"refactor: Improve WicketFilter initialization
Refactor the init method in WicketFilter to handle null filterPath by setting it to an empty string. This change ensures that the filter path is properly initialized, making the filter more robust.",9.32,31.48,27.72,0.0
36945b352820de990e92d615e0452d1f4b2d005e,apache/wicket,,"File: wicket-quickstart/src/main/java/wicket/quickstart/QuickStartApplication.java
Status: modified
```diff
@@ -4,6 +4,7 @@
 import org.apache.commons.logging.LogFactory;
 
 import wicket.ISessionFactory;
+import wicket.Request;
 import wicket.Session;
 import wicket.protocol.http.WebApplication;
 
@@ -39,7 +40,7 @@ public ISessionFactory getSessionFactory()
     {
         return new ISessionFactory()
         {        	
-			public Session newSession()
+			public Session newSession(Request request)
             {
                 return new QuickStartSession(QuickStartApplication.this);
             }
```",Fixed compilation issue for delayed session creation,4,3,4,4,add request to QuickStartApplication,0,4,4,4,feat: Update getSessionFactory method in QuickStartApplication This commit updates the `getSessionFactory` method in the `QuickStartApplication.java` file. The method now creates `QuickStartSession` instances for each new request. This change enhances the functionality of the application by allowing it to handle multiple requests more efficiently.,4,3,4,4,"refactor: Update newSession to accept Request parameter
Updated newSession method to accept Request parameter, allowing for more context-aware session creation and aligning with Wicket's request-based architecture.","refactor: Add Request parameter to getSessionFactory
This change enables the creation of a new QuickStartSession instance for each new request, taking into account the Request parameter.",2.92,14.49,10.23,0.0,"refactor: Update getSessionFactory method to accept Request
Refactored the getSessionFactory method to accept a Request parameter, aligning with the expected usage of the method. This change improves the internal structure of the QuickStartApplication class, making it easier to understand and maintain.",11.25,38.1,39.12,0.0
0c90bdc70bcbc485d045ac6944f2146b93649730,apache/wicket,,"File: wicket/src/main/java/wicket/Component.java
Status: modified
```diff
@@ -1768,7 +1768,10 @@ private void notifyBehaviorsComponentRendered()
 			for (Iterator i = behaviors.iterator(); i.hasNext();)
 			{
 				IBehavior behavior = (IBehavior)i.next();
-				behavior.rendered(this);
+				if (isBehaviorAccepted(behavior))
+				{
+					behavior.rendered(this);
+				}
 			}
 		}
 	}
```",only notify behaviors when they are accepted,4,4,4,4,fix a bug in Component,2,2,4,4,"Feat: Add condition check in notifyBehaviorsComponentRendered() This commit introduces a condition check in the method notifyBehaviorsComponentRendered() in the Component.java file. The condition checks if a behavior is accepted before it is notified that the component has been rendered. This change ensures that only the accepted behaviors are notified, enhancing the efficiency of the method.",4,4,4,4,"refactor: Filter out unaccepted behaviors on rendering
Added a check in the notifyBehaviorsComponentRendered method to only notify accepted behaviors, ensuring that only relevant behaviors are triggered during component rendering.","fix: Notify only accepted behaviors on component render
Prevent unnecessary notifications by adding a check in notifyBehaviorsComponentRendered() to ensure only accepted behaviors are notified when the component has finished rendering.",4.49,24.1,22.61,0.0,"refactor: Improve behavior rendering in Component
This commit refactors the notifyBehaviorsComponentRendered method to only render accepted behaviors, making the component rendering more efficient and controlled. The change ensures that only relevant behaviors are notified, reducing unnecessary rendering and improving overall performance.",9.91,29.47,30.49,0.0
a5888c2d7c2bc24b06bddacf857bac4ddae7fffa,apache/wicket,,"File: wicket/src/main/java/wicket/util/lang/Objects.java
Status: modified
```diff
@@ -139,9 +139,6 @@ protected Object replaceObject(Object obj) throws IOException
 		}
 	}
 
-	/** defaults for primitives. */
-	static HashMap primitiveDefaults = new HashMap();
-
 	/** Type tag meaning java.math.BigDecimal. */
 	private static final int BIGDEC = 9;
 
@@ -188,6 +185,9 @@ protected Object replaceObject(Object obj) throws IOException
 	/** Type tag meaning short. */
 	private static final int SHORT = 3;
 
+	/** defaults for primitives. */
+	static HashMap primitiveDefaults = new HashMap();
+
 	static
 	{
 		primitiveDefaults.put(Boolean.TYPE, Boolean.FALSE);
@@ -385,11 +385,13 @@ public static Object cloneModel(final Object object)
 
 	/**
 	 * Makes a deep clone of an object by serializing and deserializing it. The
-	 * object must be fully serializable to be cloned.
+	 * object must be fully serializable to be cloned. No extra debug info is
+	 * gathered.
 	 * 
 	 * @param object
 	 *            The object to clone
 	 * @return A deep copy of the object
+	 * @see #cloneObject(Object, boolean)
 	 */
 	public static Object cloneObject(final Object object)
 	{
@@ -1052,7 +1054,8 @@ public static byte[] objectToByteArray(final Object object)
 	 */
 	public static long sizeof(final Object object)
 	{
-		if (object == null) return 0;
+		if (object == null)
+			return 0;
 		try
 		{
 			final ByteCountingOutputStream out = new ByteCountingOutputStream();
```",formatted and reordered,4,4,4,4,fix a bug in Objects,0,0,4,4,"Refactor: Improve code readability in Objects.java In this commit, we have made several changes to improve the readability and maintainability of the code in the `Objects.java` file. We have moved the declaration of `primitiveDefaults` to a more appropriate location in the code. We have also added extra comments to the `cloneObject` method to provide more information about its functionality. Lastly, we have changed the formatting of the `sizeof` method to make it more readable.",4,4,4,4,"refactor: Move primitiveDefaults declaration and adjust cloneObject comment
Improved code organization and readability by relocating `primitiveDefaults` and simplifying `cloneObject` comment. This refactoring enhances the maintainability of the `Objects` class.","refactor: Rearrange fields and methods in Objects.java
Moved primitiveDefaults to a more logical location and updated cloneObject to reference the new cloneObject(Object, boolean) method, improving code readability and maintainability.",2.02,17.31,12.85,0.0,"refactor: Rearrange and clarify utility methods in Objects class
This commit reorganizes the utility methods in the Objects class, moving the primitiveDefaults initialization to a more logical location and adding a reference to the cloneObject method with debug info. The sizeof method is also refactored to improve its clarity and functionality.",9.02,34.92,26.14,0.0
06244350ea5e91ff55ec170578a7809e544f9987,apache/wicket,,"File: jdk-1.5/wicket-examples/src/test/java/org/apache/wicket/examples/hangman/WordGeneratorTest.java
Status: modified
```diff
@@ -20,22 +20,25 @@
 import java.util.Set;
 
 import junit.framework.Assert;
+import junit.framework.TestCase;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.wicket.WicketTestCase;
+import org.apache.wicket.util.tester.WicketTester;
 
 /**
  * Test case for the <code>WordGenerator</code> class.
  * 
  * @author Chris Turner
  * @version 1.0
  */
-public class WordGeneratorTest extends WicketTestCase
+public class WordGeneratorTest extends TestCase
 {
 
 	private static final Log log = LogFactory.getLog(WordGeneratorTest.class);
 
+	public WicketTester tester;
+	
 	/**
 	 * Create the test case.
 	 * 
@@ -46,6 +49,16 @@ public WordGeneratorTest(String message)
 	{
 		super(message);
 	}
+	
+	protected void setUp() throws Exception
+	{
+		tester = new WicketTester();
+	}
+
+	protected void tearDown() throws Exception
+	{
+		tester.destroy();
+	}
 
 	/**
 	 * Tests word generator
```",hmm normally you don't have the build path that you have in eclipse. (how can we avoid this?),0,1,4,3,add TestCase to WordGeneratorTest,0,1,4,4,"Refactor: Update WordGeneratorTest to extend TestCase In this commit, the WordGeneratorTest class has been refactored to extend TestCase instead of WicketTestCase. A new instance variable 'tester' of type WicketTester has been added. Two new methods 'setUp' and 'tearDown' have been added. The 'setUp' method sets up the testing environment by initializing the WicketTester object before each test case. The 'tearDown' method destroys the tester instance after the test is completed.",3,4,2,4,"refactor: Switch to JUnit's TestCase and WicketTester for unit testing
This commit migrates the WordGeneratorTest class from WicketTestCase to JUnit's TestCase, adopting a more standard testing framework. The introduction of WicketTester and corresponding setUp and tearDown methods ensures a proper testing environment.","refactor: Replace WicketTestCase with TestCase and WicketTester
Update WordGeneratorTest to use WicketTester for unit testing, adding setUp and tearDown methods to manage the testing environment.",5.3,30.63,20.55,0.0,"refactor: Refactor WordGeneratorTest to use WicketTester
This commit refactors the WordGeneratorTest class to use WicketTester for unit testing. It adds setUp and tearDown methods to set up and clean up the testing environment, respectively. This change improves the internal structure of the test class, making it easier to understand and maintain.",8.98,31.67,23.76,0.0
526bb16ab2f8b770a052fc93069b8b38a1d6c1f5,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/parser/filter/WicketTagIdentifier.java
Status: modified
```diff
@@ -122,8 +122,7 @@ public MarkupElement nextTag() throws ParseException
 						""The wicket:id attribute value must not be empty. May be unmatched quotes?!?"",
 						tag.getPos());
 			}
-			// Make it a org.apache.wicket component. Otherwise it would be
-			// RawMarkup
+			// Make it a wicket component. Otherwise it would be RawMarkup
 			tag.setId(value);
 		}
 
```","who thought it was a good idea to do ""wicket""->""org.apache.wicket"" ????",0,0,4,4,remove unnecessary code,0,0,4,4,Style: Update comment in nextTag() method The comment in the `nextTag()` method of `WicketTagIdentifier.java` has been updated for clarity. The method retrieves the next XML tag from the markup and converts it into a WicketTag if it belongs to the Wicket namespace. The updated comment better reflects this functionality.,4,4,2,4,"refactor: Create wicket components instead of RawMarkup in WicketTagIdentifier
Replaced RawMarkup with wicket components in WicketTagIdentifier's nextTag() method to ensure consistent handling of Wicket namespace tags and attributes.","fix: Correctly set id for Wicket tags
Previously, WicketTagIdentifier was creating RawMarkup instead of setting the id for Wicket tags. This change fixes the issue.",3.45,18.18,13.85,0.0,"refactor: Simplify WicketTagIdentifier
Refactor the WicketTagIdentifier class to use 'wicket component' instead of 'org.apache.wicket component', making the code more concise and easier to understand. This change does not affect the functionality of the class.",3.54,16.47,11.93,0.0
6af365b9b8a426020c412dc7727a17a87bad8ba9,apache/wicket,,"File: jdk-1.5/wicket-examples/src/main/java/org/apache/wicket/examples/compref/SelectPage.java
Status: modified
```diff
@@ -162,7 +162,6 @@ protected void explain()
 				+ ""&nbsp;&nbsp;&nbsp;&nbsp;ListMultipleChoice manyChoice = new ListMultipleChoice(\""choices\"", MANY_CHOICES).setMaxRows(5);\n""
 				+ ""&nbsp;&nbsp;&nbsp;&nbsp;form.add(manyChoice);"";
 
-		// TODO Post 1.2: General: Unknown todo
 		html = ""SEE INSIDE FOR NOW"";
 		code = ""SEE INSIDE FOR NOW"";
 
```",removed noop TODO,4,4,4,4,remove unused code,0,0,4,4,"Fix: Remove TODO comment in SelectPage class The TODO comment was removed from the SelectPage class in the Apache Wicket framework. This class provides examples of using the Select form component. The removal of the comment is a cleanup of the code, improving its readability.",4,4,3,4,"refactor: Remove TODO comment from SelectPage.java
Removed a TODO comment that was no longer relevant, as it didn't correspond to any outstanding task or improvement. This cleanup simplifies the codebase and reduces distractions for future maintainers.","refactor: Remove TODO comment and update html and code variables
Updated SelectPage class to remove unknown TODO comment and set html and code variables to 'SEE INSIDE FOR NOW', improving internal code structure without changing observable behavior.",7.34,24.69,18.98,0.0,"refactor: Remove TODO comment in SelectPage
Removed an outdated TODO comment in SelectPage.java, which was not related to any specific method body. This change improves the code readability and maintainability.",12.42,29.33,21.85,0.0
7799aa5470f4f89550782a426a068ef555c0f242,apache/wicket,,"File: jdk-1.4/wicket/src/test/java/org/apache/wicket/markup/html/basic/SimplePageTest.java
Status: modified
```diff
@@ -326,11 +326,11 @@ public void testRenderHomePage_6() throws Exception
 
 	/**
 	 * @throws Exception
+	 */
 	public void testRenderHomePage_7() throws Exception
 	{
 		executeTest(SimplePage_7.class, ""SimplePageExpectedResult_7.html"");
 	}
-	 */
 
 	/**
 	 * @throws Exception
```",enabled the failing test again,2,4,4,4,fix typo in javadoc,0,0,4,4,Feat: Adjust comment in SimplePageTest.java This commit adjusts the placement of a comment in the SimplePageTest.java file. The change is minor and does not affect the functionality of the code.,2,4,4,4,"refactor: Trim Javadoc comment
Removed unnecessary Javadoc comment block to declutter the code.","fix: Fix Javadoc comment in SimplePageTest.java
Added a closing tag to the Javadoc comment to ensure proper formatting.",3.2,13.64,12.46,0.0,"style: Format code in SimplePageTest.java
Removed trailing whitespace and added a missing closing comment in the testRenderHomePage_7 method.",8.83,23.53,17.39,0.0
81585ff7b7def59aab719a9f6f386ff5d072e5f5,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/RequestUtils.java
Status: modified
```diff
@@ -21,15 +21,20 @@
 
 import org.apache.wicket.util.value.ValueMap;
 
-
 /**
- * TODO
+ * Wicket Http specific utilities class.
  */
-public class RequestUtils
+public final class RequestUtils
 {
 	/**
+	 * Decode the provided queryString as a series of key/ value pairs and set
+	 * them in the provided value map.
+	 * 
 	 * @param queryString
+	 *            string to decode, uses '&' to separate parameters and '=' to
+	 *            separate key from value
 	 * @param params
+	 *            parameters map to write the found key/ value pairs to
 	 */
 	public static void decodeParameters(String queryString, ValueMap params)
 	{
@@ -55,4 +60,11 @@ public static void decodeParameters(String queryString, ValueMap params)
 			}
 		}
 	}
+
+	/**
+	 * Hidden utility class constructor.
+	 */
+	private RequestUtils()
+	{
+	}
 }
```",doc & style tweaks,4,3,4,4,add final to RequestUtils,0,1,4,3,"Refactor: Enhance RequestUtils class functionality The RequestUtils class in the Wicket Http package has been refactored. The class has been made final, and the method decodeParameters has been updated to decode query strings into key/value pairs and add them to a provided value map. A new private constructor has also been added. This commit does not have any associated issues or pull requests.",3,3,4,4,"refactor: Make RequestUtils final and prevent instantiation
To ensure the utility class is not misused, made RequestUtils final and added a private constructor to prevent instantiation.","refactor: Make RequestUtils a non-instantiable utility class
Added a private constructor and updated the class comment to better reflect its purpose.",2.17,22.73,15.76,0.0,"refactor: Improve RequestUtils class
This commit refactors the RequestUtils class to make it more robust and easier to understand. It adds a hidden utility class constructor, making the class non-instantiable, and improves the decodeParameters method by adding a description and making the class final.",5.13,20.75,23.06,0.0
976399fdfae80a7bf3c2de40bca002c2472d30cb,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java
Status: modified
```diff
@@ -742,8 +742,8 @@ public Component(final String id)
 	public Component(final String id, final IModel model)
 	{
 		setId(id);
-		this.model = wrap(model);
 		getApplication().notifyComponentInstantiationListeners(this);
+		this.model = wrap(model);
 
 		final IDebugSettings debugSettings = Application.get().getDebugSettings();
 		if (debugSettings.getComponentUseCheck())
```",rollback call wrapModel before calling the instantiation listener (so wrap is called after the listener again now).,4,4,4,4,fix Component constructor,2,2,4,4,"Refactor: Move model wrapping after component instantiation notification In the Component class, the line 'this.model = wrap(model);' has been moved after the line 'getApplication().notifyComponentInstantiationListeners(this);'. This change does not affect the functionality of the Component class.",0,4,3,4,"refactor: Rearrange initialization in Component constructor
To improve code maintainability, swapped the order of setId and model assignment in the Component constructor, ensuring that the application's notification of component instantiation listeners occurs after the model is set.","refactor: Reorder statements in Component constructor for readability
Improved code maintainability by rearranging the statements in the Component constructor.",9.13,25.0,20.78,0.0,"refactor: Reorder component initialization
Rearranged the order of operations in the Component constructor to improve code organization and readability. No functional changes were made.",6.24,20.34,19.68,0.0
0c7ad3bd3fc4bcab38b4ad47e196b5ac1dd91cad,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java
Status: modified
```diff
@@ -1024,7 +1024,7 @@ public final void validate()
 		{
 			convertInput();
 
-			if (isRequired() && getConvertedInput() == null)
+			if (isValid() && isRequired() && getConvertedInput() == null)
 			{
 				reportRequiredError();
 			}
```",tweak to check for conversion errors,4,4,4,4,fix npe in FormComponent üòÖ,0,1,4,4,"Fix: Add validity check in validate() method This commit modifies the validate() method in FormComponent.java to include an additional check for validity before proceeding with the conversion of the input. This change ensures that only valid and required inputs are converted, improving the robustness of the input validation process.",2,1,4,4,"fix: Validate FormComponent by checking isValid before reporting required error
This change ensures that required errors are only reported when the FormComponent is valid, preventing unnecessary error reports.","fix: Validate input only if it is valid
Prevent unnecessary error reports by checking input validity before checking if it is required in the validate method.",4.51,25.97,18.61,0.0,"fix: Improve form component validation
Validate form components more accurately by checking if the input is valid before reporting required errors. This change ensures that form components are validated correctly and reduces the likelihood of false error reports.",10.73,22.99,28.77,0.0
8d8d7b3f5f0285c0481da3c49638a69c988d8e73,apache/wicket,Y,"File: jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateField.java
Status: modified
```diff
@@ -71,6 +71,16 @@ public Date getDate()
 		return (date != null) ? date.toDate() : null;
 	}
 
+	/**
+	 * @see org.apache.wicket.markup.html.form.FormComponent#getInput()
+	 */
+	public String getInput()
+	{
+		// since we override convertInput, we can let this method return a value
+		// that is just suitable for error reporting
+		return dateField.getInput();
+	}
+
 	/**
 	 * Sets date.
 	 * 
```


File: jdk-1.4/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java
Status: modified
```diff
@@ -147,6 +147,16 @@ public Integer getHours()
 		return hours;
 	}
 
+	/**
+	 * @see org.apache.wicket.markup.html.form.FormComponent#getInput()
+	 */
+	public String getInput()
+	{
+		// since we override convertInput, we can let this method return a value
+		// that is just suitable for error reporting
+		return dateField.getInput() + "", "" + hoursField.getInput() + "":"" + minutesField.getInput();
+	}
+
 	/**
 	 * Gets minutes.
 	 * 
```",override getInput to return a value that can be used for error reporting,4,4,4,4,add getInput method to DateField,0,2,4,4,"feat: Add getInput method for error reporting This commit adds a new method, getInput(), to the DateTimeField.java file. This method returns a string representation of the input from the date, hours, and minutes fields, primarily for error reporting purposes. The returned string is in the format of ""date, hours:minutes"".",4,4,4,4,"feat: Add getInput method to DateField and DateTimeField classes
Implemented getInput method in DateField and DateTimeField classes to conform to the FormComponent interface, enabling consistent error reporting across form components.","feat: Implement getInput method in DateField and DateTimeField
Return a string representation of input values for error reporting purposes.",7.35,25.32,20.16,0.0,"feat: Add getInput method to DateField and DateTimeField
This commit introduces a new method, getInput, to both DateField and DateTimeField classes. This method returns a string representation of the input values for error reporting purposes. This feature enhancement provides a way to retrieve input values for error reporting, making it easier to handle errors in the application.",36.0,49.06,54.55,0.0
8ed9abfbd7a4b215bcfa4d2ba863e0f4150f63cc,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/tree/AbstractTree.java
Status: modified
```diff
@@ -1215,6 +1215,16 @@ private final void init()
 		checkModel();
 	}
 
+	/**
+	 * INTERNAL
+	 * 
+	 * @param node
+	 */
+	public final void markNodeDirty(TreeNode node)
+	{
+		invalidateNode(node, false);
+	}
+
 	/**
 	 * Invalidates single node (without children). On the next render, this node will be updated.
 	 * Node will not be rebuilt, unless forceRebuild is true.
```",allow to manually update tree rows on ajax request,0,3,4,4,add AbstractTree markNodeDirty method,0,1,4,3,"Feat: Add markNodeDirty method in AbstractTree class This commit adds a new method `markNodeDirty(TreeNode node)` in the `AbstractTree.java` file. This method marks a node as dirty, indicating that it needs to be re-rendered or recalculated.",4,4,4,4,"feat: Add markNodeDirty method to AbstractTree
Adds a markNodeDirty method to AbstractTree, allowing TreeNode instances to be explicitly marked as dirty and invalidated for future updates.","feat: Introduce markNodeDirty method for explicit node refresh
This new method allows for triggering node refresh or revalidation, providing explicit control over tree node updates.",11.07,29.51,27.97,0.0,"feat: Add markNodeDirty method to AbstractTree
This commit introduces a new method, markNodeDirty, to the AbstractTree class, allowing for the invalidation of a TreeNode and triggering a refresh or revalidation of the node. This feature enables the update or redraw of a TreeNode's display.",13.67,32.91,33.84,0.0
3fc1edadca900947119d2aa3ce1375d051a946c2,apache/wicket,,"File: jdk-1.4/wicket/src/test/java/org/apache/wicket/util/io/WicketOutputStreamTest.java
Status: modified
```diff
@@ -23,6 +23,7 @@
 
 import junit.framework.Assert;
 
+import org.apache.wicket.RequestCycle;
 import org.apache.wicket.WicketTestCase;
 import org.apache.wicket.protocol.http.HttpSessionStore;
 import org.apache.wicket.protocol.http.WebApplication;
@@ -38,7 +39,7 @@ public class WicketOutputStreamTest extends WicketTestCase
 
 	/**
 	 * Tests serialization of a big int.
-	 * 
+	 *
 	 * @throws Exception
 	 */
 	public void testBigInteger() throws Exception
@@ -131,6 +132,8 @@ public void testPageReference() throws Exception
 		Assert.assertEquals(a, a2);
 
 		Assert.assertSame(a2, a2.getB().getA());
+		
+		RequestCycle.get().detach();
 	}
 
 
```",detach the request cycle otherwise session thread locals are not cleaned and are breaking other tests,4,4,4,4,fix unit test,2,2,4,4,"Fix: Ensure correct serialization and deserialization of page references In the testPageReference() method of WicketOutputStreamTest.java, a line of code was added to ensure that the deserialized object is the same as the original one. This fix ensures the correct serialization and deserialization of page references.",0,0,3,3,"refactor: Use RequestCycle in testBigInteger method
Replace manual detachment with RequestCycle.get().detach() to ensure proper resource cleanup in testBigInteger.","refactor: Add RequestCycle detachment to WicketOutputStreamTest
Detach RequestCycle in testBigInteger method to ensure proper cleanup. Minor formatting changes were also made to the test class.",2.64,9.23,7.16,0.0,"refactor: Improve WicketOutputStreamTest
Refactored WicketOutputStreamTest to use Wicket's object serialization mechanism and added RequestCycle detachment. This change improves the test's functionality and ensures correct serialization and deserialization of page references.",16.9,32.0,34.67,0.0
cc5892f29261c6e58926aa4eea84b444e357c965,apache/wicket,,"File: jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java
Status: modified
```diff
@@ -385,7 +385,16 @@ public boolean doGet(final HttpServletRequest servletRequest,
 			{
 				// Close response
 				if (response != null)
-					response.close();
+				{
+					try
+					{
+						response.close();
+					}
+					catch (Exception e)
+					{
+						log.error(""closing the buffer error"", e);
+					}
+				}
 
 				// Clean up thread local session
 				Session.unset();
```",try catch around close If it throws an exception then the finally block is not completely executed,4,4,4,4,handle exceptions thrown from WicketFilter,4,4,4,4,"Fix: Handle exceptions when closing response In the 'doGet' method of the 'WicketFilter.java' file, a try-catch block has been added to handle exceptions when closing the response. This change ensures that any exceptions that occur during the closing of the response are properly caught and logged, preventing potential crashes or unexpected behavior.",4,4,4,4,"fix: Wrap response close in try-catch block
Ensures response close operation is fault-tolerant to prevent unexpected failures and improve overall system reliability.","fix: Handle response close exceptions in WicketFilter
Wrapped response.close() in a try-catch block to prevent unexpected errors in the doGet method.",1.77,16.22,11.81,0.0,"fix: Handle response close exceptions in WicketFilter
This commit fixes an issue where response close errors were not handled properly in the WicketFilter class. Now, when closing a response, any exceptions that occur are caught and logged, ensuring that the filter continues to function correctly.",12.06,37.11,34.87,0.0
31239099657a751fc4cd6e51cdf65a41164eca66,apache/wicket,Y,"File: wicket/src/main/java/org/apache/wicket/markup/html/form/CheckGroup.java
Status: modified
```diff
@@ -141,7 +141,7 @@ public Object component(Check<T> check)
 								""] contains an illegal relative path "" +
 								""element ["" +
 								value +
-								""] which does not point to a Check component. Due to this the CheckGroup component cannot resolve the selected Check component pointed to by the illegal value. A possible reason is that componment hierarchy changed between rendering and form submission."");
+								""] which does not point to a Check component. Due to this the CheckGroup component cannot resolve the selected Check component pointed to by the illegal value. A possible reason is that component hierarchy changed between rendering and form submission."");
 					}
 
 					// assign the value of the group's model
```


File: wicket/src/main/java/org/apache/wicket/markup/html/form/RadioGroup.java
Status: modified
```diff
@@ -124,7 +124,7 @@ public Object component(Radio<T> radio)
 						""] for RadioGroup component ["" +
 						getPath() +
 						""] is illegal because it does not contain relative path to a Radio componnet. "" +
-						""Due to this the RadioGroup component cannot resolve the selected Radio component pointed to by the illegal value. A possible reason is that componment hierarchy changed between rendering and form submission."");
+						""Due to this the RadioGroup component cannot resolve the selected Radio component pointed to by the illegal value. A possible reason is that component hierarchy changed between rendering and form submission."");
 			}
 
 
```",fix typo in error message,4,4,4,4,fix check style issues,0,0,4,4,"Fix: Correct typo in error messages This commit corrects a typo in the error messages in the methods convertValue in both CheckGroup.java and RadioGroup.java. The typo was in the word ""componment"", which has been corrected to ""component"". The error messages are shown when the CheckGroup or RadioGroup component cannot resolve the selected Check or Radio component due to an illegal value.",4,4,4,4,"fix: Correct 'componment' to 'component' in error messages
This commit corrects the spelling of 'component' in error messages, ensuring consistency and accuracy in the description of CheckGroup and RadioGroup components.","fix: Fix typo in error messages
Correct 'componment' to 'component' in CheckGroup and RadioGroup components.",4.09,30.43,23.39,0.0,"fix: Correct typo in error message
Fixed a typo in the error message of CheckGroup and RadioGroup components, changing 'componment' to 'component'. This ensures that the error message is accurate and helpful for users.",11.68,37.5,27.51,0.0
cc195638e57df89bcdb8f72b344107c673143d96,apache/wicket,,"File: wicket-core/src/main/java/org/apache/wicket/request/cycle/RequestCycle.java
Status: modified
```diff
@@ -528,7 +528,7 @@ public void onDetach()
 		}
 		catch (RuntimeException e)
 		{
-			log.error(""Exception occurred during onAfterRequest"", e);
+			log.error(""Exception occurred during onEndRequest"", e);
 		}
 
 		try
```",Fix exception message. The name of the method is onEndRequest(),4,4,4,4,fix error message,4,4,4,4,"Fix: Correct log message in onDetach method of RequestCycle class The log message in the onDetach method of the RequestCycle class has been corrected. The old message was ""Exception occurred during onAfterRequest"", and the new message is ""Exception occurred during onEndRequest"". This change ensures that the log message accurately reflects the operation of the method.",4,4,4,4,"fix: Rename log error message from onAfterRequest to onEndRequest
Fixed log error message to reflect the correct method name, onEndRequest, instead of onAfterRequest, to prevent confusion in error diagnosis.","fix: Update log error message to reflect correct method name
Changed 'onAfterRequest' to 'onEndRequest' in RequestCycle to ensure accurate error logging.",2.5,21.69,12.7,0.0,"fix: Update error message in RequestCycle
Fixed the error message in RequestCycle to correctly reflect the method name change from onAfterRequest to onEndRequest. This ensures that the error message accurately represents the method that threw the exception.",8.03,39.56,29.43,0.0
638b55e428226b0bd39f9307320f46cb2b36e91a,apache/wicket,,"File: wicket-core/src/main/java/org/apache/wicket/protocol/http/RequestLogger.java
Status: modified
```diff
@@ -339,7 +339,10 @@ public void sessionCreated(String sessionId)
 
 	public void sessionDestroyed(String sessionId)
 	{
-		RequestCycle.get().setMetaData(SESSION_DATA, liveSessions.remove(sessionId));
+		RequestCycle requestCycle = RequestCycle.get();
+		SessionData sessionData = liveSessions.remove(sessionId);
+		if (requestCycle != null)
+			requestCycle.setMetaData(SESSION_DATA, sessionData);
 	}
 
 	protected RequestData getCurrentRequest()
```","Fixes NPE when sessions are invalidated *outside* a request, e.g. due to session timeout",4,4,4,4,fix npe in RequestLogger sessionDestroyed,4,4,4,4,"Refactor: Improve session destruction handling in RequestLogger This commit refactors the `sessionDestroyed` method in `RequestLogger.java` to handle the event of a session being destroyed more robustly. Previously, the method directly removed the session with the given session id from the live sessions and set the removed session data as metadata in the current request cycle. This commit adds a null check for `RequestCycle` before setting the metadata, preventing potential null pointer exceptions.",4,4,4,4,"fix: Prevent null pointer dereference in sessionDestroyed
Fixed a potential null pointer dereference in sessionDestroyed by introducing a null check for RequestCycle, ensuring that session data removal and metadata update are only performed when RequestCycle is available.","fix: Remove session data from live sessions map safely
Check for null RequestCycle before setting metadata in sessionDestroyed method to prevent potential NPE.",6.34,16.51,19.29,0.0,"refactor: Improve session destruction handling in RequestLogger
Refactor the sessionDestroyed method to ensure that the RequestCycle metadata is updated only when the RequestCycle is not null, preventing potential NullPointerExceptions. This change improves the robustness of the RequestLogger class.",8.63,29.09,25.38,0.0
4e53b486fa162580dfc24deb1f4c1f47f5c7d2e1,apache/wicket,,"File: wicket-core/src/main/java/org/apache/wicket/util/tester/BaseWicketTester.java
Status: modified
```diff
@@ -1797,12 +1797,14 @@ private Url transform(final Url url)
 	 */
 	public <C extends Page> Result isRenderedPage(Class<C> expectedRenderedPageClass)
 	{
+		Args.notNull(expectedRenderedPageClass, ""expectedRenderedPageClass"");
+
 		Page page = getLastRenderedPage();
 		if (page == null)
 		{
 			return Result.fail(""page was null"");
 		}
-		if (!page.getClass().isAssignableFrom(expectedRenderedPageClass))
+		if (!expectedRenderedPageClass.isAssignableFrom(page.getClass()))
 		{
 			return Result.fail(String.format(""classes not the same, expected '%s', current '%s'"",
 				expectedRenderedPageClass, page.getClass()));
```",Reverse the check for rendered page's class. This way a sub-type can be checked against super-type.,4,4,4,4,fix npe in BaseWicketTester,0,1,4,4,"Refactor: Improve null check and class comparison in BaseWicketTester This commit refactors the `isRenderedPage` method in the `BaseWicketTester` class. A null check was added for `expectedRenderedPageClass` to prevent potential null pointer exceptions. Additionally, the condition for checking if the page class is assignable from `expectedRenderedPageClass` was modified to improve readability and maintainability. These changes do not alter the functionality of the method, which continues to check if the last rendered page is of the expected type.",4,4,4,4,"fix: Check expectedRenderedPageClass for null in isRenderedPage
Ensure isRenderedPage method robustness by handling null input and fixing class comparison logic to prevent unexpected behavior.","fix: Check for null expectedRenderedPageClass in isRenderedPage
Fixed class comparison logic to use isAssignableFrom, ensuring correct page class verification.",1.15,14.14,9.41,0.0,"fix: Ensure expectedRenderedPageClass is not null in isRenderedPage
Fixed a potential NullPointerException in the isRenderedPage method by adding a null check for the expectedRenderedPageClass parameter. This change improves the robustness of the BaseWicketTester class.",5.67,25.69,19.79,0.0
9fb30084cbc737ec035ed0e76a425612db462b47,apache/wicket,,"File: wicket-core/src/main/java/org/apache/wicket/core/request/mapper/BookmarkableMapper.java
Status: modified
```diff
@@ -70,7 +70,7 @@ public BookmarkableMapper()
 	}
 
 	/**
-	 * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#buildUrl(org.apache.wicket.request.mapper.AbstractBookmarkableMapper.UrlInfo)
+	 * @see AbstractBookmarkableMapper#buildUrl(AbstractBookmarkableMapper.UrlInfo)
 	 */
 	@Override
 	protected Url buildUrl(UrlInfo info)
@@ -86,7 +86,7 @@ protected Url buildUrl(UrlInfo info)
 	}
 
 	/**
-	 * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#parseRequest(org.apache.wicket.request.Request)
+	 * @see AbstractBookmarkableMapper#parseRequest(org.apache.wicket.request.Request)
 	 */
 	@Override
 	protected UrlInfo parseRequest(Request request)
@@ -123,7 +123,7 @@ protected UrlInfo parseRequest(Request request)
 	}
 
 	/**
-	 * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#pageMustHaveBeenCreatedBookmarkable()
+	 * @see AbstractBookmarkableMapper#pageMustHaveBeenCreatedBookmarkable()
 	 */
 	@Override
 	protected boolean pageMustHaveBeenCreatedBookmarkable()
@@ -132,7 +132,7 @@ protected boolean pageMustHaveBeenCreatedBookmarkable()
 	}
 
 	/**
-	 * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#getCompatibilityScore(org.apache.wicket.request.Request)
+	 * @see AbstractBookmarkableMapper#getCompatibilityScore(org.apache.wicket.request.Request)
 	 */
 	@Override
 	public int getCompatibilityScore(Request request)
```",Fix broken javadoc links,4,3,4,4,fix javadoc warnings,4,3,4,4,Style: Update comments in BookmarkableMapper.java Updated the comments in the `BookmarkableMapper.java` file to use a shorter form of the class name. This change improves the readability of the code and makes it easier to understand.,4,4,4,4,"refactor: Simplify imports in BookmarkableMapper
Removed redundant package qualifications from Javadoc comments, aligning with Java best practices and improving code readability.","refactor: Simplify Javadoc references
Removed redundant package names from Javadoc comments to improve code readability.",3.17,14.04,9.89,0.0,"refactor: Simplify Javadoc references
Removed redundant package names from Javadoc references in BookmarkableMapper, making the code more concise and easier to read.",4.81,24.14,25.13,0.0
152e8b1af359284ec680e3799f019cc20411cc15,apache/wicket,Y,"File: wicket-core/src/main/java/org/apache/wicket/markup/head/PriorityFirstComparator.java
Status: modified
```diff
@@ -16,6 +16,7 @@
  */
 package org.apache.wicket.markup.head;
 
+import java.io.Serializable;
 import java.util.Comparator;
 
 import org.apache.wicket.Page;
@@ -30,13 +31,13 @@
  * 
  * @author papegaaij
  */
-public class PriorityFirstComparator implements Comparator<RecordedHeaderItem>
+public class PriorityFirstComparator implements Comparator<RecordedHeaderItem>, Serializable
 {
-	protected enum HeaderItemType {
+	protected static enum HeaderItemType {
 		PRIORITY, PAGE, COMPONENT;
 	}
 
-	private boolean renderPageFirst = false;
+	private final boolean renderPageFirst;
 
 	/**
 	 * Construct.
```


File: wicket-util/src/main/java/org/apache/wicket/util/collections/UrlExternalFormComparator.java
Status: modified
```diff
@@ -16,6 +16,7 @@
  */
 package org.apache.wicket.util.collections;
 
+import java.io.Serializable;
 import java.net.URL;
 import java.util.Comparator;
 
@@ -29,7 +30,7 @@
  *
  * @since 1.5.6
  */
-public class UrlExternalFormComparator implements Comparator<URL>
+public class UrlExternalFormComparator implements Comparator<URL>, Serializable
 {
 	public int compare(URL url1, URL url2)
 	{
```",Make two new implementations of Comparator serializable. Just in case they are used by someone in a collection which is supposed to be serialized.,4,4,4,4,make PriorityFirstComparator serializable,0,3,4,4,"Refactor: Make classes implement Serializable interface In this commit, the `PriorityFirstComparator` and `UrlExternalFormComparator` classes were made to implement the `Serializable` interface. In addition, the `HeaderItemType` enum in `PriorityFirstComparator` was made static and the `renderPageFirst` variable was made final. This change allows `PriorityFirstComparator` to prioritize `PriorityHeaderItems` and optionally render page headers first. The functionality of `UrlExternalFormComparator` remains the same.",4,4,4,4,"refactor: Make PriorityFirstComparator and UrlExternalFormComparator serializable
This change enables safe usage of `PriorityFirstComparator` and `UrlExternalFormComparator` in serializable contexts by making them implement the `Serializable` interface.","refactor: Make comparators serializable
Implemented Serializable interface in PriorityFirstComparator and UrlExternalFormComparator to ensure they can be serialized.",6.34,24.39,19.14,0.0,"refactor: Make comparators serializable
This commit makes two comparators, PriorityFirstComparator and UrlExternalFormComparator, implement the Serializable interface. This change does not affect the functionality of these comparators, but rather makes them more flexible and easier to work with in certain scenarios.",12.62,30.93,24.84,0.0
9de425ea4b6285cd0916a96161ebb09056389165,apache/wicket,,"File: wicket-ioc/src/main/java/org/apache/wicket/proxy/LazyInitProxyFactory.java
Status: modified
```diff
@@ -140,7 +140,7 @@ else if (type.isInterface())
 				ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
 				if (Application.exists())
 				{
-					IClassResolver classResolver = (IClassResolver) Application.get()
+					IClassResolver classResolver = Application.get()
 							.getApplicationSettings()
 							.getClassResolver();
 
```",Remove unneeded cast.,4,4,4,4,fix compilation error,0,0,4,4,Refactor: Simplify initialization of IClassResolver in LazyInitProxyFactory This commit simplifies the way the IClassResolver classResolver is initialized in the createProxy method of the LazyInitProxyFactory.java file. The change does not alter the functionality of the method.,4,3,4,4,"refactor: Use Application to get class resolver
Replaced Thread.currentThread().getContextClassLoader() with Application.get() to retrieve the class resolver, ensuring a more reliable and consistent approach.","refactor: Simplify IClassResolver creation in LazyInitProxyFactory
Removed unnecessary cast.",3.89,6.56,5.62,0.0,"refactor: Simplify class resolver retrieval in LazyInitProxyFactory
Removed unnecessary cast to IClassResolver when retrieving the class resolver from Application. This change improves the code's readability and maintainability.",5.32,22.58,17.6,0.0
bcc601c23466d524a9dc80a6895c71ae4091d402,apache/wicket,,"File: wicket-examples/src/main/java/org/apache/wicket/examples/ajax/builtin/AutoCompletePage.java
Status: modified
```diff
@@ -24,13 +24,10 @@
 
 import org.apache.wicket.ajax.AjaxRequestTarget;
 import org.apache.wicket.ajax.form.AjaxFormSubmitBehavior;
-import org.apache.wicket.core.request.handler.BookmarkablePageRequestHandler;
-import org.apache.wicket.core.request.handler.PageProvider;
 import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;
 import org.apache.wicket.markup.html.basic.Label;
 import org.apache.wicket.markup.html.form.Form;
 import org.apache.wicket.model.Model;
-import org.apache.wicket.request.cycle.RequestCycle;
 import org.apache.wicket.util.string.Strings;
 
 
@@ -93,10 +90,6 @@ protected Iterator<String> getChoices(String input)
 			@Override
 			protected void onSubmit(AjaxRequestTarget target)
 			{
-				BookmarkablePageRequestHandler bookmarkablePageRequestHandler = new BookmarkablePageRequestHandler(
-					new PageProvider(Index.class));
-				RequestCycle requestCycle = RequestCycle.get();
-				CharSequence urlFor = requestCycle.urlFor(bookmarkablePageRequestHandler);
 				target.add(label);
 			}
 
```",Remove unused code,4,4,4,4,remove unused code,4,4,4,4,Refactor: Remove unused imports and code in AutoCompletePage.java This commit removes unused import statements and code lines in AutoCompletePage.java. The removed code does not affect the functionality of the class.,4,4,4,4,"refactor: Remove unnecessary BookmarkablePageRequestHandler and RequestCycle usage
Removed unused BookmarkablePageRequestHandler and RequestCycle instances in AutoCompletePage.java, as they were not contributing to the page's functionality.","refactor: Remove unused BookmarkablePageRequestHandler
Removed unnecessary code related to BookmarkablePageRequestHandler and RequestCycle in AutoCompletePage, simplifying the implementation.",12.1,39.29,25.6,0.0,"refactor: Remove unused imports and code
This commit removes unused imports and code related to BookmarkablePageRequestHandler and RequestCycle from AutoCompletePage. The removed code was not being used and is not necessary for the auto-complete text field functionality.",26.41,50.0,46.62,0.0
7c4fb4de88885095557821342c7dafde870af231,apache/wicket,,"File: wicket-core/src/main/java/org/apache/wicket/markup/transformer/AbstractOutputTransformerContainer.java
Status: modified
```diff
@@ -29,7 +29,8 @@
  * This abstract container provides the means to post-process the markup generated by its child
  * components (excluding the containers tag)
  * <p>
- * Please see <code>IBehavior</code> for an alternative based on IBehavior
+ * Please see {@link org.apache.wicket.markup.transformer.AbstractTransformerBehavior} for an alternative
+ * based on {@link org.apache.wicket.behavior.Behavior}
  * 
  * @see org.apache.wicket.markup.transformer.AbstractTransformerBehavior
  * @see org.apache.wicket.markup.transformer.ITransformer
```",Fix javadoc of AbstractOutputTransformerContainer,4,4,4,4,fix typo in javadoc,2,2,4,4,Style: Update comments in AbstractOutputTransformerContainer.java The comments in AbstractOutputTransformerContainer.java have been updated. The reference to IBehavior has been replaced with a reference to AbstractTransformerBehavior and Behavior. This change does not affect the functionality of the code.,4,4,3,4,"style: Update JavaDoc formatting
Updated JavaDoc formatting to use consistent tag syntax.","style: Use @link instead of <code> in javadoc
Improved formatting of javadoc comments in AbstractOutputTransformerContainer.java",1.17,12.24,10.25,0.0,"refactor: Update comment to use JavaDoc link
Updated the comment in AbstractOutputTransformerContainer.java to use a JavaDoc link to org.apache.wicket.behavior.Behavior instead of a plain text reference to IBehavior. This change improves the readability and maintainability of the code.",18.57,37.97,48.95,0.0
ea6cbc11aa9cef21fdfd77bc36e1970927d06eee,apache/wicket,,"File: wicket-extensions/src/main/java/org/apache/wicket/extensions/ajax/markup/html/modal/ModalWindow.java
Status: modified
```diff
@@ -267,13 +267,8 @@ private void init()
 
 		// install a default callback that will force
 		// WindowClosedBehavior to be executed
-		setWindowClosedCallback(new WindowClosedCallback()
-		{
-			@Override
-			public void onClose(AjaxRequestTarget target)
-			{
-				// noop
-			}
+		setWindowClosedCallback((WindowClosedCallback) target -> {
+			// noop
 		});
 
 	}
```",Use Lambda to make the code shorter,4,4,4,4,remove callback from ModalWindow,0,1,4,4,Refactor: Simplify callback in ModalWindow.init The `init` method in `ModalWindow.java` has been refactored. The callback for when the window is closed has been simplified by replacing the old version of the method with a lambda expression. This change improves the readability of the code without altering its functionality. The `init` method is used to initialize the modal window with default settings and behaviors.,4,4,3,4,"refactor: Simplify WindowClosedCallback initialization
Replaced anonymous WindowClosedCallback class with a lambda expression, reducing boilerplate code and improving initialization simplicity.","refactor: Use lambda expression in init method of ModalWindow
Replace anonymous WindowClosedCallback with a more concise lambda expression",1.46,19.28,14.28,0.0,"refactor: Simplify window closed callback in ModalWindow
Refactored the init method in ModalWindow to use a lambda expression for the window closed callback, making the code more concise and easier to read.",7.45,33.33,27.54,0.0
b924402a5d263b473075a06611edfd88ca2bdfce,apache/wicket,,"File: wicket-core/src/test/java/org/apache/wicket/page/PageAccessSynchronizerTest.java
Status: modified
```diff
@@ -19,6 +19,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;_x000D_
 import static org.junit.jupiter.api.Assertions.assertNull;_x000D_
 import static org.junit.jupiter.api.Assertions.assertTrue;_x000D_
+_x000D_
 import java.time.Duration;_x000D_
 import java.time.Instant;_x000D_
 import java.util.Random;_x000D_
@@ -27,6 +28,7 @@
 import java.util.concurrent.CountDownLatch;_x000D_
 import java.util.concurrent.TimeUnit;_x000D_
 import java.util.concurrent.atomic.AtomicInteger;_x000D_
+_x000D_
 import org.apache.wicket.MockPage;_x000D_
 import org.apache.wicket.core.util.lang.WicketObjects;_x000D_
 import org.apache.wicket.mock.MockPageManager;_x000D_
```",Class formatted according to the code style,3,4,4,4,fix checkstyle issues,4,4,4,4,"Style: Code style adjustments in PageAccessSynchronizerTest.java No changes were made to the functionality of the code. The adjustments are related to the code style, possibly import statements or comments.",4,2,4,4,"style: Organize imports
Reorganized imports to follow conventional ordering.","style: Add missing imports to PageAccessSynchronizerTest
Added necessary import statements to the test class, including java.time.Duration and others.",1.17,10.53,6.94,0.0,"style: Add missing import statements
Added necessary import statements for Java.time.Duration and Java.time.Instant in PageAccessSynchronizerTest.java. This change is related to WICKET-6662.",14.04,21.82,27.52,0.0
91feb64c98ffe1835075e1fa8d782e43e0c785ee,apache/cxf,,"File: rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/AccessTokenService.java
Status: modified
```diff
@@ -65,10 +65,10 @@ public void setGrantHandlers(List<AccessTokenGrantHandler> handlers) {
     protected void injectContextIntoOAuthProviders() {
         super.injectContextIntoOAuthProviders();
         for (AccessTokenGrantHandler grantHandler : grantHandlers) {
-            OAuthUtils.injectContextIntoOAuthProvider(getMessageContext(), grantHandler);    
+            OAuthUtils.injectContextIntoOAuthProvider(getMessageContext(), grantHandler);
         }
     }
-    
+
     /**
      * Sets a grant handler
      * @param handler the grant handler
@@ -125,6 +125,7 @@ public Response handleTokenRequest(MultivaluedMap<String, String> params) {
         } catch (WebApplicationException ex) {
             throw ex;
         } catch (RuntimeException ex) {
+            LOG.log(Level.FINE, ""Error creating the access token"", ex);
             // This is done to bypass a Check-Style
             // restriction on a number of return statements
             OAuthServiceException oauthEx = ex instanceof OAuthServiceException
```",Log the AccessTokenService error,0,2,3,3,fix checkstyle issue,0,0,4,4,Style: Clean up code and add logging in AccessTokenService This commit removes unnecessary spaces in the `injectContextIntoOAuthProviders` method and adds a log statement in the `handleTokenRequest` method for runtime exceptions. The logging will help in debugging by providing more information when an error occurs while creating the access token.,4,4,4,4,"refactor: Add error logging to handleTokenRequest
Updated handleTokenRequest method to include error logging, providing more detailed information for debugging purposes.","fix: Log RuntimeException when creating access token
Catch and log RuntimeException in AccessTokenService to improve error handling",2.72,23.53,17.8,0.0,"fix: Handle RuntimeException in AccessTokenService
This commit fixes an issue in AccessTokenService where RuntimeExceptions were not properly handled. Now, when a RuntimeException occurs, it is caught and logged with a FINE level. This change improves the robustness of the access token generation process.",6.72,19.78,22.14,0.0
260efe56fc1bfc89950d1eda89114feb287490cd,apache/cxf,,"File: rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/common/Client.java
Status: modified
```diff
@@ -28,6 +28,7 @@
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
 import javax.persistence.Id;
+import javax.persistence.Lob;
 import javax.persistence.ManyToOne;
 import javax.persistence.MapKeyColumn;
 import javax.persistence.OneToOne;
@@ -66,7 +67,7 @@ public class Client implements Serializable {
     private String homeRealm;
     private boolean registeredDynamically;
     private String tokenEndpointAuthMethod;
-    
+
     public Client() {
 
     }
@@ -346,6 +347,7 @@ public void setRegisteredAudiences(List<String> registeredAudiences) {
 
     @ElementCollection(fetch = FetchType.EAGER)
     @OrderColumn
+    @Lob
     public List<String> getApplicationCertificates() {
         return applicationCertificates;
     }
```",Add @lob annotation for application certificates,4,3,4,4,fix exception message,0,0,4,4,Refactor: Enhance getApplicationCertificates method in Client class The getApplicationCertificates method in the Client class has been refactored to return a list of application certificates that are eagerly fetched and ordered as per their insertion in the database. The @Lob annotation has been added to indicate that the application certificates are stored as a large object in the database.,4,4,4,4,"refactor: Annotate getApplicationCertificates with @Lob
Annotate getApplicationCertificates with @Lob to enable efficient storage and retrieval of large certificate lists, improving overall system performance.","feat: Add LOB support to application certificates
Enable efficient storage and retrieval of large certificate data by annotating getApplicationCertificates with @Lob.",1.58,15.0,10.66,0.0,"refactor: Update getApplicationCertificates to store certificates as LOBs
This commit refactors the getApplicationCertificates method to store application certificates as large objects (LOBs) in the database, with eager fetching and ordering. This change improves the storage and retrieval of certificates associated with an application, likely for authentication or authorization purposes.",7.46,26.42,30.57,0.0
fbbd85c9c4efb9a57a8d26b90ef475f651ab9b66,apache/cxf,,"File: rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/services/AccessTokenService.java
Status: modified
```diff
@@ -154,7 +154,9 @@ protected void processClientAccessToken(ClientAccessToken clientToken, ServerAcc
     protected void checkAudience(Client c, MultivaluedMap<String, String> params) {
         String audienceParam = params.getFirst(OAuthConstants.CLIENT_AUDIENCE);
         if (!OAuthUtils.validateAudience(audienceParam, c.getRegisteredAudiences())) {
-            LOG.fine(""Error validating the audience parameter"");
+            LOG.log(Level.FINE, ""Error validating the audience parameter. Supplied audience {0} ""
+                    + ""does not match with the registered audiences {1}"",
+                    new Object[] {audienceParam, c.getRegisteredAudiences() });
             throw new OAuthServiceException(new OAuthError(OAuthConstants.ACCESS_DENIED));
         }
 
```",Improve logging when the audience restriction fails,4,4,4,4,fix typo in log message,1,2,4,4,Fix: Enhance error logging in checkAudience method The `checkAudience` method in `AccessTokenService.java` has been updated to provide more detailed error logging. The log message now includes the supplied audience and the registered audiences for the client. This change will help in better understanding the cause of the error when the audience parameter does not match with the registered audiences.,4,4,4,4,"fix: fix: Enhance audience validation logging
This change improves the debuggability of audience validation errors by logging the supplied audience and registered audiences, providing more context for troubleshooting.","fix: Log audience parameter validation failures with more detail
Include supplied audience and registered audiences in log messages when validation fails.",5.0,25.29,22.74,0.0,"fix: Improve audience parameter validation logging
Enhance the logging message in AccessTokenService's checkAudience method to provide more informative error messages when the audience parameter does not match the registered audiences. This change improves the debugging experience and helps identify issues more efficiently.",18.36,37.62,40.34,0.0
e1a8df8e095b7c6c1c2a237b2f8469ef522fd22e,apache/cxf,,"File: rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/OsgiSwaggerUiResolver.java
Status: modified
```diff
@@ -81,7 +81,7 @@ public String findSwaggerUiRootInternal(String swaggerUiMavenGroupAndArtifact,
 
     private String getSwaggerUiRoot(Bundle b, String swaggerUiVersion) {
         if (swaggerUiVersion == null) { 
-            swaggerUiVersion = """";
+            swaggerUiVersion = b.getVersion().toString();
         }
         URL entry = b.getEntry(SwaggerUiResolver.UI_RESOURCES_ROOT_START + swaggerUiVersion);
         if (entry != null) {
```","UI not resolved correctly if version not specificed When findSwaggerUiRootInternal(null, null) is called, the root is returned without the version number which is needed to locate the index.html and other resources within the bundle. /META-INF/resources/webjars/swagger-ui//index.html instead of  /META-INF/resources/webjars/swagger-ui/3.17.6/index.html",4,4,4,4,fix a bug in OsgiSwaggerUiResolver,2,2,4,4,"Fix: Update default swaggerUiVersion in getSwaggerUiRoot In the `getSwaggerUiRoot` method of the `OsgiSwaggerUiResolver` class, the default value of `swaggerUiVersion` has been updated. Previously, if `swaggerUiVersion` was not specified, it was set to an empty string. Now, it is set to the version of the provided bundle. This change ensures that the method returns the correct root directory of the Swagger UI resources for the given version.",4,4,4,4,"fix: Set Swagger UI version from bundle version when not specified
Previously, when the Swagger UI version was not specified, the root location was returned without the version number, leading to incorrect resource locations. This change fixes this issue by setting the Swagger UI version to the bundle version, ensuring correct resolution of Swagger UI root locations.","fix: Return bundle version as Swagger UI root path when version is not specified
Previously, an empty string was returned when swaggerUiVersion was null, leading to incorrect root path resolution. This fix ensures the correct root path is resolved by using the bundle's version as the swaggerUiVersion.",7.82,26.23,26.96,0.0,"fix: Resolve Swagger UI root correctly when version is not specified
Fixes an issue where the Swagger UI root was not resolved correctly when the version was not specified. This change ensures that the root URL for Swagger UI resources is determined correctly by using the bundle's version when the swaggerUiVersion is null.",14.03,28.81,31.45,0.0
5ae9b0a5b928b49fc2a4b3fb8dd9b68dca640eb7,apache/cxf,,"File: rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/OsgiSwaggerUiResolver.java
Status: modified
```diff
@@ -47,6 +47,9 @@ public String findSwaggerUiRootInternal(String swaggerUiMavenGroupAndArtifact,
             if (bundle == null) {
                 return null;
             }
+            if (bundle.getState() != Bundle.ACTIVE) {
+				bundle.start();
+			}
             String[] locations = swaggerUiMavenGroupAndArtifact == null ? DEFAULT_LOCATIONS
                 : new String[]{""mvn:"" + swaggerUiMavenGroupAndArtifact + ""/"",
                                ""wrap:mvn:"" + swaggerUiMavenGroupAndArtifact + ""/""};
```",NPE when annotations bundle found but not active bundle.getBundleContext() will give an NPE (in Equinox) if the bundle can be found but is not active. Would also be good to at least log the exception in debug mode to point to a possible problem.,4,4,4,4,changed swaggerUiMavenGroupAndArtifact ACTIVE to a4,2,2,4,4,"Fix: Ensure bundle is active in findSwaggerUiRootInternal method This commit modifies the `findSwaggerUiRootInternal` method in the `OsgiSwaggerUiResolver.java` file to check if the bundle containing the Swagger UI resources is active. If it's not, the bundle is started. This method is used to find the root directory of the Swagger UI resources in the classpath.",4,4,4,4,"fix: Activate bundle before accessing its context
This commit prevents a `NullPointerException` by ensuring the bundle is activated before accessing its context, resolving the issue described in pull request 'NPE when annotations bundle found but not active'.","fix: Activate bundle before accessing its context
Prevents NPE when annotations bundle is found but not active. Related to pull request 'NPE when annotations bundle found but not active'.",4.92,19.78,14.55,0.0,"fix: Ensure bundle is active before getting its context
Fixes a NullPointerException that occurs when the annotations bundle is found but not active. This change starts the bundle if it's not already active, preventing the NPE. It also improves the reliability of the Swagger UI root location resolution in an OSGi environment.",17.29,35.85,37.41,0.0
1a8fb5902ea2c8421494a809b551e1f4f4f2b66b,apache/cxf,,"File: rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/OsgiSwaggerUiResolver.java
Status: modified
```diff
@@ -48,8 +48,8 @@ public String findSwaggerUiRootInternal(String swaggerUiMavenGroupAndArtifact,
                 return null;
             }
             if (bundle.getState() != Bundle.ACTIVE) {
-				bundle.start();
-			}
+                bundle.start();
+            }
             String[] locations = swaggerUiMavenGroupAndArtifact == null ? DEFAULT_LOCATIONS
                 : new String[]{""mvn:"" + swaggerUiMavenGroupAndArtifact + ""/"",
                                ""wrap:mvn:"" + swaggerUiMavenGroupAndArtifact + ""/""};
```",Update OsgiSwaggerUiResolver.java Fixed indent,3,3,4,4,fix npe in OsgiSwaggerUiResolver,2,2,4,4,Style: Adjust indentation in OsgiSwaggerUiResolver.java The indentation in the method findSwaggerUiRootInternal of the OsgiSwaggerUiResolver.java file has been adjusted for better readability. No changes have been made to the functionality of the code.,4,4,4,4,"fix: Prevent NPE when getting bundle context
Check bundle state before calling `bundle.start()` to prevent NPE when getting bundle context. This avoids the issue where `bundle.getBundleContext()` throws an NPE if the bundle is found but not active.","fix: Start inactive bundles before accessing their context
Fixed issue where bundle.getBundleContext() would throw an NPE in Equinox if the bundle is found but not active. Also added debug logging to point to possible problems.",4.05,8.33,8.72,0.0,"fix: Prevent NPE when annotations bundle is found but not active
Fixes an issue where bundle.getBundleContext() would throw a NullPointerException in Equinox if the bundle is found but not active. This change ensures that the bundle is started before accessing its context, and also logs an exception in debug mode to point to a possible problem.",2.96,8.89,13.77,0.0
ab452c0eee1fd560bdc91324c4dfe838f1088877,apache/cxf,,"File: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java
Status: modified
```diff
@@ -1183,7 +1183,7 @@ public static ProviderInfo<? extends Object> createProviderFromConstructor(Const
             instance = c.newInstance(cArgs);
         } catch (Throwable ex) {
             throw new RuntimeException(""Resource or provider class "" + c.getDeclaringClass().getName()
-                                       + "" can not be instantiated"");
+                                       + "" can not be instantiated"", ex);
         }
         Map<Class<?>, ThreadLocalProxy<?>> proxies =
             new LinkedHashMap<Class<?>, ThreadLocalProxy<?>>();
```","ProviderFactory.createProviderFromConstructor should include exception cause If newInstance fails because the called constructor of a custom Application implementation throws an exception, the root cause is not included which would reduce the search time for the actual cause.",4,4,4,4,remove unused code,0,0,4,4,"Fix: Improve error handling in ProviderFactory.java In the method createProviderFromConstructor, the RuntimeException now includes the original exception if the provider cannot be instantiated. This change provides more information about the error, improving error handling and debugging.",4,4,4,4,"fix: Include exception cause in createProviderFromConstructor
When newInstance fails in createProviderFromConstructor, the original exception cause was not included in the error message, making it difficult to diagnose the issue. This change ensures that the exception cause is included, providing more informative error messages and reducing debugging time.","fix: Include exception cause when newInstance fails
When a constructor throws an exception during newInstance, include the root cause to provide more informative error messages and reduce search time for the actual cause.",9.86,33.73,45.23,0.0,"fix: Include exception cause in createProviderFromConstructor
When newInstance fails due to an exception thrown by a custom Application implementation's constructor, the root cause was not included, making it harder to identify the actual cause. This change fixes this issue by including the exception cause in the RuntimeException.",7.24,16.87,20.05,0.0
ec6d94d6cacc755044935615c371eba4f20fdea7,apache/cxf,,"File: rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java
Status: modified
```diff
@@ -252,7 +252,7 @@ private void validateSubjectConfirmation(
         // Check address
         if (subjectConfData.getAddress() != null && clientAddress != null
             && !subjectConfData.getAddress().equals(clientAddress)) {
-            LOG.fine(""Subject Conf Data address "" + subjectConfData.getAddress() + "" does match""
+            LOG.fine(""Subject Conf Data address "" + subjectConfData.getAddress() + "" does not match""
                      + "" client address "" + clientAddress);
             throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, ""invalidSAMLsecurity"");
         }
```",Fixing SAML SSO log error,4,2,4,4,remove unused code,0,0,4,4,"Fix: Correct log message in SAMLSSOResponseValidator The log message in the method validateSubjectConfirmation of the class SAMLSSOResponseValidator has been corrected. The word ""not"" has been added to the message to accurately reflect the condition being checked.",4,4,4,4,"fix: Correct address mismatch logging
Fixed incorrect logging statement in validateSubjectConfirmation method, which previously reported a match when the addresses didn't match, potentially leading to security vulnerabilities.","fix: Fix incorrect logging in SAMLSSOResponseValidator
The logging message was incorrectly stating that the subject conf data address matches the client address when it doesn't. This fix updates the logging to reflect the correct behavior.",5.18,19.35,17.22,0.0,"fix: Correct address match check in SAMLSSOResponseValidator
Fixed a bug in the validateSubjectConfirmation method where the log message incorrectly stated that the addresses matched when they didn't. This change ensures the correct behavior and logging of address match checks.",9.01,24.32,27.27,0.0
455938206f6fe0f5e9717c4a6363d4d11fd414b5,apache/cxf,,"File: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/XSLTJaxbProvider.java
Status: modified
```diff
@@ -337,6 +337,10 @@ protected void addAttachmentMarshaller(Marshaller ms) {
         // complete
     }
 
+    protected Result getStreamResult(OutputStream os, Annotation[] anns, MediaType mt) throws Exception {
+        return new StreamResult(os);
+    }
+    
     @Override
     protected void marshalToOutputStream(Marshaller ms, Object obj, OutputStream os,
                                          Annotation[] anns, MediaType mt)
@@ -356,7 +360,7 @@ protected void marshalToOutputStream(Marshaller ms, Object obj, OutputStream os,
             th = factory.newTransformerHandler(ti.getTemplates());
             this.trySettingProperties(th, ti);
         }
-        Result result = new StreamResult(os);
+        Result result = getStreamResult(os, anns, mt);
         if (systemId != null) {
             result.setSystemId(systemId);
         }
```","introduce getStreamResult to allow override, e.g. for pdf generation using apache fop",4,4,4,4,fix npe in XSLTJaxbProvider,0,2,4,4,Refactor: Extract StreamResult creation to a new method A new method `getStreamResult` has been added to the `XSLTJaxbProvider` class. This method creates a new `StreamResult` instance with the provided `OutputStream`. The `marshalToOutputStream` method has been refactored to use this new method instead of creating a new `StreamResult` instance directly. This change improves the structure of the code without changing its behavior.,4,4,4,4,"refactor: Introduce getStreamResult method
Extracted stream result creation into a separate `getStreamResult` method to improve flexibility and maintainability of `marshalToOutputStream`.","refactor: Extract getStreamResult method from marshalToOutputStream
This change enables customization of output handling, such as PDF generation using Apache FOP, by allowing subclasses to override the getStreamResult method.",0.96,17.5,8.26,0.0,"refactor: Introduce getStreamResult method for overriding
This commit refactors the XSLTJaxbProvider class to introduce a new protected method getStreamResult, which allows for overriding the stream result creation, e.g., for PDF generation using Apache FOP. This change enables more flexibility in the serialization process.",6.64,21.15,23.62,0.0
e95413cbafbfa23fd2c82f6009166cd398e9caa6,apache/cxf,,"File: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java
Status: modified
```diff
@@ -367,7 +367,7 @@ public static void injectThroughMethod(Object requestObject,
         } catch (IllegalAccessException ex) {
             reportServerError(""METHOD_ACCESS_FAILURE"", method.getName());
         } catch (InvocationTargetException ex) {
-            LOG.severe(ex.getCause().getMessage(), ex.getCause());
+            LOG.log(Level.SEVERE, ex.getCause().getMessage(), ex);
             Response r = JAXRSUtils.convertFaultToResponse(ex.getCause(), inMessage);
             if (r != null) {
                 inMessage.getExchange().put(Response.class, r);
```",Fixing previous commit,0,0,4,4,fix npe in InjectionUtils,3,4,4,4,"Fix: Update exception logging in injectThroughMethod This commit updates the way exceptions are logged in the `injectThroughMethod` of the `InjectionUtils.java` file. Previously, the cause of the exception was logged using the `severe` method of the Logger. This has been changed to use the `log` method with the `Level.SEVERE` level, logging the entire exception instead of just its cause. This change provides more detailed information when an exception occurs during the injection of a parameter value into a request object through a specified method.",4,4,4,4,"fix: Log InvocationTargetException with its cause
Updated logging to include the cause of InvocationTargetException, ensuring that error reporting is more informative and helpful for debugging purposes, as described in CXF-7808.","fix: Log InvocationTargetException in injectThroughMethod
Instead of swallowing the error, ensure it's reported for end users. Related to CXF-7808.",1.32,12.28,8.61,0.0,"fix: Improve error logging in injectThroughMethod
Fixes an issue where errors in injectThroughMethod were not properly logged. Now, InvocationTargetException errors are logged with their cause, providing more informative error messages. This change ensures that errors are not swallowed and are reported to the end user.",3.32,17.05,17.33,0.0
b5129ac6ebe3d24d6aac20b6f3ec273f39161c8a,apache/cxf,,"File: core/src/main/java/org/apache/cxf/staxutils/StaxSource.java
Status: modified
```diff
@@ -66,8 +66,7 @@ protected void parse() throws SAXException {
                 // Attributes are handled in START_ELEMENT
                 case XMLStreamConstants.ATTRIBUTE:
                     break;
-                case XMLStreamConstants.CDATA:
-                {
+                case XMLStreamConstants.CDATA: {
                     if (lexicalHandler != null) {
                         lexicalHandler.startCDATA();
                     }
@@ -80,16 +79,14 @@ protected void parse() throws SAXException {
                     }
                     break;
                 }
-                case XMLStreamConstants.CHARACTERS:
-                {
+                case XMLStreamConstants.CHARACTERS: {
                     int length = streamReader.getTextLength();
                     int start = streamReader.getTextStart();
                     char[] chars = streamReader.getTextCharacters();
                     contentHandler.characters(chars, start, length);
                     break;
                 }
-                case XMLStreamConstants.SPACE:
-                {
+                case XMLStreamConstants.SPACE: {
                     int length = streamReader.getTextLength();
                     int start = streamReader.getTextStart();
                     char[] chars = streamReader.getTextCharacters();
```",Fix checkstyle with latest eclipse plugin,4,4,4,4,set __ to true,0,0,0,4,"Style: Adjusted code formatting in StaxSource.java The changes in this commit are related to the formatting of the code in the StaxSource.java file. Specifically, the placement of the opening braces for several case statements has been adjusted to follow the project's coding style. These changes do not affect the functionality of the class.",4,4,4,4,"refactor: Consolidate XMLStreamConstants cases in parse method
Simplified the parse method by consolidating XMLStreamConstants cases, removing unnecessary blocks and improving the overall structure of the method.","refactor: Remove redundant blocks in StaxSource's parse method
Improved code readability and maintainability by simplifying the method's implementation.",2.05,12.5,9.05,0.0,"refactor: Simplify parse method in StaxSource
Refactored the parse method in StaxSource to remove unnecessary code blocks and improve readability. The method's functionality remains unchanged, still parsing an XML stream and notifying registered handlers of parsed events.",3.31,17.58,10.15,0.0
ae994168f50894010f1f148ec3b6f35b17e4b63b,apache/cxf,,"File: core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java
Status: modified
```diff
@@ -62,7 +62,6 @@ public final class SSLUtils {
 
     private static final String DEFAULT_KEYSTORE_TYPE = ""PKCS12"";
     private static final String DEFAULT_TRUST_STORE_TYPE = ""JKS"";
-    private static final String DEFAULT_SECURE_SOCKET_PROTOCOL = ""TLSv1"";
 
     private static final String HTTPS_CIPHER_SUITES = ""https.cipherSuites"";
 
@@ -157,7 +156,7 @@ public static TrustManager[] getDefaultTrustStoreManagers(Logger log) {
                     is = getResourceAsStream(location);
                 }
             }
-            
+
             if (is != null) {
                 TrustManagerFactory tmf =
                     TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
@@ -569,18 +568,4 @@ public static String getTruststoreProvider(String trustStoreProvider, Logger log
         return trustStoreProvider;
     }
 
-    public static String getSecureSocketProtocol(String secureSocketProtocol,
-                                                 Logger log) {
-        if (secureSocketProtocol != null) {
-            LogUtils.log(log,
-                         Level.FINE,
-                         ""SECURE_SOCKET_PROTOCOL_SET"",
-                         secureSocketProtocol);
-        } else {
-            LogUtils.log(log, Level.FINE, ""SECURE_SOCKET_PROTOCOL_NOT_SET"");
-            secureSocketProtocol = DEFAULT_SECURE_SOCKET_PROTOCOL;
-        }
-        return secureSocketProtocol;
-    }
-
 }
```",Removing unused getSecureSocketsProtocol method,4,4,4,4,add constructor for SSLUtils,0,0,4,4,"Refactor: Remove secure socket protocol from SSLUtils The `getSecureSocketProtocol` method and the `DEFAULT_SECURE_SOCKET_PROTOCOL` constant were removed from the `SSLUtils` class. The functionality of the class remains the same, but it no longer provides a method to get the secure socket protocol. This change simplifies the `SSLUtils` class and reduces its responsibilities.",4,4,4,4,"refactor: Simplify SSLUtils by removing unused protocol
Removed the DEFAULT_SECURE_SOCKET_PROTOCOL constant and associated getSecureSocketProtocol method, which were not being used anywhere in the codebase, to simplify SSLUtils and eliminate dead code.","refactor: Remove unused secure socket protocol constant and method
Simplified the SSLUtils class by removing the unused DEFAULT_SECURE_SOCKET_PROTOCOL constant and its associated getSecureSocketProtocol method.",15.33,29.89,19.18,0.0,"refactor: Remove unused secure socket protocol
This commit removes the unused DEFAULT_SECURE_SOCKET_PROTOCOL constant and the associated getSecureSocketProtocol method. The SSLUtils class has been refactored to focus on key and trust store management, removing unnecessary functionality.",18.37,35.16,30.23,0.0
86d7c657499b73bdbbd6ba9f1579e76ca0715357,apache/cxf,,"File: core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java
Status: modified
```diff
@@ -31,6 +31,7 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -65,8 +66,6 @@ public final class SSLUtils {
 
     private static final String HTTPS_CIPHER_SUITES = ""https.cipherSuites"";
 
-    private static final List<String> DEFAULT_CIPHERSUITE_FILTERS_INCLUDE =
-        Arrays.asList(new String[] {"".*""});
     /**
      * By default, exclude NULL, anon, EXPORT, DES, 3DES, MD5, CBC and RC4 ciphersuites
      */
@@ -409,7 +408,7 @@ public static String[] getFilteredCiphersuites(FiltersType filters,
         List<Pattern> includes =
             filters != null
                 ? compileRegexPatterns(filters.getInclude(), true, log)
-                : compileRegexPatterns(DEFAULT_CIPHERSUITE_FILTERS_INCLUDE, true, log);
+                : Collections.emptyList();
         List<Pattern> excludes =
             filters != null
                 ? compileRegexPatterns(filters.getExclude(), false, log)
```",Remove default ciphersuite filter inclusion (which isn't used anyway),4,4,4,4,make method protected,0,0,4,4,"Refactor: Update getFilteredCiphersuites method in SSLUtils.java In this commit, the getFilteredCiphersuites method in SSLUtils.java has been refactored. The method now filters the supported cipher suites based on the provided include/exclude filters. The constant list DEFAULT_CIPHERSUITE_FILTERS_INCLUDE has been removed and replaced with a call to Collections.emptyList(). This change simplifies the code and makes it easier to understand.",4,4,4,4,"refactor: Replace default cipher suite filters with empty list
Replaced default cipher suite filters with an empty list, allowing for more dynamic filtering configurations. This change simplifies the SSLUtils class's internal structure and removes hardcoded defaults, making it more maintainable and flexible.","refactor: Remove default cipher suite filters in SSLUtils
Simplify SSLUtils implementation by removing default cipher suite filters and returning an empty list when no filters are provided, making it easier to understand and modify.",6.87,23.3,28.42,0.0,"refactor: Simplify cipher suite filtering in SSLUtils
Removed the default cipher suite filters and replaced it with an empty list when no filters are provided. This change simplifies the filtering logic and makes it more efficient.",7.63,30.93,33.22,0.0
cfab2ec2eced0dc0b026bc4bfbeeb18fff28e1b6,apache/cxf,,"File: rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/SimpleParameterizedType.java
Status: modified
```diff
@@ -66,7 +66,7 @@ public boolean equals(Object obj) {
         if (this == obj) {
             return true;
         }
-        if (obj == null) {
+        if (!(obj instanceof ParameterizedType)) {
             return false;
         }
 
```",Add instanceof to the equals method,0,3,4,4,fix a bug in SimpleParameterizedType,1,2,4,4,Fix: Update equals method in SimpleParameterizedType class The equals method in the SimpleParameterizedType class has been updated. The condition checking if the object is null has been replaced with a condition checking if the object is an instance of ParameterizedType. This change ensures a more accurate comparison between this parameterized type and another object.,4,4,4,4,"fix: Check if obj is instance of ParameterizedType in equals()
Fixes a bug in the equals method by adding a type check to prevent null pointer exceptions and ensure correct equality comparisons.","fix: Verify object type in equals method
Prevents incorrect equality comparison by checking if the object is an instance of ParameterizedType.",6.17,21.18,27.37,0.0,"fix: Improve equals method in SimpleParameterizedType
Fix the equals method to correctly handle null objects and instances of ParameterizedType. This change ensures that the method behaves correctly in all scenarios, improving the overall reliability of the SimpleParameterizedType class.",15.88,28.57,28.91,0.0
82b24f6db4537623370ebfc7a229562253a16197,apache/cxf,,"File: rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/AbstractHTTPServlet.java
Status: modified
```diff
@@ -480,7 +480,7 @@ private static class HttpServletRequestXForwardedFilter extends HttpServletReque
                                            String originalPort) {
             super(request);
             this.newProtocol = originalProto;
-            if (newRemoteAddr != null) {
+            if (originalRemoteAddr != null) {
                 newRemoteAddr = (originalRemoteAddr.split("","")[0]).trim();
             }
             newRequestUri = calculateNewRequestUri(request, originalPrefix);
```",Fix newRemoteAddr is never assigned * Using the wrong variable for not null validation before HttpServletRequestXForwardedFilter.newRemoteAddr assignment.,4,4,4,4,improve error messages for AbstractHTTPServlet,0,0,4,4,Fix: Correct condition check in AbstractHTTPServlet The condition in the AbstractHTTPServlet.java file has been modified to check if 'originalRemoteAddr' is not null instead of 'newRemoteAddr'. This change ensures that the correct variable is checked before proceeding with the method execution.,4,4,4,4,"fix: Validate against originalRemoteAddr instead of newRemoteAddr
Fixes incorrect null validation in `AbstractHTTPServlet` by using `originalRemoteAddr` instead of `newRemoteAddr`, ensuring the `_X-Forwarded-For_` header is properly considered. This change resolves the issue where `newRemoteAddr` was never assigned.","fix: Assign newRemoteAddr correctly in AbstractHTTPServlet
Using originalRemoteAddr instead of newRemoteAddr for not null validation, ensuring the X-Forwarded-For header is considered.",9.42,26.32,28.21,0.0,"fix: Fix newRemoteAddr assignment
Fixes the issue where newRemoteAddr was never assigned due to incorrect null validation. The variable originalRemoteAddr is now correctly used for null validation before assignment.",4.8,23.19,14.71,0.0
