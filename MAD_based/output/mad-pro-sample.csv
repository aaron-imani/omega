project,commit,OMG,AMG,MAD,MAD_duration,Rounds,Total Tokens
apache/directory-server,9cbf06fcae73d281aa4804e574335d12fd0764ec,"Refactor: Use addNormalized in getFarthestReferralAncestor method In the `getFarthestReferralAncestor` method of the `ReferralLut` class, replaced the `add` method with the `addNormalized` method. This is an internal change that does not alter the functionality of the method.","Refactor: improve referral ancestor lookup
refactor the getfarthestreferralancestor method to use addnormalized instead of add, ensuring correct referral handling in ldap referral scenarios.","refactor: Use addNormalized instead of add in ReferralLut
Changed the method getFarthestReferralAncestor in ReferralLut to use addNormalized instead of add to ensure proper normalization of referral ancestors.",81.32754349708557,1.0,7873.0
apache/ant,89aa7775a83989345756349f99bd3556780eafee,Feat: Improve documentation in Os.java Added detailed comments to the setFamily and eval methods in the Os.java file. The comments provide information about the functionality of the methods and the expected input for the setFamily method.,"Feat: add os family type setter and evaluator
this commit introduces a new setter method to specify the desired os family type and an evaluator method to determine if the current os matches the specified type. the setter method converts the input to lowercase, and the evaluator method uses system properties to determine the os name and path separator.","feat: Add OS family type setting and matching in Os class
Introduce a new method setFamily to set the desired OS family type and a method eval to determine if the current OS matches the specified family type.",79.29237103462219,1.0,7070.0
apache/wicket,526bb16ab2f8b770a052fc93069b8b38a1d6c1f5,Style: Update comment in nextTag() method The comment in the `nextTag()` method of `WicketTagIdentifier.java` has been updated for clarity. The method retrieves the next XML tag from the markup and converts it into a WicketTag if it belongs to the Wicket namespace. The updated comment better reflects this functionality.,"Refactor: simplify wickettagidentifier
refactor the wickettagidentifier class to use 'wicket component' instead of 'org.apache.wicket component', making the code more concise and easier to understand. this change does not affect the functionality of the class.","refactor: Remove redundant namespace from Wicket component
Removed 'org.apache.wicket' namespace when setting the tag ID in WicketTagIdentifier.",135.96711444854736,2.0,10147.0
apache/usergrid,8814a144b66054048be96a1c892fd750ee327327,"Refactor: Improve handling of AsyncEvents in AsyncEventServiceImpl This commit refactors the AsyncEventServiceImpl class to improve the handling of different types of AsyncEvents in the queue system. The changes are mainly in the condition of an if statement in the callEventHandlers method, which processes a list of messages from a queue. Each message is expected to contain an AsyncEvent. The changes ensure that the method handles different types of AsyncEvents more effectively. There are no associated issues or pull requests.","Refactor: improve event handling logic in asynceventserviceimpl
refactored the calleventhandlers method to add additional checks for specific event types before logging a warning when no index operation messages are returned. this change improves the robustness and accuracy of event handling in the asynceventserviceimpl class.","fix: Handle empty index operation messages for non-ElasticsearchIndexEvent and non-InitializeApplicationIndexEvent
Fixed a bug where no index operation messages were logged as warnings for non-ElasticsearchIndexEvent and non-InitializeApplicationIndexEvent. Now, the logger warns about empty index operation messages only for these specific event types.",82.71570754051208,1.0,8273.0
apache/archiva,6987e689ecc1c522d53cb661fa7842284807f471,"Refactor: Remove logging statement from processSnapshots method The logging statement ""Processing snapshots."" has been removed from the processSnapshots method in the DefaultRepositoryBrowsing class. This change is part of a refactoring effort to improve the code quality.","Refactor: remove unnecessary log statement
removed an unnecessary log statement in defaultrepositorybrowsing class, which was logging 'processing snapshots.' without any functional impact. this change simplifies the code and makes it easier to maintain.","fix: Remove unnecessary log statement in DefaultRepositoryBrowsing
The log.info statement 'Processing snapshots.' was unnecessary and has been removed to reduce noise in the logs, making the code easier to read and understand.",153.83390140533447,2.0,9575.0
apache/directory-server,b5546be3333d7a261e6db37ab6e36f34193cffbb,Refactor: Update package name of AddIT.java and import in MigratedStockCoreISuite.java The package name of the AddIT.java file has been refactored from 'org.apache.directory.server.core.jndi' to 'org.apache.directory.server.core.operations.add'. The import statement in the MigratedStockCoreISuite.java file has been updated to reflect this change. This refactoring improves the structure of the code without changing its behavior.,"Refactor: rename addit.java to new package
rename addit.java from org/apache/directory/server/core/jndi to org/apache/directory/server/core/operations/add and update its import statement in migratedstockcoreisuite.java to reflect the new package location.","refactor: Relocate AddIT.java to org.apache.directory.server.core.operations.add
Update package and import statements in MigratedStockCoreISuite.java to reflect the relocation of AddIT.java from org.apache.directory.server.core.jndi to org.apache.directory.server.core.operations.add.",137.4297149181366,2.0,9651.0
apache/lenya,f3c5e70e7f9cdc18ac0dcef205bc5fcacdee2bf7,"Refactor: Simplify the existence check in getLocator method The `getLocator` method in the `DocumentLocator` class has been refactored. The old code first checked if a key exists in the `locators` map and then retrieved the value associated with the key. The new code directly retrieves the value associated with the key and then checks if the retrieved value is null. This change simplifies the code and improves its readability. The functionality of the method remains the same: it returns a `DocumentLocator` for the given parameters. If a `DocumentLocator` for these parameters does not exist, a new one is created, stored, and then returned.","Refactor: simplify getlocator method
the getlocator method has been refactored to reduce unnecessary null checks and improve code readability. the method's functionality remains the same, but the implementation is now more concise and efficient.","refactor: Simplify getLocator method by caching DocumentLocator instances
Removed unnecessary null checks and directly retrieved the DocumentLocator instance from the cache, improving code readability and efficiency.",148.69365310668945,2.0,10811.0
apache/poi,3234ce48d57222043d1fb8aec33d81315a5f30d9,Feat: Add new test method in TestFormulaParser A new test method `testFormulaWithString` has been added to the `TestFormulaParser` class. This method tests the formula parsing functionality with a string input.,"Feat: add test for parsing formula with string concatenation
this commit introduces a new unit test, testformulawithstring, to cover the parsing of formulas that concatenate two strings using the ampersand (&) operator. this test ensures the formulaparser class correctly handles string concatenation operations.","feat: Introduce test for formula parsing with string concatenation
Expand test coverage of FormulaParser class by introducing testFormulaWithString, which verifies the correct parsing of formulas that concatenate two strings using the ampersand (&) operator. This test ensures the class handles such scenarios correctly, providing additional confidence in its functionality.",138.40535378456116,2.0,9837.0
apache/cxf,260efe56fc1bfc89950d1eda89114feb287490cd,Refactor: Enhance getApplicationCertificates method in Client class The getApplicationCertificates method in the Client class has been refactored to return a list of application certificates that are eagerly fetched and ordered as per their insertion in the database. The @Lob annotation has been added to indicate that the application certificates are stored as a large object in the database.,"Refactor: update getapplicationcertificates to store certificates as lobs
this commit refactors the getapplicationcertificates method to store application certificates as large objects (lobs) in the database, with eager fetching and ordering. this change improves the storage and retrieval of certificates associated with an application, likely for authentication or authorization purposes.","refactor: Store app certs as LOBs
Added @Lob annotation to getApplicationCertificates method to store application certificates as large objects in the database. This change improves the storage and retrieval of certificates associated with an application.",178.80717062950134,2.0,11254.0
apache/wicket,9fb30084cbc737ec035ed0e76a425612db462b47,Style: Update comments in BookmarkableMapper.java Updated the comments in the `BookmarkableMapper.java` file to use a shorter form of the class name. This change improves the readability of the code and makes it easier to understand.,"Refactor: simplify javadoc references
removed redundant package names from javadoc references in bookmarkablemapper, making the code more concise and easier to read.","style: Remove redundant package prefixes from Javadoc references
Updated Javadoc references in BookmarkableMapper to use shorter class names, removing unnecessary package prefixes.",69.02652263641357,1.0,7079.0
apache/cassandra,2a9fc0e887612725a51b3822a266c1b3d3fadcaf,"Refactor: Prevent multiple closings of files in BigTableScanner This commit introduces a new variable `isClosed` in the `BigTableScanner` class to track whether the data and index files have been closed. The `close()` method is modified to check this variable before closing the files. This change prevents the files from being closed multiple times, which could potentially lead to a NullPointerException as reported in issue CASSANDRA-9531.","Fix: fix nullpointerexception in bigtablescanner close method
this commit fixes a nullpointerexception that occurs when running messagepayloadtest due to the close method of bigtablescanner being called twice, causing the segment to be deallocated. the fix ensures that the close operation is idempotent by marking the object as closed and only performing the close operation once.","fix: Prevent double close in BigTableScanner
Fixes CASSANDRA-9531. The NullPointerException in MessagePayloadTest was caused by the close method being called twice, deallocating the segment. This commit introduces an AtomicBoolean, isClosed, to track the state of the object, ensuring the close operation is idempotent and preventing double close.",149.64281702041626,2.0,12302.0
helterskelterr/ofbizApp,c5c2b2c9b3f2e5b8cb6e2960b2a6daf9eb9a335c,"Fix: Correct index used in 'chooseClientAlias' method In the 'chooseClientAlias' method of the 'AliasKeyManager.java' file, the wrong index was being used in the if condition inside a for loop. This commit fixes this bug by replacing 'aliases[i]' with 'aliases[x]'.","Fix: fix alias matching in chooseclientalias method
the method chooseclientalias was incorrectly using the index 'i' instead of 'x' when comparing aliases, leading to incorrect alias matching. this commit fixes the issue by using the correct index 'x' in the comparison.","fix: Fix alias comparison in chooseClientAlias method
Fixed incorrect alias comparison in chooseClientAlias method by changing the loop variable from 'i' to 'x'. This ensures that the correct alias is returned.",73.45890307426453,1.0,7689.0
apache/logging-log4j2,d2aea7458f08e8b9d48f3768b719aafaf4246007,"Refactor: Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils in TestClassLoader This commit refactors the TestClassLoader class by replacing the sun.misc.IOUtils with org.apache.commons.io.IOUtils. The change is made in the findClass method, which finds and loads the class with the specified name. The way the class file is loaded into a byte array has been modified. The commit does not change the functionality of the method or the class.","Refactor: replace sun.misc.ioutils with org.apache.commons.io.ioutils
this commit replaces the usage of sun.misc.ioutils with org.apache.commons.io.ioutils in the testclassloader class. this change is a refactoring of the internal structure of the code to make it more maintainable and easier to understand.","fix: Fix dependency on sun.misc.IOUtils
Replace sun.misc.IOUtils with org.apache.commons.io.IOUtils to fix the dependency on a non-standard Java class. This change ensures the TestClassLoader class is more portable and maintainable.",87.047523021698,1.0,8503.0
apache/cxf,455938206f6fe0f5e9717c4a6363d4d11fd414b5,Refactor: Extract StreamResult creation to a new method A new method `getStreamResult` has been added to the `XSLTJaxbProvider` class. This method creates a new `StreamResult` instance with the provided `OutputStream`. The `marshalToOutputStream` method has been refactored to use this new method instead of creating a new `StreamResult` instance directly. This change improves the structure of the code without changing its behavior.,"Refactor: introduce getstreamresult method for overriding
this commit refactors the xsltjaxbprovider class to introduce a new protected method getstreamresult, which allows for overriding the stream result creation, e.g., for pdf generation using apache fop. this change enables more flexibility in the serialization process.","feat: Add getStreamResult method to support custom output streams
Extracted getStreamResult method to enable custom output streams, improving flexibility and maintainability of the XSLTJaxbProvider class.",152.17963695526123,2.0,11299.0
apache/logging-log4j2,7831dde2eb0d0aa371639f8984b7a8b9f1b3aa53,"Fix: Correct assertion in SslConfigurationTest In the method emptyConfigurationHasDefaultTrustStore() of the SslConfigurationTest.java file, the assertion has been corrected. Previously, the assertion was always passing (Assert.assertTrue(true)), which did not correctly test the functionality. The assertion has been replaced with Assert.assertNotNull(clientSocket) to ensure that the clientSocket is not null when the default trust store is used with an empty SSL configuration.","Fix: improve assertion in sslconfigurationtest
the assertion in the emptyconfigurationhasdefaulttruststore method was strengthened to verify that an ssl configuration with no custom trust store settings defaults to the jvm's truststore. this change ensures that the test is more robust and accurate.","fix: Update assertion in SslConfigurationTest
Changed the assertion in the emptyConfigurationHasDefaultTrustStore method to assertNotNull instead of assertTrue. This ensures that the SSL configuration with no custom trust store settings uses the default trust store.",150.81911945343018,2.0,10343.0
